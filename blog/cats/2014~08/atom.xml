<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~08 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~08/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-12T15:09:44+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[kdump el5 --dump-dmesg 错误]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg/"/>
    <updated>2014-08-28T16:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg</id>
    <content type="html"><![CDATA[<h4>原因：</h4>

<p><a href="http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm">http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm</a><br/>
这个包的一个patch(kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch)是为了得到dmesg的，<br/>
但是它判断dmesg的结束是用logged_chars(看kernel/printk.c)，logged_chars应该是输出的结束，所以不对。<br/>
改成log_end就行，<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff &ndash;git a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>index 3938280..76c402a 100644
</span><span class='line'>&mdash; a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>+++ b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>@@ -68,7 +68,7 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +dump_dmesg()
</span><span class='line'> +{
</span><span class='line'> +      int log_buf_len, length_log, length_oldlog, ret = FALSE;
</span><span class='line'>-+      unsigned long log_addr, logged_chars, index;
</span><span class='line'>++      unsigned long log_addr, logged_chars, log_end, index;
</span><span class='line'> +      char *log_buffer = NULL;
</span><span class='line'> +
</span><span class='line'> +      if (!open_files_for_creating_dumpfile())
</span><span class='line'>@@ -101,10 +101,15 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               printf(&ldquo;Failed to get logged_chars.\n&rdquo;);
</span><span class='line'> +               return FALSE;
</span><span class='line'> +      }
</span><span class='line'>++      if (!readmem(VADDR, SYMBOL(log_end), &amp;log_end, sizeof(log_end))) {
</span><span class='line'>++               printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>++               return FALSE;
</span><span class='line'>++      }
</span><span class='line'> +      DEBUG_MSG(&ldquo;\n&rdquo;);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_addr     : %lx\n&rdquo;, log_addr);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_buf_len  : %d\n&rdquo;, log_buf_len);
</span><span class='line'> +      DEBUG_MSG(&ldquo;logged_chars : %ld\n&rdquo;, logged_chars);
</span><span class='line'>++      DEBUG_MSG(&ldquo;log_end      : %ld\n&rdquo;, log_end);
</span><span class='line'> +
</span><span class='line'> +      if ((log_buffer = malloc(log_buf_len)) == NULL) {
</span><span class='line'> +               ERRMSG(&ldquo;Can&rsquo;t allocate memory for log_buf. %s\n&rdquo;,
</span><span class='line'>@@ -112,21 +117,16 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               return FALSE;
</span><span class='line'> +       }
</span><span class='line'> +
</span><span class='line'>-+      if (logged_chars &lt; log_buf_len) {
</span><span class='line'>++      if (log_end &lt; log_buf_len) {
</span><span class='line'> +               index = 0;
</span><span class='line'>-+               length_log = logged_chars;
</span><span class='line'>++               length_log = log_end;
</span><span class='line'> +
</span><span class='line'> +               if(!readmem(VADDR, log_addr, log_buffer, length_log)) {
</span><span class='line'> +                        printf(&ldquo;Failed to read dmesg log.\n&rdquo;);
</span><span class='line'> +                        goto out;
</span><span class='line'> +               }
</span><span class='line'> +      } else {
</span><span class='line'>-+               if (!readmem(VADDR, SYMBOL(log_end), &amp;index, sizeof(index))) {
</span><span class='line'>-+                        printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>-+                        goto out;
</span><span class='line'>-+               }
</span><span class='line'>-+               DEBUG_MSG(&ldquo;log_end      : %lx\n&rdquo;, index);
</span><span class='line'>-+               index &amp;= log_buf_len - 1;
</span><span class='line'>++               index = log_end &amp; (log_buf_len - 1);
</span><span class='line'> +               length_log = log_buf_len;
</span><span class='line'> +               length_oldlog = log_buf_len - index;
</span><span class='line'> +&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;----------------
</span><span class='line'>----------------
</span><span class='line'>#### 如果不修改上面bug，kdump得到vmcore后用 makedumpfile --dump-dmesg 无法解得dmesg，补救办法如下：  
</span><span class='line'>kdump得到vmcore后  
</span><span class='line'> 1、vmlinux没有debuginfo，crash不能运行  
</span><span class='line'> 2、makedumpfile -F --dump-dmesg vmcore &gt; dmesg 只能显示开头一下部分dmesg （不懂为什么）  
</span><span class='line'>解决：
</span><span class='line'>
</span><span class='line'>##### 方法一、
</span><span class='line'>通过/boot/System.map 或者 /proc/kallsyms 找到 log_buf 地址，例如 0xffffffff81a9ac30
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gdb vmlinux vmcore&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set print repeats 100
</span><span class='line'>set print elements 0
</span><span class='line'>set logging file XXX
</span><span class='line'>set pagination off
</span><span class='line'>set logging on
</span><span class='line'>p {char*} 0xffffffff81a9ac30
</span><span class='line'>quit&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vi XXX
</span><span class='line'>:%s/\n/\r/g</span></code></pre></td></tr></table></div></figure></p>

<h5>方法二、</h5>

<p>是另一命令，但不好用
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/kallsyms | grep log_end
</span><span class='line'>ffffffff81e30de0 b log_end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1dw 0xffffffff81e30de0
</span><span class='line'>0xffffffff81e30de0:     85689&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1xg 0xffffffff81a9ac30
</span><span class='line'>0xffffffff81a9ac30:     0xffffffff81e30ee0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;显示最后4000字符
</span><span class='line'>x/5s 0xffffffff81e30ee0+85689-4000</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb 没有debug信息step单步调试]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step/"/>
    <updated>2014-08-28T16:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step</id>
    <content type="html"><![CDATA[<h4>一、如果有函数调用，他会进入该函数</h4>

<pre><code>    step &lt;count&gt;
</code></pre>

<p>单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有 debug信息。很像 VC等工具中的 step in。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。</p>

<h4>二、如果有函数调用，他不会进入该函数</h4>

<pre><code>    next &lt;count&gt;
</code></pre>

<p>同样单步跟踪，如果有函数调用，他不会进入该函数。很像 VC等工具中的 step over。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。</p>

<h4>三、无debuginfo时需要set step-mode [on/off]</h4>

<pre><code>    set step-mode [on/off]
    set step-mode on
    #打开 step-mode模式，于是，在进行单步跟踪时，程序不会因为没有 debug信息而不停住。这个参数有很利于查看机器码。

    set step-mode off
    关闭 step-mode模式。
</code></pre>

<h4>四、跟踪子进程</h4>

<p>使用gdb调试的时候，gdb只能跟踪一个进程。</p>

<p>可以在fork函数调用之前，通过指令设置gdb调试工具跟踪父进程或子进程。</p>

<p>默认情况下gdb是跟踪父进程的。</p>

<pre><code>    set follow-fork-mode child   # 命令设置gdb在fork之后跟踪子进程。
    set follow-fork-mode parent  # 设置跟踪父进程。
</code></pre>

<h4>五、修改值</h4>

<pre><code>    set $rax=0  # 寄存器

    set m=6     # 变量，需要debuginfo

    p $rsp+0x714    # 内存
    set *0x7f962c1fa564 = 0x6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb x命令语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x/"/>
    <updated>2014-08-28T16:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x</id>
    <content type="html"><![CDATA[<h4>可以使用examine命令(简写是x)来查看内存地址中的值。x命 令的语 法如下所示：</h4>

<pre><code>    x/&lt;n/f/u&gt; &lt;addr&gt;  
</code></pre>

<p>n、f、u是可选的参数。<br/>
n是一个正整数，表示需要显示的内存单元的个数， 也就是说从当前地址向后显示几个 内存单元的内容，一个内存单元的大小由后面的u定义。<br/>
f 表示显示的格式，参见下面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。<br/>
u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。<br/>
<addr>表示一个内存地址。</p>

<h5>注意：严格区分n 和u的关系，n表示单元个数，u表示每个单元的大小。</h5>

<p>n/f/u三个参数可以一起使用。例如：<br/>
命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示输出三个单位，u表示按十六进制显示。</p>

<h4>输出格式</h4>

<p>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量 的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：
<code>
x 按十六进制格式显示变量。
d 按十进制格式显示变量。
u 按十六进制格式显示无符号整型。
o 按八进制格式显示变量。
t 按二进制格式显示变量。
a 按十六进制格式显示变量。
c 按字符格式显示变量。
f 按浮点数格式显示变量。
</code>
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
t(binary), f(float), a(address), i(instruction), c(char) and s(string).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.</p>

<p>Defaults for format and size letters are those previously used.
Default count is 1. Default address is following last thing printed
with this command or &ldquo;print&rdquo;.
<code>
(gdb) p f1
$4 = 8.25
(gdb) p f2
$5 = 125.5
(gdb) x/x &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f2
0xbffff384:   0x42fb0000
(gdb) x/2xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000
(gdb) x/4xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000   0xbffff408   0x00bcba66
(gdb) x/tw &amp;f1
0xbffff380:   01000001000001000000000000000000
(gdb) x/2tw &amp;f1
0xbffff380:   01000001000001000000000000000000   01000010111110110000000000000000
(gdb) p record
$10 = {12, 76, 48, 62, 94, 17, 32, 37, 52, 69}
(gdb) p &amp;record
$11 = (int (*)[10]) 0x8049740
(gdb) x/4uw 0x8049740
0x8049740 &lt;record&gt;:   12   76   48   62
(gdb) x/6ow 0x8049740
0x8049740 &lt;record&gt;:   014   0114   060   076
0x8049750 &lt;record+16&gt;:   0136   021
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb print 语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print/"/>
    <updated>2014-08-28T16:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print</id>
    <content type="html"><![CDATA[<pre><code>print &lt;expr&gt;
print /&lt;f&gt; &lt;expr&gt;
</code></pre>

<p>&lt;expr>是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），<f>是输出的格式，比如，假如要把表达式按16进制的格式输出，那么就是/x。</p>

<h4>一、表达式</h4>

<p>print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。</p>

<p>表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）</p>

<p>在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。<br/>
<code>@</code>是一个和数组有关的操作符，在后面会有更具体的说明。<br/>
<code>::</code>指定一个在文件或是一个函数中的变量。<br/>
<code>{&lt;type&gt;} &lt;addr&gt;</code><span style="color:red">表示一个指向内存地址<addr>的类型为type的一个对象。 p {char*} 0xffffffff12345678</span></p>

<h4>二、程序变量</h4>

<p>在GDB中，你可以随时查看以下三种变量的值：<br/>
1、全局变量（所有文件可见的）<br/>
2、静态全局变量（当前文件可见的）<br/>
3、局部变量（当前Scope可见的）<br/>
假如你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，假如一个全局变量和一个函数中的局部变量同名时，假 如当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。假如此时你想查看全局变量的值时，你可以使用“::”操作符：
<code>
file::variable
function::variable
</code>
可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：
<code>
gdb) p 'f2.c'::x
</code>
当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。</p>

<p>另外，需要注重的是，假如你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调 试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所 有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看 编译器的使用说明文档。</p>

<h4>三、数组</h4>

<p>有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：
<code>
int *array = (int *) malloc (len * sizeof (int));
</code>
于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：
<code>
p *array@len
</code>
@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：
<code>
(gdb) p *array@len
$1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}
</code>
假如是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb 输出控制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-out-format/"/>
    <updated>2014-08-28T16:09:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-out-format</id>
    <content type="html"><![CDATA[<h4>1</h4>

<pre><code>set print repeats [on/off]
</code></pre>

<p>设置打印数组的长度上限值。如果数组中连续相同的成员的数量超过这个上限，GDB会打印字符串”<repeats n times>”，这里n是同样的重复次数，而不是重复打印这些相同的成员。将这个上限设置为0的话，打印所有的成员。默认上限时10。
<code>
show print repeats
</code>
显示打印重复相同成员的上限数量。</p>

<h4>2</h4>

<pre><code>set print elements &lt;number-of-elements&gt;
</code></pre>

<p>这个选项主要是设置数组的，假如你的数组太大了，那么就可以指定一个<number-of-elements>来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。假如设置为0，则表示不限制。
<code>
show print elements
</code>
查看print elements的选项信息。</p>

<h4>3</h4>

<p>运行GDB的时候 总是会出现type return to continue,or q <return> to quit，<br/>
因为显示得太多，此时gdb的显示会有些像more命令<br/>
把这个消息屏蔽掉可以设置
<code>
set pagination off
</code></p>

<h4>4</h4>

<p>将GDB中需要的调试信息输出到文件
```</p>

<h1>(gdb) set logging file &lt;文件名></h1>

<h1>(gdb) set logging on</h1>

<h1>(gdb) bt</h1>

<h1>(gdb) set logging off</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
