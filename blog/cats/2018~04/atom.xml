<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2018~04 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2018~04/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T12:57:39+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git tag常用操作]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/19/git-tag/"/>
    <updated>2018-04-19T01:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/19/git-tag</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/albertsh/article/details/63253614">https://blog.csdn.net/albertsh/article/details/63253614</a></p>

<h4>用途</h4>

<p>标签可以针对某一时间点的版本做标记，常用于版本发布，这恰恰是我所需要的功能，将本地标签推送到Github上即发布了一个Release版本，下载和查看非常方便。</p>

<h4>标签分类</h4>

<p>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象，建议使用附注标签，日后还可以查看标签信息。</p>

<h4>创建标签</h4>

<p>创建轻量标签</p>

<pre><code>    $ git tag v0.2.0 -light
</code></pre>

<p>解释：创建轻量标签不需要传递参数，直接指定标签名称即可。</p>

<p>创建附注标签</p>

<pre><code>    $ git tag -a v0.1.0 -m "release 0.1.0 version"
</code></pre>

<p>解释：创建附注标签时，参数-a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>

<h4>查看标签</h4>

<p>列出当前仓库的所有标签
<code>
    $ git tag
</code></p>

<p>列出符合模式的标签
<code>
    $ git tag -l 'v0.1.*'
</code></p>

<p>查看标签版本信息
<code>
    $ git show v0.1.0
</code></p>

<h4>切换标签</h4>

<p>切换标签与切换分支命令相同
<code>
    $ git checkout [tagname]
</code>
解释：切换标签后处于一个空的分支上，即”You are in ‘detached HEAD’ state.”</p>

<h4>删除标签</h4>

<p>误打或需要修改标签时，需要先将标签删除，再打新标签
<code>
    $ git tag -d v0.1.2
</code>
解释：参数-d即delete的缩写，意为删除其后指定的标签。</p>

<h4>补打标签</h4>

<p>给指定的commit打标签</p>

<pre><code>    $ git tag -a v0.1.0 49e0cd22f6bd9510fe65084e023d9c4316b446a6
</code></pre>

<p>解释：打标签不必要在HEAD之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和，通过git log命令获取。</p>

<h4>发布标签</h4>

<p>将v0.1.0标签提交到git服务器</p>

<pre><code>    $ git push origin v0.1.0
</code></pre>

<p>解释：通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作。</p>

<p>将本地所有标签一次性提交到git服务器
<code>
    $ git push origin –tags
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成树计数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_a55522150102w6sp.html">http://blog.sina.com.cn/s/blog_a55522150102w6sp.html</a>
<a href="http://www.xuebuyuan.com/1622347.html">http://www.xuebuyuan.com/1622347.html</a></p>

<h3>基尔霍夫定理</h3>

<p>算法思想:
<code>
    *(1)G的度数矩阵D[G]是一个n*n的矩阵,并且满足:当i≠j时,dij=0;当i=j时,dij等于vi的度数;
    *(2)G的邻接矩阵A[G]是一个n*n的矩阵,并且满足:如果vi,vj之间有边直接相连,则aij=1,否则为0;
    *定义图G的Kirchhoff矩阵C[G]为C[G]=D[G]-A[G];
    *Matrix-Tree定理:G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值；
    *所谓n-1阶主子式,就是对于r(1≤r≤n),将C[G]的第r行,第r列同时去掉后得到的新矩阵,用Cr[G]表示;
    *
    *Kirchhoff矩阵的特殊性质：
    *(1)对于任何一个图G,它的Kirchhoff矩阵C的行列式总是0,这是因为C每行每列所有元素的和均为0;
    *(2)如果G是不连通的,则它的Kirchhoff矩阵C的任一个主子式的行列式均为0;
    *(3)如果G是一颗树,那么它的Kirchhoff矩阵C的任一个n-1阶主子式的行列式均为1;
</code></p>

<pre><code>    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;iostream&gt;
    #include &lt;algorithm&gt;
    #define  zero(x) (((x)&gt;0?(x):(-x))&lt;1e-15)
    using namespace std;
    const int MAXN = 110;
    double a[MAXN][MAXN], b[MAXN][MAXN];
    int G[MAXN][MAXN];
    int N, M;

    /*
    *生成树计数
    *1、G的度数矩阵D[G]是一个n*n的矩阵，并且满足：当i≠j时,dij=0；当i=j时，dij等于vi的度数。
    *2、G的邻接矩阵A[G]也是一个n*n的矩阵， 并且满足：如果vi、vj之间有边直接相连，则aij=1，否则为0。
    *我们定义G的Kirchhoff矩阵(也称为拉普拉斯算子)C[G]为C[G]=D[G]-A[G]，则Matrix-Tree定理可以描述为：
    *G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值。
    *所谓n-1阶主子式，就是对于r(1≤r≤n)，将C[G]的第r行、第r列同时去掉后得到的新矩阵，用Cr[G]表示。
    */

    double Det(double a[MAXN][MAXN], int n)
    {
        int i, j, k, sign = 0;
        double ret = 1, t;
        for(i = 0; i &lt; n; ++i)
            for(j = 0; j &lt; n; ++j)
                b[i][j] = a[i][j];
        for(i = 0; i &lt; n; ++i)
        {
            if(zero(b[i][i]))
            {
                for(j = i + 1; j &lt; n; ++j)
                {
                    if(!zero(b[j][i]))
                        break;
                }
                if(j == n)
                    return 0;
                for(k = i; k &lt; n; ++k)
                    t = b[i][k], b[i][k] = b[j][k], b[j][k] = t;
                sign++;
            }
            ret *= b[i][i];
            for(k = i + 1; k &lt; n; ++k)
                b[i][k] /= b[i][i];
            for(j = i + 1; j &lt; n; ++j)
                for(k = i + 1; k &lt; n; ++k)
                    b[j][k] -= b[j][i] * b[i][k];
        }
        if(sign &amp; 1)
            ret = - ret;
        return ret;
    }

    int main()
    {
        int T, u, v;
        scanf("%d", &amp;T);
        while (T--)
        {
            scanf("%d %d", &amp;N, &amp;M);
            memset(G, 0, sizeof(G));
            memset(a, 0, sizeof(a));
            while(M--)
            {
                scanf("%d %d", &amp;u, &amp;v);
                G[u-1][v-1] = G[v-1][u-1] = 1;
            }
            for(int i = 0; i &lt; N; ++i)
            {
               int d = 0;
               for (int j = 0; j &lt; N; ++j) if(G[i][j]) d++;
               a[i][i] = d;
            }
            for(int i = 0; i &lt; N; ++i)
            {
                for (int j = 0; j &lt; N; ++j)
                {
                    if (G[i][j]) a[i][j] = -1;
                }
            }
           double ans = Det(a, N - 1);
           printf("%0.0lf\n", ans);
        }
        return 0;
    }
</code></pre>

<h3>SRM733-DIV1-B</h3>

<p><a href="https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1">https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1</a></p>

<h4>Problem Statement</h4>

<p>    
Consider an undirected, complete, simple graph G on n vertices. The vertices of G are labeled from 1 to n. Specifically, each pair of distinct vertices is connected by a single undirected edge, so there are precisely n*(n-1)/2 edges in this graph.</p>

<p>You are given a set E that contains some edges of the graph G. More precisely, you are given the vector <int>s x and y. For each valid i, (x[i], y[i]) is one of the edges in E.</p>

<p>A spanning tree of G is a subset of exactly n-1 edges of G such that the edges connect all n vertices. You may note that the edges of a spanning tree do indeed form a tree that is a subgraph of G and spans all its vertices.</p>

<p>We are interested in spanning trees that contain all of the edges in the provided set E. Compute and return the number of such spanning trees modulo 987,654,323. Two spanning trees are different if there is an edge of G that is in one of them but not in the other.
Definition
    </p>

<h4>Class:</h4>

<p>BuildingSpanningTreesDiv1</p>

<h4>Method:</h4>

<p>getNumberOfSpanningTrees</p>

<h4>Parameters:</h4>

<p>int, vector <int>, vector <int></p>

<h4>Returns:</h4>

<p>int</p>

<h4>Method signature:</h4>

<p>int getNumberOfSpanningTrees(int n, vector <int> x, vector <int> y)</p>

<p>(be sure your method is public)</p>

<h4>Limits</h4>

<p>Time limit (s):
2.000</p>

<p>Memory limit (MB):
256</p>

<h4>Notes</h4>

<p>987,654,323 is a prime number.</p>

<h4>Constraints</h4>

<p>n will be between 1 and 1,000, inclusive.<br/>
x will contain between 1 and 1,000 elements, inclusive.<br/>
y will contain between 1 and 1,000 elements, inclusive.<br/>
x and y will contain the same number of elements.<br/>
Each element of x will be between 1 and n-1, inclusive.<br/>
Each element of y will be between 2 and n, inclusive.<br/>
For each valid i, x[i] will be less than y[i].<br/>
All edges in E will be distinct.</p>

<h4>Examples</h4>

<p>0)<br/>
3<br/>
{1,2}<br/>
{2,3}<br/>
Returns: 1<br/>
The edges in the provided set E alredy form a spanning tree, so there is exactly one spanning tree that contains them.</p>

<p>1)<br/>
5<br/>
{1,3,4}<br/>
{2,4,5}<br/>
Returns: 6<br/>
There are six ways to add the one missing edge: one endpoint of the new edge must lie in the set {1,2} and the other in the set {3,4,5}.</p>

<p>2)<br/>
4<br/>
{1}<br/>
{2}<br/>
Returns: 8<br/>
There are eight spanning trees that contain the edge (1, 2):<br/>
{(1, 2), (1, 3), (1, 4)}<br/>
{(1, 2), (1, 3), (2, 4)}<br/>
{(1, 2), (1, 3), (3, 4)}<br/>
{(1, 2), (2, 3), (2, 4)}<br/>
{(1, 2), (1, 4), (2, 3)}<br/>
{(1, 2), (1, 4), (3, 4)}<br/>
{(1, 2), (2, 3), (3, 4)}<br/>
{(1, 2), (2, 4), (3, 4)}</p>

<p>3)<br/>
4<br/>
{1,2,1}<br/>
{2,3,3}<br/>
Returns: 0<br/>
The set E contains a cycle, and thus there is no spanning tree that contains all these edges.</p>

<p>4)<br/>
8<br/>
{1,4,2,3,5}<br/>
{4,7,6,5,8}<br/>
Returns: 144</p>

<p>5)<br/>
1000<br/>
{1}<br/>
{2}<br/>
Returns: 529013784</p>

<p>Don&rsquo;t forget to take the modulo.</p>

<p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. &copy;2003, TopCoder, Inc. All rights reserved.</p>

<pre><code>    #include &lt;algorithm&gt;
    #include &lt;cassert&gt;
    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;ctime&gt;
    #include &lt;iostream&gt;
    #include &lt;map&gt;
    #include &lt;queue&gt;
    #include &lt;set&gt;
    #include &lt;sstream&gt;
    #include &lt;stdint.h&gt;
    #include &lt;string&gt;
    #include &lt;utility&gt;
    #include &lt;vector&gt;

    using namespace std;

    int const MAX_N = 1003;
    int const MOD = 987654323;

    int p [MAX_N];
    int s [MAX_N];

    int root (int v)
    {
        if (p[v] != v)
        {
            p[v] = root (p[v]);
        }
        return p[v];
    }

    bool unite (int u, int v)
    {
        u = root (u);
        v = root (v);
        if (u == v)
        {
            return false;
        }
        p[v] = u;
        s[u] += s[v];
        return true;
    }

    int powmod (int a, int b)
    {
        int res = 1;
        for ( ; b &gt; 0; b &gt;&gt;= 1)
        {
            if (b &amp; 1)
            {
                res = (res * 1LL * a) % MOD;
            }
            a = (a * 1LL * a) % MOD;
        }
        return res;
    }

    int a [MAX_N] [MAX_N];
    int n;

    int det (void)
    {
        int res = 1;
        for (int i = 1; i &lt; n; i++)
        {
            int j;
            for (j = i; j &lt; n; j++)
            {
                if (a[j][i])
                {
                    break;
                }
            }
            if (j == n)
            {
                return 0;
            }
            if (j != i)
            {
                for (int k = i; k &lt; n; k++)
                {
                    swap (a[i][k], a[j][k]);
                }
            }
            res = (res * 1LL * a[i][i]) % MOD;
            int inv = powmod (a[i][i], MOD - 2);
            for (int j = i + 1; j &lt; n; j++)
            {
                int mult = (a[j][i] * 1LL * inv) % MOD;
                for (int k = i; k &lt; n; k++)
                {
                    a[j][k] = (a[j][k] -
                            a[i][k] * 1LL * mult) % MOD;
                }
            }
        }
        return (res + MOD) % MOD;
    }

    class BuildingSpanningTreesDiv1
    {
    public:
        int getNumberOfSpanningTrees (int n, vector &lt;int&gt; x, vector &lt;int&gt; y)
        {
            for (int i = 0; i &lt; n; i++)
            {
                p[i] = i;
                s[i] = 1;
            }
            int k = (int) (x.size ());
            for (int w = 0; w &lt; k; w++)
            {
                int u = x[w] - 1;
                int v = y[w] - 1;
                if (!unite (u, v))
                {
                    return 0;
                }
                a[u][v] += 1;
                a[v][u] += 1;
                a[u][u] -= 1;
                a[v][v] -= 1;
            }

            int t = 0;
            for (int i = 0; i &lt; n; i++)
            {
                if (p[i] == i)
                {
                    s[t] = s[i];
                    t += 1;
                }
            }

            n -= k;
            ::n = n;

            memset (a, 0, sizeof (a));
            for (int i = 0; i &lt; n; i++)
            {
                for (int j = i + 1; j &lt; n; j++)
                {
                    int e = s[i] * s[j];
                    a[i][j] -= e;
                    a[j][i] -= e;
                    a[i][i] = (a[i][i] + e) % MOD;
                    a[j][j] = (a[j][j] + e) % MOD;
                }
            }

            int res = det ();
            return res;
        }
    };
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆元]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-inv/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-inv</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/baidu_35643793/article/details/75268911">https://blog.csdn.net/baidu_35643793/article/details/75268911</a></p>

<h3>1.什么是逆元</h3>

<p>当求解公式：(a/b)%m 时，因b可能会过大，会出现爆精度的情况，所以需变除法为乘法：</p>

<p>设c是b的逆元，则有b*c≡1(mod m)；</p>

<p>则(a/b)%m = (a/b)<em>1%m = (a/b)</em>b<em>c%m = a</em>c(mod m);</p>

<p>即a/b的模等于a*b的逆元的模；</p>

<p>逆元就是这样应用的；</p>

<h3>2.求逆元的方法</h3>

<h4>(1).费马小定理</h4>

<p>在是素数的情况下，对任意整数都有。
如果无法被整除，则有。
可以在为素数的情况下求出一个数的逆元，，即为逆元。</p>

<p>题目中的数据范围1&lt;=x&lt;=10<sup>9</sup>，p=1000000007，p是素数；</p>

<p>所以x肯定就无法被p整除啊，所以最后就得出x<sup>p-2</sup>为x的逆元啦。</p>

<p>复杂度O(logn)；</p>

<p>代码：
<code>
    const int mod = 1000000009;  
    long long quickpow(long long a, long long b) {  
        if (b &lt; 0) return 0;  
        long long ret = 1;  
        a %= mod;  
        while(b) {  
            if (b &amp; 1) ret = (ret * a) % mod;  
            b &gt;&gt;= 1;  
            a = (a * a) % mod;  
        }  
        return ret;  
    }  
    long long inv(long long a) {  
        return quickpow(a, mod - 2);  
    }  
</code></p>

<h4>(2)扩展欧几里得算法求逆元</h4>

<p>可扩展欧几里得求逆元ax≡1(mod n)其中a，n互质；</p>

<p>复杂度：O(logn)；
<code>
    ll extend_gcd(ll a, ll b, ll &amp;x, ll &amp;y) {  
        if (b == 0) {  
            x = 1, y = 0;  
            return a;  
        }  
        else {  
            ll r = extend_gcd(b, a % b, y, x);  
            y -= x * (a / b);  
            return r;  
        }  
    }  
    ll inv(ll a, ll n) {  
        ll x, y;  
        extend_gcd(a, n, x, y);  
        x = (x % n + n) % n;  
        return x;  
    }  
</code></p>

<h4>(3) 逆元线性筛 ( P为质数 )</h4>

<p>求1,2,&hellip;,N关于P的逆元（P为质数）</p>

<p>复杂度：O(N)</p>

<p>代码：
```
    const int mod = 1000000009;<br/>
    const int maxn = 10005;<br/>
    int inv[maxn];<br/>
    inv[1] = 1;<br/>
    for(int i = 2; i &lt; 10000; i++)<br/>
        inv[i] = inv[mod % i] * (mod - mod / i) % mod;</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伽罗华域（Galois Field）上的四则运算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3/"/>
    <updated>2018-04-16T03:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-3</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/shelldon/article/details/54729687">https://blog.csdn.net/shelldon/article/details/54729687</a></p>

<p>伽罗华域（Galois Field）上的四则运算</p>

<p>Évariste Galois ，伽罗华（也译作伽瓦罗），法国数学家，群论的创立者。用群论彻底解决了根式求解代数方程的问题，而且由此发展了一整套关于群和域的理论。
本文介绍伽罗华域，以及在伽罗华域上的四则运算方式。伽罗华域上的四则运算实际上是多项式计算，后文中详细介绍。</p>

<h3>一、相关数学概念</h3>

<h4>1、域</h4>

<p>一组元素的集合，以及在集合上的四则运算，构成一个域。其中加法和乘法必须满足交换、结合和分配的规律。加法和乘法具有封闭性，即加法和乘法结果仍然是域中的元素。<br/>
域中必须有加法单位元和乘法单位元，且每一个元素都有对应的加法逆元和乘法逆元。但不要求域中的 0有乘法逆元。</p>

<h4>2、有限域</h4>

<p>仅含有限多个元素的域。因为它由伽罗华所发现，因而又称为伽罗华域。</p>

<p>所以当我们说伽罗华域的时候，就是指有限域。
GF（2<sup>w</sup>）表示含有2<sup>w</sup>个元素的有限域。</p>

<h4>3、单位元</h4>

<p>Identity Element，也叫幺元（么元），通常使用e来表示单位元。单位元和其他元素结合时，并不会改变那些元素。
对于二元运算<em>，若a</em>e=a，e称为右单位元；若e<em>a=a，e称为左单位元，若a</em>e=e*a=a，则e称为单位元。</p>

<h4>4、逆元</h4>

<p>对于二元运算<em>，若a</em>b=e，则a称为b的左逆元素，b称为a的右逆元素。若a<em>b=b</em>a=e，则称a为b的逆元，b为a的逆元。</p>

<h4>5、本原多项式</h4>

<p>域中不可约多项式是不能够进行因子分解的多项式， 本原多项式 （primitive polynomial）是一种特殊的不可约多项式。当一个域上的本原多项式确定了，这个域上的运算也就确定了。本原多项式一般通过查表可得，同一个域往往有多个本原多项式。</p>

<p>通过将域中的元素化为多项式形式，可以将域上的乘法运算转化为普通的多项式乘法再模本原多项式。</p>

<h3>二、多项式运算</h3>

<p>由于GF（2<sup>w</sup>）上的四则运算是基于多项式运算的，这里先介绍多项式运算。
多项式一般长这个样子：f(x) = x<sup>6</sup> + x^ 4 + x<sup>2</sup> + x + 1。</p>

<h4>1、多项式加减法</h4>

<p>将两个多项式中相同阶数的项系数相加或相减。
例如 (x<sup>2</sup> + x ) + (x + 1) = x<sup>2</sup> + 2x +1</p>

<h4>2、多项式乘法</h4>

<p>将其中一个多项式的各项分别与另一个多项式的各项相乘，然后把相同指数的项的系数相加。
例如 (x<sup>2</sup> + x) * (x + 1) = x<sup>2</sup> * (x + 1) + x * (x + 1） = x<sup>3</sup> + x<sup>2</sup> + x<sup>2</sup> + x</p>

<h4>3、多项式除法</h4>

<p>使用长除法。例如计算x<sup>3</sup>-12x<sup>2</sup>-42，除以x-3。使用长除法计算，商x<sup>2</sup>-9x-27，余数-123。</p>

<p><img src="/images/tools/2018-04-16-10.png" alt="" /></p>

<h4>4、GF（2<sup>w</sup>）上的多项式运算</h4>

<p>对于GF（2<sup>w</sup>）上的多项式计算，多项式系数只能取 0或1。（如果是GF(3<sup>w</sup>)，那么系数可以取 0、 1、 2）
GF（2<sup>w</sup>）的多项式加法中，合并阶数相同的同类项时，由于0+0=0,1+1=0,0+1=1+0=1，因此系数不是进行加法操作，而是进行异或操作。</p>

<p>GF（2<sup>w</sup>）的多项式减法等于加法，例如x ^4 – x<sup>4</sup>就等于x<sup>4</sup> + x<sup>4</sup>。</p>

<h3>三、伽罗华域</h3>

<h4>1、有限域GF(p)：</h4>

<p>有限域GF(p)，其中p为素数。GF(p)里面的加法和乘法与一般的加法和乘法差不多，区别是结果需要mod p，以保证结果都是域中的元素。GF(p)的加法和乘法单位元分别是 0和1。
GF(p)加法是(a+b) mod p，乘法是(a*b)mod p。</p>

<p>对于域中的乘法，当p为素数时，才能保证集合中的所有的元素都有乘法逆元(0除外)。即对于域中的任一个元素a，总能在域中找到另外一个元素b，使得a*b mod p 等于1。</p>

<p>说明：假如p等于10，其乘法单位元为1。对于元素2，找不到一个数a，使得2*a mod 10 等于1，即2没有乘法逆元。这时，在域上就不能进行除2运算。</p>

<h4>2、有限域GF(2<sup>w</sup>)：</h4>

<p>GF(p)中p必须是一个素数，才能保证集合中的所有元素都有加法和乘法逆元(0除外)。但实际应用中，很多场合需要 0到255这256个数字能组成一个域。但256不是素数，小于256的最大素数为251，如果直接把大于等于251的数截断为250，则会丢失一部分数据。</p>

<p>因此引入了GF(p<sup>w</sup>)，其中p为素数，通常取p=2。计算机领域中经常使用的是GF(2<sup>8</sup>)，8刚好是一个字节的比特数。为了保证单位元性质，GF(2<sup>w</sup>)上的加法运算和乘法运算，不再使用一般的加法和乘法，而是使用多项式运算。</p>

<h3>四、本原多项式</h3>

<p>伽罗华域的元素可以通过该域上的本原多项式生成。通过本原多项式得到的域，其加法单位元都是 0，乘法单位元是1。</p>

<p>以GF(2<sup>3</sup>)为例，指数小于3的多项式共8个： 0， 1， x， x+1， x<sup>2</sup>， x<sup>2</sup>+1， x<sup>2</sup> + x， x<sup>2</sup>+x+1。其系数刚好就是000,001, 010, 011, 100, 101, 110, 111，是0 到7这8个数的二进制形式。</p>

<p>GF(2<sup>3</sup>)上有不只一个本原多项式，选一个本原多项式x<sup>3</sup>+x+1，这8个多项式进行四则运算后 mod (x<sup>3</sup>+x+1)的结果都是8个之中的某一个。因此这8个多项式构成一个有限域。</p>

<p>对于GF(2<sup>3</sup>)，取素多项式为x<sup>3</sup> + x+1，那么多项式x<sup>2</sup>+x的乘法逆元就是x+1。系数对应的二进制分别为110和011。此时，我们就认为对应的十进制数6和3互为逆元。</p>

<p>部分 GF（2<sup>w</sup>）域经常使用的本原多项式如下：</p>

<p><img src="/images/tools/2018-04-16-11.png" alt="" /></p>

<h4>通过本原多项式生成元素</h4>

<p>设P(x)是GF（2<sup>w</sup>）上的某一个本原多项式，GF（2<sup>w</sup>）的元素产生步骤是：<br/>
1、给定一个初始集合，包含0,1和元素x，即 {0,1,x}；<br/>
2、将这个集合中的最后一个元素，即x，乘以x，如果结果的度大于等于w，则将结果mod P(x)后加入集合；<br/>
3、直到集合有2<sup>w</sup>个元素，此时最后一个元素乘以x再mod P(x)的值等于1。</p>

<p>例如，GF(2<sup>4</sup>)含有16个元素，本原多项式为P(x)=x<sup>4</sup>+x+1，除了 0、1外，另外14个符号均由本原多项式生成。
注意到x<sup>14</sup>=x<sup>3</sup>+1，此时计算x<sup>15</sup>=x<sup>14</sup><em>x=(x<sup>3</sup>+1)</em>x=x<sup>4</sup>+x=1，生成结束。</p>

<table border="1" cellpadding="2" cellspacing="0" width="100%"><tbody><tr><td valign="top">生成元素</td>
<td valign="top">多项式表示</td>
<td valign="top">二进制表示</td>
<td valign="top">数值表示</td>
<td valign="top">推导过程</td>
</tr><tr><td valign="top">0</td>
<td valign="top">0</td>
<td valign="top">0000</td>
<td valign="top">0</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^0</td>
<td valign="top">x^0</td>
<td valign="top">0001</td>
<td valign="top">1</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^1</td>
<td valign="top">x^1</td>
<td valign="top">0010</td>
<td valign="top">2</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^2</td>
<td valign="top">x^2</td>
<td valign="top">0100</td>
<td valign="top">4</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^3</td>
<td valign="top">x^3</td>
<td valign="top">1000</td>
<td valign="top">8</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^4</td>
<td valign="top">x+1</td>
<td valign="top">0011</td>
<td valign="top">3</td>
<td valign="top">x^3*x = x^4 mod P(x) = x+1</td>
</tr><tr><td valign="top">x^5</td>
<td valign="top">x^2+x</td>
<td valign="top">0110</td>
<td valign="top">6</td>
<td valign="top">x^4*x = (x+1)*x = x^2+x</td>
</tr><tr><td valign="top">x^6</td>
<td valign="top">x^3+x^2</td>
<td valign="top">1100</td>
<td valign="top">12</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^7</td>
<td valign="top">x^3+x+1</td>
<td valign="top">1011</td>
<td valign="top">11</td>
<td valign="top">x^6*x = (x^3+x^2)*x = x^4 +x^3 mod P(x) = x^3+x+1</td>
</tr><tr><td valign="top">x^8</td>
<td valign="top">x^2+1</td>
<td valign="top">0101</td>
<td valign="top">5</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^9</td>
<td valign="top">x^3+x</td>
<td valign="top">1010</td>
<td valign="top">10</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^10</td>
<td valign="top">x^2+x+1</td>
<td valign="top">0111</td>
<td valign="top">7</td>
<td valign="top">x^9*x=(x^3+x)*x = x^4+x^2 mod P(x) = x^2+x+1</td>
</tr><tr><td valign="top">x^11</td>
<td valign="top">x^3+x^2+x</td>
<td valign="top">1110</td>
<td valign="top">14</td>
<td valign="top"> </td>
</tr><tr><td valign="top">x^12</td>
<td valign="top">x^3+x^2+x+1</td>
<td valign="top">1111</td>
<td valign="top">15</td>
<td valign="top">x^11*x=(x^3+x^2+x)*x = x^4+x^3+x^2 mod P(x) = x^3+x^2+x+1</td>
</tr><tr><td valign="top">x^13</td>
<td valign="top">x^3+x^2+1</td>
<td valign="top">1101</td>
<td valign="top">13</td>
<td valign="top">x^12*x=(x^3+x^2+1  )*x = x^4+x^3+x mod P(x)= x^3+1</td>
</tr><tr><td valign="top">x^14</td>
<td valign="top">x^3+1</td>
<td valign="top">1001</td>
<td valign="top">9</td>
<td valign="top">x^13*x=(x^3+x^2+1)*x = x^4+x^3+x mod P(x) = x^3+1</td>
</tr><tr><td valign="top">x^15</td>
<td valign="top">1</td>
<td valign="top">0001</td>
<td valign="top">1</td>
<td valign="top">x^14*x = (x^3+1)*x = x^4+x mod P(x) = 1</td>
</tr></tbody></table>


<h3>五、伽罗华域上的运算</h3>

<h4>加法和减法：</h4>

<p>加法和减法就是多项式计算中说的异或运算。</p>

<h4>乘法和除法：</h4>

<p>伽罗华域上的多项式乘法，其结果需要mod P(x)，可以通过以下方式简化计算。</p>

<p>首先，考虑x<sup>8</sup>，x<sup>8</sup> mod P(x) = P(x) – x<sup>8</sup> = x<sup>4</sup> + x<sup>3</sup> +x<sup>2</sup> +1 。</p>

<p>对于一般形式的多项式f(x)=a7<em>x<sup>7</sup> + a6</em>x<sup>6</sup> + a5<em>x<sup>5</sup> + a4</em>x<sup>4</sup> + a3<em>x<sup>3</sup> + a2</em>x<sup>2</sup> + a1<em>x + a0，乘以x得到
x</em>f(x) = (a7<em>x<sup>8</sup> + a6</em>x<sup>7</sup> + a5<em>x<sup>6</sup> + a4</em>x<sup>5</sup> + a3<em>x<sup>4</sup> + a2</em>x<sup>3</sup> + a1<em>x<sup>1</sup> + a0</em>x) mod P(x)</p>

<p>这时有两种情况：</p>

<p>1）a7 == 0，此时结果是一个小于指数小于8的多项式，不需要取模计算。</p>

<p>2）a7 == 1，则将x<sup>8</sup>替换为x<sup>4</sup> + x<sup>3</sup> + x<sup>2</sup> +1，而不用进行除法取模计算，结果为：</p>

<p>x<em>f(x) = (x<sup>4</sup> + x<sup>3</sup> + x<sup>2</sup> +1) + a6</em>x<sup>7</sup> + a5<em>x<sup>6</sup> + a4</em>x<sup>5</sup> + a3<em>x<sup>4</sup> + a2</em>x<sup>3</sup> + a1<em>x<sup>1</sup> + a0</em>x</p>

<p>虽然可以通过替换减少除法计算，但还是过于复杂。尤其是在需要大量运算的场合，比如图像处理。于是牛人提出通过查表来减少计算。</p>

<h3>六、查表的原理</h3>

<p>首先介绍一个概念，生成元。</p>

<p>生成元是域上的一类特殊元素，生成元的幂可以遍历域上的所有元素。假设g是域GF(2<sup>w</sup>)上生成元，那么集合 {g0 ，g1 ， ……，g(2<sup>w</sup>-1) } 包含了域GF(2<sup>w</sup>)上所有非零元素。在域GF(2<sup>w</sup>)中2总是生成元。</p>

<p>将生成元应用到多项式中， GF(2<sup>w</sup>)中的所有多项式都是可以通过多项式生成元g通过幂求得。即域中的任意元素a，都可以表示为a = g<sup>k</sup>。</p>

<p>GF(2<sup>w</sup>)是一个有限域，就是元素个数是有限的，但指数k是可以无穷的。所以必然存在循环。这个循环的周期是2<sup>w</sup>-1（g不能生成多项式 0）。所以当k大于等于2<sup>w</sup>-1时，g<sup>k</sup> =g<sup>k%(2<sup>w</sup>-1)</sup>。</p>

<p> 对于g<sup>k</sup> = a，有正过程和逆过程。知道指数k求a是正过程，知道值a求指数k是逆过程。</p>

<p>对于乘法，假设a=g<sup>n</sup>，b=g<sup>m</sup>。那么a<em>b = g<sup>n</sup></em> g<sup>m</sup> = g<sup>n+m</sup>。查表的方法就是根据a和b，分别查表得到n和m，然后查表g<sup>n+m</sup>即可。</p>

<p>因此需要构造正表和反表，在GF(2<sup>w</sup>)域上分别记为gflog和gfilog。gflog是将二进制形式映射为多项式形式，gfilog是将多项式形式映射为二进制形式。</p>

<p>注意：多项式0 ，是无法用生成元生成的。g<sup>0</sup>等于多项式1，而不是 0。</p>

<p> 根据上文的GF(2<sup>4</sup>)的元素表示，生成gflog表和gfilog表如下：</p>

<p><img src="/images/tools/2018-04-16-12.png" alt="" /></p>

<h4>查表进行乘法和除法运算的例子</h4>

<p>在GF(2<sup>4</sup>)域上的乘法和除法，已知2<sup>w</sup>-1 = 2<sup>4</sup> -1 = 15：</p>

<p>乘法：</p>

<p> 7 * 9 = gfilog[gflog[7] + gflog[9]] = gfilog[10 + 14]
 = gfilog[24 mod 15] = gfilog[9] = 10</p>

<p>除法：</p>

<p> 13 / 11 = gfilog[gflog[13] - gflog[11]] =  gfilog[13 - 7] = gfilog[6] = 12</p>

<h3>五、生成GF（2<sup>w</sup>）gflog表和gfilog表的python代码</h3>

<pre><code>    # coding=UTF-8  

    # key : value =&gt; w : primitive_polynomial  
    primitive_polynomial_dict = {4: 0b10011,                            # x**4  + x     + 1  
                    8: (1 &lt;&lt; 8) + 0b11101,                 # x**8  + x**4  + x**3 + x**2 +1  
                    16: (1 &lt;&lt; 16) + (1 &lt;&lt; 12) + 0b1011,    # x**16 + x**12 + x**3 + x    + 1  
                    32: (1 &lt;&lt; 32) + (1 &lt;&lt; 22) + 0b111,     # x**32 + x**22 + x**2 + x    + 1  
                    64: (1 &lt;&lt; 64) + 0b11011                # x**64 + x**4  + x**3 + x    + 1  
                    }  


    def make_gf_dict(w):  
        gf_element_total_number = 1 &lt;&lt; w  
        primitive_polynomial = primitive_polynomial_dict[w]  

        gfilog = [1]  # g(0) = 1  
        for i in xrange(1, gf_element_total_number - 1):  
            temp = gfilog[i - 1] &lt;&lt; 1  # g(i) = g(i-1) * g  
            if temp &amp; gf_element_total_number:  # if overflow, then mod primitive polynomial  
                temp ^= primitive_polynomial  # mod primitive_polynomial in GF(2**w) == XOR  
            gfilog.append(temp)  

        assert (gfilog[gf_element_total_number - 2] &lt;&lt; 1) ^ primitive_polynomial  
        gfilog.append(None)  

        gflog = [None] * gf_element_total_number  
        for i in xrange(0, gf_element_total_number - 1):  
            gflog[gfilog[i]] = i  

        print "{:&gt;8}\t{:&gt;8}\t{:&gt;8}".format("i", "gfilog[i]", "gflog[i]")  
        for i in xrange(0, gf_element_total_number):  
            print "{:&gt;8}\t{:&gt;8}\t{:&gt;8}".format(i, gfilog[i], gflog[i])  


    if __name__ == "__main__":  
        make_gf_dict(4)  
</code></pre>

<h4>参考</h4>

<p><a href="http://blog.csdn.net/luotuo44/article/details/41645597">http://blog.csdn.net/luotuo44/article/details/41645597</a>
<a href="http://blog.csdn.net/mengboy/article/details/1514445">http://blog.csdn.net/mengboy/article/details/1514445</a>
<a href="http://www.tuicool.com/articles/RZjAB3">http://www.tuicool.com/articles/RZjAB3</a>
<a href="http://ouyangmy.is-programmer.com/posts/41256.html">http://ouyangmy.is-programmer.com/posts/41256.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于柯西矩阵的Erasure Code技术详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-2/"/>
    <updated>2018-04-16T02:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/16/isal-erase-2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.51cto.com/alanwu/1410132">http://blog.51cto.com/alanwu/1410132</a></p>

<p><a href="http://blog.51cto.com/alanwu/1406312">http://blog.51cto.com/alanwu/1406312</a>
<a href="http://www.doc88.com/p-4085136791897.html">http://www.doc88.com/p-4085136791897.html</a></p>

<h3>一、概述</h3>

<p>Erasure Code可以应用于分布式存储系统中，替代多份数据拷贝的数据冗余方式，从而可以提高存储空间利用率。此外，Erasure code还可以应用于传统RAID系统中，增加数据冗余度，支持多块盘同时发生故障，从而可以提高数据可靠性。</p>

<p>采用范德蒙矩阵可以构建Erasure code（关于范德蒙矩阵的编解码方法，可以参考文章《基于范德蒙矩阵的Erasure code技术详解》），其生成矩阵表示如下：</p>

<p><img src="/images/tools/2018-04-16-1.jpg" alt="" /></p>

<p>采用范德蒙矩阵作为编码矩阵的问题在于算法复杂度太高，其解码算法复杂度为O（n<sup>3</sup>）。采用目前的处理器技术，还是会影响IO的性能，增加IO延迟。因此，找到一种更加合理的编码矩阵，降低算法复杂度是Erasure code得以广泛应用的一个前提条件。</p>

<h3>二、基于柯西矩阵的编解码过程</h3>

<p>基于柯西矩阵的李德-所罗门（RS）码是在范德蒙矩阵的RS码基础上作了两点重要改进：</p>

<p>1，用柯西矩阵来代替范德蒙矩阵。由于范德蒙矩阵求逆运算的复杂度为O（n<sup>3</sup>），而柯西矩阵求逆运算的复杂度仅为O（n<sup>2</sup>）。因此，采用柯西矩阵可以降低解码的运算复杂度。</p>

<p>2，采用有限域二进制矩阵的方式来提高运算效率，直接将乘法转换成XOR逻辑运算，大大降低了运算复杂度。</p>

<p>大家知道，柯西矩阵可以描述如下：</p>

<p><img src="/images/tools/2018-04-16-2.jpg" alt="" /></p>

<p>X（i）和Y（i）都是迦罗华域GF（2<sup>w</sup>）中的元素。柯西矩阵有两个特点：第一，任意一个子方阵都是奇异矩阵，存在逆矩阵；第二，柯西矩阵在迦罗华域上的求逆运算，可以在O（n<sup>2</sup>）的运算复杂度内完成。</p>

<p>采用柯西矩阵进行Erasure code编码过程描述如下：</p>

<p><img src="/images/tools/2018-04-16-3.jpg" alt="" /></p>

<p>其运算过程和范德蒙矩阵编码过程是一样的，只不过采用柯西矩阵替换了范德蒙矩阵。从运算过程来看，编码过程是迦罗华域的系列乘法、加法运算。</p>

<p>柯西解码方程描述如下：</p>

<p><img src="/images/tools/2018-04-16-4.jpg" alt="" /></p>

<p>当任何一个数据元d（i）遭到损坏时，需要通过解码过程进行数据恢复。数据解码过程可以分成如下几大步骤：</p>

<p>1，选取剩余有效的数据块，构成一个解码列向量。例如，d1、d3数据块损坏了，那么可以选取剩余数据d0、d2、c0、c2作为解码列向量。</p>

<p>2，摘取生成矩阵（柯西矩阵）中解码列向量所对应的行，构成方阵A，该矩阵的逆矩阵就是解码生成矩阵inv(A)。</p>

<p><img src="/images/tools/2018-04-16-5.jpg" alt="" /></p>

<p>3，解码生成矩阵inv(A)和解码列向量的乘积就可以得到丢失的数据d1和d3。</p>

<p>从整个过程来看，矩阵求逆过程是最大的运算开销。解码过程和范德蒙矩阵编码是一样的，但是柯西矩阵的求逆运算复杂度要低于范德蒙矩阵，因此，具有更好的性能。</p>

<h3>三、柯西编解码过程优化</h3>

<p>从编解码过程来看，柯西编解码最大的运算量是乘法和加法运算。在范德蒙编码的时候，我们可以采用对数/反对数表的方法将乘法运算转换成了加法运算，并且在迦罗华域中，加法运算转换成了XOR运算。</p>

<p>柯西编解码为了降低乘法复杂度，采用了有限域上的元素都可以使用二进制矩阵表示的原理，将乘法运算转换成了迦罗华域“与运算”和“XOR逻辑运算”，提高了编解码效率。</p>

<p>从数学的角度来看，在迦罗华有限域中，任何一个GF（2<sup>w</sup>）域上的元素都可以映射到GF（2）二进制域，并且采用一个二进制矩阵的方式表示GF（2<sup>w</sup>）中的元素。例如，GF（2<sup>3</sup>）域中的元素可以表示成GF（2）域中的二进制矩阵：</p>

<p><img src="/images/tools/2018-04-16-6.jpg" alt="" /></p>

<p>图中，黑色方块表示逻辑1，白色方块表示逻辑0。通过这种转换，GF（2<sup>w</sup>）域中的阵列就可以转换成GF（2）域中的二进制阵列。生成矩阵的阵列转换表示如下：</p>

<p><img src="/images/tools/2018-04-16-7.jpg" alt="" /></p>

<p>在GF（2<sup>w</sup>）域中的生成矩阵为K<em>（K+m），转换到GF（2）域中，变成了(w</em>k) * (w*(k+m))二进制矩阵。采用域转换的目的是简化GF（2<sup>w</sup>）域中的乘法运算。在GF（2）域中，乘法运算变成了逻辑与运算，加法运算变成了XOR运算，可以大大降低运算复杂度。和范德蒙编解码中提到的对数/反对数方法相比，这种方法不需要构建对数/反对数表，可以支持w为很大的GF域空间。采用这种有限域转换的方法之后，柯西编码运算可以表示如下：</p>

<p><img src="/images/tools/2018-04-16-8.jpg" alt="" /></p>

<h3>四、总结</h3>

<p>可以说柯西编码是在范德蒙编码基础之上的一种优化。其主要有两点：第一降低了矩阵求逆的运算复杂度；第二通过有限域转换，将GF（2<sup>w</sup>）域中的元素转换成二进制矩阵，简化了乘法运算。所以，柯西编解码要优于范德蒙矩阵的方法，柯西编码的运算复杂度为O（n(n- m)），解码复杂度为O（n<sup>2</sup>）。</p>
]]></content>
  </entry>
  
</feed>
