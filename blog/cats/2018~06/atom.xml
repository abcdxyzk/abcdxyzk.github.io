<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2018~06 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2018~06/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-07-15T14:01:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nf_socket]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/06/12/kernel-nf_socket/"/>
    <updated>2018-06-12T02:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/06/12/kernel-nf_socket</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jk110333/article/details/8642261">https://blog.csdn.net/jk110333/article/details/8642261</a></p>

<p>用户态与内核态交互通信的方法不止一种，sockopt是比较方便的一个，写法也简单. ipvsadm的两种通信方式之一</p>

<p>缺点就是使用 copy_from_user()/copy_to_user()完成内核和用户的通信， 效率其实不高， 多用在传递控制 选项 信息，不适合做大量的数据传输</p>

<h4>用户态函数：</h4>

<p>发送：int setsockopt( int sockfd, int proto, int cmd, void *data, int datelen);</p>

<p>接收：int getsockopt(int sockfd, int proto, int cmd, void *data, int datalen);</p>

<p>第一个参数是socket描述符；</p>

<p>第二个参数proto是sock协议，IP RAW的就用SOL_SOCKET/SOL_IP等，TCP/UDP socket的可用SOL_SOCKET/SOL_IP/SOL_TCP/SOL_UDP等，即高层的socket是都可以使用低层socket的命令字 的，IPPROTO_IP；</p>

<p>第三个参数cmd是操作命令字，由自己定义；</p>

<p>第四个参数是数据缓冲区起始位置指针，set操作时是将缓冲区数据写入内核，get的时候是将内核中的数 据读入该缓冲区；</p>

<p>第五个参数数据长度</p>

<h4>内核态函数</h4>

<p>注册：nf_register_sockopt(struct nf_sockopt_ops *sockops);</p>

<p>注销：nf_unregister_sockopt(struct nf_sockopt_ops *sockops);</p>

<p>结构体 nf_sockopt_ops test_sockops
<code>
    static struct nf_sockopt_ops nso = {
        .pf  = PF_INET,     // 协议族
        .set_optmin = 常数,   // 定义最小set命令字
        .set_optmax = 常数+N, // 定义最大set命令字
        .set  = recv_msg,   // 定义set处理函数
        .get_optmin = 常数,   // 定义最小get命令字
        .get_optmax = 常数+N, // 定义最大get命令字
        .get  = send_msg,   // 定义set处理函数
    };
</code></p>

<p>其中命令字不能和内核已有的重复，宜大不宜小。命令字很重要，是用来做标识符的。而且用户态和内核态要定义的相同，
<code>
    #define SOCKET_OPS_BASE     128
    #define SOCKET_OPS_SET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_GET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_MAX      (SOCKET_OPS_BASE + 1)
</code></p>

<p>set/get处理函数是直接由用户空间的 set/getsockopt函数调用的。 setsockopt函数向内核写数据，用getsockopt向内核读数据。
另外set和get的处理函数的参数应该是这样的</p>

<pre><code>    int recv_msg(struct sock *sk, int cmd, void __user *user, unsigned int len);
    int send_msg(struct sock *sk, int cmd, void __user *user, unsigned int *len);
</code></pre>

<h4>用户态 setsockopt/getsockopt 调内核态 ipv4_specific.get/setsockopt -> ip_setsockopt -> nf_setsockopt -> nf_sockopt</h4>

<p>内核态的module.c</p>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/types.h&gt;
    #include &lt;linux/string.h&gt;
    #include &lt;linux/netfilter_ipv4.h&gt;
    #include &lt;linux/init.h&gt;
    #include &lt;asm/uaccess.h&gt;

    #define SOCKET_OPS_BASE     (128+10000)
    #define SOCKET_OPS_SET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_GET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_MAX      (SOCKET_OPS_BASE + 1)

    #define KMSG            "--------kernel---------"
    #define KMSG_LEN        sizeof("--------kernel---------")


    static int recv_msg(struct sock *sk, int cmd, void __user *user, unsigned int len)
    {
        int ret = 0;
        printk(KERN_INFO "sockopt: recv_msg()\n");

        if (cmd == SOCKET_OPS_SET) {
            char umsg[64];
            int len = sizeof(char)*64;
            memset(umsg, 0, len);
            ret = copy_from_user(umsg, user, len);
            printk("recv_msg: umsg = %s. ret = %d\n", umsg, ret);
        }
        return 0;
    }

    static int send_msg(struct sock *sk, int cmd, void __user *user, int *len)
    {
        int ret = 0;
        printk(KERN_INFO "sockopt: send_msg()\n");
        if (cmd == SOCKET_OPS_GET) {
            ret = copy_to_user(user, KMSG, KMSG_LEN);
            printk("send_msg: umsg = %s. ret = %d. success\n", KMSG, ret);
        }
        return 0;

    }

    static struct nf_sockopt_ops test_sockops =
    {
        .pf = PF_INET,
        .set_optmin = SOCKET_OPS_SET,
        .set_optmax = SOCKET_OPS_MAX,
        .set = recv_msg,
        .get_optmin = SOCKET_OPS_GET,
        .get_optmax = SOCKET_OPS_MAX,
        .get = send_msg,
        .owner = THIS_MODULE,
    };

    static int __init init_sockopt(void)
    {
        printk(KERN_INFO "sockopt: init_sockopt()\n");
        return nf_register_sockopt(&amp;test_sockops);
    }

    static void __exit exit_sockopt(void)
    {
        printk(KERN_INFO "sockopt: fini_sockopt()\n");
        nf_unregister_sockopt(&amp;test_sockops);
    }

    module_init(init_sockopt);
    module_exit(exit_sockopt);
    MODULE_LICENSE("GPL");
</code></pre>

<p>用户态的user.c</p>

<pre><code>    #include &lt;unistd.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;linux/in.h&gt;
    #include &lt;string.h&gt;
    #include &lt;errno.h&gt;

    #define SOCKET_OPS_BASE     (128+10000)
    #define SOCKET_OPS_SET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_GET      (SOCKET_OPS_BASE)
    #define SOCKET_OPS_MAX      (SOCKET_OPS_BASE + 1)

    #define UMSG            "----------user------------"
    #define UMSG_LEN        sizeof("----------user------------")

    char kmsg[64];

    int main(void)
    {
        int sockfd;
        int len;
        int ret;

        sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
        if (sockfd &lt; 0) {
            printf("can not create a socket\n");
            return -1;
        }

        /*call function recv_msg()*/
        ret = setsockopt(sockfd, IPPROTO_IP, SOCKET_OPS_SET, UMSG, UMSG_LEN);
        printf("setsockopt: ret = %d, msg = %s\n", ret, UMSG);
        len = sizeof(char)*64;

        /*call function send_msg()*/
        ret = getsockopt(sockfd, IPPROTO_IP, SOCKET_OPS_GET, kmsg, &amp;len);
        printf("getsockopt: ret = %d, msg = %s\n", ret, kmsg);
        if (ret != 0) {
            printf("getsockopt error: errno = %d, errstr = %s\n", errno, strerror(errno));
        }

        close(sockfd);
        return 0;
    }
</code></pre>

<p>Makefile
```
    TARGET = socketopt
    OBJS = module.o</p>

<pre><code>KDIR = /lib/modules/`uname -r`/build
PWD = $(shell pwd)

obj-m := $(TARGET).o

$(TARGET)-objs := $(OBJS)

default:
    make -C $(KDIR) SUBDIRS=$(PWD) modules
clean:
    -rm -rf *.o *.ko .$(TARGET).ko.cmd .*.flags *.mod.c modules.order  Module.symvers .tmp_versions
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[editcap: pcap文件的合并和分隔]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/06/11/command-editcap/"/>
    <updated>2018-06-11T02:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/06/11/command-editcap</id>
    <content type="html"><![CDATA[<h4>centos7 editcap 半静态编译</h4>

<p><a href="https://www.wireshark.org/download/src/wireshark-2.6.1.tar.xz">https://www.wireshark.org/download/src/wireshark-2.6.1.tar.xz</a></p>

<p><a href="ftp://ftp.icm.edu.pl/vol/rzm6/linux-oracle-repo/OracleLinux/OL7/latest/SRPMS/libpcap-1.5.3-11.el7.src.rpm">ftp://ftp.icm.edu.pl/vol/rzm6/linux-oracle-repo/OracleLinux/OL7/latest/SRPMS/libpcap-1.5.3-11.el7.src.rpm</a></p>

<p><a href="/download/tools/editcap_el7.tar">editcap_el7</a></p>

<p><a href="/download/tools/mergecap_el7.tar">mergecap_el7</a></p>

<p><a href="/download/tools/libpcap.a.tar">libcap.a</a></p>

<pre><code>    ./configure CFLAGS=-static
    make CFLAGS=-static


    # CFLAGS=-static 不能完全起作用，
    # 通过在 ./libtool 中增加 set -x 后得知 editcap 的链接命令，修改后如下
    gcc -std=gnu99 -Wall -Wextra -Wendif-labels -Wpointer-arith -Wformat-security -fwrapv -fno-strict-overflow -fno-delete-null-pointer-checks -Wvla -Waddress -Wattributes -Wdiv-by-zero -Wignored-qualifiers -Wpragmas -Wno-overlength-strings -Wno-long-long -Wc++-compat -Wshadow -Wno-pointer-sign -Wold-style-definition -Wstrict-prototypes -Wlogical-op -Wjump-misses-init -Werror=implicit -fexcess-precision=fast -fvisibility=hidden -Wl,-Bstatic -o editcap editcap-editcap.o editcap-version_info.o -pthread -Wl,-Bstatic ui/libui.a wiretap/.libs/libwiretap.a /usr/local/wireshark/wireshark-2.6.1/wsutil/.libs/libwsutil.a wsutil/.libs/libwsutil.a -lgnutls -lgthread-2.0 -lgmodule-2.0 -lglib-2.0 -lgcrypt -lgpg-error -lz -lm -pthread -Wl,-Bdynamic -lgcc_s -ldl
</code></pre>

<p><a href="https://buildlogs.cdn.centos.org/c7.1511.00/glib2/20151120104129/2.42.2-5.el7.x86_64/glib2-2.42.2-5.el7.src.rpm">glib2-2.42.2-5.el7.src.rpm</a><br/>
<a href="https://buildlogs.centos.org/c7.01.u/libgcrypt/20150512144559/1.5.3-12.el7_1.1.x86_64/libgcrypt-1.5.3-12.el7_1.1.src.rpm">libgcrypt-1.5.3-12.el7_1.1.src.rpm</a><br/>
<a href="http://vault.centos.org/7.3.1611/os/Source/SPackages/libgpg-error-1.12-3.el7.src.rpm">libgpg-error-1.12-3.el7.src.rpm</a><br/>
<a href="https://buildlogs.centos.org/c7.1511.u/gnutls/20160107182235/3.3.8-14.el7_2.x86_64/gnutls-3.3.8-14.el7_2.src.rpm">gnutls-3.3.8-14.el7_2.src.rpm</a></p>

<p>以上部分需要 make CFLAGS=-static 才能生成*.a</p>

<p><a href="ftp://ftp.icm.edu.pl/vol/rzm6/linux-slc/centos/7.2.1511/os/Source/SPackages/wireshark-1.10.14-7.el7.src.rpm">wireshark-1.10.14-7.el7.src.rpm</a></p>

<p>wireshark-1.10.14-7.el7.src.rpm 的<code>./configure CFLAGS=-static</code>和<code>make CFLAGS=-static</code>过不了，无法使用。。。</p>

<hr />

<p><a href="http://qwxingren.blog.sohu.com/304463885.html">http://qwxingren.blog.sohu.com/304463885.html</a></p>

<h4>拆分</h4>

<p>使用wireshark自带的editcap。我们的系统Centos 5.8，执行 yum install wireshark，就已经安装了editcap。</p>

<h5>1. 根据时间来拆分，利用-A 起始时间和-B 截止时间来提去某个时间段的数据。</h5>

<p>用法：editcap -A &lt;起始时间>  -B &lt;截止时间>  &lt;源文件名> &lt;目的文件名></p>

<p>示例：
<code>
    editcap -A "2014-07-12 12:55:00" -B "2014-07-12 12:56:00" eth0-rtp.cap  out_rtp.cap
</code></p>

<h5>2.按packge数量拆分为多个文件</h5>

<p>用法：editcap -c &lt;每个文件的包数> &lt;源文件名> &lt;目的文件名></p>

<p>示例：
<code>
    editcap -c 100 dump.pcap test.pcap
</code></p>

<h4>合并</h4>

<p>在wireshark中通过filter过滤出sip信令，但是在多个文件中,megecap可以将多个pcap文件合并为一个文件。</p>

<p>用法：mergecap -w &lt;输出文件>  &lt;源文件1>  &lt;源文件2> &hellip;</p>

<p>示例：
<code>
    mergecap -w compare.pcap a.pcap b.pcap
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 四层转发配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-stream/"/>
    <updated>2018-06-06T02:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-stream</id>
    <content type="html"><![CDATA[<p>nginx rpm: <a href="http://nginx.org/packages/mainline/centos/7/x86_64/RPMS/">http://nginx.org/packages/mainline/centos/7/x86_64/RPMS/</a></p>

<p>nginx source: <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>

<p>nginx stream: <a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html">http://nginx.org/en/docs/stream/ngx_stream_core_module.html</a></p>

<p><a href="http://www.52devops.com/chuck/1153.html">http://www.52devops.com/chuck/1153.html</a></p>

<h4>一、nginx四层代理</h4>

<p>Nginx 1.9.0 开发版发布，该版本增加了 stream module 用于一般的 TCP 代理和负载均衡。</p>

<h4>三、nginx四层代理实战</h4>

<h5>3.1编译安装nginx</h5>

<p>编译安装nginx需指定–with-stream参数
<code>
    [root@linux-node1 nginx-1.9.12]#./configure --prefix=/usr/local/nginx-1.9.12 --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --with-file-aio --with-stream
    [root@linux-node1 nginx-1.9.12]#make &amp;&amp; make install
</code></p>

<h5>3.2 使用nginx实现ssh四层代理</h5>

<p>编辑nginx配置文件并启动</p>

<pre><code>    [root@linux-node1 conf]# vim nginx.conf
    worker_processes  1;
    events {
        worker_connections  1024;
    }
    stream {  #类似于7层的http段
        upstream ssh_proxy {
            hash $remote_addr consistent;
            server 192.168.56.11:22;
            server 192.168.56.12:22;
        }
        server {
            listen 2222;
            proxy_connect_timeout 1s;
            proxy_timeout 300s;
            proxy_pass ssh_proxy;
        }
    }
    [root@linux-node1 conf]# ../sbin/nginx
    [root@linux-node1 conf]# netstat -lntup|grep nginx
    tcp        0      0 0.0.0.0:2222            0.0.0.0:*               LISTEN      61127/nginx: master
</code></pre>

<p>连接ssh,从结果看把请求抛向了linux-node2的ssh</p>

<pre><code>    [root@linux-node1 conf]# ssh -p 2222 root@192.168.56.11
    root@192.168.56.11's password:
    Last login: Sun Mar  6 17:29:42 2016 from linux-node1.example.com
    [root@linux-node2 ~]# Connection to 192.168.56.11 closed by remote host.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lvs fwmark 模式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/06/06/kernel-lvs-fwmark/"/>
    <updated>2018-06-06T01:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/06/06/kernel-lvs-fwmark</id>
    <content type="html"><![CDATA[<p><a href="http://blog.51cto.com/angus717/769577">http://blog.51cto.com/angus717/769577</a></p>

<p>persistent netfilter marked packet persistence 持久防火墙标记（在pre-routing链上打netfilter marked，而且该标记只在防火墙内部有效通常是0-99）</p>

<pre><code>    [root@slave ~]# ipvsadm -C
    [root@slave ~]# iptables -t mangle -A PREROUTING -i eth0 -p tcp -d 172.16.8.120 --dport 80 -j MARK --set-mark 80
    [root@slave ~]# iptables -t mangle -A PREROUTING -i eth0 -p tcp -d 172.16.8.120 --dport 443 -j MARK --set-mark 80
    [root@slave ~]# ipvsadm -A -f 80 -s rr -p 1000
    [root@slave ~]# ipvsadm -a -f 80 -r 172.16.100.7 -g
    [root@slave ~]# ipvsadm -a -f 80 -r 172.16.100.6 -g
    [root@slave ~]# ipvsadm -Ln
    IP Virtual Server version 1.2.1 (size=4096)
    Prot LocalAddress:Port Scheduler Flags
      -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
    FWM  80 rr persistent 1000
      -&gt; 172.16.100.6:0               Route   1      0          0        
      -&gt; 172.16.100.7:0               Route   1      0          0 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx https/nginx 配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-config/"/>
    <updated>2018-06-06T00:50:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-config</id>
    <content type="html"><![CDATA[<p>curl wget 不验证证书进行https请求
<code>
    wget 'https://x.x.x.x/get_ips' --no-check-certificate
    curl 'https://x.x.x.x/get_ips' -k
</code></p>

<h4>服务端</h4>

<p>生成证书和私匙
<code>
    openssl req -newkey rsa:4096 -nodes -keyout test_private.perm -new -x509 -sha512 -days 3650 -subj "/CN=test.com/" -out test.crt
</code>
test_private.perm 是私匙, test.crt 是证书</p>

<p>其中CN和nginx.conf中的server_name一样</p>

<p><a href="https://cloud.tencent.com/document/product/400/35244">https://cloud.tencent.com/document/product/400/35244</a></p>

<p>vim /etc/nginx/nginx.conf
<code>
    http {
        server {
            listen  443;
            server_name test.com;
            ssl on;
            # ssl_certificate /root/test.crt;
            # ssl_certificate_key /root/test_private.perm;
            ssl_certificate /root/kk/www.npcable.cn_nginx/www.npcable.cn_bundle.crt;
            ssl_certificate_key /root/kk/www.npcable.cn_nginx/www.npcable.cn.key;
            location / {
                root /var/www/html;
                index index.html;
            }
        }
        ...
    }
</code></p>

<h4>客户端</h4>

<p>自建证书得不到信任，所以会提示：
curl: (60) Peer&rsquo;s certificate issuer has been marked as not trusted by the user.</p>

<p>解决方法：</p>

<p>拿服务器证书
<code>
    openssl s_client -showcerts -connect www.baidu.com:443
</code></p>

<p>curl 参数带证书
<code>
    curl -v 'https://test.com/kk' --resolve 'test.com:443:192.168.2.7' --trace-time --cacert /root/test.crt
</code></p>

<p>或者将证书加到信任的证书列表中</p>

<pre><code>    cat /root/test.crt &gt;&gt; /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    curl -v 'https://test.com/kk' --resolve 'test.com:443:192.168.2.7' --trace-time
</code></pre>

<p>访问的host一定要是证书中CN(commonname), 不然会提示：
curl: (51) Unable to communicate securely with peer: requested domain name does not match the server&rsquo;s certificate.</p>
]]></content>
  </entry>
  
</feed>
