<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2018~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2018~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-06-24T16:02:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ip tcp_metric, 链路状态历史]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/07/30/kernel-tcp_metric/"/>
    <updated>2018-07-30T01:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/07/30/kernel-tcp_metric</id>
    <content type="html"><![CDATA[<h4>开关</h4>

<p>/proc/sys/net/ipv4/tcp_no_metrics_save</p>

<h4>命令</h4>

<p><a href="https://www.linux.org/docs/man8/ip-tcp_metrics.html">https://www.linux.org/docs/man8/ip-tcp_metrics.html</a></p>

<pre><code>    NAME
           ip-tcp_metrics - management for TCP Metrics

    SYNOPSIS
           ip [ OPTIONS ] tcp_metrics { COMMAND | help }


           ip tcp_metrics { show | flush } SELECTOR

           ip tcp_metrics delete [ address ] ADDRESS

           SELECTOR := [ [ address ] PREFIX ]
</code></pre>

<p>EXAMPLES
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   ip tcp_metrics show address 192.168.0.0/24
</span><span class='line'>       Shows the entries for destinations from subnet&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   ip tcp_metrics show 192.168.0.0/24
</span><span class='line'>   The same but address keyword is optional
</span><span class='line'>
</span><span class='line'>   ip tcp_metrics
</span><span class='line'>   Show all is the default action
</span><span class='line'>
</span><span class='line'>   ip tcp_metrics delete 192.168.0.1
</span><span class='line'>   Removes the entry for 192.168.0.1 from cache.
</span><span class='line'>
</span><span class='line'>   ip tcp_metrics flush 192.168.0.0/24
</span><span class='line'>   Removes entries for destinations from subnet
</span><span class='line'>
</span><span class='line'>   ip tcp_metrics flush all
</span><span class='line'>   Removes all entries from cache
</span><span class='line'>
</span><span class='line'>   ip -6 tcp_metrics flush all
</span><span class='line'>   Removes all IPv6 entries from cache keeping the IPv4 entries.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>--------------
</span><span class='line'>
</span><span class='line'>https://blog.csdn.net/dog250/article/details/52071132
</span><span class='line'>
</span><span class='line'>在inet_peer/tcp_metrics_hash中记录通往一个IP地址的链路状况历史的metrics信息
</span><span class='line'>
</span><span class='line'>#### 2.6.32版本内核
</span><span class='line'>
</span><span class='line'>路由cache项记录了一个标准的二元组，它记如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rtable
</span><span class='line'>{
</span><span class='line'>union
</span><span class='line'>{
</span><span class='line'>    struct dst_entry    dst;
</span><span class='line'>} u;
</span><span class='line'>...
</span><span class='line'>// 以下为记录二元组的信息
</span><span class='line'>__be32            rt_dst;    /* Path destination    */
</span><span class='line'>__be32            rt_src;    /* Path source        */
</span><span class='line'>int            rt_iif;
</span><span class='line'>
</span><span class='line'>/* Info on neighbour */
</span><span class='line'>__be32            rt_gateway;
</span><span class='line'>
</span><span class='line'>/* Miscellaneous cached information */
</span><span class='line'>__be32            rt_spec_dst; /* RFC1122 specific destination */
</span><span class='line'>// peer很重要！
</span><span class='line'>struct inet_peer    *peer; /* long-living peer info */
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>注意这个peer字段，很重要！peer结构体记如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct inet_peer
</span><span class='line'>{
</span><span class='line'>/* group together avl_left,avl_right,v4daddr to speedup lookups */
</span><span class='line'>struct inet_peer    *avl_left, *avl_right;
</span><span class='line'>__be32            v4daddr;    /* peer's address */
</span><span class='line'>__u16            avl_height;
</span><span class='line'>__u16            ip_id_count;    /* IP ID for the next packet */
</span><span class='line'>struct list_head    unused;
</span><span class='line'>__u32            dtime;        /* the time of last use of not
</span><span class='line'>                     * referenced entries */
</span><span class='line'>atomic_t        refcnt;
</span><span class='line'>atomic_t        rid;        /* Frag reception counter */
</span><span class='line'>__u32            tcp_ts;
</span><span class='line'>unsigned long        tcp_ts_stamp;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>已经初见雏形了，peer里面记录了一些关于tcp的描述信息，这个可以指导TCP进行拥塞控制。我需要在peer结构体里面添加诸如init_cwnd，RTT，ssthresh之类的就好了，这些信息从哪来？从上次的连接中来，或者从所有之前的连接数据的移动指数平均而来！
</span><span class='line'>
</span><span class='line'>在建立或者接受连接的时候，甚至在每次发送数据包的时候，都需要查找路由，然后在命中路由cache的时候，自然而然就取到了peer字段，然后就可以用peer字段里面的数据指导TCP连接了，可以说，这个数据仅仅对TCP初始拥塞控制参数有效，其后的数据还是在本连接内学习为好。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#### 3.10内核, inet_peer结构体依然存在，只是不再用它了
</span><span class='line'>
</span><span class='line'>路由cache在3.5之后被去除了，因此rtable也就和peer脱了钩。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rtable {
</span><span class='line'>struct dst_entry    dst;
</span><span class='line'>
</span><span class='line'>int            rt_genid;
</span><span class='line'>unsigned int        rt_flags;
</span><span class='line'>__u16            rt_type;
</span><span class='line'>__u8            rt_is_input;
</span><span class='line'>__u8            rt_uses_gateway;
</span><span class='line'>
</span><span class='line'>int            rt_iif;
</span><span class='line'>
</span><span class='line'>/* Info on neighbour */
</span><span class='line'>__be32            rt_gateway;
</span><span class='line'>
</span><span class='line'>/* Miscellaneous cached information */
</span><span class='line'>u32            rt_pmtu;
</span><span class='line'>
</span><span class='line'>struct list_head    rt_uncached;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>inet_peer从此变成了一个独立的东西，随用随取，取到则用，取不到则罢。inet_getpeer接口非常好用，它完成以下措施：
</span><span class='line'>
</span><span class='line'>1.如果二元组不存在，可以创建；
</span><span class='line'>
</span><span class='line'>2.如果二元组存在，则立即取到。
</span><span class='line'>
</span><span class='line'>这就是说，你可以调用唯一的这个接口完成查询，创建操作，至于销毁，完全靠系统的一个定时器来负责，完全不用用户操心。在认同了inet_peer框架带来的福音之后，我们再来看inet_peer结构体与2.6.32内核的不同：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct inet_peer {
</span><span class='line'>/* group together avl_left,avl_right,v4daddr to speedup lookups */
</span><span class='line'>struct inet_peer __rcu    *avl_left, *avl_right;
</span><span class='line'>struct inetpeer_addr    daddr;
</span><span class='line'>__u32            avl_height;
</span><span class='line'>
</span><span class='line'>// 此为关键！
</span><span class='line'>u32            metrics[RTAX_MAX];
</span><span class='line'>u32            rate_tokens;    /* rate limiting for ICMP */
</span><span class='line'>unsigned long        rate_last;
</span><span class='line'>union {
</span><span class='line'>    struct list_head    gc_list;
</span><span class='line'>    struct rcu_head     gc_rcu;
</span><span class='line'>};
</span><span class='line'>/*
</span><span class='line'> * Once inet_peer is queued for deletion (refcnt == -1), following fields
</span><span class='line'> * are not available: rid, ip_id_count
</span><span class='line'> * We can share memory with rcu_head to help keep inet_peer small.
</span><span class='line'> */
</span><span class='line'>union {
</span><span class='line'>    struct {
</span><span class='line'>        atomic_t            rid;        /* Frag reception counter */
</span><span class='line'>        atomic_t            ip_id_count;    /* IP ID for the next packet */
</span><span class='line'>    };
</span><span class='line'>    struct rcu_head         rcu;
</span><span class='line'>    struct inet_peer    *gc_next;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>/* following fields might be frequently dirtied */
</span><span class='line'>__u32            dtime;    /* the time of last use of not referenced entries */
</span><span class='line'>atomic_t        refcnt;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>注意metrics字段！看看RTAX_MAX即可：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;enum {
</span><span class='line'>RTAX_UNSPEC,
</span><span class='line'>#define RTAX_UNSPEC RTAX_UNSPEC
</span><span class='line'>RTAX_LOCK,
</span><span class='line'>#define RTAX_LOCK RTAX_LOCK
</span><span class='line'>RTAX_MTU,
</span><span class='line'>#define RTAX_MTU RTAX_MTU
</span><span class='line'>RTAX_WINDOW,
</span><span class='line'>#define RTAX_WINDOW RTAX_WINDOW
</span><span class='line'>RTAX_RTT,
</span><span class='line'>#define RTAX_RTT RTAX_RTT
</span><span class='line'>RTAX_RTTVAR,
</span><span class='line'>#define RTAX_RTTVAR RTAX_RTTVAR
</span><span class='line'>RTAX_SSTHRESH,
</span><span class='line'>#define RTAX_SSTHRESH RTAX_SSTHRESH
</span><span class='line'>RTAX_CWND,
</span><span class='line'>#define RTAX_CWND RTAX_CWND
</span><span class='line'>RTAX_ADVMSS,
</span><span class='line'>#define RTAX_ADVMSS RTAX_ADVMSS
</span><span class='line'>RTAX_REORDERING,
</span><span class='line'>#define RTAX_REORDERING RTAX_REORDERING
</span><span class='line'>RTAX_HOPLIMIT,
</span><span class='line'>#define RTAX_HOPLIMIT RTAX_HOPLIMIT
</span><span class='line'>RTAX_INITCWND,
</span><span class='line'>#define RTAX_INITCWND RTAX_INITCWND
</span><span class='line'>RTAX_FEATURES,
</span><span class='line'>#define RTAX_FEATURES RTAX_FEATURES
</span><span class='line'>RTAX_RTO_MIN,
</span><span class='line'>#define RTAX_RTO_MIN RTAX_RTO_MIN
</span><span class='line'>RTAX_INITRWND,
</span><span class='line'>#define RTAX_INITRWND RTAX_INITRWND
</span><span class='line'>__RTAX_MAX
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>#define RTAX_MAX (__RTAX_MAX - 1)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;几乎涵盖了大多数的TCP拥塞控制参数，这简直是荒漠甘泉！然而，然而我发现这个inet_peer框架几乎没有被调用的地方。这又是为何？这又一次在逼我重新造轮子吗？&hellip;从中，我看到了社区里面的点滴，inet_peer结构体依然存在，只是不再用它了，作为替代，作为替代一定有新的东西完成inet_peer的功能并且甚之！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.10内核中，tcp_metrics_hash占据了主角&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;不同于inet_peer，在既有的3.10内核中，tcp_metrics_hash占据了主角，仔细看看这个架构，感觉还是比inet_peer好，比之更加正式。这个接口是靠以下两个维护的：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tcp_get_metrics&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tcp_update_metrics&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个metrics框架也是一个类似inet_peer一样全局的信息记录，但是功能跟inet_peer有些重复。在TCP连接初始之时，调用tcp_get_metrics获取TCP拥塞参数，然后在TCP连接结束的时候，会调用tcp_update_metrics来更新metrics，这个貌似更加合理。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[IPIP实现IP隧道]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2018/07/23/kernel-ip_tunnel/"/&gt;
</span><span class='line'>&lt;updated&gt;2018-07-23T02:32:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2018/07/23/kernel-ip_tunnel&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://blog.csdn.net/kkdelta/article/details/39611061"&gt;https://blog.csdn.net/kkdelta/article/details/39611061&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IPIP实现IP隧道的简单示例&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;两台主机，A和B，每台主机由两块网卡，其中eth0在同一个网段，能够互相连通。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A的eth1和B的eth1分别在两个不同的网段。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A: eth0:192.168.9.5 eth1:192.168.8.5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;B: eth0:192.168.9.6 eth1:192.168.10.6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ip tun add lxT mode ipip remote 192.168.9.6 local 192.168.9.5
</span><span class='line'>ip link set lxT up
</span><span class='line'>ip add add 192.168.200.1 brd 255.255.255.255 peer 192.168.200.2 dev lxT
</span><span class='line'>ip ro add 192.168.200.0/24 via 192.168.200.1
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>B：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ip tun add lxT mode ipip remote 192.168.9.5 local 192.168.9.6
</span><span class='line'>ip link set lxT up
</span><span class='line'>ip add add 192.168.200.2 brd 255.255.255.255 peer 192.168.200.1 dev lxT
</span><span class='line'>ip ro add 192.168.200.0/24 via 192.168.200.2
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在A机器添加路由信息，指定到192.168.10.6通过lxT
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ip ro add 192.168.10.6/32 dev lxT
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在B机器添加路由信息，指定到192.168.8.5通过lxT
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ip ro add 192.168.8.5/32 dev lxT
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这样 192.168.8.5 和 192.168.10.6 就可以相互ping通了&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;部分参数&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ttl N   设置进入通道数据包的TTL为N。N是一个1—255之间的数字。0是一个特殊的值，表示这个数据包的TTL值是继承(inherit)的。ttl参数的缺省值是：inherit。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tos T或者dsfield T    设置进入通道数据包的TOS域，缺省是inherit。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mode MODE   设置通道模式。有效的模式包括：ipip、sit和gre。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nopmtudisc  在这个通道上禁止路径最大传输单元发现( Path MTU Discovery)。默认情况下，这个功能是打开的。注意：这个选项和固定的ttl是不兼容的，如果使用了固定的ttl参数，系统会打开路径最大传输单元发现( Path MTU Discovery)功能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ip tunnel gw&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;CLIENT:&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ifconfig eth1 11.0.0.20/24
</span><span class='line'>route add -net 14.0.0.0/24 gw 11.0.0.1 dev eth1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;RS:&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ifconfig eth0 192.168.1.191/24
</span><span class='line'>modprobe ipip # ip tun add tunl0 mode ipip remote any local any
</span><span class='line'>ip link set tunl0 mtu 1480 up
</span><span class='line'>ifconfig tunl0:0 14.0.0.1/24
</span><span class='line'>
</span><span class='line'>ip tun add tunl1 mode ipip remote 12.0.0.1 local 12.0.0.102 dev eth1          # better
</span><span class='line'>#ip tun add tunl1 mode ipip remote 192.168.1.102 local 192.168.1.191 dev eth0  # upload err
</span><span class='line'>ip link set tunl1 mtu 1480 up
</span><span class='line'>
</span><span class='line'>ip rule add from 14.0.0.1 table 1
</span><span class='line'>ip route add table 1 default dev tunl1
</span><span class='line'>
</span><span class='line'>find /proc/ -name rp_filter -exec cat {} \;
</span><span class='line'>find /proc/ -name rp_filter -exec sh -c "echo 0 &gt; {}" \;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;GW:&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    find /proc/ -name rp_filter -exec cat {} \;
</span><span class='line'>find /proc/ -name rp_filter -exec sh -c "echo 0 &gt; {}" \;
</span><span class='line'>
</span><span class='line'>echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</span><span class='line'>
</span><span class='line'>modprobe ipip # ip tun add tunl0 mode ipip remote any local any
</span><span class='line'>ip link set tunl0 mtu 1480 up
</span><span class='line'>
</span><span class='line'>ip tun add tunl1 mode ipip remote 192.168.1.191 local 192.168.1.102 dev enp3s0     # better
</span><span class='line'>#ip tun add tunl1 mode ipip remote 12.0.0.102 local 12.0.0.1 dev enx00e04b367c0c    # upload err?
</span><span class='line'>ip link set tunl1 mtu 1480 up
</span><span class='line'>
</span><span class='line'>ip rule add from 11.0.0.20 table 1
</span><span class='line'>ip route add table 1 default dev tunl1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[linux策略路由]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2018/07/23/kernel-ip_rule/"/&gt;
</span><span class='line'>&lt;updated&gt;2018-07-23T02:02:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2018/07/23/kernel-ip_rule&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h2&gt;&lt;a href="https://blog.csdn.net/guodong1010/article/category/6149064"&gt;https://blog.csdn.net/guodong1010/article/category/6149064&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://www.cnblogs.com/iceocean/articles/1594488.html"&gt;https://www.cnblogs.com/iceocean/articles/1594488.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;1.策略路由介绍&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;策略性是指对于IP包的路由是以网络管理员根据需要定下的一些策略为主要依据进行路由的。例如我们可以有这样的策略：“所有来直自网A的包，选择X路径；其他选择Y路径”，或者是“所有TOS为A的包选择路径F；其他选者路径K”。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Cisco 的网络操作系统 (Cisco IOS) 从11.0开始就采用新的策略性路由机制。而Linux是在内核2.1开始采用策略性路由机制的。策略性路由机制与传统的路由算法相比主要是引入了多路由表以及规则的概念。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2.linux方式&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2.1 多路由表（multiple Routing Tables)&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;传统的路由算法是仅使用一张路由表的。但是在有些情形底下，我们是需要使用多路由表的。例如一个子网通过一个路由器与外界相连，路由器与外界有两条线路相连，其中一条的速度比较快，一条的速度比较慢。对于子网内的大多数用户来说对速度并没有特殊的要求，所以可以让他们用比较慢的路由；但是子网内有一些特殊的用户却是对速度的要求比较苛刻，所以他们需要使用速度比较快的路由。如果使用一张路由表上述要求是无法实现的，而如果根据源地址或其它参数，对不同的用户使用不同的路由表，这样就可以大大提高路由器的性能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2.2 规则（rule)&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则是策略性的关键性的新的概念。我们可以用自然语言这样描述规则，例如我门可以指定这样的规则：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则一：“所有来自192.16.152.24的IP包，使用路由表10，本规则的优先级别是1500”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则二：“所有的包，使用路由表253，本规则的优先级别是32767”&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们可以看到，规则包含3个要素：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;什么样的包，将应用本规则（所谓的SELECTOR，可能是filter更能反映其作用）；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;符合本规则的包将对其采取什么动作（ACTION），例如用那个表；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本规则的优先级别。优先级别越高的规则越先匹配（数值越小优先级别越高）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;3. linux策略路由配置方式&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;传统的linux下配置路由的工具是route，而实现策略性路由配置的工具是iproute2工具包。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.1 接口地址的配置 IP Addr&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于接口的配置可以用下面的命令进行：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>Usage: ip addr [ add | del ] IFADDR dev STRING
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;例如：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>router&gt;# ip addr add 192.168.0.1/24 broadcast 192.168.0.255 label eth0 dev eth0
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面表示，给接口eth0赋予地址192.168.0.1 掩码是255.255.255.0(24代表掩码中1的个数)，广播地址是192.168.0.255&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.2 路由的配置 IP Route&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Linux最多可以支持255张路由表，其中有3张表是内置的：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;　　表255 本地路由表（Local table）本地接口地址，广播地址，已及NAT地址都放在这个表。该路由表由系统自动维护，管理员不能直接修改。
</span><span class='line'>
</span><span class='line'>　　表254 主路由表（Main table）如果没有指明路由所属的表，所有的路由都默认都放在这个表里，一般来说，旧的路由工具（如route）所添加的路由都会加到这个表。一般是普通的路由。
</span><span class='line'>
</span><span class='line'>　　表253 默认路由表（Default table）一般来说默认的路由都放在这张表，但是如果特别指明放的也可以是所有的网关路由。
</span><span class='line'>
</span><span class='line'>　　表 0 保留
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由配置命令的格式如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;Usage: ip route list SELECTOR&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ip route { change | del | add | append | replace | monitor } ROUTE
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果想查看路由表的内容，可以通过命令：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ip route list table table_number
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于路由的操作包括change、del、add 、append 、replace 、 monitor这些。例如添加路由可以用：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    router&gt;# ip route add 0/0 via 192.168.0.4 table main
</span><span class='line'>router&gt;# ip route add 192.168.3.0/24 via 192.168.0.3 table 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一条命令是向主路由表（main table）即表254添加一条路由，路由的内容是设置192.168.0.4成为网关。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第二条命令代表向路由表1添加一条路由，子网192.168.3.0（子网掩码是255.255.255.0）的网关是192.168.0.3。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在多路由表的路由体系里，所有的路由的操作，例如网路由表添加路由，或者在路由表里寻找特定的路由，需要指明要操作的路由表，所有没有指明路由表，默认是对主路由表（表254）进行操作。而在单表体系里，路由的操作是不用指明路由表的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.3 规则的配置 IP Rule&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在Linux里，总共可以定义232个优先级的规则，一个优先级别只能有一条规则，即理论上总共可以有条规则。其中有3个规则是默认的。命令用法如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    Usage: ip rule [ list | add | del ] SELECTOR ACTION
</span><span class='line'>
</span><span class='line'>SELECTOR := [ from PREFIX ] [ to PREFIX ] [ tos TOS ]
</span><span class='line'>    [ dev STRING ] [ pref NUMBER ]
</span><span class='line'>
</span><span class='line'>ACTION := [ table TABLE_ID ] [ nat ADDRESS ]
</span><span class='line'>    [ prohibit | reject | unreachable ]
</span><span class='line'>    [ flowid CLASSID ]
</span><span class='line'>
</span><span class='line'>TABLE_ID := [ local | main | default | new | NUMBER
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先我们可以看看路由表默认的所有规则：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    root@netmonster# ip rule list
</span><span class='line'>0: from all lookup local
</span><span class='line'>32766: from all lookup main
</span><span class='line'>32767: from all lookup default
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则0，它是优先级别最高的规则，规则规定，所有的包，都必须首先使用local表（254）进行路由。本规则不能被更改和删除。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则32766，规定所有的包，使用表main进行路由。本规则可以被更改和删除。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则32767，规定所有的包，使用表default进行路由。本规则可以被更改和删除。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在默认情况下进行路由时，首先会根据规则0在本地路由表里寻找路由，如果目的地址是本网络，或是广播地址的话，在这里就可以找到合适的路由；如果路由失败，就会匹配下一个不空的规则，在这里只有32766规则，在这里将会在主路由表里寻找路由;如果失败，就会匹配32767规则，即寻找默认路由表。如果失败，路由将失败。重这里可以看出，策略性路由是往前兼容的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;还可以添加规则：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>router&gt;# ip rule add [from 0/0] table 1 pref 32800
</span><span class='line'>router &gt;#ip rule add from 192.168.3.112/32 [tos 0x10] table ２ pref 1500prohibit
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一条命令将向规则链增加一条规则，规则匹配的对象是所有的数据包，动作是选用路由表1的路由，这条规则的优先级是32800。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第二条命令将向规则链增加一条规则，规则匹配的对象是IP为192.168.3.112，tos等于0x10的包，使用路由表2，这条规则的优先级是1500，动作是。添加以后，我们可以看看系统规则的变化。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    router&gt;# ip rule
</span><span class='line'>0: from all lookup local
</span><span class='line'>1500 from 192.168.3.112/32 [tos 0x10] lookup 2
</span><span class='line'>32766: from all lookup main
</span><span class='line'>32767: from all lookup default
</span><span class='line'>32800: from all lookup 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面的规则是以源地址为关键字，作为是否匹配的依据的。除了源地址外，还可以用以下的信息：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;From &ndash; 源地址&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;To &ndash; 目的地址（这里是选择规则时使用，查找路由表时也使用）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Tos &ndash; IP包头的TOS（type of sevice）域&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Dev &ndash; 物理接口&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Fwmark &ndash; 防火墙参数&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;采取的动作除了指定表，还可以指定下面的动作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Table 指明所使用的表&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Nat 透明网关&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Action prohibit 丢弃该包，并发送 COMM.ADM.PROHIITED的ICMP信息&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Reject 单纯丢弃该包&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Unreachable丢弃该包，并发送 NET UNREACHABLE的ICMP信息&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;4.策略路由的应用&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.1 基于源地址选路（ Source-Sensitive Routing）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果一个网络通过两条线路接入互联网，一条是比较快的ADSL，另外一条是比较慢的普通的调制解调器。这样的话，网络管理员既可以提供无差别的路由服务，也可以根据源地址的不同，使一些特定的地址使用较快的线路，而普通用户则使用较慢的线路，即基于源址的选路。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.2 根据服务级别选路（ Quality of Service）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;网络管理员可以根据IP报头的服务级别域，对于不同的服务要求可以分别对待对于传送速率、吞吐量以及可靠性的有不同要求的数据报根据网络的状况进行不同的路由。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.3 节省费用的应用&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;网络管理员可以根据通信的状况，让一些比较大的阵发性通信使用一些带宽比较高但是比较贵的路径一段短的时间，然后让基本的通信继续使用原来比较便宜的基本线路。例如，管理员知道，某一台主机与一个特定的地址通信通常是伴随着大量的阵发性通信的，那么网络管理员可以安排一些策略，使得这些主机使用特别的路由，这些路由是按需拨号，带宽比较高的线路，通信完成以后就停止使用，而普通的通信则不受影响。这样既提高网络的性能，又能节省费用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.4 负载平衡（Load Sharing）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;根据网络交通的特征，网络管理员可以在不同的路径之间分配负荷实现负载平衡。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;5 linux下策略路由的实现&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在Linux下，策略性路由是由RPDB实现的。对于RPDB的内部机制的理解，可以加深对于策略性路由使用的理解。文件主要包含：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    fib_hash.c
</span><span class='line'>fib_rules.c
</span><span class='line'>fib_sematic
</span><span class='line'>fib_frontend.c
</span><span class='line'>route.c
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;RDPB主要由多路由表和规则组成。路由表以及对其的操作和其对外的接口是整个RPDB的核心部分。路由表主要由table，zone，node这些主要的数据结构构成。对路由表的操作主要包含物理的操作以及语义的操作。路由表除了向IP层提供路由寻找的接口以外还必须与几个元素提供接口：与用户的接口（即更改路由）、proc的接口、IP层控制接口、以及和硬件的接口（网络接口的改变会导致路由表内容的改变）。处在RDPB的中心的规则，由规则选取表。IP层并不直接使用路由表，而是通过一个路由适配层,路由适配层提供为IP层提供高性能的路由服务。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;5.1 路由表（Fib Table）&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;数据结构：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在整个策略性路由的框架里，路由表是最重要的的数据结构，我们在上面以及对路由表的概念和结构进行了清楚的说明。Linux里通过下面这些主要的数据结构进行实现的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    主要数据结构      作用          位置
</span><span class='line'>struct fib_table    路由表           ip_fib.h 116
</span><span class='line'>struct fn_hash      路由表的哈希数据    fib_hash.c 104
</span><span class='line'>struct fn_zone      zone域         fib_hash.c 85
</span><span class='line'>struct fib_node     路由节点        fib_hash.c 68
</span><span class='line'>struct fib_info     路由信息        ip_fib.h 57
</span><span class='line'>struct fib_result   路由结果        ip_fib.h 86
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;数据结构之间的主要关系如下。路由表由路由表号以及路由表的操作函数指针还有表数据组成。这里需要注意的是，路由表结构里并不直接定义zone域，而是通过一个数据指针指向fn_hash。只有当zone里有数据才会连接到fn_zone_list里。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;系统的所有的路由表由数组变量&lt;code&gt;*fib_tables[RT_TABLE_MAX+1]&lt;/code&gt;维护，其中系统定义RT_TABLE_MAX为254，也就是说系统最大的路由表为255张，所有的路由表的操作都是对这个数组进行的。。同时系统还定义了三长路由表&lt;code&gt;*local_table&lt;/code&gt;; &lt;code&gt;*main_table&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;路由表的操作：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Linux策略路由代码的主要部分是对路由表的操作。对于路由表的操作，物理操作是直观的和易于理解的。对于表的操作不外乎就是添加、删除、更新等的操作。还有一种操作，是所谓的语义操作，语义操作主要是指诸如计算下一条的地址，把节点转换为路由项，寻找指定信息的路由等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1、物理操作(operation)：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由表的物理操作主要包括如下这些函数：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由标操作实现函数 位置&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;新建路由表&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;删除路由表&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;搜索路由 fn_hash_lookup fib_hash.c 269&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;插入路由到路由表 fn_hash_insert fib_hash.c 341&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;删除路由表的路由 fn_hash_delete&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fn_hash_dump&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_hash.c 433&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_hash.c 614&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;更新路由表的路由 fn_hash_flush fib_hash.c 729&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;显示路由表的路由信息 fn_hash_get_info fib_hash.c 750&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;选择默认路由 fn_hash_select_default fib_hash.c 842&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2、语义操作(semantics operation)：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;语义操作并不涉及路由表整体框架的理解，而且，函数名也是不言自明的，所以请大家参考fib_semantics.c。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3、接口(front end)&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于路由表接口的理解，关键在于理解那里有&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IP&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先是路由表于IP层的接口。路由在目前linux的意义上来说，最主要的还是IP层的路由，所以和IP层的的接口是最主要的接口。和ip层的衔接主要是向IP层提供寻找路由、路由控制、寻找指定ip的接口。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Fil_lookup&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_rt_ioctl fib_frontend.c 286;&ldquo; f&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_dev_find 145&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Inet&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由表还必须提供配置接口，即用户直接操作路由的接口，例如增加和删除一条路由。当然在策略性路由里，还有规则的添加和删除。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;inet_rtm_delroute 351&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;inet_rtm_newroute 366&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;inet_check_attr 335&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proc&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在 /proc/net/route 里显示路由信息。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_get_procinfo&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4、网络设备（net dev event）&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由是和硬件关联的，当网络设备启动或关闭的时候，必须通知路由表的管理程序，更新路由表的信息。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_disable_ip 567&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_inetaddr_event 575&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_netdev_event&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5、内部维护（ magic）&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面我们提到，本地路由表（local table）的维护是由系统自动进行的。也就是说当用户为硬件设置IP地址等的时候，系统自动在本地路由表里添加本地接口地址以及广播地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_magic 417&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_add_ifaddr 459&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_del_ifaddr 498&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Rule&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;1、数据结构&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则在fib_rules.c的52行里定义为 struct fib_rule。而RPDB里所有的路由是保存在101行的变量fib_rules里的，注意这个变量很关键，它掌管着所有的规则，规则的添加和删除都是对这个变量进行的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2、系统定义规则：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fib_rules被定义以后被赋予了三条默认的规则：默认规则，本地规则以及主规则。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;u 本地规则local_rule&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static struct fib_rule local_rule = {
</span><span class='line'>    r_next: &amp;main_rule, /*下一条规则是主规则*/
</span><span class='line'>    r_clntref: ATOMIC_INIT(2),
</span><span class='line'>    r_table: RT_TABLE_LOCAL, /*指向本地路由表*/
</span><span class='line'>    r_action: RTN_UNICAST, /*动作是返回路由*/
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;u 主规则main_rule&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static struct fib_rule main_rule = {
</span><span class='line'>    r_next: &amp;default_rule,/*下一条规则是默认规则*/
</span><span class='line'>    r_clntref: ATOMIC_INIT(2),
</span><span class='line'>    r_preference: 0x7FFE, /*默认规则的优先级32766*/
</span><span class='line'>    r_table: RT_TABLE_MAIN, /*指向主路由表*/
</span><span class='line'>    r_action: RTN_UNICAST, /*动作是返回路由*/
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;u 默认规则default rule&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static struct fib_rule default_rule = {
</span><span class='line'>    r_clntref: ATOMIC_INIT(2),
</span><span class='line'>    r_preference: 0x7FFF,/*默认规则的优先级32767*/
</span><span class='line'>    r_table: RT_TABLE_DEFAULT,/*指默认路由表*/
</span><span class='line'>    r_action: RTN_UNICAST,/*动作是返回路由*/
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;规则链的链头指向本地规则。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;RPDB的中心函数fib_lookup&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;现在到了讨论RPDB的实现的的中心函数fib_lookup了。RPDB通过提供接口函数fib_lookup，作为寻找路由的入口点，在这里有必要详细讨论这个函数，下面是源代码：，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    310 int fib_lookup(const struct rt_key *key, struct fib_result *res)
</span><span class='line'>311 {
</span><span class='line'>312     int err;
</span><span class='line'>313     struct fib_rule *r, *policy;
</span><span class='line'>314     struct fib_table *tb;
</span><span class='line'>315
</span><span class='line'>316     u32 daddr = key-&gt;dst;
</span><span class='line'>317     u32 saddr = key-&gt;src;
</span><span class='line'>318
</span><span class='line'>321     read_lock(&amp;fib_rules_lock);
</span><span class='line'>322     for (r = fib_rules; r; r=r-&gt;r_next) {/*扫描规则链fib_rules里的每一条规则直到匹配为止*/
</span><span class='line'>323         if (((saddr^r-&gt;r_src) &amp; r-&gt;r_srcmask) ||
</span><span class='line'>324             ((daddr^r-&gt;r_dst) &amp; r-&gt;r_dstmask) ||
</span><span class='line'>325 #ifdef CONFIG_IP_ROUTE_TOS
</span><span class='line'>326             (r-&gt;r_tos &amp;&amp; r-&gt;r_tos != key-&gt;tos) ||
</span><span class='line'>327 #endif
</span><span class='line'>328 #ifdef CONFIG_IP_ROUTE_FWMARK
</span><span class='line'>329             (r-&gt;r_fwmark &amp;&amp; r-&gt;r_fwmark != key-&gt;fwmark) ||
</span><span class='line'>330 #endif
</span><span class='line'>331             (r-&gt;r_ifindex &amp;&amp; r-&gt;r_ifindex != key-&gt;iif))
</span><span class='line'>332         continue;/*以上为判断规则是否匹配，如果不匹配则扫描下一条规则，否则继续*/
</span><span class='line'>335         switch (r-&gt;r_action) {/*好了，开始处理动作了*/
</span><span class='line'>336         case RTN_UNICAST:/*没有设置动作*/
</span><span class='line'>337         case RTN_NAT: /*动作nat ADDRESS*/
</span><span class='line'>338             policy = r;
</span><span class='line'>339             break;
</span><span class='line'>340         case RTN_UNREACHABLE: /*动作unreachable*/
</span><span class='line'>341             read_unlock(&amp;fib_rules_lock);
</span><span class='line'>342             return -ENETUNREACH;
</span><span class='line'>343         default:
</span><span class='line'>344             case RTN_BLACKHOLE:/* 动作reject */
</span><span class='line'>345             read_unlock(&amp;fib_rules_lock);
</span><span class='line'>346             return -EINVAL;
</span><span class='line'>347         case RTN_PROHIBIT:/* 动作prohibit */
</span><span class='line'>348             read_unlock(&amp;fib_rules_lock);
</span><span class='line'>349             return -EACCES;
</span><span class='line'>350         }
</span><span class='line'>351         /*选择路由表*/
</span><span class='line'>352         if ((tb = fib_get_table(r-&gt;r_table)) == NULL)
</span><span class='line'>353             continue;
</span><span class='line'>        /*在路由表里寻找指定的路由*/
</span><span class='line'>354         err = tb-&gt;tb_lookup(tb, key, res);
</span><span class='line'>355         if (err == 0) {/*命中目标*/
</span><span class='line'>356             res-&gt;r = policy;
</span><span class='line'>357             if (policy)
</span><span class='line'>358                 atomic_inc(&amp;policy-&gt;r_clntref);
</span><span class='line'>359             read_unlock(&amp;fib_rules_lock);
</span><span class='line'>360             return 0;
</span><span class='line'>361         }
</span><span class='line'>362         if (err &lt; 0 &amp;&amp; err != -EAGAIN) {/*路由失败*/
</span><span class='line'>363             read_unlock(&amp;fib_rules_lock);
</span><span class='line'>364             return err;
</span><span class='line'>365         }
</span><span class='line'>366     }
</span><span class='line'>368     read_unlock(&amp;fib_rules_lock);
</span><span class='line'>369     return -ENETUNREACH;
</span><span class='line'>370 }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上面的这段代码的思路是非常的清晰的。首先程序从优先级高到低扫描所有的规则，如果规则匹配，处理该规则的动作。如果是普通的路由寻址或者是nat地址转换的换，首先从规则得到路由表，然后对该路由表进行操作。这样RPDB终于清晰的显现出来了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;5.2 IP层路由适配（IP route）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由表以及规则组成的系统，可以完成路由的管理以及查找的工作，但是为了使得IP层的路由工作更加的高效，linux的路由体系里，route.c里完成大多数IP层与RPDB的适配工作，以及路由缓冲（route cache）的功能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;调用接口&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IP层的路由接口分为发送路由接口以及接收路由接口：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;发送路由接口&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IP层在发送数据时如果需要进行路由工作的时候，就会调用ip_route_out函数。这个函数在完成一些键值的简单转换以后，就会调用ip_route_output_key函数，这个函数首先在缓存里寻找路由，如果失败就会调用ip_route_output_slow，ip_route_output_slow里调用fib_lookup在路由表里寻找路由，如果命中，首先在缓存里添加这个路由，然后返回结果。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_route_out route.h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_route_output_key route.c 1984;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_route_output_slow route.c 1690;"&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;接收路由接口&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IP层接到一个数据包以后，如果需要进行路由，就调用函数ip_route_input，ip_route_input现在缓存里寻找，如果失败则ip_route_inpu调用ip_route_input_slow， ip_route_input_slow里调用fib_lookup在路由表里寻找路由，如果命中，首先在缓存里添加这个路由，然后返回结果。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_route_input_slow route.c 1312;&ldquo; f&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ip_route_input route.c 1622;&ldquo; f&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;cache&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;路由缓存保存的是最近使用的路由。当IP在路由表进行路由以后，如果命中就会在路由缓存里增加该路由。同时系统还会定时检查路由缓存里的项目是否失效，如果失效则清除。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[路由：反向路径过滤 reverse path filt]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2018/07/23/kernel-rpf/"/&gt;
</span><span class='line'>&lt;updated&gt;2018-07-23T01:11:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2018/07/23/kernel-rpf&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    find /proc/ -name rp_filter -exec cat {} \;
</span><span class='line'>
</span><span class='line'>find /proc/ -name rp_filter -exec sh -c "echo 0 &gt; {}" \;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://blog.chinaunix.net/uid-20417916-id-3050031.html"&gt;http://blog.chinaunix.net/uid-20417916-id-3050031.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;反向路径过滤 &ndash; reverse path filter&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、原理&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;先介绍个非对称路由的概念&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;参考《Understanding Linux Network Internals》三十章，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;30.2. Essential Elements of Routing&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Symmetric routes and asymmetric routes&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Usually, the route taken from Host A to Host B is the same as the route used to get back from Host B to Host A; the route is then called symmetric . In complex setups, the route back may be different; in this case, it is asymmetric.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;关于反向路径过滤，参考《Understanding Linux Network Internals》三十一章，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;31.7. Reverse Path Filtering&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;We saw what an asymmetric route is in the section &ldquo;Essential Elements of Routing in Chapter 30. Asymmetric routes are not common, but may be necessary in certain cases. The default behavior of Linux is to consider asymmetric routing suspicious and therefore to drop any packet whose source IP address is not reachable through the device the packet was received from, according to the routing table.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;However, this behavior can be tuned via /proc on a per-device basis, as we will see in Chapter 36. See also the section &ldquo;Input Routing&rdquo; in Chapter 35.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;二、检查流程&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果一台主机（或路由器）从接口A收到一个包，其源地址和目的地址分别是10.3.0.2和10.2.0.2，
</span><span class='line'>即, 如果启用反向路径过滤功能，它就会以为关键字去查找路由表，如果得到的输出接口不为A，则认为反向路径过滤检查失败，它就会丢弃该包。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;关于反向路径过滤，ipv4中有个参数，这个参数的说明在Documentation/networking/ip-sysctl.txt中。</span></code></pre></td></tr></table></div></figure>
    rp_filter - INTEGER
        0 - No source validation.
        1 - Strict mode as defined in RFC3704 Strict Reverse Path
            Each incoming packet is tested against the FIB and if the interface
            is not the best reverse path the packet check will fail.
            By default failed packets are discarded.
        2 - Loose mode as defined in RFC3704 Loose Reverse Path
            Each incoming packet&rsquo;s source address is also tested against the FIB
            and if the source address is not reachable via any interface
            the packet check will fail.</p>

<pre><code>    Current recommended practice in RFC3704 is to enable strict mode
    to prevent IP spoofing from DDos attacks. If using asymmetric routing
    or other complicated routing, then loose mode is recommended.

    The max value from conf/{all,interface}/rp_filter is used
    when doing source validation on the {interface}.

    Default value is 0. Note that some distributions enable it
    in startup scripts.
</code></pre>

<pre><code>
#### 三、源代码分析

git commit 373da0a2a33018d560afcb2c77f8842985d79594
</code></pre>

<pre><code>net/ipv4/fib_frontend.c
 192 int fib_validate_source(struct sk_buff *skb, __be32 src, __be32 dst, u8 tos,
 193                         int oif, struct net_device *dev, __be32 *spec_dst,
 194                         u32 *itag)
 195 {
             // 是否启用反向路径过滤
 216         /* Ignore rp_filter for packets protected by IPsec. */
 217         rpf = secpath_exists(skb) ? 0 : IN_DEV_RPFILTER(in_dev);

             // 检查路由表
             // 注意这里的源地址贺目的地址是反过来的，
             // 看看其他函数是如何调用fib_validate_source()就明白了。
 227         if (fib_lookup(net, &amp;fl4, &amp;res))
 228                 goto last_resort;

             // 运行到这里，说明反向路由是可达的
             // 下面分成两种情况检查输出设备是否就是输入设备
 237 #ifdef CONFIG_IP_ROUTE_MULTIPATH
             // 启用多路径时，任意一个匹配，就用它了
 238         for (ret = 0; ret &lt; res.fi-&gt;fib_nhs; ret++) {
 239                 struct fib_nh *nh = &amp;res.fi-&gt;fib_nh[ret];
 240
 241                 if (nh-&gt;nh_dev == dev) {
 242                         dev_match = true;
 243                         break;
 244                 }
 245         }
 246 #else
 247         if (FIB_RES_DEV(res) == dev)
 248                 dev_match = true;
 249 #endif
 250         if (dev_match) {
             // 反向路径过滤检查成功了，返回
 251                 ret = FIB_RES_NH(res).nh_scope &gt;= RT_SCOPE_HOST;
 252                 return ret;
 253         }
 254         if (no_addr)
 255                 goto last_resort;
             // 运行到这里，说明反向路径检查是失败的，
             // 如果rpf为1，表示反向路径检查必须成功才能正常返回，
             // 否则只好返回错误。
 256         if (rpf == 1)
 257                 goto e_rpf;
 278 e_rpf:
 279         return -EXDEV;
</code></pre>

<p>```</p>

<h4>五、如何解决</h4>

<p>两种方法：</p>

<h5>1 On R2:</h5>

<p>ip route add 10.3.0.0/16 via 10.2.0.2</p>

<p>增加一条关于10.3.0.0/16子网的路由。</p>

<h5>2 On R2:</h5>

<p>/etc/sysctl.conf</p>

<p>net.ipv4.conf.default.rp_filter = 0</p>

<p>禁用反向路径检查。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[参数ip_early_demux]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/07/09/kernel-ip_early_demux/"/>
    <updated>2018-07-09T01:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/07/09/kernel-ip_early_demux</id>
    <content type="html"><![CDATA[<p>ip_early_demux 内核中默认是1（开启），
所以在ip_rcv_finish 到 tcp_v4_rcv 中 skb->destructor = sock_edemux;</p>

<p>且很大概率 skb->_skb_refdst = (unsigned long)dst | SKB_DST_NOREF; // #define SKB_DST_NOREF   1UL</p>

<p>对于NOREF的dst，如果要缓存(tcp_prequeue()或sk_add_backlog()), 则要调skb_dst_force(skb);
<code>
    static inline void skb_dst_force(struct sk_buff *skb)
    {
        if (skb_dst_is_noref(skb)) {
            WARN_ON(!rcu_read_lock_held());
            skb-&gt;_skb_refdst &amp;= ~SKB_DST_NOREF;
            dst_clone(skb_dst(skb));
        }   
    }
</code></p>

<hr />

<p><a href="http://blog.chinaunix.net/uid-20662820-id-4935075.html">http://blog.chinaunix.net/uid-20662820-id-4935075.html</a></p>

<p>The routing cache has been suppressed in Linux 3.6 after a 2 years effort by David and the other Linux kernel developers.
The global cache has been suppressed and some stored information have been moved to more separate resources like socket.</p>

<p>Metrics were stored in the routing cache entry which has disappeared. So it has been necessary to introduce a separate TCP metrics cache.
A netlink interface is available to update/delete/add entry to the cache.</p>

<p>总结起来说就是Linux内核从3.6开始将全局的route cache全部剔除，取而代之的是各个子系统（tcp协议栈）内部的cache，由各个子系统维护。</p>

<p>当内核接收到一个TCP数据包来说，首先需要查找skb对应的路由，然后查找skb对应的socket。David Miller 发现这样做是一种浪费，对于属于同一个socket(只考虑ESTABLISHED情况）的路由是相同的，那么如果能将skb的路由缓存到socket（skb->sk)中，就可以只查找查找一次skb所属的socket，就可以顺便把路由找到了，于是David Miller提交了一个patch ipv4: Early TCP socket demux</p>

<pre><code>    (commit 41063e9dd11956f2d285e12e4342e1d232ba0ea2)
    ipv4: Early TCP socket demux.

        Input packet processing for local sockets involves two major demuxes.
        One for the route and one for the socket.

        But we can optimize this down to one demux for certain kinds of local
        sockets.

        Currently we only do this for established TCP sockets, but it could
        at least in theory be expanded to other kinds of connections.

        If a TCP socket is established then it's identity is fully specified.

        This means that whatever input route was used during the three-way
        handshake must work equally well for the rest of the connection since
        the keys will not change.

        Once we move to established state, we cache the receive packet's input
        route to use later.

        Like the existing cached route in sk-&gt;sk_dst_cache used for output
        packets, we have to check for route invalidations using dst-&gt;obsolete
        and dst-&gt;ops-&gt;check().

        Early demux occurs outside of a socket locked section, so when a route
        invalidation occurs we defer the fixup of sk-&gt;sk_rx_dst until we are
        actually inside of established state packet processing and thus have
        the socket locked.
</code></pre>

<p>然而Davem添加的这个patch是有局限的，因为这个处理对于转发的数据包，增加了一个在查找路由之前查找socket的逻辑，可能导致转发效率的降低。
Alexander Duyck提出增加一个ip_early_demux参数来控制是否启动这个特性。</p>

<pre><code>    This change is meant to add a control for disabling early socket demux.
    The main motivation behind this patch is to provide an option to disable
    the feature as it adds an additional cost to routing that reduces overall
    throughput by up to 5%. For example one of my systems went from 12.1Mpps
    to 11.6 after the early socket demux was added. It looks like the reason
    for the regression is that we are now having to perform two lookups, first
    the one for an established socket, and then the one for the routing table.

    By adding this patch and toggling the value for ip_early_demux to 0 I am
    able to get back to the 12.1Mpps I was previously seeing.
</code></pre>

<pre><code>    static int ip_rcv_finish(struct sk_buff *skb)
    {
        const struct iphdr *iph = ip_hdr(skb);
        struct rtable *rt;

        if (sysctl_ip_early_demux &amp;&amp; !skb_dst(skb) &amp;&amp; skb-&gt;sk == NULL) {
            const struct net_protocol *ipprot;
            int protocol = iph-&gt;protocol;

            ipprot = rcu_dereference(inet_protos[protocol]);
            if (ipprot &amp;&amp; ipprot-&gt;early_demux) {
                ipprot-&gt;early_demux(skb);
                /* must reload iph, skb-&gt;head might have changed */
                iph = ip_hdr(skb);
            }
        }

        /*
         * Initialise the virtual path cache for the packet. It describes
         * how the packet travels inside Linux networking.
         */
        if (!skb_dst(skb)) {
            int err = ip_route_input_noref(skb, iph-&gt;daddr, iph-&gt;saddr,
                               iph-&gt;tos, skb-&gt;dev);
            if (unlikely(err)) {
                if (err == -EXDEV)
                    NET_INC_STATS_BH(dev_net(skb-&gt;dev),
                         LINUX_MIB_IPRPFILTER);
                goto drop;
            }
        }
        ......
</code></pre>

<p>ip_early_demux就这样诞生了，目前内核中默认是1（开启），但是如果你的数据流量中60%以上都是转发的，那么请关闭这个特性。</p>

<pre><code>    void tcp_v4_early_demux(struct sk_buff *skb)
    {
        const struct iphdr *iph;
        const struct tcphdr *th;
        struct sock *sk;

        if (skb-&gt;pkt_type != PACKET_HOST)
            return;

        if (!pskb_may_pull(skb, skb_transport_offset(skb) + sizeof(struct tcphdr)))
            return;

        iph = ip_hdr(skb);
        th = tcp_hdr(skb);

        if (th-&gt;doff &lt; sizeof(struct tcphdr) / 4)
            return;

        sk = __inet_lookup_established(dev_net(skb-&gt;dev), &amp;tcp_hashinfo,
                           iph-&gt;saddr, th-&gt;source,
                           iph-&gt;daddr, ntohs(th-&gt;dest),
                           skb-&gt;skb_iif);
        if (sk) {
            skb-&gt;sk = sk;
            skb-&gt;destructor = sock_edemux;
            if (sk-&gt;sk_state != TCP_TIME_WAIT) {
                struct dst_entry *dst = sk-&gt;sk_rx_dst;

                if (dst)
                    dst = dst_check(dst, 0);
                if (dst &amp;&amp;
                    inet_sk(sk)-&gt;rx_dst_ifindex == skb-&gt;skb_iif)
                    skb_dst_set_noref(skb, dst);
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
