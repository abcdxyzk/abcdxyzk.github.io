<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2019~06 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2019~06/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T12:57:39+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[发送arp请求报文]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/06/05/arp-2/"/>
    <updated>2019-06-05T21:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/06/05/arp-2</id>
    <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/13560258/2084527">https://blog.51cto.com/13560258/2084527</a></p>

<p><a href="https://blog.csdn.net/yldfree/article/details/83181283">https://blog.csdn.net/yldfree/article/details/83181283</a></p>

<p><img src="/images/kernel/2019-06-05-3.png" alt="" /></p>

<p><img src="/images/kernel/2019-06-05-4.png" alt="" /></p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;net/ethernet.h&gt;
    #include &lt;netpacket/packet.h&gt;
    #include &lt;string.h&gt;
    #include &lt;net/if.h&gt;

    #define SRC_MAC  { 0x00,0x0C,0x29,0x6F,0x57,0xE7 }//源MAC地址
    #define DEST_MAC { 0x00,0x0C,0x29,0xD3,0xD6,0xF7 }//目的MAC地址

    struct arppacket
    {
        unsigned char dest_mac[ETH_ALEN];//接收方MAC
        unsigned char src_mac[ETH_ALEN];//发送方MAC
        unsigned short type;         //0x0806是ARP帧的类型值
        unsigned short ar_hrd;//硬件类型 - 以太网类型值0x1
        unsigned short ar_pro;//上层协议类型 - IP协议(0x0800)
        unsigned char  ar_hln;//MAC地址长度
        unsigned char  ar_pln;//IP地址长度
        unsigned short ar_op;//操作码 - 0x1表示ARP请求包,0x2表示应答包
        unsigned char  ar_sha[ETH_ALEN];//发送方mac
        unsigned char ar_sip[4];//发送方ip
        unsigned char ar_tha[ETH_ALEN];//接收方mac
        unsigned char ar_tip[4];//接收方ip
    } __attribute__ ((__packed__));

    int main(int argc,char *argv[])
    {
        int fd = 0;
        struct in_addr s,r;
        struct sockaddr_ll sl;

        struct arppacket arp={
            DEST_MAC,
            SRC_MAC,
            htons(0x0806),
            htons(0x01),
            htons(0x0800),
            ETH_ALEN,
            4,
            htons(0x01),
            SRC_MAC,
            {0},
            DEST_MAC,
            {0}
        };

        fd = socket(AF_PACKET,SOCK_RAW,htons(ETH_P_ALL));
        if (fd &lt; 0) {
            printf("socket error\n");
            return -1;
        }
        memset(&amp;sl, 0, sizeof(sl));

        inet_aton("192.168.11.220", &amp;s);
        memcpy(&amp;arp.ar_sip, &amp;s, sizeof(s));

        inet_aton("192.168.11.192", &amp;r);
        memcpy(&amp;arp.ar_tip, &amp;r, sizeof(r));


        sl.sll_family = AF_PACKET;
        sl.sll_ifindex = IFF_BROADCAST;

        while (1) {
            if (sendto(fd, &amp;arp, sizeof(arp), 0, (struct sockaddr*)&amp;sl, sizeof(sl)) &lt;= 0)
                printf("send error\n");
            else
                printf("send success\n");

            sleep(1);
        }

        close(fd);

        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 网络系统学习： Neighboring Subsystem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/06/05/arp/"/>
    <updated>2019-06-05T20:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/06/05/arp</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/root45/article/details/7034843">https://blog.csdn.net/root45/article/details/7034843</a></p>

<h3>1. 概述</h3>

<p>在数据包的发送过程中，通过路由获得下一跳的 L3 地址，下一步是获得此 L3 地址所对应的 L2 地址，这个过程称为 neighbor discovery。IPv4对应的是 ARP 协议，IPv6 对应的是Neighbor Discovery 协议。</p>

<p>Linux 中，用于处理neighbor discovery的模块称为 neighboring subsystem。它分为两层，底层是通用框架 neighboring infrastructure，在此之上，又有不同的具体实现，例如ARP 模块、 ND 模块等。</p>

<p>Neighboring subsystem 的主要任务包括：</p>

<p>1、Neighbour discovery；通过 L3 地址找到 L2 地址；为发送数据提供保障</p>

<p>2、接收 neighbor 包并进行处理</p>

<p>3、提供 cache，以加速 neighboring 的过程</p>

<p>4、为系统中其它模块需要 neighboring discovery 而提供 APIs</p>

<h3>2. Neighboring infrastructure</h3>

<h4>2.1 主要数据结构：</h4>

<p>1、  struct neighbour</p>

<p>最主要的结构</p>

<p>2、  struct neigh_table</p>

<p>用于管理 struct neighbour</p>

<p>3、  struct neigh_ops</p>

<p>用于映射到 L2  的输出函数</p>

<p>4、  struct neigh_parms</p>

<p>5、  struct hh_cache</p>

<h4>2.2 数据结构关系：</h4>

<p>下图是 neighboring subsystem 中数据结构关系图，其关系可描述如下：</p>

<p><img src="/images/kernel/2019-06-05-1.jpg" alt="" /></p>

<p>1、系统通过 neigh_tables 来管理各种具体的 neigh_table，包括 arp_tbl 和 nd_table</p>

<p>2、Neigh_table 通过 hash_buckets 来维护一个 neigh_table 的 hash 表。可以迅速的增加、删除、查找  neighbour</p>

<p>3、neighbour  的作用？？？ Neighbour 的 parms 指向 neigh_parms 结构，此结构用于 neighbour 的维护，例如重传次数，状态转换时间，垃圾收集时间等。</p>

<p>4、neighbour 的 ops 指向 neigh_ops 结构，此结构用于？？？</p>

<p>5、neighbour 的 hh 指向 hh_cache，此结构用于 cache L2 地址，以加速 L3 到 L2 的映射过程。</p>

<h4>2.3 工具函数</h4>

<pre><code>    struct neighbour *neigh_alloc(struct neigh_table *tbl)
</code></pre>

<p>创建一个 neighbour，并初始化，它只被  neighbour_create() 调用</p>

<pre><code>    struct neighbour * neigh_create(struct neigh_table *tbl, const void *pkey, struct net_device *dev)
</code></pre>

<p>调用 neigh_alloc() 分配一个 neighboure ，然后进一步调用具体协议的构造函数，以及具体设备的特殊的设置函数；最后，将此 neighbour 加入 neighbour table 中
它主要被  <code>__neigh_lookup()</code> 调用，也就是说，当在 neighbour table 中找不到 neighbour 的时候，调用此函数来创建一个新的 neighbour</p>

<pre><code>    struct neighbour *neigh_lookup(struct neigh_table *tbl, const void *pkey, struct net_device *dev)
</code></pre>

<p>在 neighbour table 中寻找特定的 neighbour</p>

<pre><code>    static void neigh_timer_handler(unsigned long arg)
</code></pre>

<p>这是一个定时器处理函数。当某个 neighbour 超时后，由此函数处理。</p>

<pre><code>    int neigh_update(struct neighbour *neigh, const u8 *lladdr, u8 new, int override, int arp)
</code></pre>

<pre><code>    void neigh_table_init(struct neigh_table *tbl)
</code></pre>

<p>用于初始化一个 neigh_table。</p>

<p>每个 table  有一个定时器函数，用于垃圾收集，也就是清除那些超时的 neighbour.</p>

<pre><code>    init_timer(&amp;tbl-&gt;gc_timer);
    tbl-&gt;lock = RW_LOCK_UNLOCKED;
    tbl-&gt;gc_timer.data = (unsigned long)tbl;
    tbl-&gt;gc_timer.function = neigh_periodic_timer;
    tbl-&gt;gc_timer.expires = now + 1;
    add_timer(&amp;tbl-&gt;gc_timer);
</code></pre>

<p>这个 neigh_periodic_timer 实际是</p>

<p>static void SMP_TIMER_NAME(neigh_periodic_timer)(unsigned long arg)</p>

<pre><code>    int neigh_table_clear(struct neigh_table *tbl)
</code></pre>

<p>Neigh_table 通过 hash 表来维护 neighbour</p>

<pre><code>    struct neighbour            **hash_buckets;
</code></pre>

<p>具体的协议实现需要提高 hash 函数，例如　 arp_hash()</p>

<p>neigh_hash_alloc 用于创建  hash 表</p>

<h3>3. Neighbour 系统的初始化</h3>

<p>全局变量 neigh_tables 维护系统中所有的 neigh_table</p>

<pre><code>    static struct neigh_table *neigh_tables;
</code></pre>

<p>IPv4 ARP 的初始化：<br/>
  调用neigh_table_init() 对 arp_tbl 初始化<br/>
  调用dev_add_pack(&amp;arp_packet_type) ，注册 ARP 包接收函数</p>

<p>IPv6 Neighborour Discovery 的初始化：<br/>
  调用 neigh_table_init(&amp;nd_tbl) 对 nd_tbl 初始化<br/>
  IPv6 通过 ICMPv6 来处理 ND 的包，没有专门的 ARP包类型。</p>

<p>发送数据包过程中，在路由过程中，与 neighbour 结构进行关联，路由结束后，数据包交给 neighboring subsystem 进一步处理。</p>

<h3>4. Routing与 Neighboring subsystem的关联</h3>

<h4>4.1 Neighbour与路由的关联</h4>

<p>在路由过程中，需要寻找或创建 struct dst_entry （另一种形式是 struct rtable）。 dst_entry 通过neighbour 域与 struct neighbour 关联。</p>

<h4>4.1.1 关联的目的</h4>

<p> 每个 dst_entry 对应一个 neighbour，这样在路由之后，立刻能找到对应的 neighbour，此后，数据包通过 neighbour->output 送到链路层。</p>

<p>以 UDP 包的发送过程为例，这个过程如下：</p>

<pre><code>    Udp_sendmsg() ==&gt; ip_route_output() ==&gt; ip_route_output_slow()
</code></pre>

<p>Ip_route_output_slow() ：
  当查不到路由 cache 后，根据 route rule ，通过 dst_alloc() 创建一个 dst_entry 结构，这同时也是一个  rtable 结构，然后将 dst_entry  的 output 指向 ip_output()</p>

<pre><code>    rth-&gt;u.dst.output=ip_output;
</code></pre>

<p>  此后，udp_sendmsg 继续调用 ip_build_xmit() 来发包
<code>
    Udp_sendmsg() ==&gt; Ip_build_xmit() ==&gt; output_maybe_reroute ==&gt; skb-&gt;dst-&gt;output()
</code></p>

<p>这里的 output 就是 ip_output()</p>

<pre><code>    ip_output ==&gt; __ip_finish_output() ==&gt; ip_finish_output2() ==&gt; dst-&gt;neighbour-&gt;output()
</code></pre>

<p>因此，最终数据包是通过 neighbour->output() 往下送的。</p>

<h4>4.1.2 关联的过程</h4>

<p>IPv4 代码实现：ip_route_output_slow</p>

<p>在路由 cache 中查不到路由结果后，查找 route rule ，如果没有合适的路由规则，则失败返回。否则，通过 dst_alloc() 创建一个 dst_entry 结构，这同时也是一个  rtable 结构，此 rtable 结构被挂入 hash 表中。这时候我们已经有了下一跳的 L3地址。（也可能没有，例如绑定 interface 的情况，需要看代码是如何处理的）。</p>

<p>下一步，要通过arp_bind_neighbour 将 rtable 与 neighbour 进行绑定</p>

<pre><code>    rt_intern_hash  arp_bind_neighbour()
</code></pre>

<p>arp_bind_neighbour() 根据给定的下一跳 L3 地址，到 arp hash 表中找 neighbour，找到的话，dst->neighbour 就有了归宿；找不到，只好调用 neighbour_create() 创建一个新的 neighbour，这是在__neigh_lookup_errno() 中完成的</p>

<pre><code>    arp_bind_neighbour() ==&gt; __neigh_lookup_errno() ==&gt; neigh_lookup() ==&gt; neigh_create()。
</code></pre>

<pre><code>    ip_route_output_slow()
    fib_lookup()
    rt_intern_hash()
    arp_bind_neighbour()
</code></pre>

<h4>4.2 Neighbour 的构造和设置</h4>

<p>neigh_alloc() 用于分配 neighbour 结构</p>

<p>neigh_create() 进一步设置此结构，对于 ARP 来说，它调用 arp_constructor() ，在这个函数里面，对 neighbour 的 ops 域和 output 域进行设置。</p>

<p>Ops 域，根据底层 driver 的类型进行不同的设置，</p>

<p>  对于没有链路层地址的，指向arp_direct_ops<br/>
  对于没有链路层 cache 的，指向arp_generic_ops<br/>
  对于有链路层 cache 的， 指向arp_hh_ops</p>

<p>对于以太网驱动程序，它的 net_device 结构在初始化的时候，已经有了默认的 hard_header 和 hard_header_cache 函数，
<code>
    ether_setup()
    dev-&gt;hard_header        = eth_header;
    dev-&gt;hard_header_cache         = eth_header_cache;
</code></p>

<p>因此，默认情况下，它的 ops 指向 arp_hh_ops()</p>

<p>对于 output 域，关键是看 neighbour 的状态，如果是有效状态，则设置为 ops->connected_output()，这样可以加快速度，否则设置为 ops->output()，这样，需要进行 neighbor discovery 的处理。</p>

<p>对于 ARP 来说，无论是 output ，还是 connect_output都是指向 neigh_resolve_output()。（原因？）</p>

<p>neigh_resolve_output 进行 neighbor discovery 的过程。</p>

<p>在理解 neighbor discovery 之前，我们需要先理解 neighbour 的状态转换机制。</p>

<h3>5. Neighbour 的状态转换</h3>

<h4>5.1 Neighbour 的状态</h4>

<p>Neighbour 结构可以处于不同状态， 包括：</p>

<pre><code>    #define NUD_INCOMPLETE 0x01
    #define NUD_REACHABLE   0x02
    #define NUD_STALE  0x04
    #define NUD_DELAY 0x08
    #define NUD_PROBE 0x10
    #define NUD_FAILED            0x20
    #define NUD_NOARP            0x40
    #define NUD_PERMANENT  0x80
    #define NUD_NONE  0x00
</code></pre>

<h4>5.2  Neighbour 的状态转换过程</h4>

<p>Linux 为它维护一个状态机，状态机通过 timer 以及数据包的收发来驱动。它可以描述如下：</p>

<p>1、  neighbour 创建后，处于 NONE 状态</p>

<p>2、  neigh_resolve_output() 调用neigh_event_send() 来触发状态转换；对于 NONE 状态来说，调用__neigh_event_send()。</p>

<p>__neigh_event_send()将 neighbour 状态设置为 INCOMPLETE，然后设置 timer，timer 的超时时间为neigh->parms->retrans_time。
然后调用neigh->ops->solicit 发送 neighbour discovery 包。对 ARP 来说就是 arp_solicit()。
对于正常收到响应包的处理，我们在 ARP 包接收部分进行分析，总之状态会转换为 REACHABLE。
如果超时未收到包，则由超时处理函数neigh_timer_handler 进行处理</p>

<p>3、  neigh_timer_handler() 会重传请求包，重传次数由neigh_max_probes() 计算。如果超过重传次数，则状态转为 FAILED</p>

<p>4、  处于 REACHABLE 状态的 neighbour，有一定的有效期（参数？），超过这个有效期后，由neigh_periodic_timer() 进行处理。</p>

<p>5、  第一个有效期是 reachable_time（对 ARP，这个值是 30 HZ，也就是 300ms），这个时间以后，</p>

<p>6、     STALE 状态的转换比较难理解。Neighbour 处于 REACHABLE 状态后，如果在一段时间内，没有收到过 reply ，那么则怀疑此 neighbor 不可达，需要将它的状态转为 STALE，但是又不立刻进行转换。（在哪些情况下进行状态转换？）</p>

<p>在 STABLE 状态下，再次进入__neigh_event_send的时候，则将之状态转为 DELAY，并启动定时器。（超时时间是delay_probe_time，默认为 50ms）
在 STALE 状态，并不进行 ARP 解析，数据包仍然可以直接发送出去。</p>

<p>7、  在 DELAY 状态，数据可以直接发送出去，但是一旦定时器超时，则转入 PROBE 状态。如果在此期间收到过 reply 包，则转为 REACHABLE。</p>

<p>8、  在 PROBE 状态，数据仍然可以直接发送出去。但是在此状态，开始 ARP　探测，而且仅探测一次，如果失败，则转为 FAILED；如果收到 reply 包，则转为 REACHABLE。</p>

<p>9、  neigh_periodic_timer 会定时把 FAILED 状态的 neighbour 清理掉</p>

<p><img src="/images/kernel/2019-06-05-2.jpg" alt="" /></p>

<p>Linux 还定义了几种状态组合的变量：</p>

<pre><code>    #define NUD_IN_TIMER        (NUD_INCOMPLETE|NUD_DELAY|NUD_PROBE)

    INCOMPLETE、 DELAY、PROBE 状态，有定时器在工作

    #define NUD_VALID          (NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE|NUD_PROBE|NUD_STALE|NUD_DELAY)

    以上状态，数据包都直接发送，不进行 ARP 解析过程。

    当 neighbour 未处于 VALID 状态时，数据包无法发送，只能送入 neighbour-&gt; arp_queue 中。（可以从__neigh_event_send看到相关代码）。

    #define NUD_CONNECTED  (NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE)
</code></pre>

<p>以上状态，数据包不仅直接发送，而且可以肯定这个 neighboring 是可达的。</p>

<h4>5.3 一个实际的 case</h4>

<p>在笔者参与的一个嵌入式无线产品开发过程中，应用需要每隔 3s 发送一个 UDP 包出去，这个 UDP　包是单向的，也就是说只向外发送，并没有响应的包。在测试过程中发现，在每次发送 UDP 包之前，都会先有一个 ARP 查询，这种没有必要的 ARP 包不仅影响性能，也很耗电。</p>

<p>分析其原因，发现：</p>

<p>在一次成功的 ARP 解析后，neighbour  的有效期大概为 300 ms。</p>

<p>在第一次发送 UDP 包之前，因为 Neighbour Cache 中没有数据，所以需要发送 ARP 查询包，以获得下一跳的 MAC 地址。当收到 ARP 应答后，找到对应的 neighbour，然后将它的状态转为 STALE，然后立刻转为 DELAY，并启动 50ms 的定时器，这时候，那个导致 ARP 查询的 UDP 包可以使用 neighbour 的映射并发送出去，但是由于这个 UDP 包并不要求回应，因此50 ms 后，neighbour 的状态转为 PROBE。这样，3s 以后，下一个 UDP 包又会导致一次 ARP 查询。</p>

<p>解决方案：</p>

<p>由于此嵌入式设备的下一跳肯定是网关，因此可以先通过 ARP 查询获得网关 的 L2 地址，然后在嵌入式设备上设置一条静态 ARP 规则，这样，就再也不会有这种无实际意义的 ARP 包出现了。</p>

<h3>6.  Neighbor Discovery 的 过程</h3>

<p>从上面的状态机可以看到，当 neighbour 处于 INCOMPLETE、PROBE 状态的时候，会发送 Neighbor Solicit 包：</p>

<p>例如，通过 neigh_resolve_output() 导致新创建一个 neighbour 结构后，最后会调用 neigh->ops->solicit() 来发送 NS 包，对于 ARP 来说，就是 arp_solicit()：</p>

<pre><code>    neigh_resolve_output() ==&gt;  neigh_event_send() ==&gt; __neigh_event_send()  ==&gt; neigh-&gt;ops-&gt;solicit(neigh, skb);  ==&gt;  arp_solicit()
</code></pre>

<p>arp_solicit 调用 arp_send() 构造并发送 ARP request：</p>

<p>对于 INCOMPLETE 状态，需要发送一个新的 ARP 请求，它的目的 MAC 地址是广播地址，这样链路上所有节点都能收到此广播包；</p>

<p>对于 PROBE 状态， neighbour 中已经有了对端的 MAC 地址，此时发 ARP request 的目的只是验证这个映射还是有效的，因此此时发出的 ARP 包的目的 MAC 地址可以从 neighbour 中取到，是一个单播的 ARP 包。</p>

<h3>7.  ARP 包的接收处理过程</h3>

<pre><code>    Arp_rcv()  ==&gt;  arp_process()
</code></pre>

<p>如果收到的是 ARP request，且是到本机的，调用neigh_event_ns ，以创建一个新的 neighbour 结构，然后调用arp_send() 回应一个 ARP reply。
如果收到的是 ARP reply，那么调用__neigh_lookup 去查找是否有对应的 neighbour，如果没有，则丢弃此包；否则调用neigh_update() 将此 neighbour 状态更新为 REACHABLE。同时，所有在此 neighbour 上等待的数据包被发送</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取 rip 寄存器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/06/05/this-ip/"/>
    <updated>2019-06-05T10:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/06/05/this-ip</id>
    <content type="html"><![CDATA[<h4><em>THIS_IP</em></h4>

<pre><code>    #define _THIS_IP_  ({ __label__ __here; __here: (unsigned long)&amp;&amp;__here; })
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tar 备份系统]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/06/05/backup-system/"/>
    <updated>2019-06-05T10:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/06/05/backup-system</id>
    <content type="html"><![CDATA[<h4>tar备份系统</h4>

<pre><code>    tar -czpvf /baksys/backup.tgz  /  --exclude=/baksys --exclude=/lost+found --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* --exclude=/dev/* --exclude=/media/* --exclude=/mnt/*

    -p, --preserve-permissions, --same-permissions 解压文件权限信息(默认只为超级用户服务)。 
        此参数用于保持文件权限信息，是必要的。
    --exclude= 参数列出了不需要备份的目录，可以根据实际情况自行调整，
        注意：不要忘记备份/boot目录或分区，不要备份存储备份文件的目录。 
        特别注意：--exclude=后面的目录名使用绝对路径或相对路径的方式应与需备份目录的书写方式一致即要么都用绝对路径要么都使用相对路径，
        否则会导致exclude失效，而且目录一定不能使用/xxx/的形式，必须是/xxx/*或/xxx的形式，否则也失效。 
    注意，虽然/proc的目录下内容不可备份，但是/proc目录还是应该备份的，否则需要在迁移解压缩后手动mkdir增加/proc目录；
        其他几个亦同，但是/lost+found目录非linux系统需要，可全不备份。
</code></pre>

<h4>恢复系统</h4>

<pre><code>    mkfs.ext4 /dev/sda1
    mount /dev/sda1 /mnt/
    cd /mnt
    tar -xzpvf backup.tgz
</code></pre>

<h4>修复MBR、grub</h4>

<p>从ubuntu u盘执行：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /mnt
</span><span class='line'>mount /dev/sda1 /mnt
</span><span class='line'>cd /mnt&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;grub-install --recheck --root-directory=/mnt /dev/sda 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>注意：
</span><span class='line'>
</span><span class='line'>1. ubuntu系统的 grub-install 64位的不能执行？？？ u盘中的grub-install i386可以执行？？？
</span><span class='line'>
</span><span class='line'>2. 临时进系统方法：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;insmod linux
</span><span class='line'>ls
</span><span class='line'>root=(hd0,1)
</span><span class='line'>linux /boot/vmlinuz root=/dev/sda1
</span><span class='line'>initrd /boot/initrd
</span><span class='line'>boot
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# win7
</span><span class='line'>set root=(hd0,1)
</span><span class='line'>chainloader +1
</span><span class='line'>boot
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[硬盘安装windows及MBR、grub修复]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2019/06/04/install-win/"/&gt;
</span><span class='line'>&lt;updated&gt;2019-06-04T21:12:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2019/06/04/install-win&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;硬盘安装win7&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    mount -o loop win7.iso /mnt
</span><span class='line'>mount -t ntfs /dev/sda3 /tmp/kk
</span><span class='line'>cp -r /mnt/* /tmp/kk/
</span><span class='line'>umount /tmp/kk
</span><span class='line'>
</span><span class='line'>reboot
</span><span class='line'>
</span><span class='line'>https://askubuntu.com/questions/254491/failed-to-get-canonical-path-of-cow
</span><span class='line'>重启后来到 grub 的引导菜单，按 c 键进入命令行模式：
</span><span class='line'>grub&gt; set root=(hd1,2)
</span><span class='line'>grub&gt; insmod ntfs
</span><span class='line'>grub&gt; ntldr /bootmgr
</span><span class='line'>grub&gt; boot
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;起因：从 u盘 安装极其缓慢，为什么？？？&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;从 /dev/nvmessd 的grub进入没有 ntldr 命令 ？？？&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;从 /dev/sda2 的grub进入有 ntldr 命令&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;技嘉主板先制作usb启动盘，加入技嘉驱动 &lt;a href="http://download.gigabyte.cn/FileList/Utility/mb_utility_windowsimagetool.zip"&gt;http://download.gigabyte.cn/FileList/Utility/mb_utility_windowsimagetool.zip&lt;/a&gt; 方法：&lt;a href="http://www.gigabyte.cn/WebPage/-79/usb.html"&gt;http://www.gigabyte.cn/WebPage/-79/usb.html&lt;/a&gt; 。再从u盘 cp * /tmp/kk/&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;修复MBR、grub&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从ubuntu u盘执行：</span></code></pre></td></tr></table></div></figure>
    mkdir /mnt
    mount /dev/sda2 /mnt
    cd /mnt</p>

<pre><code>grub-install --recheck --root-directory=/mnt /dev/sda 
</code></pre>

<pre><code>
注意：

1. ubuntu系统的 grub-install 64位的不能执行？？？ u盘中的grub-install i386可以执行？？？

2. 临时进系统方法：
</code></pre>

<pre><code>insmod linux
ls
root=(hd0,1)
linux /boot/vmlinuz root=/dev/sda1
initrd /boot/initrd
boot
</code></pre>

<pre><code></code></pre>

<pre><code># win7
set root=(hd0,1)
chainloader +1
boot
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
