<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2019~08 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2019~08/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-05-16T17:25:48+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GPU温控]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/08/22/amdgpu_pwm/"/>
    <updated>2019-08-22T16:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/08/22/amdgpu_pwm</id>
    <content type="html"><![CDATA[<p>目录是 /sys/class/drm/card0/device/hwmon/hwmonX/</p>

<p>换内核之类的操作会改变 hwmonX</p>

<h4>调节脚本</h4>

<pre><code>    #!/usr/bin/python

    import commands;
    import time;

    t0=0
    temp_inc=[90000, 85000, 80000, 70000, 60000, 50000, 40000, 00000];
    pwm_inc=[ 245,   205,   165,   125,   105,   85,    65,    45];

    temp_dec=[89000, 84000, 79000, 67000, 57000, 47000, 37000, 00000];
    pwm_dec=[ 245,   205,   165,   125,   105,   85,    65,    45];


    global pwm1
    pwm1=0;

    def set_pwm(newpwm):
        global pwm1
        if newpwm != pwm1:
            cmd="echo "+str(newpwm)+" &gt; /sys/class/drm/card0/device/hwmon/hwmon3/pwm1";
            r,o = commands.getstatusoutput(cmd);
            pwm1=newpwm;

            #cmd1="cat /sys/class/drm/card0/device/hwmon/hwmon3/pwm1";
            #r,o = commands.getstatusoutput(cmd1);
                    #print cmd
                    #print r, o

    r,o = commands.getstatusoutput("echo 1 &gt; /sys/class/drm/card0/device/hwmon/hwmon3/pwm1_enable");
    while 1:
        r,t = commands.getstatusoutput("cat /sys/class/drm/card0/device/hwmon/hwmon3/temp1_input");
        t = int(t);
        if t - t0 &gt; 0:
            for i in range(0, 8):
                if t &gt;= temp_inc[i]:
                    break;
            #print "inc ", t, temp_inc[i], pwm_inc[i]
            set_pwm(pwm_inc[i]);
        elif t - t0 &lt; 0:
            for i in range(0, 8):
                if t &gt;= temp_dec[i]:
                    break;
            #print "dec ", t, temp_dec[i], pwm_dec[i]
            set_pwm(pwm_dec[i]);

        t0 = t;
        time.sleep(10);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 编译内核、模块]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/08/22/ubuntu-kernel/"/>
    <updated>2019-08-22T11:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/08/22/ubuntu-kernel</id>
    <content type="html"><![CDATA[<p><a href="https://launchpad.net/ubuntu/+source/linux/+changelog">https://launchpad.net/ubuntu/+source/linux/+changelog</a></p>

<h4>4.15.0</h4>

<p><a href="https://launchpad.net/ubuntu/bionic/+source/linux/+changelog">https://launchpad.net/ubuntu/bionic/+source/linux/+changelog</a></p>

<p><a href="https://packages.ubuntu.com/xenial/linux-source-4.15.0">https://packages.ubuntu.com/xenial/linux-source-4.15.0</a><br/>
<a href="http://security.ubuntu.com/ubuntu/pool/main/l/linux-hwe/linux-source-4.15.0_4.15.0-58.64~16.04.1_all.deb">http://security.ubuntu.com/ubuntu/pool/main/l/linux-hwe/linux-source-4.15.0_4.15.0-58.64~16.04.1_all.deb</a></p>

<p><a href="https://launchpad.net/ubuntu/xenial/amd64/linux-image-unsigned-4.15.0-58-generic-dbgsym">https://launchpad.net/ubuntu/xenial/amd64/linux-image-unsigned-4.15.0-58-generic-dbgsym</a><br/>
<a href="http://launchpadlibrarian.net/436393485/linux-image-unsigned-4.15.0-58-generic-dbgsym_4.15.0-58.64~16.04.1_amd64.ddeb">http://launchpadlibrarian.net/436393485/linux-image-unsigned-4.15.0-58-generic-dbgsym_4.15.0-58.64~16.04.1_amd64.ddeb</a></p>

<p><a href="https://launchpad.net/ubuntu/bionic/amd64/linux-image-unsigned-4.15.0-58-generic-dbgsym">https://launchpad.net/ubuntu/bionic/amd64/linux-image-unsigned-4.15.0-58-generic-dbgsym</a><br/>
<a href="http://launchpadlibrarian.net/436226708/linux-image-unsigned-4.15.0-58-generic-dbgsym_4.15.0-58.64_amd64.ddeb">http://launchpadlibrarian.net/436226708/linux-image-unsigned-4.15.0-58-generic-dbgsym_4.15.0-58.64_amd64.ddeb</a></p>

<h4>4.18.0</h4>

<p><a href="https://launchpad.net/ubuntu/xenial/+source/linux/+changelog">https://launchpad.net/ubuntu/xenial/+source/linux/+changelog</a></p>

<p><a href="https://packages.ubuntu.com/bionic/linux-source-4.18.0">https://packages.ubuntu.com/bionic/linux-source-4.18.0</a><br/>
<a href="http://security.ubuntu.com/ubuntu/pool/main/l/linux-hwe/linux-source-4.18.0_4.18.0-25.26~18.04.1_all.deb">http://security.ubuntu.com/ubuntu/pool/main/l/linux-hwe/linux-source-4.18.0_4.18.0-25.26~18.04.1_all.deb</a></p>

<p><a href="https://launchpad.net/ubuntu/bionic/amd64/linux-image-4.18.0-25-generic-dbgsym">https://launchpad.net/ubuntu/bionic/amd64/linux-image-4.18.0-25-generic-dbgsym</a><br/>
<a href="http://launchpadlibrarian.net/430863032/linux-image-4.18.0-25-generic-dbgsym_4.18.0-25.26~18.04.1_amd64.ddeb">http://launchpadlibrarian.net/430863032/linux-image-4.18.0-25-generic-dbgsym_4.18.0-25.26~18.04.1_amd64.ddeb</a></p>

<h4>gcc 7 编译内核模块时无法找到 stdarg.h 的问题</h4>

<p><a href="https://blog.gloriousdays.pw/2018/09/09/cannot-find-stdarg-h-on-linux-kernel-4-15-with-gcc-7-3/">https://blog.gloriousdays.pw/2018/09/09/cannot-find-stdarg-h-on-linux-kernel-4-15-with-gcc-7-3/</a></p>

<p>这是一个非常奇怪的错误，出现在 Ubuntu 18.04 上，默认安装的内核版本是 4.15，gcc 是 7.3，在编译内核模块时报错：
<code>
    In file included from ./include/linux/list.h:9:0,
                     from ./include/linux/module.h:9,
                     from /root/Software/newbbr/tcp_tsunami.c:59:
    ./include/linux/kernel.h:6:10: fatal error: stdarg.h: No such file or directory
     #include &lt;stdarg.h&gt;
              ^~~~~~~~~~
    compilation terminated.
</code></p>

<p>gcc 认为找不到 stdarg.h。看这个错误的位置，个人认为应该不是我配置的问题或者是我代码的问题，搜索了一下，也有很多在 4.15 内核上出现的同样错误。目前没有什么很好的解决方案，暂时性的方案是在编译的 Makefile 里面加一行：
<code>
    ccflags-y=-I/usr/lib/gcc/x86_64-linux-gnu/7/include
</code>
如果是 gcc 8，就相应把版本改成 8 就可以了</p>

<h4>编译内核</h4>

<pre><code>    sudo apt-get install libncurses-dev flex bison openssl-dev libssl-dev dkms libelf-dev

    make bindeb-pkg -j8
</code></pre>

<p>按这里没成功 <a href="https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel">https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel</a></p>

<h4>编译perf</h4>

<pre><code>    cd tools/perf
    make
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPU温控]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/08/21/intel_pstate/"/>
    <updated>2019-08-21T16:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/08/21/intel_pstate</id>
    <content type="html"><![CDATA[<h4>常规调节</h4>

<pre><code>    echo 72 &gt; /sys/devices/system/cpu/intel_pstate/max_perf_pct
    echo 1  &gt; /sys/devices/system/cpu/intel_pstate/no_turbo
</code></pre>

<h4>参数解释</h4>

<p><a href="https://www.kernel.org/doc/Documentation/cpu-freq/intel-pstate.txt">https://www.kernel.org/doc/Documentation/cpu-freq/intel-pstate.txt</a></p>

<p>/sys/devices/system/cpu/intel_pstate/</p>

<pre><code>          max_perf_pct: Limits the maximum P-State that will be requested by
          the driver. It states it as a percentage of the available performance. The
          available (P-State) performance may be reduced by the no_turbo
          setting described below.

          min_perf_pct: Limits the minimum P-State that will be requested by
          the driver. It states it as a percentage of the max (non-turbo)
          performance level.

          no_turbo: Limits the driver to selecting P-State below the turbo
          frequency range.

          turbo_pct: Displays the percentage of the total performance that
          is supported by hardware that is in the turbo range. This number
          is independent of whether turbo has been disabled or not.

          num_pstates: Displays the number of P-States that are supported
          by hardware. This number is independent of whether turbo has
          been disabled or not.

    For example, if a system has these parameters:
        Max 1 core turbo ratio: 0x21 (Max 1 core ratio is the maximum P-State)
        Max non turbo ratio: 0x17
        Minimum ratio : 0x08 (Here the ratio is called max efficiency ratio)

    Sysfs will show :
        max_perf_pct:100, which corresponds to 1 core ratio
        min_perf_pct:24, max_efficiency_ratio / max 1 Core ratio
        no_turbo:0, turbo is not disabled
        num_pstates:26 = (max 1 Core ratio - Max Efficiency Ratio + 1)
        turbo_pct:39 = (max 1 core ratio - max non turbo ratio) / num_pstates

    Refer to "Intel庐 64 and IA-32 Architectures Software Developer鈥檚 Manual
    Volume 3: System Programming Guide" to understand ratios.

    There is one more sysfs attribute in /sys/devices/system/cpu/intel_pstate/
    that can be used for controlling the operation mode of the driver:

          status: Three settings are possible:
          "off"     - The driver is not in use at this time.
          "active"  - The driver works as a P-state governor (default).
          "passive" - The driver works as a regular cpufreq one and collaborates
                      with the generic cpufreq governors (it sets P-states as
                      requested by those governors).
          The current setting is returned by reads from this attribute.  Writing one
          of the above strings to it changes the operation mode as indicated by that
          string, if possible.  If HW-managed P-states (HWP) are enabled, it is not
          possible to change the driver's operation mode and attempts to write to
          this attribute will fail.
</code></pre>

<p><a href="https://huataihuang.gitbooks.io/cloud-atlas/os/linux/kernel/cpu/intel_pstate.html">https://huataihuang.gitbooks.io/cloud-atlas/os/linux/kernel/cpu/intel_pstate.html</a></p>

<p><a href="http://www.litrin.net/2018/12/28/cpu%E7%9A%84%E7%94%B5%E6%BA%90%E7%8A%B6%E6%80%81%E5%88%86%E7%B1%BB/">http://www.litrin.net/2018/12/28/cpu%E7%9A%84%E7%94%B5%E6%BA%90%E7%8A%B6%E6%80%81%E5%88%86%E7%B1%BB/</a></p>

<p><img src="/images/system/2019-08-21-1.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 16.04 & 18.04]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/08/21/ubuntu-base/"/>
    <updated>2019-08-21T11:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/08/21/ubuntu-base</id>
    <content type="html"><![CDATA[<h4>删除snap，snap会自动更新，严重占带宽</h4>

<pre><code>    snap list
    sudo snap remove gtk-common-themes
    ...
    sudo apt-get remove snapd

    df -h | grep snap
    sudo systemctl stop snap-core-6350.mount
    sudo systemctl disable snap-core-6350.mount
</code></pre>

<h4>ssh 保持连接</h4>

<p>服务端
<code>
    ClientAliveInterval 60
    ClientAliveCountMax 1
</code>
SSH Server 每 60 秒就会自动发送一个信号给 Client，客户端没有回应数超过 ClientAliveCountMax 时，才会断开连接。</p>

<p>客户端
<code>
    TCPKeepAlive yes
    ServerAliveInterval 300
</code>
前一个参数是说要保持连接，后一个参数表示每过5分钟发一个数据包到服务器</p>

<p>命令行进行设定即：
<code>
    ssh -o TCPKeepAlive=yes -o ServerAliveInterval=300 root@1.2.3.4
</code></p>

<h4>dns 命令</h4>

<pre><code>    sudo apt-get install pppconfig
    /etc/init.d/dns-clean

    systemctl stop systemd-resolved
    systemctl start systemd-resolved

    systemd-resolve --statistics
    systemd-resolve --status
    systemd-resolve --flush-caches
</code></pre>

<h4>代理设置</h4>

<pre><code>    # cat /etc/apt/apt.conf
    Acquire::https::Proxy "http://proxy.proxy.com:8080";
    # err? http_proxy=http://proxy.proxy.com:8080
    # err? https_proxy=http://proxy.proxy.com:8080

    # cat /etc/environment
    http_proxy=http://proxy.proxy.com:8080
    https_proxy=http://proxy.proxy.com:8080
    no_proxy=localhost,127.0.0.0/8,::1,*.pp.com,*.oa.com

    # cat /etc/systemd/system/docker.service.d/http-proxy.conf
    [Service]
    Environment="HTTP_PROXY=http://proxy.proxy.com:8080"
</code></pre>

<h4>amdgpu.dc</h4>

<p>VGA,DIV-D接口 4.15.0 以后内核黑屏，需要设置amdgpu.dc=0
HDMI,DP接口支持音频，需要设置amdgpu.dc=1</p>

<h4>注释掉下面这行将会显示引导菜单</h4>

<pre><code>    #GRUB_HIDDEN_TIMEOUT=0
</code></pre>

<h4>设定默认启动项 /etc/default/grub</h4>

<pre><code>    # 用数字
    GRUB_DEFAULT=0

    # 最近启动
    GRUB_DEFAULT=saved
    GRUB_SAVEDEFAULT=true

    # 指定内核
    GRUB_DEFAULT="gnulinux-advanced-999d2fc9-3d7b-4654-a25c-4f5d4472a23b&gt;gnulinux-4.15.0-55-generic-advanced-999d2fc9-3d7b-4654-a25c-4f5d4472a23b"
</code></pre>

<p>Warning: Please don&rsquo;t use old title <code>Ubuntu, with Linux 4.15.0-55-generic' for GRUB_DEFAULT, use</code>Advanced options for Ubuntu>Ubuntu, with Linux 4.15.0-55-generic' (for versions before 2.00) or `gnulinux-advanced-999d2fc9-3d7b-4654-a25c-4f5d4472a23b>gnulinux-4.15.0-55-generic-advanced-999d2fc9-3d7b-4654-a25c-4f5d4472a23b' (for 2.00 or later)</p>

<h4>卸载amazon</h4>

<pre><code>    # 16.04
    sudo apt-get remove unity-webapps-common

    # 18.04
    sudo apt-get remove ubuntu-web-launchers
</code></pre>

<h4>新立得</h4>

<pre><code>    sudo apt-get install synaptic
</code></pre>

<h4>禁用apport</h4>

<pre><code>    /etc/default/apport
    enabled=0
</code></pre>

<h4>禁用service</h4>

<pre><code>    # 禁用
    sudo systemctl disable apport.service

    # 如果这不起作用，那么您需要屏蔽该服务
    systemctl mask apport.service

    # 重新启用
    systemctl unmask apport.service # if you masked it
    sudo systemctl enable apport.service
</code></pre>

<h4>中文输入法</h4>

<pre><code>    sudo apt-get install ibus-pinyin
    # 选择全拼模式，同时勾选“简拼”, 然后运行
    sudo ibus restart
</code></pre>

<h4>温度</h4>

<pre><code>    sudo apt-get install lm-sensors hddtemp
    sudo sensors-detect
    sensors
    sudo apt-get install psensor
</code></pre>

<h4>查看SSD状态</h4>

<p><a href="https://www.cnblogs.com/fiberhome/p/8275961.html">https://www.cnblogs.com/fiberhome/p/8275961.html</a>
```
    hdparm -t &ndash;direct /dev/sda</p>

<pre><code>smartctl -i /dev/sda

sudo smartctl -data -A /dev/sda
sudo smartctl -A /dev/sda

# 233一行的值就是寿命，默认为100，当小于10的时候就要非常注意了。
</code></pre>

<pre><code>
#### 个人桌面系统可以加 noatime
</code></pre>

<pre><code>vim /etc/fstab
增加 noatime

stat /etc/fstab
</code></pre>

<pre><code>
#### nvme硬盘温度
</code></pre>

<pre><code>sudo apt-get install nvme-cli
sudo nvme list

sudo nvme smart-log /dev/nvme0
sudo watch -n 1 nvme smart-log /dev/nvme0

sudo nvme smart-log /dev/nvme0 | grep "^temperature"
</code></pre>

<pre><code>
#### SSD
</code></pre>

<pre><code>Aggressive LPM Support功能是SATA口的节能电源管理，开启会导致SSD掉盘，不认盘，掉速等问题。

解决方法：

到BIOS中找到Aggressive LPM Support并关闭。
</code></pre>

<pre><code>
#### 18.04 unity
</code></pre>

<pre><code>sudo apt install ubuntu-unity-desktop
select lightdm

# 恢复gnome
sudo apt purge ubuntu-unity-desktop
sudo dpkg-reconfigure gdm3
</code></pre>

<p>```</p>

<h4>18.04 用synergy1.6.2</h4>

<p><a href="https://packages.ubuntu.com/xenial/libcrypto++9v5">https://packages.ubuntu.com/xenial/libcrypto++9v5</a></p>

<p><a href="https://packages.ubuntu.com/xenial/synergy">https://packages.ubuntu.com/xenial/synergy</a></p>

<p><a href="/download/system/synergy_1.6.2-0ubuntu2_amd64.deb">synergy_1.6.2-0ubuntu2_amd64.deb</a></p>

<p><a href="/download/system/libcrypto++9v5_5.6.1-9ubuntu0.1_amd64.deb">libcrypto++9v5_5.6.1-9ubuntu0.1_amd64.deb</a></p>
]]></content>
  </entry>
  
</feed>
