<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2020~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2020~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-06-24T16:02:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MPTCP skb路径]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path/"/>
    <updated>2020-07-20T00:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path</id>
    <content type="html"><![CDATA[<h3>发送</h3>

<p>tcp_sendmsg 将 skb 写入 meta_sk 的 sk_write_queue 然后复制一份skb，将 clone_skb 写入subsk的sk_write_queue。</p>

<p>相同的[seq, endseq]会同时存在meta_sk->sk_write_queue, meta_sk->reinject_queue, subsk->sk_write_queue</p>

<p>meta_sk->reinject_queue 跟 meta_sk->sk_write_queue 差不多，目前的pm中reinject_queue的发送优先级高于sk_write_queue。</p>

<p>reinject_queue 中skb的来源有：</p>

<ol>
<li><p>重传时调mptcp_reinject_data将skb放到meta_sk的reinject_queue，也就是一个subsk重传skb，可以放到另一个subsk</p></li>
<li><p>subsk 调 tcp_write_queue_purge 时可能这些skb还是要发出去的，所以把skb放到meta_sk的reinject_queue</p></li>
<li><p>mptcp_sub_retransmit_timer, mptcp_del_sock, mptcp_send_reset_rem_id 等</p></li>
</ol>


<pre><code>    mptcp_write_wakeup
        reinject = 0
    mptcp_write_xmit
        if (skb from reinject_queue)
            reinject = 1
        else
            reinject = 0
    mptcp_retransmit_skb
        reinject = -1

        -&gt; mptcp_skb_entail(, skb, reinject)
            -&gt; mptcp_save_dss_data_seq 设置seq
            -&gt; tcp_add_write_queue_tail 或 tcp_transmit_skb


    mptcp_sub_retransmit_timer
    mptcp_del_sock
    mptcp_send_reset_rem_id
    tcp_write_queue_purge
        -&gt; mptcp_reinject_data
            -&gt; skb_queue_tail(meta_sk-&gt;reinject_queue, skb)
</code></pre>

<h3>接收</h3>

<pre><code>    mptcp_data_ready
        -&gt; mptcp_queue_skb
            -&gt; tcp_queue_rcv(meta_sk, tmp1, 0, &amp;fragstolen)
            -&gt; tcp_data_queue_ofo(meta_sk, tmp1);

    tcp_validate_incoming
        -&gt; mptcp_handle_options
            -&gt; mptcp_process_data_ack
                -&gt; mptcp_clean_rtx_queue
                    -&gt; 清理 meta_sk-&gt;sk_write_queue
                    -&gt; 清理 mpcb-&gt;reinject_queue
    tcp_ack
        -&gt; tcp_clean_rtx_queue
            -&gt; 清理 subsk-&gt;sk_write_queue
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP 64bit seq]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-64/"/>
    <updated>2020-07-20T00:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-64</id>
    <content type="html"><![CDATA[<h3>一、snd_high_order, rcv_high_order</h3>

<p>发送和接收都将seq映射到64位上，这样能防止不同子流之间seq造成的歧义。</p>

<pre><code>    # 发送
    static inline __be32 mptcp_get_highorder_sndbits(const struct sk_buff *skb, const struct mptcp_cb *mpcb)
    {
        return htonl(mpcb-&gt;snd_high_order[(TCP_SKB_CB(skb)-&gt;mptcp_flags &amp;
                MPTCPHDR_SEQ64_INDEX) ? 1 : 0]);
    }

    static inline void mptcp_check_sndseq_wrap(struct tcp_sock *meta_tp, int inc)
    {
        if (unlikely(meta_tp-&gt;snd_nxt &gt; meta_tp-&gt;snd_nxt + inc)) {
            struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
            mpcb-&gt;snd_hiseq_index = mpcb-&gt;snd_hiseq_index ? 0 : 1;
            mpcb-&gt;snd_high_order[mpcb-&gt;snd_hiseq_index] += 2;
        }
    }

    # 接收
    static inline u64 mptcp_get_data_seq_64(const struct mptcp_cb *mpcb, int index, u32 data_seq_32)
    {
        return ((u64)mpcb-&gt;rcv_high_order[index] &lt;&lt; 32) | data_seq_32;
    }

    static inline u64 mptcp_get_rcv_nxt_64(const struct tcp_sock *meta_tp)
    {
        struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
        return mptcp_get_data_seq_64(mpcb, mpcb-&gt;rcv_hiseq_index,
                         meta_tp-&gt;rcv_nxt);
    }

    static inline void mptcp_check_rcvseq_wrap(struct tcp_sock *meta_tp, u32 old_rcv_nxt)
    {
        if (unlikely(old_rcv_nxt &gt; meta_tp-&gt;rcv_nxt)) {
            struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
            mpcb-&gt;rcv_high_order[mpcb-&gt;rcv_hiseq_index] += 2;
            mpcb-&gt;rcv_hiseq_index = mpcb-&gt;rcv_hiseq_index ? 0 : 1;
        }
    }
</code></pre>

<h4>1. 发送端 MPTCPHDR_SEQ64_INDEX</h4>

<p>MPTCPHDR_SEQ64_INDEX 在发送和接收上有不同用法，在发送上</p>

<pre><code>    static bool mptcp_skb_entail(struct sock *sk, struct sk_buff *skb, int reinject)
    {
        ...
        if (!reinject) // 如果是第一次发送的包, MPTCPHDR_SEQ64_INDEX 只是作为 snd_hiseq_index 的替代
            TCP_SKB_CB(skb)-&gt;mptcp_flags |= (mpcb-&gt;snd_hiseq_index ? MPTCPHDR_SEQ64_INDEX : 0);
        ...
</code></pre>

<h4>2. wrap</h4>

<p>在 mptcp_check_sndseq_wrap 中 snd_hiseq_index ^= 1, 然后 snd_high_order[i] += 2; 所以 snd_high_order使用 snd_high_order[i] 和 snd_high_order[i-1]。</p>

<p>在 mptcp_check_rcvseq_wrap 中 rcv_high_order[i] += 2; rcv_hiseq_index ^= 1; 所以 rcv_high_order 使用 rcv_high_order[i] 和 rcv_high_order[i+1]。</p>

<p>为什么？</p>

<p>因为发送的时候只需要用到最高seq(snd_nxt)，但接收的时候会超高最高seq(rcv_nxt)。在 mptcp_detect_mapping 中指明了：
<code>
    if (unlikely(after(data_seq, meta_tp-&gt;rcv_nxt) &amp;&amp; data_seq &lt; meta_tp-&gt;rcv_nxt)) {
        tp-&gt;mptcp-&gt;map_data_seq = mptcp_get_data_seq_64(mpcb, !mpcb-&gt;rcv_hiseq_index, data_seq);
</code></p>

<h3>二、64bit OR 33bit</h3>

<h4>1. 接收端 MPTCPHDR_SEQ64_INDEX</h4>

<p>在 mptcp_write_dss_data_ack() 中 mdss->m = 0; 所以 MPTCPHDR_SEQ64_SET 永远不启用。 接收端只有在 MPTCPHDR_SEQ64_SET 启用时 MPTCPHDR_SEQ64_INDEX, MPTCPHDR_SEQ64_OFO 才有用， 见 mptcp_get_64_bit</p>

<pre><code>    static inline u8 mptcp_get_64_bit(u64 data_seq, struct mptcp_cb *mpcb)
    {
        u64 data_seq_high = (u32)(data_seq &gt;&gt; 32);

        if (mpcb-&gt;rcv_high_order[0] == data_seq_high)
            return 0;
        else if (mpcb-&gt;rcv_high_order[1] == data_seq_high)
            return MPTCPHDR_SEQ64_INDEX;
        else
            return MPTCPHDR_SEQ64_OFO;
    }

    static inline __u32 *mptcp_skb_set_data_seq(const struct sk_buff *skb, u32 *data_seq, struct mptcp_cb *mpcb)
    {
        __u32 *ptr = (__u32 *)(skb_transport_header(skb) + TCP_SKB_CB(skb)-&gt;dss_off);

        if (TCP_SKB_CB(skb)-&gt;mptcp_flags &amp; MPTCPHDR_SEQ64_SET) {
            u64 data_seq64 = get_unaligned_be64(ptr);

            if (mpcb)
                TCP_SKB_CB(skb)-&gt;mptcp_flags |= mptcp_get_64_bit(data_seq64, mpcb);

            *data_seq = (u32)data_seq64;
            ptr++;
        } else {
            *data_seq = get_unaligned_be32(ptr);
        }

        return ptr;
    }
</code></pre>

<h4>2. bug??</h4>

<pre><code>    if (mpcb-&gt;rcv_high_order[0] == data_seq_high)
        return 0;
    else if (mpcb-&gt;rcv_high_order[1] == data_seq_high)
        return MPTCPHDR_SEQ64_INDEX;
</code></pre>

<p>这四句应该改成:
<code>
    i = mpcb-&gt;rcv_hiseq_index;
    if (mpcb-&gt;rcv_high_order[i] == data_seq_high)
        return 0;
    else if (mpcb-&gt;rcv_high_order[i^1] == data_seq_high)
        return MPTCPHDR_SEQ64_INDEX;
</code></p>

<h4>3. 33bit</h4>

<pre><code>    rcv_high_order[i^1] = rcv_high_order[i] + 1;
</code></pre>

<p>所以所谓的64bit，其实是33bit。</p>

<h4>4. MPTCPHDR_SEQ64_OFO</h4>

<p>33bit seq 超过了 <code>rcv_high_order[i^1]</code>，判定为无效数据，不收取</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP DSS && MPTCPHDR_INF]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/19/kernel-mptcp-dss/"/>
    <updated>2020-07-19T23:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/19/kernel-mptcp-dss</id>
    <content type="html"><![CDATA[<h3>dss=Data Sequence Signal</h3>

<p>用于将子流的seq映射到主流上。</p>

<p>三次握手后 maskter_sk = meta_sk, 然后 meta_sk 会重新分配seq, snd_nxt, rcv_nxt, write_seq, copied_seq 等。</p>

<h3>master_sk, subflow 的seq和 meta_sk 建立联系</h3>

<h4>output</h4>

<pre><code>    mptcp_save_dss_data_seq {
        mptcp_write_dss_data_ack
        mptcp_write_dss_mapping
    }
</code></pre>

<p>先写ACK映射，再写DATA映射。</p>

<pre><code>    static int mptcp_write_dss_data_ack(const struct tcp_sock *tp, const struct sk_buff *skb,
                        __be32 *ptr)
    {
        struct mp_dss *mdss = (struct mp_dss *)ptr;
        __be32 *start = ptr; 

        mdss-&gt;kind = TCPOPT_MPTCP;
        mdss-&gt;sub = MPTCP_SUB_DSS;
        mdss-&gt;rsv1 = 0; 
        mdss-&gt;rsv2 = 0; 
        mdss-&gt;F = mptcp_is_data_fin(skb) ? 1 : 0; 
        mdss-&gt;m = 0; 
        mdss-&gt;M = mptcp_is_data_seq(skb) ? 1 : 0; 
        mdss-&gt;a = 0; 
        mdss-&gt;A = 1; 
        mdss-&gt;len = mptcp_sub_len_dss(mdss, tp-&gt;mpcb-&gt;dss_csum);
        ptr++;

        *ptr++ = htonl(mptcp_meta_tp(tp)-&gt;rcv_nxt);

        return ptr - start;
    }
</code></pre>

<pre><code>    static int mptcp_write_dss_mapping(const struct tcp_sock *tp, const struct sk_buff *skb,
                       __be32 *ptr)
    {
        const struct tcp_skb_cb *tcb = TCP_SKB_CB(skb);
        __be32 *start = ptr; 
        __u16 data_len;

        *ptr++ = htonl(tcb-&gt;seq); /* data_seq */

        /* If it's a non-data DATA_FIN, we set subseq to 0 (draft v7) */
        if (mptcp_is_data_fin(skb) &amp;&amp; skb-&gt;len == 0)
            *ptr++ = 0; /* subseq */
        else 
            *ptr++ = htonl(tp-&gt;write_seq - tp-&gt;mptcp-&gt;snt_isn); /* subseq */

        if (tcb-&gt;mptcp_flags &amp; MPTCPHDR_INF)
            data_len = 0; 
        else 
            data_len = tcb-&gt;end_seq - tcb-&gt;seq;

        if (tp-&gt;mpcb-&gt;dss_csum &amp;&amp; data_len) {
            __sum16 *p16 = (__sum16 *)ptr;
            __be32 hdseq = mptcp_get_highorder_sndbits(skb, tp-&gt;mpcb);
            __wsum csum;

            *ptr = htonl(((data_len) &lt;&lt; 16) |
                     (TCPOPT_EOL &lt;&lt; 8) | 
                     (TCPOPT_EOL));
            csum = csum_partial(ptr - 2, 12, skb-&gt;csum);
            p16++;
            *p16++ = csum_fold(csum_partial(&amp;hdseq, sizeof(hdseq), csum));
        } else {
            *ptr++ = htonl(((data_len) &lt;&lt; 16) |
                       (TCPOPT_NOP &lt;&lt; 8) | 
                       (TCPOPT_NOP));
        }

        return ptr - start;
    }
</code></pre>

<h4>input</h4>

<ul>
<li>收到的包有可能被中间设备分成多个包，或由于gso、tso、gro造成收发包大小不一一对应。所以在接收端能看到很多 skb_queue_walk_safe(&amp;sk->sk_receive_queue, skb, tmp)</li>
</ul>


<p>映射处理顺序：
mptcp_data_ready -> mptcp_prevalidate_skb, mptcp_detect_mapping, mptcp_validate_mapping</p>

<h5>mptcp_detect_mapping</h5>

<p>发送一个包可能对应多个接收包，在接收第一个包的时候设置好
<code>
    tp-&gt;mptcp-&gt;map_data_len = data_len;
    tp-&gt;mptcp-&gt;map_subseq = sub_seq;
    tp-&gt;mptcp-&gt;map_data_fin = mptcp_is_data_fin(skb) ? 1 : 0;
    tp-&gt;mptcp-&gt;mapping_present = 1;
</code></p>

<h5>mptcp_queue_skb</h5>

<p>处理完一个或多个接收包（=一个发送包）后调mptcp_reset_mapping，重置 map_data_len，map_data_seq，map_subseq，map_data_fin，mapping_present。</p>

<h3>MPTCPHDR_INF 模式</h3>

<p>MPTCPHDR_INF 模式是取消子流seq，退避回普通tcp，通通让meta_sk处理。</p>

<p>infinite 模式正常不开启的</p>

<h4>开启条件</h4>

<ol>
<li><p>dss_csum != 0 并且没有established连接，见 mptcp_verif_dss_csum()</p></li>
<li><p>进入 mptcp_mp_fail_rcvd()</p></li>
<li><p>接收到数据时还没established，进入INF模式。见 mptcp_prevalidate_skb()</p></li>
</ol>


<h4>参数</h4>

<p>send_infinite_mapping = 1 发送端出错进入inf模式，需要发送数据通知接收端</p>

<p>infinite_mapping_snd = 1 发送端进入INF模式</p>

<p>infinite_mapping_rcv = 1 接收端进入INF模式, 接收seq映射改用 infinite_rcv_seq</p>

<pre><code>    mptcp_detect_mapping()
    {
        if (!data_len) {
            ...
            set_infinite_rcv = true;
            ...
        }

        ...
        if (set_infinite_rcv)
            mpcb-&gt;infinite_rcv_seq = tp-&gt;mptcp-&gt;map_data_seq;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP pre_established fully_established]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/19/kernel-mptcp-establish/"/>
    <updated>2020-07-19T01:37:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/19/kernel-mptcp-establish</id>
    <content type="html"><![CDATA[<h3>一、pre_established</h3>

<p>只在subflow的客户端起作用，在收到synack时置为1，收到第4个ack时置为0，防止在synack到第四个ack期间发送数据包。</p>

<p>因为服务端要用第三个ack建连，客户端收到第四个ack表示建连成功，成功之后才能发数据</p>

<h4>mptcp_ack_timer</h4>

<p>所以客户端需要 mptcp_ack_timer，不停的发送第三个ack，直到收到第四个ack</p>

<h3>二、fully_established</h3>

<p>fully_established 和 pre_established 互不相关</p>

<p>mptcp需要四次握手，四次握手完成后 fully_established=1, 再之后才能建立subflow</p>

<p>tcp三次握手后，client和server两边的 fully_established = 0, 进入fully_established的条件如下：</p>

<ol>
<li><p>本端没发送数据包，但一直收到对端的mptcp数据包，见 mptcp_prevalidate_skb()
<code>
 if (!tp-&gt;mptcp-&gt;fully_established) {
     tp-&gt;mptcp-&gt;init_rcv_wnd -= skb-&gt;len;
     if (tp-&gt;mptcp-&gt;init_rcv_wnd &lt; 0)
         mptcp_become_fully_estab(sk);
 }
</code></p></li>
<li><p>本端发出去的mptcp数据包被mptcp_ack了，见 mptcp_process_data_ack
<code>
 if (unlikely(!tp-&gt;mptcp-&gt;fully_established) &amp;&amp; tp-&gt;mptcp-&gt;snt_isn + 1 != TCP_SKB_CB(skb)-&gt;ack_seq)
     mptcp_become_fully_estab(sk);
</code></p></li>
<li><p>如果收到非mptcp数据包，则回退普通tcp，回退也会设置fully_established=1，见mptcp_prevalidate_skb()
<code>
 if (!tp-&gt;mptcp-&gt;fully_established &amp;&amp; !mptcp_is_data_seq(skb) &amp;&amp;
     !tp-&gt;mptcp-&gt;mapping_present &amp;&amp; !mpcb-&gt;infinite_mapping_rcv) {
     ...
     if (!is_master_tp(tp)) { // subflow reset，master才回退
         MPTCP_INC_STATS(sock_net(sk), MPTCP_MIB_FBDATASUB);
         mptcp_send_reset(sk);
         return 1;
     }
     ...
     tp-&gt;mptcp-&gt;fully_established = 1;
 }
</code></p></li>
<li><p>如果本端发出去的数据包被不带mptcp的ack ack了，那么大概率是对端没建立mptcp连接。那么本端回退到普通tcp，回退也会设置fully_established=1。</p></li>
</ol>


<pre><code>    tcp_ack() {
        mptcp_fallback_infinite() {
            if (likely(tp-&gt;mptcp-&gt;fully_established))
                return false;

            if (!(flag &amp; MPTCP_FLAG_DATA_ACKED)) // 被ack的包一定是mptcp数据包
                return false;

            if (!is_master_tp(tp)) { // subflow reset，master才回退
                MPTCP_INC_STATS(sock_net(sk), MPTCP_MIB_FBACKSUB);
                return true;
            }
            ...
        }
    }
</code></pre>

<p>因为 fully_established = 0 时刚完成3次握手，所以上面说的数据包基本都是第一个数据包</p>

<p>以上条件对于client和server都适用，因为3次握手后谁先发包都是正常的。</p>

<h3>mptcp 连接在 fully_established=1 之后再收到 不含mptcp option的包</h3>

<ol>
<li>不会进行mapping，见mptcp_detect_mapping()</li>
</ol>


<pre><code>    if (!mptcp_is_data_seq(skb)) {
        if (!tp-&gt;mptcp-&gt;mapping_present &amp;&amp; tp-&gt;rcv_nxt - tp-&gt;copied_seq &gt; 65536) {
            mptcp_send_reset(sk);
            return 1;
        }
        return 0;
    }
</code></pre>

<ol>
<li>对于一个map_data_len包，可能被差成了多个包传输：</li>
</ol>


<p>如果多个包全不是mptcp包，则mapping_present=0，那么mptcp_queue_skb() 会直接return，然后 tp->rcv_nxt - tp->copied_seq > 65536, 然后被reset</p>

<p>如果前一部分是mptcp的包，后一部分不是mptcp包，则mapping_present=1，然后会被mptcp_verif_dss_csum() reset</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP包增一个ICMP头]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/09/kernel-tcp-icmp/"/>
    <updated>2020-07-09T02:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/09/kernel-tcp-icmp</id>
    <content type="html"><![CDATA[<p>发送加头，接收解头。checksum失效，需要额外处理</p>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/ip.h&gt;
    #include &lt;linux/tcp.h&gt;
    #include &lt;linux/sctp.h&gt;
    #include &lt;linux/icmp.h&gt;
    #include &lt;linux/slab.h&gt;

    #include &lt;net/ip.h&gt;
    #include &lt;net/tcp.h&gt;
    #include &lt;net/udp.h&gt;
    #include &lt;net/icmp.h&gt;                   /* for icmp_send */
    #include &lt;net/route.h&gt;
    #include &lt;net/ip6_checksum.h&gt;
    #include &lt;net/netns/generic.h&gt;      /* net_generic() */

    #include &lt;linux/netfilter.h&gt;
    #include &lt;linux/netfilter_ipv4.h&gt;

    #ifdef CONFIG_IP_VS_IPV6
    #include &lt;net/ipv6.h&gt;
    #include &lt;linux/netfilter_ipv6.h&gt;
    #include &lt;net/ip6_route.h&gt;
    #endif

    #include &lt;net/ip_vs.h&gt;
    #include &lt;linux/dns_resolver.h&gt;



    #include &lt;linux/module.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/version.h&gt;
    #include &lt;linux/ip.h&gt;
    #include &lt;linux/tcp.h&gt;
    #include &lt;linux/icmp.h&gt;
    #include &lt;linux/if_arp.h&gt;
    #include &lt;linux/if_ether.h&gt;
    #include &lt;linux/kallsyms.h&gt;
    #include &lt;linux/inetdevice.h&gt;
    #include &lt;linux/netdevice.h&gt;
    #include &lt;net/ip.h&gt;
    #include &lt;net/tcp.h&gt;
    #include &lt;net/udp.h&gt;
    #include &lt;net/icmp.h&gt;
    #include &lt;net/arp.h&gt;
    #include &lt;net/route.h&gt;
    #include &lt;net/neighbour.h&gt;
    #include &lt;net/netevent.h&gt;
    #if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2, 6, 32))
    #include &lt;net/net_namespace.h&gt;
    #endif
    #include &lt;linux/netfilter.h&gt;
    #include &lt;linux/netfilter_ipv4.h&gt;

    #include &lt;linux/inet.h&gt;
    #include &lt;linux/skbuff.h&gt;
    #include &lt;linux/kthread.h&gt;

    int icmp_port = 80;
    module_param(icmp_port, int, 0644);

    struct addhdr {
        u32 saddr, daddr;
        u16 sport, dport;
        u16 len;
        u16 magic;
    };

    static unsigned int local_out(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
    {
        struct iphdr *iph = ip_hdr(skb);
        struct tcphdr *th;
        struct icmphdr *icmp;
        struct addhdr *add;
        int delta;

        iph = ip_hdr(skb);
        th = tcp_hdr(skb);
        if (iph-&gt;protocol != IPPROTO_TCP)
            return NF_ACCEPT;

        if (ntohs(th-&gt;source) != icmp_port &amp;&amp; ntohs(th-&gt;dest) != icmp_port)
            return NF_ACCEPT;

        if (skb-&gt;len + sizeof(struct icmphdr) + sizeof(struct addhdr) &gt; 1500)
            return NF_ACCEPT;

        delta = sizeof(struct icmphdr) + sizeof(struct addhdr) + sizeof(struct ethhdr) - skb_headroom(skb);
        if (delta &gt; 0 &amp;&amp; pskb_expand_head(skb, SKB_DATA_ALIGN(delta), 0, GFP_ATOMIC))
            return NF_ACCEPT;

        iph = ip_hdr(skb);
        th = tcp_hdr(skb);

        if (skb-&gt;ip_summed != CHECKSUM_COMPLETE) {
            th-&gt;check = 0;
            skb-&gt;csum = 0;
            th-&gt;check = tcp_v4_check(skb-&gt;len - ip_hdrlen(skb), iph-&gt;saddr, iph-&gt;daddr, skb_checksum(skb, ip_hdrlen(skb), skb-&gt;len - ip_hdrlen(skb), 0));
            skb-&gt;ip_summed = CHECKSUM_COMPLETE;
        }

        skb_push(skb, sizeof(struct icmphdr) + sizeof(struct addhdr));
        memcpy(skb-&gt;data, skb-&gt;data + sizeof(struct icmphdr) + sizeof(struct addhdr), ip_hdrlen(skb));
        skb_reset_network_header(skb);
        iph = ip_hdr(skb);
        iph-&gt;protocol = IPPROTO_ICMP;
        iph-&gt;tot_len = htons(skb-&gt;len);

        icmp = (struct icmphdr *)(skb-&gt;data + ip_hdrlen(skb));
        icmp-&gt;type = ICMP_ECHO;
        icmp-&gt;code = 0;
        icmp-&gt;un.echo.id = 1;
        icmp-&gt;un.echo.sequence = 1;

        add = (struct addhdr *)(skb-&gt;data + ip_hdrlen(skb) + sizeof(struct icmphdr));
        add-&gt;saddr = iph-&gt;saddr;
        add-&gt;daddr = iph-&gt;daddr;
        add-&gt;sport = th-&gt;source;
        add-&gt;dport = th-&gt;dest;
        add-&gt;len = skb-&gt;len;
        add-&gt;magic = skb-&gt;len;

        skb_set_transport_header(skb, ip_hdrlen(skb));

        icmp-&gt;checksum = 0;
        icmp-&gt;checksum = csum_fold(csum_partial(skb-&gt;data + ip_hdrlen(skb), skb-&gt;len - ip_hdrlen(skb), 0));

        ip_send_check(iph);
        skb-&gt;ip_summed = CHECKSUM_NONE;

        return NF_ACCEPT;
    }

    static unsigned int pre_route(void *priv, struct sk_buff *skb, const struct nf_hook_state *state)
    {
        struct iphdr *iph;
        struct tcphdr *th;
        struct icmphdr *icmp;
        struct addhdr *add;

        if (!pskb_may_pull(skb, sizeof(struct iphdr) + sizeof(struct tcphdr) + sizeof(struct icmphdr) + sizeof(struct addhdr)))
            return NF_ACCEPT;

        iph = ip_hdr(skb);
        if (iph-&gt;protocol != IPPROTO_ICMP)
            return NF_ACCEPT;

        icmp = (struct icmphdr*)(skb-&gt;data + ip_hdrlen(skb));
        if (icmp-&gt;type != ICMP_ECHO || icmp-&gt;code != 0)
            return NF_ACCEPT;

        add = (struct addhdr*)(skb-&gt;data + ip_hdrlen(skb) + sizeof(struct icmphdr));
        th = (struct tcphdr*)(skb-&gt;data + ip_hdrlen(skb) + sizeof(struct icmphdr) + sizeof(struct addhdr));
        if (ntohs(th-&gt;source) != icmp_port &amp;&amp; ntohs(th-&gt;dest) != icmp_port)
            return NF_ACCEPT;

        //if (add-&gt;saddr != iph-&gt;saddr || add-&gt;daddr != iph-&gt;daddr || 
        if (add-&gt;sport != th-&gt;source || add-&gt;dport != th-&gt;dest || add-&gt;len != skb-&gt;len || add-&gt;magic != skb-&gt;len)
            return NF_ACCEPT;

        skb_pull(skb, sizeof(struct icmphdr) + sizeof(struct addhdr));
        // sizeof(struct icmphdr) + sizeof(struct addhdr) &gt; ip_hdrlen(skb)
        memcpy(skb-&gt;data, skb-&gt;data - sizeof(struct icmphdr) - sizeof(struct addhdr), ip_hdrlen(skb));
        memcpy(skb-&gt;data - sizeof(struct ethhdr), skb-&gt;data - sizeof(struct icmphdr) - sizeof(struct addhdr) - sizeof(struct ethhdr), sizeof(struct ethhdr));
        skb_reset_network_header(skb);
        iph = ip_hdr(skb);
        iph-&gt;protocol = IPPROTO_TCP;
        iph-&gt;tot_len = htons(skb-&gt;len);

        ip_send_check(iph);
        skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        skb_set_transport_header(skb, ip_hdrlen(skb));
        th = tcp_hdr(skb);
        skb_set_mac_header(skb, -(int)sizeof(struct ethhdr));

        return NF_ACCEPT;
    }

    static const struct nf_hook_ops ip_vs_ops[] = {
        {
            .hook       = local_out,
            .pf     = NFPROTO_IPV4,
            .hooknum    = NF_INET_LOCAL_OUT,
            .priority   = 0,
        },
        {
            .hook       = pre_route,
            .pf     = NFPROTO_IPV4,
            .hooknum    = NF_INET_PRE_ROUTING,
            .priority   = 0,
        },
    };

    static int net_init(void)
    {
        if (nf_register_net_hooks(&amp;init_net, ip_vs_ops, ARRAY_SIZE(ip_vs_ops)))
            return -1;

        return 0;
    }

    static void net_cleanup(void)
    {
        nf_unregister_net_hooks(&amp;init_net, ip_vs_ops, ARRAY_SIZE(ip_vs_ops));
    }

    module_init(net_init);
    module_exit(net_cleanup);
    MODULE_LICENSE("GPL");
</code></pre>
]]></content>
  </entry>
  
</feed>
