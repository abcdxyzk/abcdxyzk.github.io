<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2020~08 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2020~08/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-06-24T16:02:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MPTCP sched]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched/"/>
    <updated>2020-08-15T01:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched</id>
    <content type="html"><![CDATA[<pre><code>    $ git grep mptcp_register_scheduler net/mptcp/
    net/mptcp/mptcp_blest.c:        if (mptcp_register_scheduler(&amp;mptcp_sched_blest))
    net/mptcp/mptcp_redundant.c:    if (mptcp_register_scheduler(&amp;mptcp_sched_red))
    net/mptcp/mptcp_rr.c:   if (mptcp_register_scheduler(&amp;mptcp_sched_rr))
    net/mptcp/mptcp_sched.c:int mptcp_register_scheduler(struct mptcp_sched_ops *sched)
</code></pre>

<h4>blest</h4>

<h4>redundant</h4>

<h4>rr</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP cong]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong/"/>
    <updated>2020-08-15T01:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong</id>
    <content type="html"><![CDATA[<p>不设置时，默认的就是cubic</p>

<pre><code>    $ git grep tcp_congestion_ops net/mptcp/
    net/mptcp/mctcp_desync.c:static struct tcp_congestion_ops mctcp_desync = {
    net/mptcp/mptcp_balia.c:static struct tcp_congestion_ops mptcp_balia = {
    net/mptcp/mptcp_coupled.c:static struct tcp_congestion_ops mptcp_ccc = {
    net/mptcp/mptcp_olia.c:static struct tcp_congestion_ops mptcp_olia = {
    net/mptcp/mptcp_wvegas.c:static struct tcp_congestion_ops mptcp_wvegas __read_mostly = {
</code></pre>

<h4>desync</h4>

<h4>balia</h4>

<h4>ccc</h4>

<h4>olia</h4>

<h4>wvegas</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP pm]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm/"/>
    <updated>2020-08-15T00:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fenglt/p/8570343.html">https://www.cnblogs.com/fenglt/p/8570343.html</a></p>

<p><a href="http://www.doc88.com/p-2354903996876.html">http://www.doc88.com/p-2354903996876.html</a></p>

<pre><code>    $ git grep mptcp_register_path_manager net/
    net/mptcp/mptcp_binder.c:       if (mptcp_register_path_manager(&amp;binder))
    net/mptcp/mptcp_fullmesh.c:     ret = mptcp_register_path_manager(&amp;full_mesh);
    net/mptcp/mptcp_ndiffports.c:   if (mptcp_register_path_manager(&amp;ndiffports))
    net/mptcp/mptcp_netlink.c:      ret = mptcp_register_path_manager(&amp;mptcp_nl_pm_ops);
    net/mptcp/mptcp_pm.c:int mptcp_register_path_manager(struct mptcp_pm_ops *pm)
</code></pre>

<h4>fullmesh</h4>

<p>两边IP都会建连，即建立 <code>n*m</code> 条连接</p>

<p>IP查看 cat /proc/net/mptcp_fullmesh</p>

<h4>ndiffports 两边只在一组IP上建立多条连接。</h4>

<pre><code>    echo ndiffports &gt; /proc/sys/net/mptcp/mptcp_path_manager
    echo 5 &gt; /sys/module/mptcp_ndiffports/parameters/num_subflows # 总共建5条，即额外再建4条
</code></pre>

<h4>netlink</h4>

<p>通过genetlink和应用层交互，在应用层实现pm功能。</p>

<h4>binder</h4>

<p>将松散源路由（Loose Source and Record Routing, LSRR）选项添加到MPTCP，以确保MPTCP子流使用所有可用网关，即采用LSRR分发子流的数据包。Binder路径管理算法允许用户终端设备从网关直接获得更高的网络吞吐量，而不需要进行任何修改，可用图a和b谁明其工作原理。理论上，只有在网络中设置了LSRR选项，才能使其B>0，从而使得Binder路径管理算法发挥良好效果。</p>

<p><img src="/images/kernel/20200815.png" alt="" /></p>

<p>松散源路由：允许相邻两个IP地址之间跳过多个网络。</p>

<p>通俗解释：发送端指明了流量或者数据包必须经过的IP地址清单，但如果需要，也可以经过一些其他的地址。换句话说，不用考虑数据包经过的确切地址，只要它经过这些地址就可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据交换 genlink, 使用nl库]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/10/kernel-genlink-nl/"/>
    <updated>2020-08-10T23:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/10/kernel-genlink-nl</id>
    <content type="html"><![CDATA[<p>3.x 内核</p>

<h3>kernel</h3>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;net/netlink.h&gt;
    #include &lt;net/genetlink.h&gt;
    #include &lt;linux/version.h&gt;

    #define MSG_KER "Hello from kernel space!!!"

    struct family_hdr {
        int ff;
    };

    struct data_hdr {
        int len;
        int kk;
        char str[0];
    };

    /* netlink attributes */
    enum {
        DOC_EXMPL_A_UNSPEC,
        DOC_EXMPL_A_MSG,
        DOC_EXMPL_A_MSG2,
        __DOC_EXMPL_A_MAX,
    };
    #define DOC_EXMPL_A_MAX (__DOC_EXMPL_A_MAX - 1)

    /* commands 定义命令类型，用户空间以此来表明需要执行的命令 */
    enum {
        DOC_EXMPL_C_UNSPEC,
        DOC_EXMPL_C_ECHO,
        __DOC_EXMPL_C_MAX,
    };
    #define DOC_EXMPL_C_MAX (__DOC_EXMPL_C_MAX - 1)

    static int nl_pre_doit(struct genl_ops*  ops, struct sk_buff* skb, struct genl_info* info)
    {
        return 0;
    }
    static void nl_post_doit(struct genl_ops*  ops, struct sk_buff* skb, struct genl_info* info)
    {
        return;
    }

    /* family definition */
    static struct genl_family nl_family = {
        .id = GENL_ID_GENERATE,   //这里不指定family ID，由内核进行分配
        .hdrsize = sizeof(struct family_hdr),             //自定义的头部长度，参考genl数据包结构
        .name = "DOC_EXMPL",      //这里定义family的名称，user program需要根据这个名字来找到对应的family ID。
        .version = 1,
        .maxattr = DOC_EXMPL_A_MAX,
        .pre_doit  = nl_pre_doit,
        .post_doit = nl_post_doit,
    };

    static int rcv_handler(struct genl_info *info)
    {
        struct nlattr *tb[DOC_EXMPL_A_MAX + 1] = {0};
        struct family_hdr *fhdr = (struct family_hdr *)info-&gt;userhdr;
        struct data_hdr *hdr;
        int rc, i;
        int rcvlen;

        //printk("kernel recv: %d %d %d %s\n", fhdr-&gt;ff, hdr-&gt;len, hdr-&gt;kk, hdr-&gt;str);
        //printk("gg %d\n", info-&gt;nlhdr-&gt;nlmsg_len - ((u64)info-&gt;userhdr - (u64)info-&gt;nlhdr) - sizeof(struct family_hdr));
        rc = nla_parse(tb, DOC_EXMPL_A_MAX,
                info-&gt;userhdr + sizeof(struct family_hdr),
                info-&gt;nlhdr-&gt;nlmsg_len - ((u64)info-&gt;userhdr - (u64)info-&gt;nlhdr) - sizeof(struct family_hdr),
                NULL);
        if (rc) {
            printk("nla_parse err\n");
            return -1;
        }

        for (i = 1; i &lt;= DOC_EXMPL_A_MAX; i ++) {
            if (!tb[i])
                continue;
            rcvlen = nla_len(tb[i]);
            hdr = (struct data_hdr*)nla_data(tb[i]);
            printk("ker-rcv: %d %d %d %d rcvlen=%d %s\n", i, fhdr-&gt;ff, hdr-&gt;len, hdr-&gt;kk, rcvlen, hdr-&gt;str);
        }
        return 0;
    }


    static int snd_handler(struct genl_info *info)
    {
        struct sk_buff *reply = NULL;
        char sss[123];
        struct family_hdr *snd_fhdr;
        struct data_hdr *snd_hdr = (struct data_hdr *)sss;
        int err;

        reply = genlmsg_new(NLMSG_ALIGN(sizeof(struct family_hdr)) + NLMSG_ALIGN(sizeof(struct data_hdr)) + nla_total_size(strlen(MSG_KER)), GFP_KERNEL);
        if (!reply) {
            printk("genlmsg_new err\n");
            return -1;
        }

        snd_fhdr = (struct family_hdr *)genlmsg_put(reply, info-&gt;snd_portid, info-&gt;snd_seq, &amp;nl_family, 0, DOC_EXMPL_C_ECHO);
        snd_fhdr-&gt;ff = 222;
        snd_hdr-&gt;len = 321;
        snd_hdr-&gt;kk = 654;
        strcpy(snd_hdr-&gt;str, MSG_KER);
        err = nla_put(reply, DOC_EXMPL_A_MSG, sizeof(struct data_hdr) + strlen(snd_hdr-&gt;str), snd_hdr);
        if (err) {
            printk("nla_put err\n");
            genlmsg_cancel(reply, snd_fhdr);
            return -2;
        }

        snd_hdr-&gt;len = 987;
        snd_hdr-&gt;kk = 789;
        err = nla_put(reply, DOC_EXMPL_A_MSG2, sizeof(struct data_hdr) + strlen(snd_hdr-&gt;str), snd_hdr);
        if (err) {
            printk("nla_put err2\n");
            genlmsg_cancel(reply, snd_fhdr);
            return -2;
        }

        genlmsg_end(reply, snd_fhdr);

        err = genlmsg_reply(reply, info);
        if (err)
            printk("genlmsg_reply err\n");

        return 0;
    }

    static int nl_echo(struct sk_buff *skb, struct genl_info *info)
    {
        rcv_handler(info);
        snd_handler(info);
        return 0;
    }

    static struct genl_ops nl_ops[] = {
        {
            .cmd    = DOC_EXMPL_C_ECHO,
            .doit   = nl_echo,
            .flags  = GENL_ADMIN_PERM,
        },
    };

    int genetlink_init(void)
    {
        return genl_register_family_with_ops(&amp;nl_family, nl_ops, ARRAY_SIZE(nl_ops));
    }

    void genetlink_exit(void)
    {
        genl_unregister_family(&amp;nl_family);
        printk("Generic Netlink_nl Example Module unloaded.\n");
    }

    module_init(genetlink_init);
    module_exit(genetlink_exit);
    MODULE_LICENSE("GPL");
</code></pre>

<pre><code>    obj-m += genlink_nl.o

    KDIR := /usr/src/kernels/`uname -r`/

    PWD := `pwd`

    default:
        make -C $(KDIR) M=$(PWD) modules

    clean:
        rm -rf *.ko *.o *.mod.c .*.cmd .tmp_versions Module.symvers modules.order
</code></pre>

<h3>user</h3>

<p>gcc user_nl.c -lnl</p>

<pre><code>    // gcc user_nl.c -lnl
    //
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;poll.h&gt;
    #include &lt;string.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;signal.h&gt;
    #include &lt;asm/types.h&gt;

    //#include &lt;linux/genetlink.h&gt;
    #include &lt;netlink/socket.h&gt;
    #include &lt;netlink/genl/genl.h&gt;
    #include &lt;netlink/genl/family.h&gt;
    #include &lt;netlink/genl/ctrl.h&gt;
    #include &lt;netlink/msg.h&gt;

    #define MESSAGE_TO_KERNEL   "Hello World from user space!!"

    struct family_hdr {
        int ff;
    };

    struct data_hdr {
        int len;
        int kk;
        char str[0];
    };

    /* netlink attributes */
    enum {
        DOC_EXMPL_A_UNSPEC,
        DOC_EXMPL_A_MSG,
        DOC_EXMPL_A_MSG2,
        __DOC_EXMPL_A_MAX,
    };
    #define DOC_EXMPL_A_MAX (__DOC_EXMPL_A_MAX - 1)

    //copy from kernel driver genl_ops's cmd
    enum {
        DOC_EXMPL_C_UNSPEC,
        DOC_EXMPL_C_ECHO,
        __DOC_EXMPL_C_MAX,
    };
    #define DOC_EXMPL_C_MAX (__DOC_EXMPL_C_MAX - 1)

    static int error_handler(struct sockaddr_nl *nla, struct nlmsgerr *err, void *arg)
    {
        int *ret = arg;
        fprintf(stderr, "error\n");
        *ret = err-&gt;error;
        return NL_STOP;
    }

    static int finish_handler(struct nl_msg *msg, void *arg)
    {
        int *ret = arg;
        *ret = 0;
        fprintf(stderr, "finish\n");
        return NL_SKIP;
    }

    static int ack_handler(struct nl_msg *msg, void *arg)
    {
        int *ret = arg;
        *ret = 0;
        fprintf(stderr, "ack\n");
        return NL_STOP;
    }

    static int reply_handler(struct nl_msg *msg, void *arg)
    {
        struct nlattr *tb[DOC_EXMPL_A_MAX + 1] = {0};
        struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
        struct family_hdr *fhdr = genlmsg_attrdata(gnlh, 0);
        struct data_hdr *hdr;
        int rc, i;
        int rcvlen;

        rc = nla_parse(tb, DOC_EXMPL_A_MAX,
                genlmsg_attrdata(gnlh, sizeof(struct family_hdr)),
                genlmsg_attrlen(gnlh, sizeof(struct family_hdr)), NULL);
        if (rc) {
            printf("nla_parse err\n");
            return NL_STOP;
        }

        for (i = 1; i &lt;= DOC_EXMPL_A_MAX; i ++) {
            rcvlen = nla_len(tb[i]);
            hdr = (struct data_hdr*)nla_data(tb[i]);
            printf("rcv: %d %d %d %d rcvlen=%d %s\n", i, fhdr-&gt;ff, hdr-&gt;len, hdr-&gt;kk, rcvlen, hdr-&gt;str);
        }
        return NL_OK;
    }

    static int test_genlink_nl(void)
    {
        struct nl_handle *nlsk;
        int nlid, err, ret;

        struct nl_msg *msg = NULL;
        struct nl_cb *cb = NULL;

        char cbdata[123], sss[123];
        struct family_hdr *fhdr;
        struct data_hdr *hdr = (struct data_hdr *)sss;

        nlsk = nl_handle_alloc();
        if (!nlsk) {
            printf("nl_socket_alloc err\n");
            return -1;
        }

        nl_set_buffer_size(nlsk, 8192, 8192);

        if (genl_connect(nlsk)) {
            printf("genl_connect err\n");
            goto free_nlsk;
        }

        nlid = genl_ctrl_resolve(nlsk, "DOC_EXMPL");
        if (nlid &lt; 0) {
            printf("genl_ctrl_resolve err\n");
            goto free_nlsk;
        }

        msg = nlmsg_alloc();
        if (!msg) {
            printf("nlmsg_alloc err\n");
            goto free_nlsk;
        }

        cb = nl_cb_alloc(NL_CB_DEFAULT);
        if (!cb) {
            printf("nl_cb_alloc err\n");
            goto free_msg;
        }
        nl_socket_set_cb(nlsk, cb);

        fhdr = (struct family_hdr *)genlmsg_put(msg, 0, 0, nlid, sizeof(struct family_hdr), 0, DOC_EXMPL_C_ECHO, 0);
        if (!fhdr) {
            printf("genlmsg_put err\n");
            goto free_cb;
        }
        fhdr-&gt;ff = 111;

        hdr-&gt;len = 123;
        hdr-&gt;kk = 456;
        strcpy(hdr-&gt;str, MESSAGE_TO_KERNEL);
        ret = nla_put(msg, DOC_EXMPL_A_MSG, sizeof(struct data_hdr)+strlen(MESSAGE_TO_KERNEL), hdr);
        if (ret &lt; 0) {
            printf("nla_put err\n");
            goto free_cb;
        }

        hdr-&gt;len = 700;
        hdr-&gt;kk = 800;
        ret = nla_put(msg, DOC_EXMPL_A_MSG2, sizeof(struct data_hdr)+strlen(MESSAGE_TO_KERNEL), hdr);
        if (ret &lt; 0) {
            printf("nla_put err2\n");
            goto free_cb;
        }

        ret = nl_send_auto_complete(nlsk, msg);
        if (ret &lt; 0) {
            printf("nl_send_auto_complete err\n");
            goto free_cb;
        }

        err = 1;
        nl_cb_err(cb, NL_CB_CUSTOM, error_handler, &amp;err);
        nl_cb_set(cb, NL_CB_FINISH, NL_CB_CUSTOM, finish_handler, &amp;err);
        nl_cb_set(cb, NL_CB_ACK, NL_CB_CUSTOM, ack_handler, &amp;err);
        nl_cb_set(cb, NL_CB_VALID, NL_CB_CUSTOM, reply_handler, &amp;cbdata);

        ret = nl_recvmsgs(nlsk, cb);
        if (ret) {
            printf("nl_recvmsgs err\n");
        }

        return err;

    free_cb:
        nl_cb_put(cb);
    free_msg:
        nlmsg_free(msg);
    free_nlsk:
        nl_handle_destroy(nlsk);
        return -2;
    }

    int main(int argc, char *argv[])
    {
        return test_genlink_nl();
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据交换 genlink]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/10/kernel-genlink/"/>
    <updated>2020-08-10T23:09:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/10/kernel-genlink</id>
    <content type="html"><![CDATA[<p>3.x 内核</p>

<h3>kernel</h3>

<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;net/netlink.h&gt;
    #include &lt;net/genetlink.h&gt;
    #include &lt;linux/version.h&gt;

    #define TEST_GENL_MSG_FROM_KERNEL   "Hello from kernel space!!!"

    /* handler 
     * message handling code goes here; return 0 on success, negative 
     * values on failure 
     */  
    static int doc_exmpl_echo(struct sk_buff *skb, struct genl_info *info);

    /* netlink attributes */
    enum {
        DOC_EXMPL_A_UNSPEC,
        DOC_EXMPL_A_MSG,
        __DOC_EXMPL_A_MAX,
    };
    #define DOC_EXMPL_A_MAX (__DOC_EXMPL_A_MAX - 1)

    /* attribute policy */
    static struct nla_policy doc_exmpl_genl_policy[DOC_EXMPL_A_MAX + 1] = {
        [DOC_EXMPL_A_MSG] = { .type = NLA_NUL_STRING },
    };

    /* commands 定义命令类型，用户空间以此来表明需要执行的命令 */
    enum {
        DOC_EXMPL_C_UNSPEC,
        DOC_EXMPL_C_ECHO,
        __DOC_EXMPL_C_MAX,
    };
    #define DOC_EXMPL_C_MAX (__DOC_EXMPL_C_MAX - 1)

    /* family definition */
    static struct genl_family doc_exmpl_genl_family = {
        .id = GENL_ID_GENERATE,   //这里不指定family ID，由内核进行分配
        .hdrsize = 0,             //自定义的头部长度，参考genl数据包结构
        .name = "DOC_EXMPL",      //这里定义family的名称，user program需要根据这个名字来找到对应的family ID。
        .version = 1,
        .maxattr = DOC_EXMPL_A_MAX,
    };

    /* operation definition 将命令command echo和具体的handler对应起来 */
    static struct genl_ops doc_exmpl_genl_ops_echo = {
        .cmd = DOC_EXMPL_C_ECHO,
        .flags = 0,
        .policy = doc_exmpl_genl_policy,
        .doit = doc_exmpl_echo,
        .dumpit = NULL,
    };

    static struct genl_multicast_group doc_exmpl_genl_mcgrp = {
        .name = "DOC_EXMPL_GRP",
    };

    static inline int genl_msg_prepare_usr_msg(u8 cmd, size_t size, pid_t pid, struct sk_buff **skbp)
    {
        struct sk_buff *skb;

        /* create a new netlink msg */
        skb = genlmsg_new(size, GFP_KERNEL);
        if (skb == NULL) {
            return -ENOMEM;
        }

        /* Add a new netlink message to an skb */
        genlmsg_put(skb, pid, 0, &amp;doc_exmpl_genl_family, 0, cmd);

        *skbp = skb;
        return 0;
    }

    static inline int genl_msg_mk_usr_msg(struct sk_buff *skb, int type, void *data, int len)
    {
        int rc;

        /* add a netlink attribute to a socket buffer */
        if ((rc = nla_put(skb, type, len, data)) != 0) {
            return rc;
        }
        return 0;
    }

    /**
    * genl_msg_send_to_user - 通过generic netlink发送数据到netlink
    *
    * @data: 发送数据缓存
    * @len:  数据长度 单位：byte
    * @pid:  发送到的客户端pid
    *
    * return:
    *  0: 成功
    * -1: 失败
    */
    int genl_msg_send_to_user(void *data, int len, pid_t pid)
    {
        struct sk_buff *skb;
        size_t size;
        void *head;
        int rc;

        size = nla_total_size(len); /* total length of attribute including padding */

        rc = genl_msg_prepare_usr_msg(DOC_EXMPL_C_ECHO, size, pid, &amp;skb);
        if (rc) {
            return rc;
        }

        rc = genl_msg_mk_usr_msg(skb, DOC_EXMPL_A_MSG, data, len);
        if (rc) {
            kfree_skb(skb);
            return rc;
        }

        head = genlmsg_data(nlmsg_data(nlmsg_hdr(skb)));

        rc = genlmsg_end(skb, head);
        if (rc &lt; 0) {
            kfree_skb(skb);
            return rc;
        }

        rc = genlmsg_unicast(&amp;init_net, skb, pid);
        if (rc &lt; 0) {
            return rc;
        }

        return 0;
    }

    //echo command handler, 命令处理函数，当接收到user program发出的命令后，这个函数会被内核调用
    static int doc_exmpl_echo(struct sk_buff *skb, struct genl_info *info)
    {
        /* message handling code goes here; return 0 on success, negative values on failure */
        struct nlmsghdr *nlhdr;
        struct genlmsghdr *genlhdr;
        struct nlattr *nlh;
        char *str;
        int ret;

        nlhdr = nlmsg_hdr(skb);
        genlhdr = nlmsg_data(nlhdr);
        nlh = genlmsg_data(genlhdr);
        str = nla_data(nlh);
        printk("doc_exmpl_echo get: nla_len=%d, nla_type=%d, %s\n", nlh-&gt;nla_len, nlh-&gt;nla_type, str);

        ret = genl_msg_send_to_user(TEST_GENL_MSG_FROM_KERNEL,
                strlen(TEST_GENL_MSG_FROM_KERNEL) + 1,  nlhdr-&gt;nlmsg_pid);

        return ret;
    }

    int genetlink_init(void)
    {
        int rc;

        /**
         * 1. Registering A Family
         * This function doesn't exist past linux 3.12
         */
        rc = genl_register_family(&amp;doc_exmpl_genl_family);
        if (rc != 0)
            goto err_out1;

        rc = genl_register_ops(&amp;doc_exmpl_genl_family, &amp;doc_exmpl_genl_ops_echo);
        if (rc != 0)
            goto err_out2;

        /*
         * for multicast
         */
        rc = genl_register_mc_group(&amp;doc_exmpl_genl_family, &amp;doc_exmpl_genl_mcgrp);
        if (rc != 0)
            goto err_out3;

        printk("doc_exmpl_genl_mcgrp.id=%d", doc_exmpl_genl_mcgrp.id);
        printk("genetlink_init OK");
        return 0;

    err_out3:
        genl_unregister_ops(&amp;doc_exmpl_genl_family, &amp;doc_exmpl_genl_ops_echo);
    err_out2:
        genl_unregister_family(&amp;doc_exmpl_genl_family);
    err_out1:
        printk("Error occured while inserting generic netlink example module\n");
        return rc;
    }

    void genetlink_exit(void)
    {
        printk("Generic Netlink Example Module unloaded.");

        genl_unregister_mc_group(&amp;doc_exmpl_genl_family, &amp;doc_exmpl_genl_mcgrp);
        genl_unregister_ops(&amp;doc_exmpl_genl_family, &amp;doc_exmpl_genl_ops_echo);
        genl_unregister_family(&amp;doc_exmpl_genl_family);
    }

    module_init(genetlink_init);
    module_exit(genetlink_exit);
    MODULE_LICENSE("GPL");
</code></pre>

<pre><code>    obj-m += genlink.o

    KDIR := /usr/src/kernels/`uname -r`/

    PWD := `pwd`

    default:
        make -C $(KDIR) M=$(PWD) modules

    clean:
        rm -rf *.ko *.o *.mod.c .*.cmd .tmp_versions Module.symvers modules.order
</code></pre>

<h3>user</h3>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;poll.h&gt;
    #include &lt;string.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;signal.h&gt;

    #include &lt;linux/genetlink.h&gt;

    #define GENLMSG_DATA(glh)   ((void*)(((char*)glh) + GENL_HDRLEN))
    #define NLA_DATA(nla)       ((void *)((char*)(nla) + NLA_HDRLEN))
    #define NLA_NEXT(nla,len)   ((len) -= NLA_ALIGN((nla)-&gt;nla_len), \
                    (struct nlattr*)(((char*)(nla)) + NLA_ALIGN((nla)-&gt;nla_len)))
    #define NLA_OK(nla,len)     ((len) &gt;= (int)sizeof(struct nlattr) &amp;&amp; \
                    (nla)-&gt;nla_len &gt;= sizeof(struct nlattr) &amp;&amp; \
                    (nla)-&gt;nla_len &lt;= (len))

    //copy from kernel driver genl_ops's cmd
    enum {
        DOC_EXMPL_C_UNSPEC,
        DOC_EXMPL_C_ECHO,
        __DOC_EXMPL_C_MAX,
    };

    //copy from kernel driver netlink attribute
    enum {
        DOC_EXMPL_A_UNSPEC,
        DOC_EXMPL_A_MSG,
        __DOC_EXMPL_A_MAX,
    };

    #define MESSAGE_TO_KERNEL   "Hello World from user space!"


    /**
     * nla_attr_size - length of attribute size, NOT including padding
     * @param payload   length of payload
     * @return
     */
    static inline int nla_attr_size(int payload)
    {
        return NLA_HDRLEN + payload;
    }

    /**
     * nla_total_size - total length of attribute including padding
     * @param payload   length of payload, NOT including NLA_HDR
     */
    static inline int nla_total_size(int payload)
    {
        return NLA_ALIGN(nla_attr_size(payload));
    }

    static int genlmsg_open(void)
    {
        int sockfd;
        struct sockaddr_nl nladdr;
        int ret;

        sockfd = socket(AF_NETLINK, SOCK_RAW, NETLINK_GENERIC);
        if (sockfd &lt; 0) {
            printf("socket: %m\n");
            return -1;
        }

        memset(&amp;nladdr, 0, sizeof(nladdr));
        nladdr.nl_family = AF_NETLINK;
        nladdr.nl_pid = getpid();
        nladdr.nl_groups = 0xffffffff; //这个是mask值，如果family ID &amp; nl_groups为0，
                   //则这个family的广播就接收不到，所以这里设为0xffffffff就可以接收所有的family消息

        ret = bind(sockfd, (struct sockaddr *)&amp;nladdr, sizeof(nladdr));
        if (ret &lt; 0) {
            printf("bind: %m\n");
            ret = -1;
            goto err_out;
        }
        return sockfd;

    err_out:
        close(sockfd);
        return ret;
    }

    static void *genlmsg_alloc(int *size)
    {
        unsigned char *buf;
        int len;

        /*
         * attribute len
         * attr len = (nla_hdr + pad) + (payload(user data) + pad)
         */
        len = nla_total_size(*size);
        /*
         * family msg len,
         * but actually we have NOT custom family header
         * family msg len = family_hdr + payload(attribute)
         */
        len += 0;
        /*
         * generic netlink msg len
         * genlmsg len = (genlhdr + pad) + payload(family msg)
         */
        len += GENL_HDRLEN;
        /*
         * netlink msg len
         * nlmsg len = (nlmsghdr + pad) + (payload(genlmsg) + pad)
         */
        len = NLMSG_SPACE(len);

        buf = malloc(len);
        if (!buf)
            return NULL;

        memset(buf, 0, len);
        *size = len;
        return buf;
    }

    static void genlmsg_free(void *buf)
    {
        if (buf)
            free(buf);
    }

    static int genlmsg_send(int sockfd, unsigned short nlmsg_type, unsigned int nlmsg_pid,
            unsigned char genl_cmd, unsigned char genl_version,
            unsigned short nla_type, const void *nla_data, unsigned int nla_len)
    {
        struct nlmsghdr *nlh;      //netlink message header
        struct genlmsghdr *glh;    //generic netlink message header
        struct nlattr *nla;    //netlink attribute header
        struct sockaddr_nl nladdr;
        unsigned char *buf;
        int len;
        int count;
        int ret;

        if ((nlmsg_type == 0) || (!nla_data) || (nla_len &lt;= 0))
            return -1;

        len = nla_len;
        buf = genlmsg_alloc(&amp;len);
        if (!buf)
            return -1;

        nlh = (struct nlmsghdr *)buf;
        nlh-&gt;nlmsg_len = len;
        nlh-&gt;nlmsg_type = nlmsg_type;
        nlh-&gt;nlmsg_flags = NLM_F_REQUEST;
        nlh-&gt;nlmsg_seq = 0;
        nlh-&gt;nlmsg_pid = nlmsg_pid;

        glh = (struct genlmsghdr *)NLMSG_DATA(nlh);
        glh-&gt;cmd = genl_cmd;
        glh-&gt;version = genl_version;


        nla = (struct nlattr *)GENLMSG_DATA(glh);
        nla-&gt;nla_type = nla_type;
        nla-&gt;nla_len = nla_attr_size(nla_len);
        memcpy(NLA_DATA(nla), nla_data, nla_len);

        memset(&amp;nladdr, 0, sizeof(nladdr));
        nladdr.nl_family = AF_NETLINK;

        count = 0;
        ret = 0;
        do {
            ret = sendto(sockfd, &amp;buf[count], len - count, 0,
                (struct sockaddr *)&amp;nladdr, sizeof(nladdr));
            if (ret &lt; 0) {
                if (errno != EAGAIN) {
                    count = -1;
                    goto out;
                }
            } else {
                count += ret;
            }
        } while (count &lt; len);

    out:
        genlmsg_free(buf);

        printf("send len %d\n", count);
        return count;
    }

    /**
     *
     * @param sockfd    generic netlink socket fd
     * @param buf      the 'buf' is including the struct nlmsghdr,
     *                struct genlmsghdr and struct nlattr
     * @param len      size of 'buf'
     * @return  &gt;0    size of genlmsg
     *        &lt;0      error occur
     */
    static int genlmsg_recv(int sockfd, unsigned char *buf, unsigned int len)
    {
        struct sockaddr_nl nladdr;
        struct msghdr msg;
        struct iovec iov;
        int ret;

        nladdr.nl_family = AF_NETLINK;
        nladdr.nl_pid = getpid();
        nladdr.nl_groups = 0xffffffff;

        iov.iov_base = buf;
        iov.iov_len = len;

        msg.msg_name = (void *)&amp;nladdr;
        msg.msg_namelen = sizeof(nladdr);
        msg.msg_iov = &amp;iov;
        msg.msg_iovlen = 1;
        msg.msg_control = NULL;
        msg.msg_controllen = 0;
        msg.msg_flags = 0;
        ret = recvmsg(sockfd, &amp;msg, 0);
        ret = ret &gt; 0 ? ret : -1;
        printf("recv len %d\n", ret);
        return ret;
    }

    static int genlmsg_dispatch(struct nlmsghdr *nlmsghdr, unsigned int nlh_len,
                int nlmsg_type, int nla_type, unsigned char *buf, int *len)
    {
        struct nlmsghdr *nlh;
        struct genlmsghdr *glh;
        struct nlattr *nla;
        int nla_len;

        int l;
        int i;
        int ret = -1;

        if (!nlmsghdr || !buf || !len)
            return -1;

        printf("nlmsg_type = %d\n", nlmsghdr-&gt;nlmsg_type);
        if (nlmsg_type &amp;&amp; (nlmsghdr-&gt;nlmsg_type != nlmsg_type))
            return -1;

        //读取到的数据流里面，可能会包含多条nlmsg
        for (nlh = nlmsghdr; NLMSG_OK(nlh, nlh_len); nlh = NLMSG_NEXT(nlh, nlh_len))
        {
            /* The end of multipart message. */
            if (nlh-&gt;nlmsg_type == NLMSG_DONE) {
                printf("get NLMSG_DONE\n");
                ret = 0;
                break;
            }

            if (nlh-&gt;nlmsg_type == NLMSG_ERROR) {
                printf("get NLMSG_ERROR\n");
                ret = -1;
                break;
            }

            glh = (struct genlmsghdr *)NLMSG_DATA(nlh);
            nla = (struct nlattr *)GENLMSG_DATA(glh);   //the first attribute
            nla_len = nlh-&gt;nlmsg_len - GENL_HDRLEN;        //len of attributes
            for (i = 0; NLA_OK(nla, nla_len); nla = NLA_NEXT(nla, nla_len), ++i) {
                //一条nlmsg里面，可能会包含多个attr
                printf("%d. nla-&gt;nla_type = %d\n", i, nla-&gt;nla_type);
                /* Match the family ID, copy the data to user */
                if (nla_type == nla-&gt;nla_type) {
                    l = nla-&gt;nla_len - NLA_HDRLEN;  //attribute里的payload就是内核返回给用户的实际数据
                    *len = *len &gt; l ? l : *len;
                    memcpy(buf, NLA_DATA(nla), *len);
                    ret = 0;
                    break;
                }
            }
        }
        return ret;
    }

    static int genlmsg_get_family_id(int sockfd, const char *family_name)
    {
        void *buf;
        int len;
        __u16 id;
        int l;
        int ret;

        ret = genlmsg_send(sockfd, GENL_ID_CTRL, 0, CTRL_CMD_GETFAMILY, 1,
                CTRL_ATTR_FAMILY_NAME, family_name, strlen(family_name) + 1);
        if (ret &lt; 0)
            return -1;

        len = 256;
        buf = genlmsg_alloc(&amp;len);
        if (!buf)
            return -1;

        len = genlmsg_recv(sockfd, buf, len);
        if (len &lt; 0)
            return len;

        id = 0;
        l = sizeof(id);
        genlmsg_dispatch((struct nlmsghdr *)buf, len, 0, CTRL_ATTR_FAMILY_ID, (unsigned char *)&amp;id, &amp;l);
        genlmsg_free(buf);

        return id &gt; 0 ? id : -1;
    }


    #define BUF_SIZE    256
    static int test_netlink_unicast(void)
    {
        struct nlmsghdr *nlh = NULL;
        int sockfd = -1;
        unsigned char buf[BUF_SIZE];
        int len;
        int id;
        pid_t pid;
        int ret;

        len = BUF_SIZE;
        nlh = genlmsg_alloc(&amp;len);
        if (!nlh)
            return -1;

        sockfd = genlmsg_open();
        if (sockfd &lt; 0)
            return -1;

        id = genlmsg_get_family_id(sockfd, "DOC_EXMPL");  //这里必须先通过family的名字获取到family ID，名字需要与驱动里的一致
        printf("get family ID[%d]\n", id);
        if (id &lt;= 0) {
            ret = -1;
            goto out;
        }

        pid = getpid();
        ret = genlmsg_send(sockfd, id, pid, DOC_EXMPL_C_ECHO, 1,
                DOC_EXMPL_A_MSG, MESSAGE_TO_KERNEL, strlen(MESSAGE_TO_KERNEL) + 1); //向内核发送genl消息
        if (ret &lt; 0)
            goto out;

        ret = genlmsg_recv(sockfd, (unsigned char *)nlh, len); //等待内核的回复
        if (ret &gt; 0) {
            memset(buf, 0, sizeof(buf));
            len = sizeof(buf);
            ret = genlmsg_dispatch(nlh, ret, id, DOC_EXMPL_A_MSG, buf, &amp;len);
            if (ret == 0) {
                printf("get: %s\n", buf);
            }
        }

    out:
        close(sockfd);
        genlmsg_free(nlh);
        return ret;
    }

    int main(int argc, char *argv[])
    {
        test_netlink_unicast();
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
