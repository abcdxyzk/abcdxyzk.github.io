<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2020~09 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2020~09/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-10-27T09:30:41+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DKMS简介]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/21/kernel-dkms/"/>
    <updated>2020-09-21T11:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/21/kernel-dkms</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/wwang/archive/2011/06/21/2085571.html">https://www.cnblogs.com/wwang/archive/2011/06/21/2085571.html</a></p>

<p>DKMS全称是Dynamic Kernel Module Support，在内核版本变动之后可以自动重新生成新的模块。</p>

<h4>安装</h4>

<pre><code>    sudo apt-get install dkms
</code></pre>

<h4>流程</h4>

<p><img src="/images/kernel/20200921.jpg" alt="" /></p>

<p>DKMS主要的命令分别是add、build、install、uninstall和remove，另外，还可以执行"dkms status"查看目前DKMS系统维护的模块的状态。</p>

<p>DKMS要求我们的代码目录必须以" <module>-<module-version>&ldquo;的格式命名。</p>

<h4>命令</h4>

<p>以hello-0.1为例，代码copy到"/usr/src/hello-0.1"</p>

<pre><code>    # 添加
    sudo dkms add -m hello -v 0.1

    # 编译
    sudo dkms build -m hello -v 0.1
    生成模块路径： /var/lib/dkms/hello/0.1/*/*/module/

    # 安装
    sudo dkms install -m hello -v 0.1

    # 移除
    sudo dkms uninstall -m hello -v 0.1

    # 彻底删除，会把/var/lib/dkms下彻底删除
    sudo dkms remove -m hello -v 0.1 --all

    # 以上的每个步骤查看执行后的状态
    dkms status
</code></pre>

<h4>目录结构</h4>

<pre><code>    /usr/src/hello-0.1/
    ├── dkms.conf
    ├── hello.c
    └── Makefile
</code></pre>

<p>在Makefile中要使用变量$(KVERSION)指定内核版本号，这样我们在执行dkms时，就可以用“-k”选项来设定为哪个内核版本编译模块。</p>

<h4>dkms.conf</h4>

<pre><code>    PACKAGE_NAME="hello"
    PACKAGE_VERSION="0.1"
    CLEAN="make clean"
    MAKE[0]="make all KVERSION=$kernelver"
    BUILT_MODULE_NAME[0]="hello"
    DEST_MODULE_LOCATION[0]="/updates"
    AUTOINSTALL="yes"
</code></pre>

<p>PACKAGE_NAME和PACKAGE_VERSION和文件夹的命名是一致的。</p>

<p>CLEAN的命令是每次build的时候第一条执行的动作。</p>

<p>MAKE[0]用来设定编译的命令，一般情况下是不用设定的。在本例中，就可以把MAKE[0]这行删掉。但在下面这种情况下就需要设定了。比如，您的Makefile里有多个target，分别为all、debug、release等，不指定MAKE[0]时，编译会选择第一个target来执行，也就是make all，如果您想执行make release来编译，就需要在dkms.conf里明确设定。</p>

<p>BUILD_MODULE_NAME[0]用来指定模块的名称，一般情况下也可以不设定。</p>

<p>DEST_MODULE_LOCATION[0]用来设定模块安装的目的地址，本例是"/lib/module/$(KVERSION)/updates"。</p>

<p>AUTOINSTALL=&ldquo;yes"表示在Linux引导之后DKMS会自动对这个模块执行Build和Install的动作，当然如果模块已经处于该状态的话，相应的动作是不用再执行的。</p>

<h3>基于DKMS制作驱动程序的DEB安装包</h3>

<p>制作DEB包依赖于dh-make，请首先执行 sudo apt-get install dh-make 安装。</p>

<p>在模块处于"Built State"的条件下，执行 sudo dkms mkdeb -m hello -v 0.1 可以在目录“/var/lib/dkms/hello/0.1/deb”下生成deb包。</p>

<p>DKMS还提供了mktarball和mkrpm来制作tarball和RPM安装包。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[static_key 机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/21/kernel-static-key/"/>
    <updated>2020-09-21T11:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/21/kernel-static-key</id>
    <content type="html"><![CDATA[<p><a href="https://www.dazhuanlan.com/2019/10/10/5d9f4b6a20f82/">https://www.dazhuanlan.com/2019/10/10/5d9f4b6a20f82/</a></p>

<p>简单来说，如果你对代码性能很敏感，而且大多数情况下分支路径是确定的，可以考虑使用static keys。static keys可以代替普通的变量进行分支判断，目的是用来优化频繁使用if-else判断的问题，这里涉及到指令分支预取的一下问题。简单地说，现代cpu都有预测功能，变量的判断有可能会造成硬件预测失败，影响流水线性能。虽然有likely和unlikely，但还是会有小概率的预测失败。</p>

<h4>定义一个static_key</h4>

<pre><code>    struct static_key key = STATIC_KEY_INIT_FALSE;
</code></pre>

<p>注意：这个key及其初始值必须是静态存在的，不能定义为局部变量或者使用动态分配的内存。通常为全局变量或者静态变量。 其中的STATIC_KEY_INIT_FALSE表示这个key的默认值为false，对应的分支默认不进入，如果是需要默认进入的，用STATIC_KEY_INIT_TRUE，这里如果不赋值，系统默认为STATIC_KEY_INIT_FALSE，在代码运行中不能再用STATIC_KEY_INIT_FALSE/STATIC_KEY_INIT_TRUE进行赋值。
判断语句</p>

<p>对于默认为false（STATIC_KEY_INIT_FALSE）的，使用</p>

<pre><code>    if (static_key_false(&amp;key))
        do unlikely code
    else
        do likely code
</code></pre>

<p>对于默认为true（STATIC_KEY_INIT_TRUE）的，使用</p>

<pre><code>    if (static_key_true((&amp;static_key)))
        do the likely work;
    else
        do unlikely work
</code></pre>

<h4>修改判断条件</h4>

<p>使用static_key_slow_inc让分支条件变成true，使用static_key_slow_dec让分支条件变成false，与其初始的默认值无关。该接口是带计数的， 也就是：</p>

<p>  初始值为STATIC_KEY_INIT_FALSE的，那么： static_key_slow_inc; static_key_slow_inc; static_key_slow_dec 那么 if (static_key_false((&amp;static_key)))对应的分支会进入，而再次static_key_slow_dec后，该分支就不再进入了。</p>

<p>  初始值为STATIC_KEY_INIT_TRUE的，那么： static_key_slow_dec; static_key_slow_dec; static_key_slow_inc 那么 if (static_key_true((&amp;static_key)))对应的分支不会进入，而再次static_key_slow_inc后，该分支就进入了。</p>

<h4>static-key的内核实现</h4>

<p>static_key_false的实现：</p>

<p>对X86场景其实现如下，其它架构下的实现类似。</p>

<pre><code>    static __always_inline bool static_key_false(struct static_key *key)
    {
        return arch_static_branch(key);
    }

    static __always_inline bool arch_static_branch(struct static_key *key)
    {
        asm_volatile_goto("1:"
            ".byte " __stringify(STATIC_KEY_INIT_NOP) "nt"
            ".pushsection __jump_table,  "aw" nt"
            _ASM_ALIGN "nt"
            _ASM_PTR "1b, %l[l_yes], %c0 nt"
            ".popsection nt"
            : :  "i" (key) : : l_yes);
        return false;
    l_yes:
        return true;
    }
</code></pre>

<p>  其中的asm_volatile_goto宏 使用了asm goto，是gcc的特性，其允许在嵌入式汇编中jump到一个C语言的label，详见gcc的manual(<a href="https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html">https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html</a>)， 但是本处其作用只是将C语言的label “l_yes”传递到嵌入式汇编中。</p>

<p>STATIC_KEY_INITIAL_NOP其实就是NOP指令</p>

<p><code>.pushsection __jump_table</code> 是通知编译器，以下的内容写入到段 <code>__jump_table</code></p>

<p><code>_ASM_PTR “1b, %l[l_yes], %c0</code> ，是往段<code>__jump_table</code>中写入label &ldquo;1b"、C label "l_yes"和输入参数<code>struct static_key *key</code>的地址，这些信息对应于struct jump_entry 中的code、target、key成员，在后续的处理中非常重要。</p>

<p>.popsection表示以下的内容回到之前的段，其实多半就是.text段。</p>

<p>可见，以上代码的作用就是：执行NOP指令后返回false，同时把NOP指令的地址、代码"return true"对应地址、<code>struct static_key *key</code>的地址写入到段<code>__jump_table</code>。由于固定返回为false且为always inline，编译器会把</p>

<pre><code>    if (static_key_false((&amp;static_key)))
        do the unlikely work;
    else
        do likely work
</code></pre>

<p>优化为：</p>

<pre><code>    nop
    do likely work
    retq
    l_yes:
    do the unlikely work;
</code></pre>

<p>正常场景，就没有判断了。</p>

<p>static_key_true的实现：</p>

<pre><code>    static __always_inline bool static_key_true(struct static_key *key)
    {
        return !static_key_false(key);
    }
</code></pre>

<p>执行static_key_slow_inc(&amp;key)后，底层通过gcc提供的goto功能，再结合c代码编写的动态修改内存功能，就可以让使用key的代码从执行false分支变成执行true分支。当然这个更改代价时比较昂贵的，不是所有的情况都适用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[squid 开启cgi-bin/cachemgr.cgi]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/20/tools-squid-cachemgr/"/>
    <updated>2020-09-20T14:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/20/tools-squid-cachemgr</id>
    <content type="html"><![CDATA[<h4>start</h4>

<p><a href="/blog/2020/09/20/tools-apache2-cgi/">apache2 支持cgi</a></p>

<p>(可选)<a href="/blog/2020/09/20/tools-apache2-auth/">apache2 开启认证</a></p>

<p>sudo apt-get install squid-cgi</p>

<p>文件就在 /usr/lib/cgi-bin/ 下面，和 apache2 目录一致，不需要cp
<code>
    vim /etc/squid/cachemgr.conf
    localhost
    换成
    localhost:port
</code></p>

<pre><code>    vim /etc/squid/squid.conf
    注释掉这两行
    #http_access allow localhost manager
    #http_access deny manager
    添加这两行
    acl manager proto cache_object
    http_access allow manager
</code></pre>

<p>squid -k reconfigure</p>

<h4>cachemgr_passwd</h4>

<p>vim /etc/squid/squid.conf</p>

<p>cachemgr_passwd none all # 所有用户开启所有权限</p>

<p>// cachemgr_passwd 123456 all 不生效 ???</p>

<p>squid -k reconfigure</p>

<p>web 打开 <a href="http://ip/cgi-bin/cachemgr.cgi">http://ip/cgi-bin/cachemgr.cgi</a> 就能查看、操作一些squid功能了</p>

<p>用户名：manager 或 空</p>

<p>密码：空</p>

<h4>ubuntu 18.04</h4>

<p>18.04 的 squid 版本3.5.27-1ubuntu1.8 好像有问题，点击 Current Squid Configuration squid就重启。</p>

<p>换成 16.04 的 3.5.12-1ubuntu7.13 就没问题了。</p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid_3.5.12-1ubuntu7.13_amd64.deb">http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid_3.5.12-1ubuntu7.13_amd64.deb</a></p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/universe/s/squid3/squid-cgi_3.5.12-1ubuntu7.13_amd64.deb">http://security.ubuntu.com/ubuntu/pool/universe/s/squid3/squid-cgi_3.5.12-1ubuntu7.13_amd64.deb</a></p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid-common_3.5.12-1ubuntu7.13_all.deb">http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid-common_3.5.12-1ubuntu7.13_all.deb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache2 支持cgi]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/20/tools-apache2-cgi/"/>
    <updated>2020-09-20T14:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/20/tools-apache2-cgi</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-26824563-id-5769678.html">http://blog.chinaunix.net/uid-26824563-id-5769678.html</a></p>

<h4>ln</h4>

<pre><code>    ls -l /etc/apache2/*/*cgi*

    ln -s /etc/apache2/mods-available/cgid.conf /etc/apache2/mods-enabled/cgid.conf
    ln -s /etc/apache2/mods-available/cgid.load /etc/apache2/mods-enabled/cgid.load
    ln -s /etc/apache2/mods-available/cgi.load /etc/apache2/mods-enabled/cgi.load 
</code></pre>

<h4>restart</h4>

<p>service apache2 restart</p>

<p>CGI目录为 /usr/lib/cgi-bin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache2 访问认证]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/20/tools-apache2-auth/"/>
    <updated>2020-09-20T14:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/20/tools-apache2-auth</id>
    <content type="html"><![CDATA[<h4>创建密码</h4>

<pre><code>    htpasswd -c squid.pwd admin

    chown www-data:www-data squid.pwd
</code></pre>

<h4>修改 /etc/apache2/apache2.conf</h4>

<pre><code>    &lt;Location /cgi-bin/cachemgr.cgi&gt;
        AuthType Basic
        AuthName "admin"
        AuthUserFile  /etc/squid/squid.pwd
        require valid-user
    &lt;/Location&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
