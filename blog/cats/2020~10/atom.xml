<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2020~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2020~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-07-31T15:24:28+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu 18.04增加/etc/rc.local]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/ubuntu-rc-local/"/>
    <updated>2020-10-12T20:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/ubuntu-rc-local</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_41782149/article/details/89001226">https://blog.csdn.net/qq_41782149/article/details/89001226</a></p>

<p>ubuntu18.04不再使用 inited 管理系统，改用 systemd</p>

<h4>1.实现原理</h4>

<p>systemd 默认会读取 /etc/systemd/system 下的配置文件，该目录下的文件会链接 /lib/systemd/system/ 下的文件。一般系统安装完 /lib/systemd/system/ 下会有 rc-local.service 文件，即我们需要的配置文件。</p>

<h4>2.将 /lib/systemd/system/rc-local.service 链接到 /etc/systemd/system/ 目录下面来</h4>

<pre><code>    ln -fs /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service

    修改文件内容

    sudo vim /etc/systemd/system/rc-local.service

    在文件末尾增加
    [Install]
    WantedBy=multi-user.target
    Alias=rc-local.service
</code></pre>

<h4>3. 创建/etc/rc.local文件</h4>

<pre><code>    sudo vim /etc/rc.local

    #!/bin/bash
    ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu dns覆盖写入127.0.0.53]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/ubuntu-dns/"/>
    <updated>2020-10-12T20:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/ubuntu-dns</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/evanxuhe/article/details/90229597">https://blog.csdn.net/evanxuhe/article/details/90229597</a></p>

<p>/etc/resolve.conf 一直是 nameserver 127.0.0.53，无法修改，因为 ubuntu17.0之后特有，systemd-resolvd服务会一直覆盖</p>

<h4>解决办法</h4>

<pre><code>    sudo systemctl stop systemd-resolved
    sudo systemctl disable systemd-resolved
    sudo apt install unbound
    sudo rm -rf /etc/resolv.conf
    sudo vim  /etc/NetworkManager/NetworkManager.conf
    在 [main] 下面添加
    dns=unbound
    将dns服务替换为unbound
    reboot 开机查看resolve.conf发现nameserver自动配置
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[负数的取模运算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/alg-mod/"/>
    <updated>2020-10-12T20:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/alg-mod</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html">https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html</a></p>

<p>在不同的语言中，对负数执行取模运算，结果有可能会是不同的。例如，(-11)%5在python中计算的结果是4，而在C(C99)中计算的结果则是-1。</p>

<h3>truncate除法 &amp;&amp; floor除法</h3>

<p>　在大多数编程语言中，如果整数a不是整数b的整数倍数的话，那么a、b做除法产生的实际结果的小数部分将会被截除，这个过程称为截尾(truncation)。如果除法的结果是正数的话，那么一般的编程语言都会把结果趋零截尾，也就是说，直接把商的小数部分去除。但是如果除法的结果是负数的话，不同的语言通常采用了两种不同的截尾方法:一种是趋零截尾(truncate toward zero)，另一种是趋负无穷截尾(truncate toward negative infinity);相应的，两种除法分别被称为truncate除法和floor除法。</p>

<p>　事实上，可以认为不管除法的结果是正是负，truncate除法都是趋零结尾;而floor除法都是趋负无穷结尾。</p>

<h3>取模运算</h3>

<p>　取模运算实际上是计算两数相除以后的余数。假设q是a、b相除产生的商(quotient)，r是相应的余数(remainder)，那么在几乎所有的计算系统中，都满足<code>a=b*q+r</code>，其中|r|&lt;|a|。因此r有两个选择，一个为正，一个为负;相应的，q也有两个选择。如果a、b都是正数的话，那么一般的编程语言中，r为正数;或者如果a、b都是负数的话，一般r为负数。但是如果a、b一正一负的话，不同的语言则会根据除法的不同结果而使得r的结果也不同，并且一般r的计算方法都会满足<code>r=a-(a/b)*b</code>。</p>

<h3>常见语言</h3>

<h4>　(1)C/Java语言</h4>

<p>　　C/Java语言除法采用的是趋零截尾(事实上，C89对于除数或被除数之一为负数情况的结果是未定义的;C99才正式确定了趋零截尾)，即truncate除法。它们的取模运算符是%，并且此运算符只接受整型操作数。一个规律是，取模运算的结果的符号与第一个操作数的符号相同(或为0)。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-2)*5=-1</code>。</p>

<h4>　(2)C++语言</h4>

<p>　　C++语言的截尾方式取决于特定的机器。如果两个操作数均为正，那么取模运算的结果也为正数(或为0);如果两个操作数均为负数，那么取模运算的结果为负数(或为0);如果只有一个操作数为负数，那么取模运算的结果是取决于特定实现的。</p>

<h4>　(3)Python语言</h4>

<p>　　Python语言除法采用的是趋负无穷截尾，即floor除法。它的取模运算符也是%，并且此运算符可以接受浮点操作数。一个类似的规律是，取模运算的结果的符号与第二个操作数的符号相同。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-3)*5=4</code>。</p>

<p>　　这里需要注意的是，Python 3.x中"/&ldquo;运算符的意义发生了变化，&rdquo;/&ldquo;产生的结果将不会再进行截尾;相应的&rdquo;//&ldquo;运算符的结果才会进行截尾。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seq_file]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/seq_file/"/>
    <updated>2020-10-12T19:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/seq_file</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/Wandererzj/archive/2012/04/16/2452209.html">https://www.cnblogs.com/Wandererzj/archive/2012/04/16/2452209.html</a></p>

<pre><code>    struct seq_operations {
        void * (*start) (struct seq_file *m, loff_t *pos);
        void (*stop) (struct seq_file *m, void *v);
        void * (*next) (struct seq_file *m, void *v, loff_t *pos);
        int (*show) (struct seq_file *m, void *v);
    };
</code></pre>

<h4>seq_open</h4>

<pre><code>int seq_open(struct file *file, const struct seq_operations *op)
{
    struct seq_file *p = file-&gt;private_data;

    if (!p) {
        p = kmalloc(sizeof(*p), GFP_KERNEL);
        if (!p)
            return -ENOMEM;
        file-&gt;private_data = p;
    }
    memset(p, 0, sizeof(*p));
    mutex_init(&amp;p-&gt;lock);
    p-&gt;op = op;

    file-&gt;f_version = 0;

    file-&gt;f_mode &amp;= ~FMODE_PWRITE;
    return 0;
}
</code></pre>

<h4>seq_read 读取过程</h4>

<p>正常情况下分两次完成：</p>

<p>第一次执行执行seq_read时：start->show->next->show&hellip;->next->show->next->stop，此时返回内核自定义缓冲区所有内容，即copied !=0,所以会有第二次读取操作</p>

<p>第二次执行seq_read时：由于此时内核自定义内容都返回，根据seq_file->index指示，所以执行start->stop，返回0，即copied=0，并退出seq_read操作</p>

<pre><code>    ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
    {
        struct seq_file *m = (struct seq_file *)file-&gt;private_data;
        size_t copied = 0;
        loff_t pos;
        size_t n;
        void *p;
        int err = 0;

        mutex_lock(&amp;m-&gt;lock);

        ...

        /* we need at least one record in buffer */
        pos = m-&gt;index;
        p = m-&gt;op-&gt;start(m, &amp;pos);
        while (1)
        {
            err = PTR_ERR(p);
            if (!p || IS_ERR(p))
                break;
            err = m-&gt;op-&gt;show(m, p);

            if (err &lt; 0)
                break;
            if (unlikely(err))
                m-&gt;count = 0;
            if (unlikely(!m-&gt;count)) {
                p = m-&gt;op-&gt;next(m, p, &amp;pos);
                m-&gt;index = pos;
                continue;
            }

            if (m-&gt;count &lt; m-&gt;size)
                goto Fill;
            m-&gt;op-&gt;stop(m, p);
            kfree(m-&gt;buf);
            m-&gt;buf = kmalloc(m-&gt;size &lt;&lt;= 1, GFP_KERNEL);
            if (!m-&gt;buf)
                goto Enomem;
            m-&gt;count = 0;
            m-&gt;version = 0;
            pos = m-&gt;index;
            p = m-&gt;op-&gt;start(m, &amp;pos);
        }
        m-&gt;op-&gt;stop(m, p);
        m-&gt;count = 0;
        goto Done;
    Fill:
        /* they want more? let's try to get some more */
        while (m-&gt;count &lt; size) {
            size_t offs = m-&gt;count;
            loff_t next = pos;
            p = m-&gt;op-&gt;next(m, p, &amp;next);
            if (!p || IS_ERR(p)) {
                err = PTR_ERR(p);
                break;
            }
            err = m-&gt;op-&gt;show(m, p);
            if (m-&gt;count == m-&gt;size || err) {
                m-&gt;count = offs;
                if (likely(err &lt;= 0))
                    break;
            }
            pos = next;
        }
        m-&gt;op-&gt;stop(m, p);
        n = min(m-&gt;count, size);
        err = copy_to_user(buf, m-&gt;buf, n);
        if (err)
            goto Efault;
        copied += n;
        m-&gt;count -= n;
        if (m-&gt;count)
            m-&gt;from = n;
        else
            pos++;
        m-&gt;index = pos;
    Done:
        if (!copied)
            copied = err;   //copied = 0
        else {
            *ppos += copied;
            m-&gt;read_pos += copied;
        }
        file-&gt;f_version = m-&gt;version;
        mutex_unlock(&amp;m-&gt;lock);
        return copied;
    Enomem:
        err = -ENOMEM;
        goto Done;
    Efault:
        err = -EFAULT;
        goto Done;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lsof]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/command-lsof/"/>
    <updated>2020-10-12T15:48:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/command-lsof</id>
    <content type="html"><![CDATA[<h3>lsof查看端口被哪些程序在使用</h3>

<pre><code>    lsof -i TCP:port -n
    lsof -i UDP:port -n
    lsof -i :port -n
    lsof -i tcp:1521 -n
</code></pre>

<h3>查看连接创建时间</h3>

<pre><code>    netstat -npt | grep port
    tcp        0      0 ::ffff:192.168.251.43:51520 ::ffff:192.168.110.231:8998 ESTABLISHED 32439/java  

    lsof -p pid | grep port
    java    32439 root  118u  IPv6          165707367      0t0       TCP SC-HOST-43:51518-&gt;192.168.110.231:8998 (ESTABLISHED) 
    java    32439 root  126u  IPv6          165707404      0t0       TCP SC-HOST-43:51520-&gt;192.168.110.231:8998 (ESTABLISHED)

    注意到118u和126u是这两个连接的文件名，然后去ll /proc/pid/fd/118，就可以看到这个连接的建立时间了。
</code></pre>

<h3>查看进程启动路径</h3>

<pre><code>    ls -l /proc/pid/xx
</code></pre>
]]></content>
  </entry>
  
</feed>
