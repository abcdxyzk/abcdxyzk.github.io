<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2021~06 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2021~06/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-08-15T11:53:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用phpword生成word文档]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/20/lang-phpword/"/>
    <updated>2021-06-20T16:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/20/lang-phpword</id>
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/caba04b57258">https://www.jianshu.com/p/caba04b57258</a></p>

<h3>使用phpword生成文档有两种方式</h3>

<ol>
<li><p>直接使用代码编写word文档，用代码生成word，但是设置样式，格式，图片非常麻烦，不建议使用。如果客户或产品提供一份word的样式，我们也难以完全复原，调样式很头疼的。</p></li>
<li><p>读取原有word模板，替换相关变量。个人感觉这种方式能满足绝大部分需求，实现起来也比较简单，所有的样式，格式直接在word模板里设置好，替换变量就可以了，还可以很方便的切换模板。本文主要介绍这种方式，毕竟我们是为了快速实现客户的需求，让客户提供一份word模板，我们稍微一改就可以了。</p></li>
</ol>


<h3>通过composer安装phpword包</h3>

<pre><code>    composer require phpoffice/phpword
    # composer remove phpoffice/phpword # 卸载
</code></pre>

<h3>准备一个docx格式的word模板</h3>

<p>首先替换姓名，电话的值为 ${name}, ${mobile}</p>

<h3>开始替换变量</h3>

<pre><code>    include_once "vendor/autoload.php";
    $tmp = new \PhpOffice\PhpWord\TemplateProcessor('tmp.docx'); //打开模板

    $tmp-&gt;setValue('name', '李四'); //替换变量name
    $tmp-&gt;setValue('mobile', '18888888888'); //替换变量mobile
    $tmp-&gt;saveAs('简历.docx'); //另存为
</code></pre>

<h3>行数不确定替换</h3>

<p><img src="/images/lang/20210620-1.png" alt="" /></p>

<p>这需要用的克隆行，模板修改如下</p>

<p><img src="/images/lang/20210620-2.png" alt="" /></p>

<p>这里要记住的是表格左上角的变量school，这个变量用来控制你要复制的是哪一行,复制以后会生成类似于school#1，year#1，school#2，year#2，school#3，year#3 这样的变量</p>

<pre><code>    $arr=[
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
        ['school'=&gt;'大学','year'=&gt;'2014'],
    ];
    $rows = count($arr); //总行数
    $tmp-&gt;cloneRow('school', $rows); //复制行
    for ($i = 0; $i &lt; $rows; $i++) {
        $tmp-&gt;setValue("school#".($i+1), $arr[$i]['school']); //替换变量
        $tmp-&gt;setValue("year#".($i+1), $arr[$i]['year']);
    }
</code></pre>

<h3>如果有显示这一块，如果没有整个不显示</h3>

<p>要加一个块标签了，与html标签格式类似,成对出现，如下</p>

<pre><code>    ${WIN_BLOCK}
    获奖情况
    ${winning_record}
    ${/WIN_BLOCK}
</code></pre>

<p>当winning有值是显示win_block模块，并渲染winning_record,没有值是不显示win_block模块
<code>
    $winning_record = "";
    if ($winning_record != '') {
        $tmp-&gt;cloneBlock('WIN_BLOCK', 1);
        $tmp-&gt;setValue('winning_record', $winning_record);
    } else {
        #$tmp-&gt;deleteBlock('WIN_BLOCK'); //这个方法会出错，原因不知，用cloneBlock来代替
        $tmp-&gt;cloneBlock('WIN_BLOCK', 0);
    }
</code></p>

<h3>替换图片</h3>

<pre><code>    $tmp-&gt;setImageValue('header',['path'=&gt;'1.jpeg']);
    设置图片宽高
    $tmp-&gt;setImageValue('header', ['path' =&gt; '1.jpg','width'=&gt;500,'height'=&gt;500]);
    设置多次替换
    $tmp-&gt;setImageValue('header', ['path' =&gt; '1.jpg','width'=&gt;500,'height'=&gt;500],3);
</code></pre>

<h3>一些常用的word符号</h3>

<p>换行符 <code>&lt;w:br/&gt;</code><br/>
分页符 <code>&lt;w:br w:type="page"/&gt;</code><br/>
制表符 <code>&lt;w:tab/&gt;</code><br/>
html预留字符要替换为实体字符，如&amp;要替换为<code>&amp;amp;</code>，可以使用htmlspecialchars()</p>

<h4>使用方式</h4>

<p>比如我们数据库存的换行符一般是 <code>\n\r</code> 这个在word中是无效的，要替换为 <code>&lt;w:br/&gt;</code> 才行</p>

<pre><code>    $content = str_replace("\r\n", '&lt;w:br /&gt;', $content);
    $tem-&gt;setValue('content', $content); //内容
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composer 安装与使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/20/lang-php-composer/"/>
    <updated>2021-06-20T16:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/20/lang-php-composer</id>
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/composer-install-and-usage.html">https://www.runoob.com/w3cnote/composer-install-and-usage.html</a></p>

<p>Composer 是 PHP 的一个依赖管理工具。我们可以在项目中声明所依赖的外部工具库，Composer 会帮你安装这些依赖的库文件，有了它，我们就可以很轻松的使用一个命令将其他人的优秀代码引用到我们的项目中来。</p>

<p>Composer 默认情况下不是全局安装，而是基于指定的项目的某个目录中（例如 vendor）进行安装。</p>

<p>Composer 需要 PHP 5.3.2+ 以上版本，且需要开启 openssl。</p>

<p>Composer 可运行在 Windows 、 Linux 以及 OSX 平台上。</p>

<h4>安装</h4>

<pre><code>    php -r "copy('https://install.phpcomposer.com/installer', 'composer-setup.php');"
    php composer-setup.php

    All settings correct for using Composer
    Downloading...

    Composer (version 1.6.5) successfully installed to: /root/composer.phar
    Use it: php composer.phar
</code></pre>

<p>移动 composer.phar，这样 composer 就可以进行全局调用：</p>

<pre><code>    mv composer.phar /usr/local/bin/composer
</code></pre>

<p>切换为国内镜像：
<code>
    composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
</code></p>

<p>更新 composer：</p>

<pre><code>    composer selfupdate
</code></pre>

<h4>安装卸载phpword</h4>

<pre><code>    composer require phpoffice/phpword

    composer remove phpoffice/phpword
</code></pre>

<p>列出所有已经安装的包
<code>
    composer show
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Centos7安装PHP7]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/20/lang-centos-php/"/>
    <updated>2021-06-20T16:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/20/lang-centos-php</id>
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/1e23aba0a164">https://www.jianshu.com/p/1e23aba0a164</a></p>

<pre><code>     # 安装EPEL yum存储库
     yum install epel-release -y
     # 安装Remi存储库
     rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm

     # 安装 PHP 7.2
     yum --enablerepo=remi-php73 install php
     # 安装 PHP 7.3
     yum --enablerepo=remi-php72 install php
     # 安装 PHP 7.4 
     yum --enablerepo=remi-php74 install php php-zip php-xml
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipsec(AH和ESP)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ah-esp/"/>
    <updated>2021-06-15T22:24:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ah-esp</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lyg920/article/details/51658295">https://blog.csdn.net/lyg920/article/details/51658295</a></p>

<h2>介绍</h2>

<p>最初的IP协议是没有任何的安全措施的。IP数据报含有诸如源地址，目的地址，版本，长度，生存周期，承载协议，承载数据等字段。虽然其拥有“首部校验和”这样的字段来提供极其简易的完整性功能，但无力抗拒对数据的意外或者故意修改，也无法阻止信息的泄露等问题。</p>

<p>IPSec（Intemet Protocol Security）是由IEIF设计的一种端到端的确保IP层通信安全的机制，它不是一个单独的协议，而是一组协议。IPSec是IPv6的组成部分，也是IPv4的可选扩展协议。目前IPSec最主要的应用是构造虚拟专用网（VPN），它作为一个第三层隧道协议实现了VPN通信，可以为IP网络通信提供透明的安全服务，保证数据的完整性和机密性，有效抵御网络攻击。它所使用的加密算法和完整性验证算法从目前看来是不可能被破解的。定义IPSec协议簇的RFC如表3.5.1所示。</p>

<pre><code>    RFC 内容
    2401    IPSec体系结构
    2402    AH协议
    2403    HMAC-MD5-96在AH和ESP中的应用
    2404    HMAC-SHA-1-96在AH和ESP中的应用
    2405    DES-CBC在ESP中的应用
    2406    ESP协议
    2407    IPSec DOI
    2408    ISAKMP协议
    2409    IKE协议
    2410    NULL加密算法及其在IPSec中的应用
    2411    IPSec文档路线图
    2412    OAKLEY协议
</code></pre>

<p>IPSec众多的RFC通过关系图组织在一起，IPSec各组件的关系图如图3.5.1所示。</p>

<p>它包含了三个最重要的协议：认证头AH（Authentication Header），封装安全载荷ESP（Encapsulating Security Payload），密钥交换协议IKE（Internet Key Exchange），注意这些协议的使用均可独立于具体的加密算法：</p>

<p>（1）AH为IP数据包提供3种服务（统称验证）：数据完整性验证，通过使用Hash函数（如MD5）产生的验证码来实现；数据完整性时加入一个共享的会话密钥来实现；防重放攻击，在AH报头中加入序列号可以防止重放攻击。</p>

<p>（2）ESP除了为IP数据包提供AH上述的3种服务外，还能够提供数据加密。</p>

<h2>3.5.2 技术细节</h2>

<h3>（1）认证头（AH）</h3>

<h4>AH概述</h4>

<p>IPSec的子协议头认证协议AH，为IP报文提供数据完整性验证和数据源身份认证，使用的是HMAC算法，HMAC算法和非常相似，一般是由Hash算法演变而来，也就是将输入报文和双方事先已经共享的对称密钥结合然后应用Hash算法。采用相同的HMAC算法并共享密钥的双方才能产生相同的验证数据。所有的IPSec必须实现两个算法：HMAC-MD5和HMAC-SHA1.
AH和ESP的最大区别有两个：一个是AH不提供加密服务，另一个是它们验证的范围不同，ESP不验证IP报头，而AH同时验证部分报头，所以需要结合使用AH和ESP才能保证IP报头的机密性和完整性。AH为IP报头提供尽可能多的验证保护，验证失败的包将被丢弃，不交给上层协议解密，这种操作模式可以减少拒绝服务攻击成功的机会。</p>

<h4>AH头部格式</h4>

<p>AH协议是被IP协议封装的协议之一，如果IP协议头部的“下一个头”字段是51，则IP包的载荷就是AH协议，在IP包头后面跟的就是AH协议头部。AH报文头部如图3.5.2所示。</p>

<p><img src="/images/kernel/20210615-21.png" alt="" /></p>

<p>（1）下一个头（8位）：表示紧跟在AH头部后面的协议类型。在传输模式下，该字段是处于保护中的传输层协议的值，如6（TCP），17（UDP）或50（ESP）。在隧道模式下，AH保护整个IP包，该值是4，表示是IP-in-IP协议。</p>

<p>（2）有效载荷长度（8位）：其值是以32位（4字节）为单位的整个AH数据（包括头部和变长验证数据）的长度再减2。</p>

<p>（3）保留（16位）：准备将来对AH协议扩展时使用，目前协议规定这个字段应该被置为0。</p>

<p>（4）安全参数索引SPI（32位）：值为[256,2<sup>32</sup>-1]。实际上它是用来标识发送方在处理IP数据包时使用了哪些安全策略，当接收方看到这个字段后就知道如何处理收到的IPsec包。</p>

<p>（5）序列号（32位）：一个单调递增的计数器，为每个AH包赋予一个序号。当通信双方建立SA时，初始化为0。SA是单向的，每发送/接收一个包，外出/进入SA的计数器增1。该字段可用于抗重放攻击。</p>

<p>（6）验证数据：可变长，取决于采用何种消息验证算法。包含完整性验证码，也就是HMAC算法的结果，称为ICV，它的生成算法由SA指定。</p>

<h3>（2）封装安全载荷（ESP）</h3>

<h2>ESP概述</h2>

<p>ESP协议提供数据完整性验证和数据源身份认证的原理和AH一样，只是和AH比ESP的验证范围要小些。ESP协议规定了所有IPSec系统必须实现的验证算法：HMAC-MD5，HMAC-SHA1，NULL。和L2TP，GRE，AH等其他轨道技术相比，ESP具有特有的安全机制——加密，而且可以和其他隧道协议结合使用，为用户的远程通信提供更强大的安全支持。ESP加密采用的则是对称加密算法，它规定了所有IPSec系统必须实现的加密算法是DES-CBC和NULL，使用NULL是指实际上不进行加密或验证。</p>

<h3>ESP头部格式</h3>

<p>ESP协议是被IP协议封装的协议之一。如果IP协议头部的“下一个头”字段是50，IP包的载荷就是ESP协议，在IP包头后面跟的就是ESP协议头部。ESP报文头部如3.5.3所示，其中ESP头部包含SPI和序列号字段，ESP尾部包含填充项，填充长度和下一个头字段。</p>

<p><img src="/images/kernel/20210615-22.png" alt="" /></p>

<p>（1）安全参数索引SPI（32位）：值为[256,2<sup>32</sup>-1]。</p>

<p>（2）序列号（32位）：一个单调递增的计数器，为每个AH包赋予一个序号。当通信双方建立SA时，初始化为0。SA是单向的，每发送/接收一个包，外出/进入SA的计数器增1。该字段可用于抗重放攻击。</p>

<p>（3）报文有效载荷：是变长的字段，如果SA采用加密，该部分是加密后的密文；如果没有加密，该部分就是明文。</p>

<p>（4）填充项：是可选的字段，为了对齐待加密数据而根据需要将其填充到4字节边界。</p>

<p>（5）填充长度：以字节为单位指示填充项长度，范围为[0，255]。保证加密数据的长度适应分组加密算法的长度，也可以用以掩饰载荷的真实长度对抗流量分析。</p>

<p>（6）下一个头：表示紧跟在ESP头部后面的协议，其中值为6表示后面封装的是TCP。</p>

<p>（7）验证数据：是变长字段，只有选择了验证服务时才需要有该字段。</p>

<p>很多情况下，AH的功能已经能满足安全的需要，ESP由于需要使用高强度的加密算法，需要消耗更多的计算机运算资源，使用上受到一定限制。</p>

<p>在IPSec协议簇中使用两种不同功能的协议使得IPSec具有对网络安全细粒度的功能选则，便于用户依据自己的安全需要对网络进行灵活配置。</p>

<h3>（3）IPSec的两种模式</h3>

<h4>a. 传输模式</h4>

<p>传输模式（Transport Mode）是IPSec的默认模式,又称端到端（End-to-End）模式，它适用于两台主机之间进行IPSec通信。</p>

<p>传输模式下只对IP负载进行保护，可能是TCP/UDP/ICMP协议，也可能是AH/ESP协议。传输模式只为上层协议提供安全保护，在此种模式下，参与通信的双方主机都必须安装IPSec协议，而且它不能隐藏主机的IP地址。启用IPSec传输模式后，IPSec会在传输层包的前面增加AH/ESP头部或同时增加两种头部，构成一个AH/ESP数据包，然后添加IP头部组成IP包。在接收方，首先处理的是IP，然后再做IPSec处理，最后再将载荷数据交给上层协议。</p>

<pre><code>    IP头   IPSec头    IP载荷
</code></pre>

<p>传输模式的数据包结构</p>

<h4>b. 隧道模式</h4>

<p>隧道模式（Tunnel Mode）使用在两台网关之间，站点到站点（Site-to-Site）的通信。参与通信的两个网关实际是为了两个以其为边界的网络中的计算机提供安全通信的服务。</p>

<p>隧道模式为整个IP包提供保护，为IP协议本身而不只是上层协议提供安全保护。通常情况下只要使用IPSec的双方有一方是安全网关，就必须使用隧道模式，隧道模式的一个优点是可以隐藏内部主机和服务器的IP地址。大部分VPN都使用隧道模式，因为它不仅对整个原始报文加密，还对通信的源地址和目的地址进行部分和全部加密，只需要在安全网关，而不需要在内部主机上安装VPN软件，期间所有加密和
解密以及协商操作均由前者负责完成。</p>

<p>启用IPSec隧道模式后，IPSec将原始IP看作一个整体作为要保护的内容，前面加上AH/ESP头部，再加上新IP头部组成新IP包。隧道模式的数据包有两个IP头，内部头由路由器背后的主机创建，是通信终点；外部头由提供IPSec的设备（如路由器）创建，是IPSec的终点。事实上，IPSec的传输模式和隧道模式分别类似于其他隧道协议（如L2TP）的自愿隧道和强制隧道，即一个是由用户实施，另一个由网络设备实施。</p>

<pre><code>    外部IP头 IPSec头    内部IP头 IP载荷
</code></pre>

<p>隧道模式下，隧道中的数据包结构</p>

<h3>（4）身份验证与AH</h3>

<p>AH通过对报文应用一个使用密钥的单向散列函数来创建一个散列或消息摘要来进行身份验证。散列与文本合在一起传输。接收方对接收到的报文运用同样的单向散列函数并将结果与发送方提供的消息摘要的值比较，从而检测报文在传输过程中是否有部分发生变化。由于单向散列也包含两个系统之间的一个共享密钥，因此能确保真实性。
AH作用于整个报文，但任意会在传输中改变的IP头字段除外。例如，由沿传输路径的路由器修改的生存时间（Time to Live, TTL）字段是可变字段。</p>

<h4>AH的处理过程顺序如下。</h4>

<p>步骤1 使用共享密钥对IP头和数据载荷进行散列。</p>

<p>步骤2 散列构建一个新的AH头，插入到原始报文中。</p>

<p>步骤3 新报文路由器使用共享密钥对IP头和数据载荷进行散列，从AH头中取出传输的散列，再比较两个散列。</p>

<p>散列值必须精确匹配。如果报文传输中有一个比特位发生了变化，则接收到的报文的散列输出将改变，AH头将不能匹配。</p>

<p>AH支持HMAC-MD5和HMAC-SHA-1算法。在使用NAT的环境中，AH可能会遇到问题。</p>

<h3>（5）使用ESP进行身份验证与加密</h3>

<p>ESP通过加密载荷实现机密性，它支持多种对称加密算法。如果选择了ESP作为IPSec协议，也必须选择一种加密算法。IPSec的默认算法是56位DES。</p>

<p>ESP也能提供完整性和认证。首先对载荷加密，然后对加密过的载荷使用一种散列算法（HMAC-MD5或HMAC-SHA-1）。散列为数据载荷提供认证和数据完整性。</p>

<p>作为可选功能，ESP还能进行防重放保护。防重放保护验证每个报文是唯一的且没有被复制，这种保护确保黑客不能拦截报文和在数据流中插入改变后的报文。防重放的工作原理是跟踪报文顺序号并在目的端使用一个滑动窗口。当在源和目的间建立了一条连接时，两端的计数器被初始化为0。每次有报文发送时，源给报文追加一个顺序号，目的端使用滑动窗口确定预期的顺序号。目的端验证的报文的顺序号不是复制的，并且以正确的顺序被接收。例如，如果目的端的滑动窗口设为1，目的端期望接收到顺序号为1的报文。收到这样的报文后，滑动窗口进入到2.如果检测到重放的报文，重放报文将被丢弃，对此事件记录日志。</p>

<p>原始数据通过ESP得到良好保护，因为完整的原始IP数据报和ESP附加尾部都被加密。使用ESP认证，加密的IP数据报和附加尾部以及ESP头都得到散列进程处理。最后，一个新的IP头被附加到经过认证的载荷，使用新的IP地址在Internet中路由报文。</p>

<p>如果同时选择了认证和加密，先执行加密。这种处理顺序的一个原因是它有助于接收设备快速检测和丢弃重放的或伪造的报文。在解密报文之前，接收方可以认证进入的报文。这样可以快速检测到问题，并间接的降低了DoS攻击的影响。</p>

<h3>（6）IPSec工作流程</h3>

<h3>（7）IPSec的好处</h3>

<p>a.节约成本和方便网络管理</p>

<p>b.IPSec隧道可以用来创建安全的网络</p>

<p>c.IPSec隧道可以用来安全的远程管理</p>

<p>d.确保安全通信的认证和机密性</p>

<p>e.数据包认证提高了地址伪装与地址欺骗攻击的难度</p>

<p>f.通过non-end-to-end服务，IPSec可以确保一对或一组站点之间的消息都是加密的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP XFRM配置示例：手动配置IPSec]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ip-xfrm/"/>
    <updated>2021-06-15T22:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ip-xfrm</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sahusoft/article/details/8827362">https://blog.csdn.net/sahusoft/article/details/8827362</a></p>

<h3>1、拓扑</h3>

<pre><code>    192.168.18.101 &lt;=======&gt; 192.168.18.102
</code></pre>

<h3>2、配置192.168.18.101</h3>

<pre><code>    ip xfrm state add src 192.168.18.101 dst 192.168.18.102 proto esp spi 0x00000301 mode tunnel auth md5 0x96358c90783bbfa3d7b196ceabe0536b enc des3_ede 0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df
    ip xfrm state add src 192.168.18.102 dst 192.168.18.101 proto esp spi 0x00000302 mode tunnel auth md5 0x99358c90783bbfa3d7b196ceabe0536b enc des3_ede 0xffddb555acfd9d77b03ea3843f2653255afe8eb5573965df
    ip xfrm state get src 192.168.18.101 dst 192.168.18.102 proto esp spi 0x00000301

    ip xfrm policy add src 192.168.18.101 dst 192.168.18.102 dir out ptype main tmpl src 192.168.18.101 dst 192.168.18.102 proto esp mode tunnel
    ip xfrm policy add src 192.168.18.102 dst 192.168.18.101 dir in ptype main tmpl src 192.168.18.102 dst 192.168.18.101 proto esp mode tunnel
    ip xfrm policy ls
</code></pre>

<h3>3、配置192.168.18.102</h3>

<pre><code>    ip xfrm state add src 192.168.18.101 dst 192.168.18.102 proto esp spi 0x00000301 mode tunnel auth md5 0x96358c90783bbfa3d7b196ceabe0536b enc des3_ede 0xf6ddb555acfd9d77b03ea3843f2653255afe8eb5573965df
    ip xfrm state add src 192.168.18.102 dst 192.168.18.101 proto esp spi 0x00000302 mode tunnel auth md5 0x99358c90783bbfa3d7b196ceabe0536b enc des3_ede 0xffddb555acfd9d77b03ea3843f2653255afe8eb5573965df
    ip xfrm state get src 192.168.18.101 dst 192.168.18.102 proto esp spi 0x00000301

    ip xfrm policy add src 192.168.18.101 dst 192.168.18.102 dir in ptype main tmpl src 192.168.18.101 dst 192.168.18.102 proto esp mode tunnel
    ip xfrm policy add src 192.168.18.102 dst 192.168.18.101 dir out ptype main tmpl src 192.168.18.102 dst 192.168.18.101 proto esp mode tunnel
    ip xfrm policy ls
</code></pre>

<h3>4、测试4.1在192.168.18.101上执行</h3>

<pre><code>    ping 192.168.18.102
</code></pre>

<h4>4.2在192.168.18.102上抓包</h4>

<pre><code>    tcpdump -p esp
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
    11:12:00.771364 IP 192.168.18.101 &gt; 192.168.18.102: ESP(spi=0x00000301,seq=0x41d), length 116
    11:12:00.771498 IP 192.168.18.102 &gt; 192.168.18.101: ESP(spi=0x00000302,seq=0x183), length 116
    11:12:01.773378 IP 192.168.18.101 &gt; 192.168.18.102: ESP(spi=0x00000301,seq=0x41e), length 116
    11:12:01.773787 IP 192.168.18.102 &gt; 192.168.18.101: ESP(spi=0x00000302,seq=0x184), length 116
    11:12:02.774682 IP 192.168.18.101 &gt; 192.168.18.102: ESP(spi=0x00000301,seq=0x41f), length 116
    11:12:02.774793 IP 192.168.18.102 &gt; 192.168.18.101: ESP(spi=0x00000302,seq=0x185), length 116
</code></pre>

<p><a href="https://blog.csdn.net/xingyeping/article/details/51353448">https://blog.csdn.net/xingyeping/article/details/51353448</a></p>
]]></content>
  </entry>
  
</feed>
