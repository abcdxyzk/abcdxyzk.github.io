<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2023 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2023/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T15:25:29+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP数组实际占用内存大小的分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/lang-php-mem/"/>
    <updated>2023-12-10T16:48:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/lang-php-mem</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ghjbk/p/6953562.html">https://www.cnblogs.com/ghjbk/p/6953562.html</a></p>

<p>一般来说，PHP数组的内存利用率只有 1/10, 也就是说，一个在C语言里面100M 内存的数组，在PHP里面就要1G。下面我们可以粗略的估算PHP数组占用内存的大小,首先我们测试1000个元素的整数占用的内存：</p>

<pre><code>    &lt;?php  
        echo memory_get_usage() , '&lt;br&gt;';  
        $start = memory_get_usage();  
        $a = Array();  
        for ($i=0; $i&lt;1000; $i++) {  
            $a[$i] = $i + $i;  
        }  
        $mid =  memory_get_usage();  
        echo memory_get_usage() , '&lt;br&gt;';  
        for ($i=1000; $i&lt;2000; $i++) {  
            $a[$i] = $i + $i;  
        }  
        $end =  memory_get_usage();  
        echo memory_get_usage() , '&lt;br&gt;';  
        echo 'argv:', ($mid - $start)/1000 ,'bytes' , '&lt;br&gt;';  
        echo 'argv:',($end - $mid)/1000 ,'bytes' , '&lt;br&gt;';  
</code></pre>

<p>输出是:</p>

<pre><code>    353352
    437848
    522024
    argv:84.416bytes
    argv:84.176bytes
</code></pre>

<p>大概了解1000 个元素的整数数组需要占用 82k 内存，平均每个元素占用 84 个字节。而纯 C 中整体只需要 4k(一个整型占用4byte * 1000 )。memory_get_usage() 返回的结果并不是全是被数组占用了，还要包括一些 PHP 运行本身分配的一些结构，可能用内置函数生成的数组更接近真实的空间:</p>

<pre><code>    &lt;?php  
        $start = memory_get_usage();  
        $a = array_fill(0, 10000, 1);  
        $mid = memory_get_usage(); //10k elements array;  
        echo 'argv:', ($mid - $start )/10000,'byte' , '&lt;br&gt;';  
        $b = array_fill(0, 10000, 1);  
        $end = memory_get_usage(); //10k elements array;  
        echo 'argv:', ($end - $mid)/10000 ,'byte' , '&lt;br&gt;';  
</code></pre>

<p>得到:</p>

<pre><code>    argv:54.5792byte
    argv:54.5784byte
</code></pre>

<p>从这个结果来看似乎一个数组元素大约占用了54个字节左右。</p>

<p>首先看一下32位机C语言各种类型占用的字节：</p>

<pre><code>    #include "stdafx.h"  
    //#include &lt;stdio.h&gt;  

    int main() {  
            printf("int:%d\nlong:%d\ndouble:%d\nchar*:%d\nsize_t:%d\n",   
            sizeof(int), sizeof(long),   
            sizeof(double), sizeof(char *),   
            sizeof(size_t));  
        return   0;   
    }  
</code></pre>

<pre><code>    int:4
    long:4
    double:8
    har*:4
    size_t:4
    在PHP中都使用long类型来代表数字，没有使用int类型
    大家都明白PHP是一种弱类型的语言，它不会去区分变量的类型，没有int float char *之类的概念。
    我们看看php在zend里面存储的变量，PHP中每个变量都有对应的 zval， Zval结构体定义在Zend/zend.h里面，其结构:
</code></pre>

<pre><code>    typedef struct _zval_struct zval;  
    struct _zval_struct {  
        /* Variable information */  
        zvalue_value value;  /* The value 1 12字节(32位机是12，64位机需要8+4+4=16) */  
        zend_uint refcount__gc; /* The number of references to this value (for GC) 4字节 */  
        zend_uchar type;        /* The active type 1字节*/  
        zend_uchar is_ref__gc;  /* Whether this value is a reference (&amp;) 1字节*/  
    };  
</code></pre>

<p>PHP使用一种UNION结构来存储变量的值,即zvalue_value 是一个union，UNION变量所占用的内存是由最大</p>

<p>成员数据空间决定。</p>

<pre><code>    typedef union _zvalue_value {  
        long lval;                /* long value */  
        double dval;                /* double value */  
        struct {                    /* string value */  
            char *val;  
            int len;  
        } str;   
        HashTable *ht;            /* hash table value */  
        zend_object_value obj;    /*object value */  
    } zvalue_value;  
</code></pre>

<p>最大成员数据空间是struct str，指针占 <code>*val</code> 用4字节，INT占用4字节，共8字节。</p>

<p>struct zval占用的空间为8+4+1+1 = 14字节，</p>

<p>其实呢，在zval中数组，字符串和对象还需要另外的存储结构，数组则是一个 HashTable:</p>

<p>HashTable结构体定义在Zend/zend_hash.h.</p>

<pre><code>    typedef struct _hashtable {  
        uint nTableSize;//4  
        uint nTableMask;//4  
        uint nNumOfElements;//4  
        ulong nNextFreeElement;//4  
        Bucket *pInternalPointer;   /* Used for element traversal 4*/  
        Bucket *pListHead;//4  
        Bucket *pListTail;//4  
        Bucket **arBuckets;//4  
        dtor_func_t pDestructor;//4  
        zend_bool persistent;//1  
        unsigned char nApplyCount;//1  
        zend_bool bApplyProtection;//1  
    #if ZEND_DEBUG  
        int inconsistent;//4  
    #endif  
    } HashTable;  
</code></pre>

<p>HashTable 结构需要 39 个字节，每个数组元素存储在 Bucket 结构中:</p>

<pre><code>    typedef struct bucket {  
        ulong h;            /* Used for numeric indexing            4字节 */  
        uint nKeyLength;        /* The length of the key (for string keys)  4字节 */  
        void *pData;            /* 4字节*/  
        void *pDataPtr;         /* 4字节*/  
        struct bucket *pListNext;   /* PHP arrays are ordered. This gives the next element in that order 4字节 */  
        struct bucket *pListLast;   /* and this gives the previous element         4字节 */  
        struct bucket *pNext;       /* The next element in this (doubly) linked list     4字节 */  
        struct bucket *pLast;       /* The previous element in this (doubly) linked list     4字节 */  
        char arKey[1];          /* Must be last element   1字节*/  
    } Bucket;  
</code></pre>

<p>Bucket 结构需要 33 个字节，键长超过四个字节的部分附加在 Bucket 后面，而元素值很可能是一个 zval 结构，另外每个数组会分配一个由 arBuckets 指向的 Bucket 指针数组， 虽然不能说每增加一个元素就需要一个指针，但是实际情况可能更糟。这么算来一个数组元素就会占用 54 个字节，与上面的估算几乎一样。</p>

<p>一个空数组至少会占用 14(zval) + 39(HashTable) + 33(arBuckets) = 86
个字节，作为一个变量应该在符号表中有个位置，也是一个数组元素，因此一个空数组变量需要 118
个字节来描述和存储。从空间的角度来看，小型数组平均代价较大，当然一个脚本中不会充斥数量很大的小型数组，可以以较小的空间代价来获取编程上的快捷。但如果将数组当作容器来使用就是另一番景象了，实际应用经常会遇到多维数组，而且元素居多。比如10k个元素的一维数组大概消耗540k内存，而10k
 x 10 的二维数组理论上只需要 6M 左右的空间，但是按照 memory_get_usage
的结果则两倍于此，[10k,5,2]的三维数组居然消耗了23M，小型数组果然是划不来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump 参数 net-buffer-length]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len/"/>
    <updated>2023-12-10T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yexiaomodemo/article/details/111050882">https://blog.csdn.net/yexiaomodemo/article/details/111050882</a></p>

<h4>用处一：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,那么一旦你使用到还原时，你的数据一次commit提交是默认1m 提交时的10倍速度</p>

<h4>用处二：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,小表估计就是一个insert就完事了，导入时效率会很高。当你备份文件有5G 10G了，那个时候这些参数非常有用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu安装vulkan]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/ubuntu-vulkan/"/>
    <updated>2023-12-10T16:37:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/ubuntu-vulkan</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/luolinll1212/article/details/113261022">https://blog.csdn.net/luolinll1212/article/details/113261022</a></p>

<h2>安装</h2>

<h4>2.1 方式一</h4>

<pre><code>    sudo apt-get install cmake git gcc g++ mesa-* libwayland-dev libxrandr-dev
    sudo apt-get install libvulkan1 mesa-vulkan-drivers vulkan-utils
    vulkaninfo
</code></pre>

<h4>2.2 方式二 （推荐）</h4>

<pre><code>    sudo apt-get install cmake git gcc g++ mesa-* libwayland-dev libxrandr-dev 
    sudo apt-get install libvulkan1 mesa-vulkan-drivers vulkan-utils libxcb-keysyms1-dev
    sudo apt-get install libxcb1-dev libx11-dev
    wget https://sdk.lunarg.com/sdk/download/1.2.162.1/linux/vulkansdk-linux-x86_64-1.2.162.1.tar.gz
    mkdir vulkan 
    mv vulkansdk-linux-x86_64-1.2.162.1.tar.gz vulkan
    cd vulkan
    tar xf vulkansdk-linux-x86_64-1.2.162.1.tar.gz
    # 下载github
    cd 1.2.162.1/source/shaderc
    python update_shaderc_sources.py 
    # 编译
    cd 1.2.162.1
    bash vulkansdk  # 编译vulkan
    source setup-env.sh # vulkan -&gt; 系统环境变量
    ./x86_64/bin/vulkaninfo
</code></pre>

<h3>2.3 方式三</h3>

<pre><code>    git clone https://github.com/SaschaWillems/Vulkan.git
    git submodule sync
    git submodule update --init --recursive
    mkdir build
    cd build
    cmake ..
    make
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jSignature.js实现电子签名]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/lang-web-jSignature/"/>
    <updated>2023-11-19T18:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/lang-web-jSignature</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_45740068/article/details/129163913">https://blog.csdn.net/weixin_45740068/article/details/129163913</a></p>

<p><a href="https://www.mianshigee.com/project/brinley-jSignature/">https://www.mianshigee.com/project/brinley-jSignature/</a></p>

<p><a href="https://www.erlangyun.com/p?id=164">https://www.erlangyun.com/p?id=164</a></p>

<p><br><br></p>

<script src="http://abcdxyzk.github.io/javascripts/jquery.min.js"></script>


<script src="http://abcdxyzk.github.io/javascripts/jSignature.min.js"></script>




<div class="container">
    <div id="signatureparent">
        <!--画布-->
        <div id="signature"></div>
    </div>
    <br>
    <div class="footer-btn">
        <button type="button" class="btn btn-default btn-block" id="clear">清除</button>
        <button type="button" class="btn btn-primary btn-block" id="save">预览</button>
    </div>
</div>


<p><br><br></p>

<!--预览-->


<div class="autograph">
    <img src="" href="img" style='background:white;' />
</div>


<p><br><br></p>





<script>
    var param= {
        'background-color': 'aliceblue',
        width: '80%',   //签名区域的宽
        height: '50%',  //签名区域的高
        cssclass: 'whitee', //画布的类 可以写自定义的样式
        UndoButton:false,   //撤销按钮的状态 这个按钮的样式修改要去jSignature.js文件中去找
        signatureLine: false,   //去除默认画布上那条横线
        lineWidth: '2'  //画笔的大小
    };
    $("#signature").jSignature(param); //初始化、可设置画板参数

    //清除
    $('#clear').click(function () {
        $("#signature").jSignature("reset");
        $("[href=img]")[0].src = ''
    });

    //保存 
    $('#save').click(function () {
        // 判断是否签名
        if ( $("#signature").jSignature('getData', 'native').length === 0) {
            return alert("请先进行签名");
        }

        // 将签名的画布保存为base64编码字符串 默认是png的
        var datapair = $("#signature").jSignature("getData", "image");
        var i = new Image();
        i.src = "data:" + datapair[0] + "," + datapair[1];
        $("[href=img]")[0].src = i.src
    })
</script>


<pre><code>
    &lt;script src="http://abcdxyzk.github.io/javascripts/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="http://abcdxyzk.github.io/javascripts/jSignature.min.js"&gt;&lt;/script&gt;

    &lt;div class="container"&gt;
        &lt;div id="signatureparent"&gt;
            &lt;!--画布--&gt;
            &lt;div id="signature"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;br&gt;
        &lt;div class="footer-btn"&gt;
            &lt;button type="button" class="btn btn-default btn-block" id="clear"&gt;清除&lt;/button&gt;
            &lt;button type="button" class="btn btn-primary btn-block" id="save"&gt;预览&lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;br&gt;&lt;br&gt;
    &lt;!--预览--&gt;
    &lt;div class="autograph"&gt;
        &lt;img src="" href="img" style='background:white;' /&gt;
    &lt;/div&gt;
    &lt;br&gt;&lt;br&gt;

    &lt;style type='text/css'&gt;
    .whitee {
        background-color: 'red';
    }
    &lt;/style&gt;

    &lt;script&gt;
        var param= {
            'background-color': 'aliceblue',
            width: '80%',   //签名区域的宽
            height: '50%',  //签名区域的高
            cssclass: 'whitee', //画布的类 可以写自定义的样式
            UndoButton:false,   //撤销按钮的状态 这个按钮的样式修改要去jSignature.js文件中去找
            signatureLine: false,   //去除默认画布上那条横线
            lineWidth: '2'  //画笔的大小
        };
        $("#signature").jSignature(param); //初始化、可设置画板参数

        //清除
        $('#clear').click(function () {
            $("#signature").jSignature("reset");
            $("[href=img]")[0].src = ''
        });

        //保存 
        $('#save').click(function () {
            // 判断是否签名
            if ( $("#signature").jSignature('getData', 'native').length === 0) {
                return alert("请先进行签名");
            }

            // 将签名的画布保存为base64编码字符串 默认是png的
            var datapair = $("#signature").jSignature("getData", "image");
            var i = new Image();
            i.src = "data:" + datapair[0] + "," + datapair[1];
            $("[href=img]")[0].src = i.src
        })
    &lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL中case的使用方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/mysql-case/"/>
    <updated>2023-11-19T18:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/mysql-case</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_53222768/article/details/120101414">https://blog.csdn.net/m0_53222768/article/details/120101414</a></p>

<pre><code>    SELECT CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END
    salary_class,  COUNT(*)  FROM    Table_A
    GROUP BY CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END;
</code></pre>
]]></content>
  </entry>
  
</feed>
