<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2023~06 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2023~06/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[grep如何匹配制表符]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/24/tools-grep/"/>
    <updated>2023-06-24T19:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/24/tools-grep</id>
    <content type="html"><![CDATA[<p><a href="https://www.iteye.com/blog/xulu010-2412401">https://www.iteye.com/blog/xulu010-2412401</a></p>

<pre><code>    cat 1 | grep '1\t2'
</code></pre>

<p>因为，‘\t’里的\会被认为是转义字符，只能匹配到‘1t2’这样的字符串</p>

<p>那要怎样匹配呢，两个方案</p>

<h4>1.手动把制表符打出来</h4>

<pre><code>    cat 1 | grep '1 2'  
</code></pre>

<p>制表符的打法是ctrl-v + tab</p>

<h4>2.使用$符号展开\t</h4>

<pre><code>    cat 1 | grep '1'$'\t''2'  
</code></pre>

<p>$符号在shell中是引用变量的意思，所以 $&lsquo;\t&rsquo; 就是返回了一个展开的制表符</p>

<p>如果要匹配多个制表符，使用+号匹配即可</p>

<pre><code>    cat 1 | grep '3'$'\t''\+4'  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab不再发出告警邮件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/24/tools-crontab/"/>
    <updated>2023-06-24T19:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/24/tools-crontab</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-405749-id-2949218.html">http://blog.chinaunix.net/uid-405749-id-2949218.html</a></p>

<p>在默认情况下，cron程序会向用户的本地信箱中发送邮件，则产生的邮件数量将会很巨大，那么如何禁用邮件报警功能呢，解决方法有如下一些：</p>

<p>不装邮件时 保存到 /var/spool/mail/root</p>

<p>装邮件时 保存到 /root/Maildir/new/</p>

<h4>1.将执行命令的信息重定向到</h4>

<pre><code>    cron_command &gt;/dev/null 2&gt;&amp;1
</code></pre>

<h4>2.将执行命令的信息重定向到</h4>

<pre><code>    cron_command &amp;&gt;/dev/null
</code></pre>

<h4>3.在crontab设置文件中指定发送到空</h4>

<pre><code>    MAILTO=""
    cron_command
</code></pre>

<h2>在crontab设置文件中指定发送到邮件</h2>

<pre><code>    MAILTO="1@qq.com"
    cron_command
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPMailer 发送邮件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/24/phpmailer/"/>
    <updated>2023-06-24T11:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/24/phpmailer</id>
    <content type="html"><![CDATA[<h2>使用 PHP 自带 mail</h2>

<p><a href="https://www.php.net/manual/zh/function.mail.php">https://www.php.net/manual/zh/function.mail.php</a></p>

<pre><code>    public function testEmail()
    {
        $to = "1@qq.com";
        $subject = "test email";
        $message = "test email msg";
        $headers = array(
            'From' =&gt; '2@qq.cn'
        );

        if (mail($to, $subject, $message, $headers)) {
            echo "send ok";
        } else {
            echo "send fail";
        }
    }
</code></pre>

<hr />

<h2>使用 PHPMailer</h2>

<p><a href="https://www.php.cn/faq/545800.html">https://www.php.cn/faq/545800.html</a></p>

<h4>PHPMailer的安装和配置</h4>

<p>使用PHPMailer库前，需要先将其安装到项目中。在命令行中切换到你项目的根目录下，运行下面的命令进行安装：</p>

<pre><code>    composer require phpmailer
</code></pre>

<p>安装完毕后，我们需要在项目中引用PHPMailer类文件。在代码中添加以下语句：</p>

<pre><code>    require_once "tools/composer/vendor/autoload.php";

    use PHPMailer\PHPMailer\PHPMailer;
    use PHPMailer\PHPMailer\SMTP;
</code></pre>

<p>在以上示例中，我们使用了isSMTP()方法将SMTP协议开启，使用了SMTPDebug调试模式输出SMTP交互信息，设置了SMTP服务器地址、用户名和密码等信息，设置了发件人和收件人的邮箱地址和名称，设置了邮件主题和正文，同时还设置了纯文本形式的邮件正文。</p>

<h4>PHPMailer发送附件邮件</h4>

<p>发送带附件的邮件，我们需要使用PHPMailer类的addAttachment()方法添加附件。下面我们将举一个例子来演示如何实现加入附件的邮件发送。</p>

<pre><code>    $mail-&gt;addAttachment('path/to/file.pdf');
</code></pre>

<h4>样例</h4>

<pre><code>    // 不认证
    public function testEmail2()
    {
        $mail = new PHPMailer();
        $mail-&gt;isSMTP();
        $mail-&gt;Host = '192.168.100.41';
        $mail-&gt;Port = 25;

        $mail-&gt;setFrom('2@qq.cn', 'secure');
        $mail-&gt;addAddress('1@qq.com', 'kk');
        $mail-&gt;Subject = 'Email Subject';
        $mail-&gt;Body = 'Email Body';
        $mail-&gt;AltBody = 'Email Body in Plain Text';

    //  $mail-&gt;addAttachment('path/to/file.pdf');

        if(!$mail-&gt;send()) {
            echo "error " . $mail-&gt;ErrorInfo;
        } else {
            echo "ok";
        }
    }

    // SASL 认证
    public function testEmail3()
    {
        $mail = new PHPMailer();
        $mail-&gt;isSMTP();
        $mail-&gt;Host = '192.168.100.41';
        $mail-&gt;Port = 25;
    // TODO tls ?
    //  $mail-&gt;Port = 587;
    //  $mail-&gt;SMTPSecure = 'tls';

    // user 1
        $mail-&gt;SMTPAuth = true;
        $mail-&gt;Username = '3@qq.cn';
        $mail-&gt;Password = '123456';

        $mail-&gt;setFrom('2@qq.cn', 'secure');
        $mail-&gt;addAddress('1@qq.com', 'kk');
        $mail-&gt;Subject = 'Email Subject';
        $mail-&gt;Body = 'Email Body';
        $mail-&gt;AltBody = 'Email Body in Plain Text';

    //  $mail-&gt;addAttachment('path/to/file.pdf');

        if(!$mail-&gt;send()) {
            echo "error " . $mail-&gt;ErrorInfo;
        } else {
            echo "ok";
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excel 的列与数字转换]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/06/lang-excel/"/>
    <updated>2023-06-06T08:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/06/lang-excel</id>
    <content type="html"><![CDATA[<h4>Excel 的列与数字转换</h4>

<pre><code>    十进制   0 1 ... 9 10 11 ... 100 101
    按十进制 A B ... Z BA BB ... BAA BAB // Z=26  ZZ=26*26        ZZZ=26*26*26
    实际上   A B ... Z AA AB ... AAA AAB // Z=26  ZZ=26*26 + 26   ZZZ=26*26*26 + 26*26 + 26
        //                    转成公式  Z=26  ZZ=(Z)*26 + 26  ZZZ=(ZZ)*26 + 26
</code></pre>

<pre><code>    function id_to_xls($id)
    {
        $k = '';
        while (true) {
            $k = chr($id % 26 + ord('A')) . $k;
            $id -= 26;
            if ($id &lt; 0)
                break;
            $id = (int)($id / 26);
        }
        return $k;
    }

    function xls_to_id($xlsCol)
    {
        $hh = 0;
        for ($i = 0; $i &lt; strlen($xlsCol); $i ++) { // ZZ = 26*26 + 26
            $hh = $hh * 26;             //      26*26
            $hh += ord($xlsCol[$i]) - ord('A') + 1; //      26
        }
        return $hh - 1;
    }


    for ($i = 0; $i &lt; 26*26*26 + 26*26 + 26 + 10; $i ++) {
        $k = id_to_xls($i);
        $id = xls_to_id($k);
        echo $i, "\t", $k, "\t", $id, "\n";
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excel getOldCalculatedValue 忽略计算值]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/06/lang-excel-oldval/"/>
    <updated>2023-06-06T08:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/06/lang-excel-oldval</id>
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/ask/sof/111247127">https://cloud.tencent.com/developer/ask/sof/111247127</a></p>

<p><a href="https://blog.csdn.net/weixin_36251052/article/details/115960992">https://blog.csdn.net/weixin_36251052/article/details/115960992</a></p>

<p>XLS文件中的每个单元格都包含一个预先计算的值以及公式。如果我可以让PHPExcel在读取文件时不尝试计算公式(而只是按原样使用预先计算的值)</p>

<p>使用 getOldCalculatedValue() 将返回为在MS Excel中生成的公式单元格计算的最后一个值(即使这样,也可以在MS Excel中禁用计算,然后不会设置此值). PHPExcel生成的文件不会填充此值,因此它只提供默认值0.</p>

<p>一般来说,在尝试评估公式值时,应始终使用getCalculatedValue()</p>

<p><a href="https://www.codenong.com/4584963/">https://www.codenong.com/4584963/</a></p>

<p>如果不确定单元格的内容(包括值或公式)，我建议您首先检查该单元格是否具有公式，然后进行复制-相应地粘贴。在这种情况下，getOldCalculatedValue()非常有用。这是一个例子：</p>

<pre><code>    $code = $sheet-&gt;getCell('A'.$y)-&gt;getValue();
    if (strstr($code, '=') == true) {
        $code = $sheet-&gt;getCell('A'.$y)-&gt;getOldCalculatedValue();
    }
    $objPHPExcel-&gt;setActiveSheetIndex(0)-&gt;setCellValue('A'.$l, $code);
</code></pre>

<p>对于大型数据集，getCalculatedValue() 函数确实很麻烦，并且需要大量内存才能正确执行。</p>

<p><a href="https://www.codenong.com/5983845/">https://www.codenong.com/5983845/</a></p>

<p><a href="https://blog.csdn.net/weixin_30770783/article/details/98541565">https://blog.csdn.net/weixin_30770783/article/details/98541565</a></p>

<p>getValue() 获取的是公式本身</p>

<p>而通过 getCalculatedValue()会有对象     getFormattedValue() 获取到的是公式计算后的值</p>
]]></content>
  </entry>
  
</feed>
