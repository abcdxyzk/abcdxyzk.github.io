<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2023~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2023~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-07-31T15:24:28+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jquery二维码生成插件jquery.qrcode.js]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/17/lang-js-qrcode/"/>
    <updated>2023-07-17T21:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/17/lang-js-qrcode</id>
    <content type="html"><![CDATA[<script type='text/javascript' src='//cdn.staticfile.org/jquery/2.1.1/jquery.min.js'></script>


<script type="text/javascript" src="//cdn.staticfile.org/jquery.qrcode/1.0/jquery.qrcode.min.js"></script>




<div id="qrcode"></div>


<script>
    jQuery(function(){
        jQuery('#qrcode').qrcode("http://abcdxyzk.github.io");
    })
</script>


<hr />

<p><a href="https://www.jq22.com/jquery-info294">https://www.jq22.com/jquery-info294</a></p>

<h4>如何使用它</h4>

<p>将jquery.qrcode.min.js和jquery添加到您的网页中</p>

<pre><code>    &lt;script src="jquery.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="jquery.qrcode.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>然后创建一个DOM元素去包含生成qr码。</p>

<pre><code>    &lt;div id="qrcode"&gt;&lt;/div&gt;
</code></pre>

<p>然后你在此容器中的添加qrcode</p>

<pre><code>    &lt;script&gt;
    jQuery(function(){
        jQuery('#qrcode').qrcode("http://abcdxyzk.github.io");
    })
    &lt;/script&gt;
</code></pre>

<p>就这么简单，您想要的二维码就生成了。</p>

<h2>进阶用法</h2>

<h4>指定二维码的生成方式：</h4>

<p>可以在调用函数的同时输入想要的二维码生成方式（table/canvas）。</p>

<pre><code>    //使用table生成
    jQuery('#qrcode').qrcode({
        render: "table",
        text: "http://abcdxyzk.github.io"
    });

    //使用canvas生成
    jQuery('#qrcode').qrcode({
        render: "canvas",
        text: "http://abcdxyzk.github.io"
    });
</code></pre>

<h4>指定生成二维码的大小：</h4>

<p>可以在调用函数的同时输入想要生成二维码的宽度和高度即可指定生成的二维码的大小。</p>

<pre><code>    //生成100*100(宽度100，高度100)的二维码
    jQuery('#qrcode').qrcode({
        render: "canvas", //也可以替换为table
        width: 100,
        height: 100,
        text: "http://abcdxyzk.github.io",
        correctLevel:3  //二维码纠错级别
    });
</code></pre>

<h4>指定生成二维码的色彩样式：</h4>

<p>可以在调用函数的同时输入想要生成二维码的前景色和背景色即可指定生成的二维码的色彩样式。</p>

<pre><code>    //生成前景色为红色背景色为白色的二维码
    jQuery('#qrcode').qrcode({
        render: "canvas", //也可以替换为table
        foreground: "#C00",
        background: "#FFF",
        text: "http://abcdxyzk.github.io"
    });
</code></pre>

<h4>中文ULR生成方法:</h4>

<pre><code>    jQuery("#output").qrcode(encodeURI("http://中文中文")); //使用encodeURI进行转码
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 实现搜索框联想功能]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/16/lang-web-autocomplete/"/>
    <updated>2023-07-16T07:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/16/lang-web-autocomplete</id>
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/javascript-autocomplete.html">https://www.runoob.com/w3cnote/javascript-autocomplete.html</a></p>

<h4>基础 HTML 代码</h4>

<pre><code>    &lt;!-- autocomplete="off" 确保表单已关闭自动填充功能： --&gt;
    &lt;form autocomplete="off" action="/index.php"&gt;
        &lt;div class="autocomplete" style="width:300px;"&gt;
            &lt;input id="myInput" type="text" name="s" placeholder="请输入搜索内容"&gt;
        &lt;/div&gt;
        &lt;input type="submit"&gt;
    &lt;/form&gt;
</code></pre>

<h4>以下搜索搜索框和联想菜单的样式：</h4>

<pre><code>    .autocomplete {
        /*容器定位设置为 relative:*/
        position: relative;
        display: inline-block;
    }
    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*设置自动填充项宽度与容器相同*/
        top: 100%;
        left: 0;
        right: 0;
    }
    .autocomplete-items div {
        font-size: 15px;
        padding: 1px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }
    .autocomplete-items div:hover {
        /*鼠标移动到填充项设置的背景颜色*/
        background-color: #e9e9e9;
    }
    .autocomplete-active {
        /*使用箭头键浏览填充项时的背景颜色*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</code></pre>

<h4>以下是搜索搜索框和联想菜单的 JavaScript 代码：</h4>

<pre><code>    function autocomplete(inp, arr) {
        /*自动填充函数有两个参数，input 输入框元素和自动填充的数组*/
        var currentFocus;
        /* 监听 input 输入框，当在 input 输入框元素中时执行以下函数*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value, an = 0;
            /*关闭已打开的自动填充列表*/
            closeAllLists();

            if (!val) { return false;}

            currentFocus = -1;
            /*创建 DIV 元素用于放置自动填充列表的值*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*DIV 作为自动填充容器的子元素*/
            this.parentNode.appendChild(a);
            /*循环数组*/
            for (i = 0; i &lt; arr.length; i++) {
                /*检查填充项是否有与文本字段值相同的内容，不区分大小写*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*为每个匹配元素创建一个 DIV 元素 */
                    b = document.createElement("DIV");
                    /*匹配项加粗*/
                    b.innerHTML = "&lt;strong&gt;" + arr[i].substr(0, val.length) + "&lt;/strong&gt;";
                    b.innerHTML += arr[i].substr(val.length);
                    /*选中的填充项插入到隐藏 input 输入字段，用于保存当前选中值*/
                    b.innerHTML += "&lt;input type='hidden' value='" + arr[i] + "'&gt;";
                    /*当有人点击填充项（DIV 元素）时执行函数*/
                    b.addEventListener("click", function(e) {
                        /*选中的填充项插入到隐藏 input 搜索字段*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*关闭自动填充列表*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                    an ++;
                    if (an &gt; 20)
                        break;
                }
            }
        });

        /*按下键盘上的一个键时执行函数*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*如果按下箭头向下键，currentFocus 变量加 1，即向下移动一位*/
                currentFocus++;
                /*使当前选中项更醒目*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*按下箭头向上键，选中列表项向上移动一位*/
                currentFocus--;
                /*使当前选中项更醒目*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*如果按下 ENTER 键，阻止提交，你也可以设置 submit 提交*/
                e.preventDefault();

                /* search_word(); */

                if (currentFocus &gt; -1) {
                    /*模拟点击选中项*/
                    if (x) x[currentFocus].click();
                }
            }
        });

        function addActive(x) {
            /*设置选中的选项函数*/
            if (!x) return false;
            /*移动选项设置不同选中选项的背景颜色*/
            removeActive(x);
            if (currentFocus &gt;= x.length) currentFocus = 0;
            if (currentFocus &lt; 0) currentFocus = (x.length - 1);
            /*添加 "autocomplete-active" 类*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*移除没有选中选项的 "autocomplete-active" 类*/
            for (var i = 0; i &lt; x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*关闭自动添加列表*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i &lt; x.length; i++) {
                if (elmnt != x[i] &amp;&amp; elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }

        /*点击 HTML 文档任意位置关闭填充列表*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</code></pre>

<h4>最后我们在 id 为 myInput 的 input 输入框使用以上 JavaScript 代码：</h4>

<pre><code>    var sites = ["Google","Taobao","Runoob","Wiki","Zhihu","Baidu","Sina","Tmall","JD","Alibaba","QQ","Weixin"];
    autocomplete(document.getElementById("myInput"), sites);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS 获取 URL参数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/16/lang-web-query/"/>
    <updated>2023-07-16T07:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/16/lang-web-query</id>
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/js-get-url-param.html">https://www.runoob.com/w3cnote/js-get-url-param.html</a></p>

<pre><code>    function getQueryVariable(variable)
    {
        var query = window.location.search.substring(1);
        var vars = query.split("&amp;");
        for (var i=0;i&lt;vars.length;i++) {
            var pair = vars[i].split("=");
            if(pair[0] == variable){return pair[1];}
        }
        return(false);
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP float浮点数的精度问题]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/16/lang-php-float/"/>
    <updated>2023-07-16T07:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/16/lang-php-float</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/cr27225/article/details/118603543">https://blog.csdn.net/cr27225/article/details/118603543</a></p>

<p><a href="https://www.cnblogs.com/phpfensi/p/8143367.html">https://www.cnblogs.com/phpfensi/p/8143367.html</a></p>

<pre><code>    $a = 2586;
    $b = 2585.98;
    var_dump($a-$b);

    期望的结果是：float(0.02)

    实际结果：float(0.019999999999982)
</code></pre>

<p>浮点数的精度有限。尽管取决于系统，PHP 通常使用 IEEE 754 双精度格式，则由于取整而导致的最大相对误差为 1.11e-16。非基本数学运算可能会给出更大误差，并且要考虑到进行复合运算时的误差传递。</p>

<p>此外，以十进制能够精确表示的有理数如 0.1 或 0.7，无论有多少尾数都不能被内部所使用的二进制精确表示，因此不能在不丢失一点点精度的情况下转换为二进制的格式。</p>

<p>这就会造成混乱的结果：例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 7 而不是预期中的 8，因为该结果内部的表示其实是类似 7.9999999999999991118…</p>

<p>所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 gmp 函数。</p>

<h4>bc函数：</h4>

<p>bcadd — 两个任意精度数字的加法计算</p>

<p>bccomp — 比较两个任意精度的数字</p>

<p>bcdiv — 两个任意精度的数字除法计算</p>

<p>bcmod — 任意精度数字取模</p>

<p>bcmul — 两个任意精度数字乘法计算</p>

<p>bcpow — 任意精度数字的乘方</p>

<p>bcpowmod — Raise an arbitrary precision number to another, reduced by a specified modulus</p>

<p>bcscale — 设置/获取所有 bc math 函数的默认小数点保留位数</p>

<p>bcsqrt — 任意精度数字的二次方根</p>

<p>bcsub — 两个任意精度数字的减法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox报NS_BINDING_ABORTED错误]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/web-ns-binding-aborted/"/>
    <updated>2023-07-09T22:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/web-ns-binding-aborted</id>
    <content type="html"><![CDATA[<p><a href="https://www.weisay.com/blog/firefox-ns-binding-aborted.html">https://www.weisay.com/blog/firefox-ns-binding-aborted.html</a></p>

<p><a href="https://blog.51cto.com/phpme/2692985">https://blog.51cto.com/phpme/2692985</a></p>

<p>之前网站一直有一个问题，就是从首页或者列表页点击进入一篇文章页，使用FireFox自带的开发者工具查看的时候，会发现有一个NS_BINDING_ABORTED错误。</p>

<p>因为有个js效果，点击链接会出现“页面载入中……”字样。由于使用了location.href跳转但没有屏蔽链接本身的跳转，发生了两次请求，第一次请求就被火狐浏览器终止了，报了NS_BINDING_ABORTED错误。</p>

<pre><code>    &lt;script type="text/javascript"&gt;
    function sss() {
            location.href = "f.php";
            document.search_export.action="f.php";
            document.search_export.submit();
    }
    &lt;/script&gt;

    &lt;form name="search_export" target="" method="get"&gt;
    &lt;label&gt;arg&lt;/label&gt;&lt;input style='width:70px' name='arg' id='arg' value='111'&gt;
    &lt;input type='button' class='submit' type='submit' value='提交' onclick='sss()'&gt;
    &lt;/form&gt;
</code></pre>

<p><img src="/images/lang/20230709-20.png" alt="" /></p>

<p>这个问题改起来也比较简单，最简单的就是去掉这个js效果，点击链接进入链接即可。</p>

<p>当然如果想保留这个效果，加个preventDefault事件就行，preventDefault() 方法阻止元素发生默认的行为，就可以屏蔽链接本身的跳转。</p>
]]></content>
  </entry>
  
</feed>
