<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2023~08 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2023~08/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-06-24T16:02:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu18.04 编译php8.1 fpm, 连接apache2, mariadb]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/08/05/php-apache2-mysql/"/>
    <updated>2023-08-05T16:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/08/05/php-apache2-mysql</id>
    <content type="html"><![CDATA[<p>下载 <a href="https://www.php.net/downloads.php">https://www.php.net/downloads.php</a></p>

<h2>一、编译安装php</h2>

<p><a href="https://www.cnblogs.com/architectforest/p/15714248.html">https://www.cnblogs.com/architectforest/p/15714248.html</a></p>

<h4>依赖</h4>

<pre><code>    sudo apt-get install gcc g++ libxml2-dev pkg-config libkrb5-dev libssl-dev libsqlite3-dev zlib1g-dev libbz2-dev libcurl4-openssl-dev libpng-dev libjpeg-dev libfreetype-dev libonig-dev libxslt-dev libzip-dev
</code></pre>

<h4>配置:</h4>

<p>安装目录为 /usr/local/php8</p>

<pre><code>    ./configure --prefix=/usr/local/php8 --with-config-file-path=/usr/local/php8/etc --with-curl --with-freetype --enable-gd --with-jpeg  --with-gettext --with-kerberos --with-libdir=lib64 --with-libxml --with-mysqli --with-openssl --with-pdo-mysql  --with-pdo-sqlite --with-pear --enable-sockets --with-mhash --with-ldap-sasl --with-xsl --with-zlib --with-zip -with-bz2 --with-iconv  --enable-fpm --enable-pdo --enable-ftp --enable-bcmath  --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl  --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-sysvsem --enable-cli --enable-opcache --enable-intl --enable-calendar --enable-static --enable-mysqlnd
</code></pre>

<h4>编译安装</h4>

<pre><code>    make
    make install
</code></pre>

<h4>配置文件</h4>

<p>在编译目录
php.ini
<code>
    cp php.ini-production /usr/local/php8/etc/php.ini
</code></p>

<p>www.conf
<code>
    cp /usr/local/php8/etc/php-fpm.d/www.conf.default /usr/local/php8/etc/php-fpm.d/www.conf
</code></p>

<p>php-fpm.conf
<code>
    cp /usr/local/php8/etc/php-fpm.conf.default /usr/local/php8/etc/php-fpm.conf
</code></p>

<p>配置用户</p>

<pre><code>    vim /usr/local/php8/etc/php-fpm.d/www.conf

    ;user = nobody
    ;group = nobody
    user = apache
    group = apache
</code></pre>

<h4>生成启动文件</h4>

<p>在编译目录
```
    cp sapi/fpm/php-fpm.service /etc/systemd/system/</p>

<pre><code>vim /etc/systemd/system/php-fpm.service

# Mounts the /usr, /boot, and /etc directories read-only for processes invoked by this unit.
#ProtectSystem=full
ProtectSystem=false
</code></pre>

<pre><code>
把 ProtectSystem=full修改为: ProtectSystem=false

#### 启动
</code></pre>

<pre><code>systemctl daemon-reload

systemctl restart php-fpm


netstat -ltnup | grep 9000
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      12374/php-fpm: mast
</code></pre>

<pre><code>
## 编译安装mysqli拓展

https://www.cnblogs.com/sqsgoodluck/p/16659116.html

编译的时候已经默认包含了？

#### mysqlnd
</code></pre>

<pre><code>cd ext/mysqlnd

/usr/local/php8/bin/phpize

./configue
make
make install
</code></pre>

<pre><code>
#### mysqli
</code></pre>

<pre><code>cd ext/mysqli

/usr/local/php8/bin/phpize

./configue
make
make install
</code></pre>

<pre><code>
## apache2 使用 php-fpm

https://www.php.cn/faq/503744.html

我们需要了解Apache服务器与PHP语言之间的关系。Web服务器通过模块来扩展或优化其功能。对于Apache而言，它通过一个叫做“模块”的方式来扩展它的功能。而在Apache的模块中，就有一个关于PHP解释器的模块，可以让Apache服务器在运行时对PHP文件的解析和执行提供支持。


https://blog.csdn.net/yueyecheshou1980/article/details/106229421

使用 PHP-FPM 就意味着不用 Apache 内置的 mod_php，也就是要在 Apache 之外处理 php 程序的解释运行问题。看起来是多引入了一个额外的程序 PHP-FPM，既占 CPU 又占内存。但是这样一来，因为 Apache 可以专心处理除 php 之外的静态网页及元素，反而 httpd 进程本身占用的 CPU 和内存可以显著降低，从而从整体上降低资源消耗。


https://blog.csdn.net/paul_god/article/details/125251431

要想使php支持php-fpm，只需要找到你当初安装的源码,重新编译一下,在编译的时候带上 --enable-fpm 就可以了。


#### PHP-FPM 监听方式

官方文档提到的 PHP-FPM 监听方式（接收 Apache 转过去的处理 PHP 的请求的方式）有 2 个。这是在 PHP-FPM 的 pool 配置文件，如 /etc/php-fpm.d/www.conf 中设置的监听方式。分别如下，

vim /usr/local/php8/etc/php-fpm.d/www.conf
</code></pre>

<pre><code>TCP socket （IP 和 port）
listen = 127.0.0.1:9000
</code></pre>

<pre><code>就表示使用 TCP socket 方式。

Unix Domain Socket （UDS）（Apache 2.4.9 及以上版本才支持此方式），通过路径指明 socket 的位置 /path/to/unix/socket，例如，
</code></pre>

<pre><code>listen = /var/run/php-fpm/php-fpm.sock
</code></pre>

<pre><code>就表示使用 UDS 方式。

因为暂时 CentOS 7 中默认的还是 Apache 2.4.6

#### Apache 发送 PHP 处理请求的方式

原来的 mod_php 采用 SetHandler 的方式处理 php 文件并不需要特别的设置，因为在安装 PHP 的时候会自动在 Apache 的配置文件目录写入一个 php.conf 的配置文件，里面有告诉 Apache 处理 php 需要的操作：

vim /etc/apache2/apache2.conf
</code></pre>

<pre><code>&lt;FilesMatch .php$&gt;
    SetHandler "proxy:fcgi://127.0.0.1:9000"
&lt;/FilesMatch&gt;
</code></pre>

<pre><code>
service apache2 restart

## php-fpm 连接 mysql

https://blog.csdn.net/youcijibi/article/details/77002714

service php-fpm restart

service php-fpm status

因为mysqlnd并不是一个php的扩展，所以会报错：

NOTICE: PHP message: PHP Warning:  PHP Startup: Invalid library (maybe not a PHP library) 'mysqlnd.so' in Unknown on line 0


只要在php.ini里指定好mysql.sock的位置即可：大约在1023行

vim /usr/local/php8/etc/php.ini
</code></pre>

<pre><code>[Pdo_mysql]
pdo_mysql.default_socket=/var/run/mysqld/mysqld.sock

mysqli.default_socket = /var/run/mysqld/mysqld.sock
</code></pre>

<p>```</p>

<p>service php-fpm restart</p>

<p>这样php即可与mysql进行通信</p>
]]></content>
  </entry>
  
</feed>
