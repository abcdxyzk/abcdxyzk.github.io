<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2024 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2024/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx配置多个域名, http https共用配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy/"/>
    <updated>2024-03-01T20:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dayq/p/17488471.html">https://www.cnblogs.com/dayq/p/17488471.html</a></p>

<p>vim /usr/local/openresty/nginx/conf/nginx.conf</p>

<p>域名 <code>s1.com</code>  <code>*.s1.com</code> 建议分开写两个?</p>

<p>如果需要多个域名共用端口则复制多个</p>

<p>增加回源地址 Proxy: &ldquo;$proxy_host&rdquo; &ldquo;$upstream_addr&rdquo;</p>

<pre><code>    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"'
                  ' Proxy: $upstream_response_time $proxy_host $upstream_addr $upstream_status $upstream_response_length';
        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        keepalive_timeout   65;
        types_hash_max_size 4096;
        #gzip  on;


        include     mime.types;
        default_type    application/octet-stream;


        server {
            listen  80;
            listen  443 ssl;
            server_name s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }



        server {
            listen  80;
            listen  443 ssl;
            server_name s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax使用FormData上传文件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-FormData/"/>
    <updated>2024-02-26T20:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-FormData</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/suflowers1700218/p/14230852.html">https://www.cnblogs.com/suflowers1700218/p/14230852.html</a></p>

<h4>1 使用form表单初始化FormData对象方式上传文件</h4>

<pre><code>    &lt;form id="uploadForm" enctype="multipart/form-data"&gt;
        &lt;input id="file" type="file" name="file"/&gt;
        &lt;button id="upload" type="button"&gt;upload&lt;/button&gt;
    &lt;/form&gt;

    &lt;script&gt;
    $("#upload").click(function () {
        $.ajax({
            url: '/Default/UploadFile',
            type: 'POST',
            cache: false,
            data: new FormData($('#uploadForm')[0]),
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.result)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>

<p>这里要注意几点：</p>

<pre><code>    processData设置为false。因为data值是FormData对象，不需要对数据做处理。

    &lt;form&gt;标签添加 enctype="multipart/form-data" 属性。

    cache设置为false，上传文件不需要缓存。

    contentType设置为false，不设置contentType值，因为是由&lt;form&gt;表单构造的FormData对象，且已经声明了属性 enctype="multipart/form-data"，所以这里设置为false。

    上传后，服务器端代码需要使用从查询参数名为file获取文件输入流对象，因为&lt;input&gt;中声明的是name="file"
</code></pre>

<h4>2.使用FormData对象添加字段方式上传文件</h4>

<pre><code>    &lt;script&gt;
    $("#upload").click(function () {
        var formData = new FormData();
        formData.append('file', $('#file')[0].files[0]);
        $.ajax({
            url: '/Default/UploadFileByFormData',
            type: 'POST',
            cache: false,
            data: formData,
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.result)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>

<p>这里有几处不一样：</p>

<pre><code>    append()的第二个参数应是文件对象，即$('#file')[0].files[0]。

    contentType也要设置为‘false’。

    从代码$('#file')[0].files[0]中可以看到一个&lt;input type="file"&gt;标签能够上传多个文件，

    只需要在&lt;input type="file"&gt;里添加multiple或multiple="multiple"属性。
</code></pre>

<h4>3. Ajax使用FormData上传多个文件</h4>

<p>在 input type=&ldquo;file&rdquo; 里添加 multiple=&ldquo;multiple&rdquo; 属性，选择文件时，按住Ctrl键或Shift键选择多个文件</p>

<pre><code>    &lt;script type="text/javascript"&gt;
    $("#upload").click(function () {
        var formData = new FormData();
        for (var i = 0; i &lt; $('#file')[0].files.length; i++) {
            formData.append('files', $('#file')[0].files[i]);
        }
        $.ajax({
            url: '/Default/UploadFilesByFormData',
            type: 'POST',
            cache: false,
            data: formData,
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.message)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pdf预览 jquery.media.js]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-pdf-view/"/>
    <updated>2024-02-26T20:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-pdf-view</id>
    <content type="html"><![CDATA[<p><a href="https://huaweicloud.csdn.net/639fed54dacf622b8df90495.html">https://huaweicloud.csdn.net/639fed54dacf622b8df90495.html</a></p>

<pre><code>    &lt;script src="jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="jquery.media.js" type="text/javascript"&gt;&lt;/script&gt;

    &lt;a class='media' href='url/a.pdf'&gt;预览&lt;/a&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 在处理长字符串时变得非常慢]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off/"/>
    <updated>2024-02-26T20:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off</id>
    <content type="html"><![CDATA[<p><a href="https://www.coder.work/article/6946837">https://www.coder.work/article/6946837</a></p>

<p>语法高亮是通过正则表达式定义的，匹配会消耗大量资源，尤其是在长行和大缓冲区上。</p>

<pre><code>    :syntax off
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript随机打乱数组]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-shuffle/"/>
    <updated>2024-02-26T20:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-shuffle</id>
    <content type="html"><![CDATA[<p><a href="https://www.coder.work/article/3779797">https://www.coder.work/article/3779797</a></p>

<pre><code>    const shuffle = ([...array]) =&gt; {
        let i = 0;
        let j = 0;
        let temp = null;

        for (i = array.length - 1; i &gt; 0; i -= 1) {
            j = Math.floor(Math.random() * (i + 1));
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }

    id2nos = shuffle(id2nos);
</code></pre>
]]></content>
  </entry>
  
</feed>
