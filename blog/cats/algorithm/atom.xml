<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/algorithm/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:15:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ELO算法的原理及应用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/28/game-elo/"/>
    <updated>2022-08-28T18:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/28/game-elo</id>
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/57480433">https://zhuanlan.zhihu.com/p/57480433</a></p>

<h2>ELO算法原理</h2>

<h4>预期胜率计算公式</h4>

<p>ELO算法基于这样一种假设：一名选手的当前实力受各种因素的影响会在一定范围内波动，某个时刻的用来描述其实力的函数应当符合正态分布：</p>

<p><img src="/images/alg/20220828-11.png" alt="" /></p>

<p>其中U代表选手的实力平均水平，δ代表实力的稳定性。</p>

<p>经过计算，可以得出两名选手进行对战时的预期胜率：</p>

<p><img src="/images/alg/20220828-12.png" alt="" /></p>

<p>D为两者的分差。</p>

<p>利用了最小二乘法，我们可以得到与它的函数图向相近的另外的一个函数，这也是我们实际运时更常用的函数：</p>

<p><img src="/images/alg/20220828-13.png" alt="" /></p>

<p>（里面的常数项都是曲线拟合的结果，是符合上述统计学规律的，别瞎改）</p>

<p>即当玩家A与玩家B的分差为D时，玩家A对玩家B的期望胜率为P(D)。</p>

<p><img src="/images/alg/20220828-14.jpg" alt="" /></p>

<p>玩家分数相同时，对战预期胜率为50%，分差越大，玩家之间的胜率差距也就越大，当分差大于400时，低分玩家的预期胜率将不足10%。</p>

<p>显然的，我们的玩家的游戏水平的分布也应当是一个正态分布，即大部分玩家的游戏水平都处于平均值附近，游戏水平顶尖或非常菜的人会是少数。</p>

<p>假如我们认为1200分是玩家的平均水平，则所有玩家的各分值分布情况将大致如下图：
各分段玩家比例分布示意图</p>

<p><img src="/images/alg/20220828-15.jpg" alt="" /></p>

<h4>分数迭代公式</h4>

<p>那我们会面临下一个问题：如何知道某个玩家到底是多少分的？</p>

<p>毕竟我们不能用某种机器直接插入玩家大脑测试他的游戏水平吧？</p>

<p>对此，我们的办法是，通过玩家与不同分数的玩家的大量比赛结果，对玩家的分数进行不断地加减修正，直到玩家的分数收敛到其相应的真实水平分数。</p>

<p>下面我们计算玩家在一场比赛后的加减分情况。</p>

<p>玩家在进行一场比赛后的新分数为：</p>

<p><img src="/images/alg/20220828-16.png" alt="" /></p>

<p>Rn是玩家比赛结束后的新的排位分值。</p>

<p>Ro是比赛前玩家的排位分。</p>

<p>K是一个加成系数，由玩家当前分值水平决定（分值越高K越小）。</p>

<p>W是玩家实际对局结果得分（赢=1，输=0）。</p>

<p>P（D）是预期胜率。</p>

<p><img src="/images/alg/20220828-17.jpg" alt="" /></p>

<p>取K=32时，玩家结束一场比赛后的实际得分数如图所示。可以看到玩家战胜比自己低800分的选手后（有近100%的胜率）基本不得分。（这让我想起了守望韩服的猪皇evermore，4950分后打完了一局只加了1分）</p>

<h2>ELO算法应用</h2>

<h3>匹配策略</h3>

<p>以1V1的匹配为例，一般来说遵循以下匹配原则</p>

<p>0~N1秒内，仅匹配分差在X1以内的队友</p>

<p>若N1秒内未找到满足条件对手，放宽匹配条件，N1~N2秒内，仅匹配分差在X2（X2＞X1）以内的对手</p>

<p>……</p>

<p>直到找到对手。</p>

<h3>收敛期快速收敛</h3>

<p>从上面的描述我们可以知道，玩家的一次又一次的比赛过程就是其游戏分数向其真实水平分数收敛的过程。</p>

<p>那么当玩家的游戏分数与真实水平分数相差过大时，其收敛期耗时也会增加，而这一时期参与游戏的玩家的游戏体验都会受到不同程度的影响。</p>

<p>所以我们需要一些特殊的机制来减少这段收敛期。接下来我们按照不同的情况进行讨论。</p>

<h4>1、定位赛阶段</h4>

<p>当一个新玩家加入游戏时，我们肯定无法得知其真实的游戏水平，只能默认他为1200分（平均值）。</p>

<p>为了缩短其收敛期，我们会加入定位赛的设计。</p>

<p>在定位赛局数内，计算玩家得分的K值将再被乘上一个系数。</p>

<h4>2、玩家（账号）实力大幅波动</h4>

<p>首先，我们会引入一个【连胜/连败分数加值】的变量。</p>

<p>当玩家连续获胜或者连续失败N次时，我们有理由相信玩家的游戏分数与真实水平分数相差过大，并按照连胜/连败局数去增加【连胜/连败分数加值】</p>

<p>于是在进行匹配索敌时，将按照【玩家游戏分数】+【连胜/连败分数加值】进行索敌。</p>

<p>（这就是守望一个3000玩家10连胜后到了3300分，但是开始匹配到3500+分玩家的原因）</p>

<p>最后进行分数结算时，按照【玩家游戏分数】进行。</p>

<h4>3、休眠期的分数衰减</h4>

<p>分数衰减的原因是：</p>

<p>（1）我们期望玩家的活跃参与。</p>

<p>（2）我们认为高分段玩家在长时间未进行游戏后，其真实水平也会下降。</p>

<p>所以，一般我们会设计1800分以上的玩家，X天未进行排位后其游戏分数会以Y分/天的速度衰减。</p>

<h3>多对多的拓展</h3>

<p>ELO积分初期是针对象棋选手而定的，所以考虑的都是象棋选手1V1的情况。但是在NVN的游戏排位赛中，需要进行一些特殊的处理。</p>

<p>在多人比赛中，最终得分为：</p>

<p><img src="/images/alg/20220828-18.png" alt="" /></p>

<p>其中，Rn、Ro、K、W的值都不用处理。</p>

<p>对P（D）处理如下：</p>

<pre><code>    D=自己分数-自己分数/己方总分*敌方总分
</code></pre>

<h4>低分段打破零和</h4>

<p>在之前的讨论中，我们可以很明显的发现：</p>

<p>对于同分段玩家来说，因为K值都是一样的，所以赢方加的分恰好等于输方扣的分。</p>

<p>（玩家能上分是因为把人家的分吃了，大鱼吃小鱼小鱼吃虾米，于是最后所有玩家的分数就成了正态分布）</p>

<p>即所有的分数是零和的。</p>

<p>现在的游戏中，一般会期望玩家玩得多了还是能出坑的，即就算你水平略低于平均线，你也可以玩很多局跳出低分段。</p>

<p>于是我们将在低分段（比如1000以下）将胜负方的K值分离。</p>

<p>即胜方的加分按照K1进行。</p>

<p>负方的扣分按照K2进行。</p>

<p>当K1＞K2时，零和将被打破，玩家的分数分布中1000分以下的玩家数量将显著减少。</p>

<h4>ELO积分的包装与隐藏</h4>

<p>ELO积分对玩家水平的精确指示会打击玩家的信心，分值收敛结束后，再进行更多的对局几乎不会有任何提高（除非找了代练或者自己不知道为啥突然打通任督二脉）。</p>

<p>所以我们将玩家真实水平隐藏，并用一些模糊柔和的方式去告诉玩家他当前的水平（按照ELO分数包装为青铜白银黄金白金钻石）。</p>

<p>但记得，ELO分不会消失，从显示变成了隐藏，我们的一切计算还是以ELO分数为依据。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dota自走棋段位MMR算法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/28/game-score/"/>
    <updated>2022-08-28T17:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/28/game-score</id>
    <content type="html"><![CDATA[<p><a href="http://dota2.uuu9.com/201904/591872.shtml">http://dota2.uuu9.com/201904/591872.shtml</a></p>

<h2>MMR算法</h2>

<p>算法其实很简明。</p>

<pre><code>    MMR变化量 = （MMR均值 - 自己的MMR）*0.1725 + 排名对应的常数

    排名对应的常数表：
    第1名：+127
    第2名：+102
    第3名：+77
    第4名：+51
    第5名：-51
    第6名：-77
    第7名：-102
    第8名：-127

特例：第8名至少-15分，最低到0。
推测：第1名至少+15分。作者保留了疑问，不确定真假。
</code></pre>

<h2>注意事项</h2>

<p>自走棋早期是公开MMR的，后来隐藏了，没有发现获取途径。</p>

<p>因为隐藏了，不好判断MMR系统有没有大改。不过隐藏前后没有体感到变化。</p>

<p>皇后分数上限早期是3400，没多久就突破了上限。</p>

<p>80分一段。房间里所有人同一段位时，第1名+127分，就是1.588个段位。第2名1.275个段位，第3名0.96个段位。第1名和第4名相差76分，第4名和第5名相差102分，这就是吃烂分的理论依据。</p>

<p>（存疑）如果第1名至少+15分，段位会通货膨胀。从整体数据观测，实际情况是主教人数向骑士滑移，主要原因是新账号（新人玩家或者小号）。具体参见：数说自走棋。</p>

<p><img src="/images/alg/2022-08-28-1.png" alt="" /></p>

<h2>举例</h2>

<p>下面的例子是模拟结果，感兴趣可以访问GitHub。</p>

<p>8个人分数一样时的情况如下。8个骑士2段和8个皇后的情况是一样的。</p>

<p><img src="/images/alg/2022-08-28-2.png" alt="" /></p>

<p>1个主教2，6个主教1和1个骑士9开主教局的情况：骑士9小赚，主教2小亏。其他分段情况类似，开局时分数最低的最赚，不过前4还是加分，后4还是掉分，只是数值上有差别。</p>

<p><img src="/images/alg/2022-08-28-3.png" alt="" /></p>

<p>房间里7个人分数一样，1个高其他人5段的情况。分数最高第4名扣分。</p>

<p><img src="/images/alg/2022-08-28-4.png" alt="" /></p>

<p>房间里7个人分数一样，1个高其他人7段的情况。分数最高第3名扣分。</p>

<p><img src="/images/alg/2022-08-28-5.png" alt="" /></p>

<p>房间里7个人分数一样，1个高其他人9段的情况。分数最高第2名扣分。</p>

<p><img src="/images/alg/2022-08-28-6.png" alt="" /></p>

<p>房间里7个人分数一样，1个高其他人10段的情况。分数最高的人第1名只+15分。</p>

<p><img src="/images/alg/2022-08-28-7.png" alt="" /></p>

<p>如果没有吃鸡最低+15分的规则，吃鸡不扣分的临界点你比平均分高736分，或者说你比其他7人平均段位高10.5段。高得再多吃鸡也要扣分。</p>

<p>如果没有吃鸡最低+15分的规则，1个3400分皇后号和7个0分士兵号匹配，皇后吃鸡了要扣386分，变成堡垒6段，要是不行第8飞了，对不起，堡垒3段。</p>

<p><img src="/images/alg/2022-08-28-8.png" alt="" /></p>

<p>如果有吃鸡最低+15分的规则，-386变成+15，其他不变。</p>

<p>骑士1-8各1个的情况。骑士8段的玩家第4名只加2分，第1名加的分很少，比骑士1段的玩家吃鸡加的少很多。</p>

<p><img src="/images/alg/2022-08-28-9.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[负数的取模运算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/alg-mod/"/>
    <updated>2020-10-12T20:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/alg-mod</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html">https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html</a></p>

<p>在不同的语言中，对负数执行取模运算，结果有可能会是不同的。例如，(-11)%5在python中计算的结果是4，而在C(C99)中计算的结果则是-1。</p>

<h3>truncate除法 &amp;&amp; floor除法</h3>

<p>　在大多数编程语言中，如果整数a不是整数b的整数倍数的话，那么a、b做除法产生的实际结果的小数部分将会被截除，这个过程称为截尾(truncation)。如果除法的结果是正数的话，那么一般的编程语言都会把结果趋零截尾，也就是说，直接把商的小数部分去除。但是如果除法的结果是负数的话，不同的语言通常采用了两种不同的截尾方法:一种是趋零截尾(truncate toward zero)，另一种是趋负无穷截尾(truncate toward negative infinity);相应的，两种除法分别被称为truncate除法和floor除法。</p>

<p>　事实上，可以认为不管除法的结果是正是负，truncate除法都是趋零结尾;而floor除法都是趋负无穷结尾。</p>

<h3>取模运算</h3>

<p>　取模运算实际上是计算两数相除以后的余数。假设q是a、b相除产生的商(quotient)，r是相应的余数(remainder)，那么在几乎所有的计算系统中，都满足<code>a=b*q+r</code>，其中|r|&lt;|a|。因此r有两个选择，一个为正，一个为负;相应的，q也有两个选择。如果a、b都是正数的话，那么一般的编程语言中，r为正数;或者如果a、b都是负数的话，一般r为负数。但是如果a、b一正一负的话，不同的语言则会根据除法的不同结果而使得r的结果也不同，并且一般r的计算方法都会满足<code>r=a-(a/b)*b</code>。</p>

<h3>常见语言</h3>

<h4>　(1)C/Java语言</h4>

<p>　　C/Java语言除法采用的是趋零截尾(事实上，C89对于除数或被除数之一为负数情况的结果是未定义的;C99才正式确定了趋零截尾)，即truncate除法。它们的取模运算符是%，并且此运算符只接受整型操作数。一个规律是，取模运算的结果的符号与第一个操作数的符号相同(或为0)。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-2)*5=-1</code>。</p>

<h4>　(2)C++语言</h4>

<p>　　C++语言的截尾方式取决于特定的机器。如果两个操作数均为正，那么取模运算的结果也为正数(或为0);如果两个操作数均为负数，那么取模运算的结果为负数(或为0);如果只有一个操作数为负数，那么取模运算的结果是取决于特定实现的。</p>

<h4>　(3)Python语言</h4>

<p>　　Python语言除法采用的是趋负无穷截尾，即floor除法。它的取模运算符也是%，并且此运算符可以接受浮点操作数。一个类似的规律是，取模运算的结果的符号与第二个操作数的符号相同。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-3)*5=4</code>。</p>

<p>　　这里需要注意的是，Python 3.x中"/&ldquo;运算符的意义发生了变化，&rdquo;/&ldquo;产生的结果将不会再进行截尾;相应的&rdquo;//&ldquo;运算符的结果才会进行截尾。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成树计数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_a55522150102w6sp.html">http://blog.sina.com.cn/s/blog_a55522150102w6sp.html</a>
<a href="http://www.xuebuyuan.com/1622347.html">http://www.xuebuyuan.com/1622347.html</a></p>

<h3>基尔霍夫定理</h3>

<p>算法思想:
<code>
    *(1)G的度数矩阵D[G]是一个n*n的矩阵,并且满足:当i≠j时,dij=0;当i=j时,dij等于vi的度数;
    *(2)G的邻接矩阵A[G]是一个n*n的矩阵,并且满足:如果vi,vj之间有边直接相连,则aij=1,否则为0;
    *定义图G的Kirchhoff矩阵C[G]为C[G]=D[G]-A[G];
    *Matrix-Tree定理:G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值；
    *所谓n-1阶主子式,就是对于r(1≤r≤n),将C[G]的第r行,第r列同时去掉后得到的新矩阵,用Cr[G]表示;
    *
    *Kirchhoff矩阵的特殊性质：
    *(1)对于任何一个图G,它的Kirchhoff矩阵C的行列式总是0,这是因为C每行每列所有元素的和均为0;
    *(2)如果G是不连通的,则它的Kirchhoff矩阵C的任一个主子式的行列式均为0;
    *(3)如果G是一颗树,那么它的Kirchhoff矩阵C的任一个n-1阶主子式的行列式均为1;
</code></p>

<pre><code>    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;iostream&gt;
    #include &lt;algorithm&gt;
    #define  zero(x) (((x)&gt;0?(x):(-x))&lt;1e-15)
    using namespace std;
    const int MAXN = 110;
    double a[MAXN][MAXN], b[MAXN][MAXN];
    int G[MAXN][MAXN];
    int N, M;

    /*
    *生成树计数
    *1、G的度数矩阵D[G]是一个n*n的矩阵，并且满足：当i≠j时,dij=0；当i=j时，dij等于vi的度数。
    *2、G的邻接矩阵A[G]也是一个n*n的矩阵， 并且满足：如果vi、vj之间有边直接相连，则aij=1，否则为0。
    *我们定义G的Kirchhoff矩阵(也称为拉普拉斯算子)C[G]为C[G]=D[G]-A[G]，则Matrix-Tree定理可以描述为：
    *G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值。
    *所谓n-1阶主子式，就是对于r(1≤r≤n)，将C[G]的第r行、第r列同时去掉后得到的新矩阵，用Cr[G]表示。
    */

    double Det(double a[MAXN][MAXN], int n)
    {
        int i, j, k, sign = 0;
        double ret = 1, t;
        for(i = 0; i &lt; n; ++i)
            for(j = 0; j &lt; n; ++j)
                b[i][j] = a[i][j];
        for(i = 0; i &lt; n; ++i)
        {
            if(zero(b[i][i]))
            {
                for(j = i + 1; j &lt; n; ++j)
                {
                    if(!zero(b[j][i]))
                        break;
                }
                if(j == n)
                    return 0;
                for(k = i; k &lt; n; ++k)
                    t = b[i][k], b[i][k] = b[j][k], b[j][k] = t;
                sign++;
            }
            ret *= b[i][i];
            for(k = i + 1; k &lt; n; ++k)
                b[i][k] /= b[i][i];
            for(j = i + 1; j &lt; n; ++j)
                for(k = i + 1; k &lt; n; ++k)
                    b[j][k] -= b[j][i] * b[i][k];
        }
        if(sign &amp; 1)
            ret = - ret;
        return ret;
    }

    int main()
    {
        int T, u, v;
        scanf("%d", &amp;T);
        while (T--)
        {
            scanf("%d %d", &amp;N, &amp;M);
            memset(G, 0, sizeof(G));
            memset(a, 0, sizeof(a));
            while(M--)
            {
                scanf("%d %d", &amp;u, &amp;v);
                G[u-1][v-1] = G[v-1][u-1] = 1;
            }
            for(int i = 0; i &lt; N; ++i)
            {
               int d = 0;
               for (int j = 0; j &lt; N; ++j) if(G[i][j]) d++;
               a[i][i] = d;
            }
            for(int i = 0; i &lt; N; ++i)
            {
                for (int j = 0; j &lt; N; ++j)
                {
                    if (G[i][j]) a[i][j] = -1;
                }
            }
           double ans = Det(a, N - 1);
           printf("%0.0lf\n", ans);
        }
        return 0;
    }
</code></pre>

<h3>SRM733-DIV1-B</h3>

<p><a href="https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1">https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1</a></p>

<h4>Problem Statement</h4>

<p>    
Consider an undirected, complete, simple graph G on n vertices. The vertices of G are labeled from 1 to n. Specifically, each pair of distinct vertices is connected by a single undirected edge, so there are precisely n*(n-1)/2 edges in this graph.</p>

<p>You are given a set E that contains some edges of the graph G. More precisely, you are given the vector <int>s x and y. For each valid i, (x[i], y[i]) is one of the edges in E.</p>

<p>A spanning tree of G is a subset of exactly n-1 edges of G such that the edges connect all n vertices. You may note that the edges of a spanning tree do indeed form a tree that is a subgraph of G and spans all its vertices.</p>

<p>We are interested in spanning trees that contain all of the edges in the provided set E. Compute and return the number of such spanning trees modulo 987,654,323. Two spanning trees are different if there is an edge of G that is in one of them but not in the other.
Definition
    </p>

<h4>Class:</h4>

<p>BuildingSpanningTreesDiv1</p>

<h4>Method:</h4>

<p>getNumberOfSpanningTrees</p>

<h4>Parameters:</h4>

<p>int, vector <int>, vector <int></p>

<h4>Returns:</h4>

<p>int</p>

<h4>Method signature:</h4>

<p>int getNumberOfSpanningTrees(int n, vector <int> x, vector <int> y)</p>

<p>(be sure your method is public)</p>

<h4>Limits</h4>

<p>Time limit (s):
2.000</p>

<p>Memory limit (MB):
256</p>

<h4>Notes</h4>

<p>987,654,323 is a prime number.</p>

<h4>Constraints</h4>

<p>n will be between 1 and 1,000, inclusive.<br/>
x will contain between 1 and 1,000 elements, inclusive.<br/>
y will contain between 1 and 1,000 elements, inclusive.<br/>
x and y will contain the same number of elements.<br/>
Each element of x will be between 1 and n-1, inclusive.<br/>
Each element of y will be between 2 and n, inclusive.<br/>
For each valid i, x[i] will be less than y[i].<br/>
All edges in E will be distinct.</p>

<h4>Examples</h4>

<p>0)<br/>
3<br/>
{1,2}<br/>
{2,3}<br/>
Returns: 1<br/>
The edges in the provided set E alredy form a spanning tree, so there is exactly one spanning tree that contains them.</p>

<p>1)<br/>
5<br/>
{1,3,4}<br/>
{2,4,5}<br/>
Returns: 6<br/>
There are six ways to add the one missing edge: one endpoint of the new edge must lie in the set {1,2} and the other in the set {3,4,5}.</p>

<p>2)<br/>
4<br/>
{1}<br/>
{2}<br/>
Returns: 8<br/>
There are eight spanning trees that contain the edge (1, 2):<br/>
{(1, 2), (1, 3), (1, 4)}<br/>
{(1, 2), (1, 3), (2, 4)}<br/>
{(1, 2), (1, 3), (3, 4)}<br/>
{(1, 2), (2, 3), (2, 4)}<br/>
{(1, 2), (1, 4), (2, 3)}<br/>
{(1, 2), (1, 4), (3, 4)}<br/>
{(1, 2), (2, 3), (3, 4)}<br/>
{(1, 2), (2, 4), (3, 4)}</p>

<p>3)<br/>
4<br/>
{1,2,1}<br/>
{2,3,3}<br/>
Returns: 0<br/>
The set E contains a cycle, and thus there is no spanning tree that contains all these edges.</p>

<p>4)<br/>
8<br/>
{1,4,2,3,5}<br/>
{4,7,6,5,8}<br/>
Returns: 144</p>

<p>5)<br/>
1000<br/>
{1}<br/>
{2}<br/>
Returns: 529013784</p>

<p>Don&rsquo;t forget to take the modulo.</p>

<p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. &copy;2003, TopCoder, Inc. All rights reserved.</p>

<pre><code>    #include &lt;algorithm&gt;
    #include &lt;cassert&gt;
    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;ctime&gt;
    #include &lt;iostream&gt;
    #include &lt;map&gt;
    #include &lt;queue&gt;
    #include &lt;set&gt;
    #include &lt;sstream&gt;
    #include &lt;stdint.h&gt;
    #include &lt;string&gt;
    #include &lt;utility&gt;
    #include &lt;vector&gt;

    using namespace std;

    int const MAX_N = 1003;
    int const MOD = 987654323;

    int p [MAX_N];
    int s [MAX_N];

    int root (int v)
    {
        if (p[v] != v)
        {
            p[v] = root (p[v]);
        }
        return p[v];
    }

    bool unite (int u, int v)
    {
        u = root (u);
        v = root (v);
        if (u == v)
        {
            return false;
        }
        p[v] = u;
        s[u] += s[v];
        return true;
    }

    int powmod (int a, int b)
    {
        int res = 1;
        for ( ; b &gt; 0; b &gt;&gt;= 1)
        {
            if (b &amp; 1)
            {
                res = (res * 1LL * a) % MOD;
            }
            a = (a * 1LL * a) % MOD;
        }
        return res;
    }

    int a [MAX_N] [MAX_N];
    int n;

    int det (void)
    {
        int res = 1;
        for (int i = 1; i &lt; n; i++)
        {
            int j;
            for (j = i; j &lt; n; j++)
            {
                if (a[j][i])
                {
                    break;
                }
            }
            if (j == n)
            {
                return 0;
            }
            if (j != i)
            {
                for (int k = i; k &lt; n; k++)
                {
                    swap (a[i][k], a[j][k]);
                }
            }
            res = (res * 1LL * a[i][i]) % MOD;
            int inv = powmod (a[i][i], MOD - 2);
            for (int j = i + 1; j &lt; n; j++)
            {
                int mult = (a[j][i] * 1LL * inv) % MOD;
                for (int k = i; k &lt; n; k++)
                {
                    a[j][k] = (a[j][k] -
                            a[i][k] * 1LL * mult) % MOD;
                }
            }
        }
        return (res + MOD) % MOD;
    }

    class BuildingSpanningTreesDiv1
    {
    public:
        int getNumberOfSpanningTrees (int n, vector &lt;int&gt; x, vector &lt;int&gt; y)
        {
            for (int i = 0; i &lt; n; i++)
            {
                p[i] = i;
                s[i] = 1;
            }
            int k = (int) (x.size ());
            for (int w = 0; w &lt; k; w++)
            {
                int u = x[w] - 1;
                int v = y[w] - 1;
                if (!unite (u, v))
                {
                    return 0;
                }
                a[u][v] += 1;
                a[v][u] += 1;
                a[u][u] -= 1;
                a[v][v] -= 1;
            }

            int t = 0;
            for (int i = 0; i &lt; n; i++)
            {
                if (p[i] == i)
                {
                    s[t] = s[i];
                    t += 1;
                }
            }

            n -= k;
            ::n = n;

            memset (a, 0, sizeof (a));
            for (int i = 0; i &lt; n; i++)
            {
                for (int j = i + 1; j &lt; n; j++)
                {
                    int e = s[i] * s[j];
                    a[i][j] -= e;
                    a[j][i] -= e;
                    a[i][i] = (a[i][i] + e) % MOD;
                    a[j][j] = (a[j][j] + e) % MOD;
                }
            }

            int res = det ();
            return res;
        }
    };
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆元]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-inv/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-inv</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/baidu_35643793/article/details/75268911">https://blog.csdn.net/baidu_35643793/article/details/75268911</a></p>

<h3>1.什么是逆元</h3>

<p>当求解公式：(a/b)%m 时，因b可能会过大，会出现爆精度的情况，所以需变除法为乘法：</p>

<p>设c是b的逆元，则有b*c≡1(mod m)；</p>

<p>则(a/b)%m = (a/b)<em>1%m = (a/b)</em>b<em>c%m = a</em>c(mod m);</p>

<p>即a/b的模等于a*b的逆元的模；</p>

<p>逆元就是这样应用的；</p>

<h3>2.求逆元的方法</h3>

<h4>(1).费马小定理</h4>

<p>在是素数的情况下，对任意整数都有。
如果无法被整除，则有。
可以在为素数的情况下求出一个数的逆元，，即为逆元。</p>

<p>题目中的数据范围1&lt;=x&lt;=10<sup>9</sup>，p=1000000007，p是素数；</p>

<p>所以x肯定就无法被p整除啊，所以最后就得出x<sup>p-2</sup>为x的逆元啦。</p>

<p>复杂度O(logn)；</p>

<p>代码：
<code>
    const int mod = 1000000009;  
    long long quickpow(long long a, long long b) {  
        if (b &lt; 0) return 0;  
        long long ret = 1;  
        a %= mod;  
        while(b) {  
            if (b &amp; 1) ret = (ret * a) % mod;  
            b &gt;&gt;= 1;  
            a = (a * a) % mod;  
        }  
        return ret;  
    }  
    long long inv(long long a) {  
        return quickpow(a, mod - 2);  
    }  
</code></p>

<h4>(2)扩展欧几里得算法求逆元</h4>

<p>可扩展欧几里得求逆元ax≡1(mod n)其中a，n互质；</p>

<p>复杂度：O(logn)；
<code>
    ll extend_gcd(ll a, ll b, ll &amp;x, ll &amp;y) {  
        if (b == 0) {  
            x = 1, y = 0;  
            return a;  
        }  
        else {  
            ll r = extend_gcd(b, a % b, y, x);  
            y -= x * (a / b);  
            return r;  
        }  
    }  
    ll inv(ll a, ll n) {  
        ll x, y;  
        extend_gcd(a, n, x, y);  
        x = (x % n + n) % n;  
        return x;  
    }  
</code></p>

<h4>(3) 逆元线性筛 ( P为质数 )</h4>

<p>求1,2,&hellip;,N关于P的逆元（P为质数）</p>

<p>复杂度：O(N)</p>

<p>代码：
```
    const int mod = 1000000009;<br/>
    const int maxn = 10005;<br/>
    int inv[maxn];<br/>
    inv[1] = 1;<br/>
    for(int i = 2; i &lt; 10000; i++)<br/>
        inv[i] = inv[mod % i] * (mod - mod / i) % mod;</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
