<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/algorithm~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:15:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[负数的取模运算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/alg-mod/"/>
    <updated>2020-10-12T20:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/alg-mod</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html">https://www.cnblogs.com/ppboy_dxh/archive/2011/02/18/1958175.html</a></p>

<p>在不同的语言中，对负数执行取模运算，结果有可能会是不同的。例如，(-11)%5在python中计算的结果是4，而在C(C99)中计算的结果则是-1。</p>

<h3>truncate除法 &amp;&amp; floor除法</h3>

<p>　在大多数编程语言中，如果整数a不是整数b的整数倍数的话，那么a、b做除法产生的实际结果的小数部分将会被截除，这个过程称为截尾(truncation)。如果除法的结果是正数的话，那么一般的编程语言都会把结果趋零截尾，也就是说，直接把商的小数部分去除。但是如果除法的结果是负数的话，不同的语言通常采用了两种不同的截尾方法:一种是趋零截尾(truncate toward zero)，另一种是趋负无穷截尾(truncate toward negative infinity);相应的，两种除法分别被称为truncate除法和floor除法。</p>

<p>　事实上，可以认为不管除法的结果是正是负，truncate除法都是趋零结尾;而floor除法都是趋负无穷结尾。</p>

<h3>取模运算</h3>

<p>　取模运算实际上是计算两数相除以后的余数。假设q是a、b相除产生的商(quotient)，r是相应的余数(remainder)，那么在几乎所有的计算系统中，都满足<code>a=b*q+r</code>，其中|r|&lt;|a|。因此r有两个选择，一个为正，一个为负;相应的，q也有两个选择。如果a、b都是正数的话，那么一般的编程语言中，r为正数;或者如果a、b都是负数的话，一般r为负数。但是如果a、b一正一负的话，不同的语言则会根据除法的不同结果而使得r的结果也不同，并且一般r的计算方法都会满足<code>r=a-(a/b)*b</code>。</p>

<h3>常见语言</h3>

<h4>　(1)C/Java语言</h4>

<p>　　C/Java语言除法采用的是趋零截尾(事实上，C89对于除数或被除数之一为负数情况的结果是未定义的;C99才正式确定了趋零截尾)，即truncate除法。它们的取模运算符是%，并且此运算符只接受整型操作数。一个规律是，取模运算的结果的符号与第一个操作数的符号相同(或为0)。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-2)*5=-1</code>。</p>

<h4>　(2)C++语言</h4>

<p>　　C++语言的截尾方式取决于特定的机器。如果两个操作数均为正，那么取模运算的结果也为正数(或为0);如果两个操作数均为负数，那么取模运算的结果为负数(或为0);如果只有一个操作数为负数，那么取模运算的结果是取决于特定实现的。</p>

<h4>　(3)Python语言</h4>

<p>　　Python语言除法采用的是趋负无穷截尾，即floor除法。它的取模运算符也是%，并且此运算符可以接受浮点操作数。一个类似的规律是，取模运算的结果的符号与第二个操作数的符号相同。因此<code>(-11)%5=-11-[(-11)/5]*5=-11-(-3)*5=4</code>。</p>

<p>　　这里需要注意的是，Python 3.x中"/&ldquo;运算符的意义发生了变化，&rdquo;/&ldquo;产生的结果将不会再进行截尾;相应的&rdquo;//&ldquo;运算符的结果才会进行截尾。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成树计数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-matrix-tree</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_a55522150102w6sp.html">http://blog.sina.com.cn/s/blog_a55522150102w6sp.html</a>
<a href="http://www.xuebuyuan.com/1622347.html">http://www.xuebuyuan.com/1622347.html</a></p>

<h3>基尔霍夫定理</h3>

<p>算法思想:
<code>
    *(1)G的度数矩阵D[G]是一个n*n的矩阵,并且满足:当i≠j时,dij=0;当i=j时,dij等于vi的度数;
    *(2)G的邻接矩阵A[G]是一个n*n的矩阵,并且满足:如果vi,vj之间有边直接相连,则aij=1,否则为0;
    *定义图G的Kirchhoff矩阵C[G]为C[G]=D[G]-A[G];
    *Matrix-Tree定理:G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值；
    *所谓n-1阶主子式,就是对于r(1≤r≤n),将C[G]的第r行,第r列同时去掉后得到的新矩阵,用Cr[G]表示;
    *
    *Kirchhoff矩阵的特殊性质：
    *(1)对于任何一个图G,它的Kirchhoff矩阵C的行列式总是0,这是因为C每行每列所有元素的和均为0;
    *(2)如果G是不连通的,则它的Kirchhoff矩阵C的任一个主子式的行列式均为0;
    *(3)如果G是一颗树,那么它的Kirchhoff矩阵C的任一个n-1阶主子式的行列式均为1;
</code></p>

<pre><code>    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;iostream&gt;
    #include &lt;algorithm&gt;
    #define  zero(x) (((x)&gt;0?(x):(-x))&lt;1e-15)
    using namespace std;
    const int MAXN = 110;
    double a[MAXN][MAXN], b[MAXN][MAXN];
    int G[MAXN][MAXN];
    int N, M;

    /*
    *生成树计数
    *1、G的度数矩阵D[G]是一个n*n的矩阵，并且满足：当i≠j时,dij=0；当i=j时，dij等于vi的度数。
    *2、G的邻接矩阵A[G]也是一个n*n的矩阵， 并且满足：如果vi、vj之间有边直接相连，则aij=1，否则为0。
    *我们定义G的Kirchhoff矩阵(也称为拉普拉斯算子)C[G]为C[G]=D[G]-A[G]，则Matrix-Tree定理可以描述为：
    *G的所有不同的生成树的个数等于其Kirchhoff矩阵C[G]任何一个n-1阶主子式的行列式的绝对值。
    *所谓n-1阶主子式，就是对于r(1≤r≤n)，将C[G]的第r行、第r列同时去掉后得到的新矩阵，用Cr[G]表示。
    */

    double Det(double a[MAXN][MAXN], int n)
    {
        int i, j, k, sign = 0;
        double ret = 1, t;
        for(i = 0; i &lt; n; ++i)
            for(j = 0; j &lt; n; ++j)
                b[i][j] = a[i][j];
        for(i = 0; i &lt; n; ++i)
        {
            if(zero(b[i][i]))
            {
                for(j = i + 1; j &lt; n; ++j)
                {
                    if(!zero(b[j][i]))
                        break;
                }
                if(j == n)
                    return 0;
                for(k = i; k &lt; n; ++k)
                    t = b[i][k], b[i][k] = b[j][k], b[j][k] = t;
                sign++;
            }
            ret *= b[i][i];
            for(k = i + 1; k &lt; n; ++k)
                b[i][k] /= b[i][i];
            for(j = i + 1; j &lt; n; ++j)
                for(k = i + 1; k &lt; n; ++k)
                    b[j][k] -= b[j][i] * b[i][k];
        }
        if(sign &amp; 1)
            ret = - ret;
        return ret;
    }

    int main()
    {
        int T, u, v;
        scanf("%d", &amp;T);
        while (T--)
        {
            scanf("%d %d", &amp;N, &amp;M);
            memset(G, 0, sizeof(G));
            memset(a, 0, sizeof(a));
            while(M--)
            {
                scanf("%d %d", &amp;u, &amp;v);
                G[u-1][v-1] = G[v-1][u-1] = 1;
            }
            for(int i = 0; i &lt; N; ++i)
            {
               int d = 0;
               for (int j = 0; j &lt; N; ++j) if(G[i][j]) d++;
               a[i][i] = d;
            }
            for(int i = 0; i &lt; N; ++i)
            {
                for (int j = 0; j &lt; N; ++j)
                {
                    if (G[i][j]) a[i][j] = -1;
                }
            }
           double ans = Det(a, N - 1);
           printf("%0.0lf\n", ans);
        }
        return 0;
    }
</code></pre>

<h3>SRM733-DIV1-B</h3>

<p><a href="https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1">https://community.topcoder.com/stat?c=round_stats&amp;rd=17140&amp;dn=1</a></p>

<h4>Problem Statement</h4>

<p>    
Consider an undirected, complete, simple graph G on n vertices. The vertices of G are labeled from 1 to n. Specifically, each pair of distinct vertices is connected by a single undirected edge, so there are precisely n*(n-1)/2 edges in this graph.</p>

<p>You are given a set E that contains some edges of the graph G. More precisely, you are given the vector <int>s x and y. For each valid i, (x[i], y[i]) is one of the edges in E.</p>

<p>A spanning tree of G is a subset of exactly n-1 edges of G such that the edges connect all n vertices. You may note that the edges of a spanning tree do indeed form a tree that is a subgraph of G and spans all its vertices.</p>

<p>We are interested in spanning trees that contain all of the edges in the provided set E. Compute and return the number of such spanning trees modulo 987,654,323. Two spanning trees are different if there is an edge of G that is in one of them but not in the other.
Definition
    </p>

<h4>Class:</h4>

<p>BuildingSpanningTreesDiv1</p>

<h4>Method:</h4>

<p>getNumberOfSpanningTrees</p>

<h4>Parameters:</h4>

<p>int, vector <int>, vector <int></p>

<h4>Returns:</h4>

<p>int</p>

<h4>Method signature:</h4>

<p>int getNumberOfSpanningTrees(int n, vector <int> x, vector <int> y)</p>

<p>(be sure your method is public)</p>

<h4>Limits</h4>

<p>Time limit (s):
2.000</p>

<p>Memory limit (MB):
256</p>

<h4>Notes</h4>

<p>987,654,323 is a prime number.</p>

<h4>Constraints</h4>

<p>n will be between 1 and 1,000, inclusive.<br/>
x will contain between 1 and 1,000 elements, inclusive.<br/>
y will contain between 1 and 1,000 elements, inclusive.<br/>
x and y will contain the same number of elements.<br/>
Each element of x will be between 1 and n-1, inclusive.<br/>
Each element of y will be between 2 and n, inclusive.<br/>
For each valid i, x[i] will be less than y[i].<br/>
All edges in E will be distinct.</p>

<h4>Examples</h4>

<p>0)<br/>
3<br/>
{1,2}<br/>
{2,3}<br/>
Returns: 1<br/>
The edges in the provided set E alredy form a spanning tree, so there is exactly one spanning tree that contains them.</p>

<p>1)<br/>
5<br/>
{1,3,4}<br/>
{2,4,5}<br/>
Returns: 6<br/>
There are six ways to add the one missing edge: one endpoint of the new edge must lie in the set {1,2} and the other in the set {3,4,5}.</p>

<p>2)<br/>
4<br/>
{1}<br/>
{2}<br/>
Returns: 8<br/>
There are eight spanning trees that contain the edge (1, 2):<br/>
{(1, 2), (1, 3), (1, 4)}<br/>
{(1, 2), (1, 3), (2, 4)}<br/>
{(1, 2), (1, 3), (3, 4)}<br/>
{(1, 2), (2, 3), (2, 4)}<br/>
{(1, 2), (1, 4), (2, 3)}<br/>
{(1, 2), (1, 4), (3, 4)}<br/>
{(1, 2), (2, 3), (3, 4)}<br/>
{(1, 2), (2, 4), (3, 4)}</p>

<p>3)<br/>
4<br/>
{1,2,1}<br/>
{2,3,3}<br/>
Returns: 0<br/>
The set E contains a cycle, and thus there is no spanning tree that contains all these edges.</p>

<p>4)<br/>
8<br/>
{1,4,2,3,5}<br/>
{4,7,6,5,8}<br/>
Returns: 144</p>

<p>5)<br/>
1000<br/>
{1}<br/>
{2}<br/>
Returns: 529013784</p>

<p>Don&rsquo;t forget to take the modulo.</p>

<p>This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. &copy;2003, TopCoder, Inc. All rights reserved.</p>

<pre><code>    #include &lt;algorithm&gt;
    #include &lt;cassert&gt;
    #include &lt;cmath&gt;
    #include &lt;cstdio&gt;
    #include &lt;cstdlib&gt;
    #include &lt;cstring&gt;
    #include &lt;ctime&gt;
    #include &lt;iostream&gt;
    #include &lt;map&gt;
    #include &lt;queue&gt;
    #include &lt;set&gt;
    #include &lt;sstream&gt;
    #include &lt;stdint.h&gt;
    #include &lt;string&gt;
    #include &lt;utility&gt;
    #include &lt;vector&gt;

    using namespace std;

    int const MAX_N = 1003;
    int const MOD = 987654323;

    int p [MAX_N];
    int s [MAX_N];

    int root (int v)
    {
        if (p[v] != v)
        {
            p[v] = root (p[v]);
        }
        return p[v];
    }

    bool unite (int u, int v)
    {
        u = root (u);
        v = root (v);
        if (u == v)
        {
            return false;
        }
        p[v] = u;
        s[u] += s[v];
        return true;
    }

    int powmod (int a, int b)
    {
        int res = 1;
        for ( ; b &gt; 0; b &gt;&gt;= 1)
        {
            if (b &amp; 1)
            {
                res = (res * 1LL * a) % MOD;
            }
            a = (a * 1LL * a) % MOD;
        }
        return res;
    }

    int a [MAX_N] [MAX_N];
    int n;

    int det (void)
    {
        int res = 1;
        for (int i = 1; i &lt; n; i++)
        {
            int j;
            for (j = i; j &lt; n; j++)
            {
                if (a[j][i])
                {
                    break;
                }
            }
            if (j == n)
            {
                return 0;
            }
            if (j != i)
            {
                for (int k = i; k &lt; n; k++)
                {
                    swap (a[i][k], a[j][k]);
                }
            }
            res = (res * 1LL * a[i][i]) % MOD;
            int inv = powmod (a[i][i], MOD - 2);
            for (int j = i + 1; j &lt; n; j++)
            {
                int mult = (a[j][i] * 1LL * inv) % MOD;
                for (int k = i; k &lt; n; k++)
                {
                    a[j][k] = (a[j][k] -
                            a[i][k] * 1LL * mult) % MOD;
                }
            }
        }
        return (res + MOD) % MOD;
    }

    class BuildingSpanningTreesDiv1
    {
    public:
        int getNumberOfSpanningTrees (int n, vector &lt;int&gt; x, vector &lt;int&gt; y)
        {
            for (int i = 0; i &lt; n; i++)
            {
                p[i] = i;
                s[i] = 1;
            }
            int k = (int) (x.size ());
            for (int w = 0; w &lt; k; w++)
            {
                int u = x[w] - 1;
                int v = y[w] - 1;
                if (!unite (u, v))
                {
                    return 0;
                }
                a[u][v] += 1;
                a[v][u] += 1;
                a[u][u] -= 1;
                a[v][v] -= 1;
            }

            int t = 0;
            for (int i = 0; i &lt; n; i++)
            {
                if (p[i] == i)
                {
                    s[t] = s[i];
                    t += 1;
                }
            }

            n -= k;
            ::n = n;

            memset (a, 0, sizeof (a));
            for (int i = 0; i &lt; n; i++)
            {
                for (int j = i + 1; j &lt; n; j++)
                {
                    int e = s[i] * s[j];
                    a[i][j] -= e;
                    a[j][i] -= e;
                    a[i][i] = (a[i][i] + e) % MOD;
                    a[j][j] = (a[j][j] + e) % MOD;
                }
            }

            int res = det ();
            return res;
        }
    };
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆元]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/17/alg-inv/"/>
    <updated>2018-04-17T00:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/17/alg-inv</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/baidu_35643793/article/details/75268911">https://blog.csdn.net/baidu_35643793/article/details/75268911</a></p>

<h3>1.什么是逆元</h3>

<p>当求解公式：(a/b)%m 时，因b可能会过大，会出现爆精度的情况，所以需变除法为乘法：</p>

<p>设c是b的逆元，则有b*c≡1(mod m)；</p>

<p>则(a/b)%m = (a/b)<em>1%m = (a/b)</em>b<em>c%m = a</em>c(mod m);</p>

<p>即a/b的模等于a*b的逆元的模；</p>

<p>逆元就是这样应用的；</p>

<h3>2.求逆元的方法</h3>

<h4>(1).费马小定理</h4>

<p>在是素数的情况下，对任意整数都有。
如果无法被整除，则有。
可以在为素数的情况下求出一个数的逆元，，即为逆元。</p>

<p>题目中的数据范围1&lt;=x&lt;=10<sup>9</sup>，p=1000000007，p是素数；</p>

<p>所以x肯定就无法被p整除啊，所以最后就得出x<sup>p-2</sup>为x的逆元啦。</p>

<p>复杂度O(logn)；</p>

<p>代码：
<code>
    const int mod = 1000000009;  
    long long quickpow(long long a, long long b) {  
        if (b &lt; 0) return 0;  
        long long ret = 1;  
        a %= mod;  
        while(b) {  
            if (b &amp; 1) ret = (ret * a) % mod;  
            b &gt;&gt;= 1;  
            a = (a * a) % mod;  
        }  
        return ret;  
    }  
    long long inv(long long a) {  
        return quickpow(a, mod - 2);  
    }  
</code></p>

<h4>(2)扩展欧几里得算法求逆元</h4>

<p>可扩展欧几里得求逆元ax≡1(mod n)其中a，n互质；</p>

<p>复杂度：O(logn)；
<code>
    ll extend_gcd(ll a, ll b, ll &amp;x, ll &amp;y) {  
        if (b == 0) {  
            x = 1, y = 0;  
            return a;  
        }  
        else {  
            ll r = extend_gcd(b, a % b, y, x);  
            y -= x * (a / b);  
            return r;  
        }  
    }  
    ll inv(ll a, ll n) {  
        ll x, y;  
        extend_gcd(a, n, x, y);  
        x = (x % n + n) % n;  
        return x;  
    }  
</code></p>

<h4>(3) 逆元线性筛 ( P为质数 )</h4>

<p>求1,2,&hellip;,N关于P的逆元（P为质数）</p>

<p>复杂度：O(N)</p>

<p>代码：
```
    const int mod = 1000000009;<br/>
    const int maxn = 10005;<br/>
    int inv[maxn];<br/>
    inv[1] = 1;<br/>
    for(int i = 2; i &lt; 10000; i++)<br/>
        inv[i] = inv[mod % i] * (mod - mod / i) % mod;</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遍历数组一次求方差]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/03/23/alg-mdev/"/>
    <updated>2018-03-23T00:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/03/23/alg-mdev</id>
    <content type="html"><![CDATA[<p><a href="http://cq520.iteye.com/blog/2020648">http://cq520.iteye.com/blog/2020648</a></p>

<p> 一个长度为X的数组，里面存有N个数，能否只遍历数组一次就求得数组的方差。</p>

<p>计算方差的第二个公式：DX<sup>2</sup>=EX<sup>2</sup>-(EX)<sup>2</sup>，代码如下：</p>

<pre><code>    public class Deviation {
        /**
         * 传统的利用平均数求方差的方法,需要遍历数组两次
         * @param a 目标数组
         * @return 方差
         */
        private static double ComputeVariance(double a[]){
            double variance=0;//方差
            double average=0;//平均数
            int i,len=a.length;
            double sum=0,sum2=0;
            for(i=0;i&lt;len;i++){
                sum+=a[i];
            }
            average=sum/len;
            for(i=0;i&lt;len;i++){
                sum2+=(a[i]-average)*(a[i]-average);
            }
            variance=sum2/len;
            return variance;
        }

        /**
         * 只遍历数组一次求方差，利用公式DX^2=EX^2-(EX)^2
         * @param a
         * @return
         */
        private static double ComputeVariance2(double a[]){
            double variance=0;//方差
            double sum=0,sum2=0;
            int i=0,len=a.length;
            for(;i&lt;len;i++){
                sum+=a[i];
                sum2+=a[i]*a[i];
            }
            variance=sum2/len-(sum/len)*(sum/len);
            return variance;
        }

        public static void main(String args[]){
            double a[]={1,2,3,4,5};
            System.out.println(ComputeVariance(a));
            System.out.println(ComputeVariance2(a));

        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[乘2加1]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/12/27/alg-mul2_add2/"/>
    <updated>2015-12-27T02:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/12/27/alg-mul2_add2</id>
    <content type="html"><![CDATA[<p>两个数A B，A&lt;B，两种操作：A=A+1 或 A=A*2，求A到B的最少操作次数。</p>

<p>首先如果A、B的二进制前缀不一样则一直A=A+1</p>

<p>然后A=A&lt;&lt;1，A、B前缀不一样再A=A+1</p>
]]></content>
  </entry>
  
</feed>
