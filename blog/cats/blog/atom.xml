<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/blog/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-26T19:20:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从histats切换为matomo]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/07/07/blog-matomo/"/>
    <updated>2022-07-07T19:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/07/07/blog-matomo</id>
    <content type="html"><![CDATA[<p>histats带出多余访问，改为matomo</p>

<p><img src="/images/blog/matomo.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从cnzz切换为histats]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/07/02/blog-histats/"/>
    <updated>2022-07-02T22:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/07/02/blog-histats</id>
    <content type="html"><![CDATA[<p>cnzz 无法统计国外地址，换成histats</p>

<p><img src="/images/blog/histats.png" alt="" /></p>

<p><img src="/images/blog/cnzz.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby字符串处理函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string/"/>
    <updated>2014-12-14T15:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string</id>
    <content type="html"><![CDATA[<h5>1.返回字符串的长度</h5>

<pre><code>str.length =&gt; integer
</code></pre>

<h5>2.字符串索引index</h5>

<pre><code>str.index(substring [, offset])   =&gt; fixnum or nil
str.index(fixnum [, offset])      =&gt; fixnum or nil
str.index(regexp [, offset])      =&gt; fixnum or nil

Returns the index of the first occurrence of the given substring, character (fixnum), 
or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
it specifies the position in the string to begin the search.

   "hello".index('e')             #=&gt; 1
   "hello".index('lo')            #=&gt; 3
   "hello".index('a')             #=&gt; nil
   "hello".index(101)             #=&gt; 1
   "hello".index(/[aeiou]/, -3)   #=&gt; 4
</code></pre>

<h6>从尾到头rindex</h6>

<pre><code>str.rindex(substring [, fixnum])   =&gt; fixnum or nil
str.rindex(fixnum [, fixnum])   =&gt; fixnum or nil
str.rindex(regexp [, fixnum])   =&gt; fixnum or nil

Returns the index of the last occurrence of the given substring, character (fixnum), 
or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
it specifies the position in the string to end the search---characters beyond this point will not be considered.

   "hello".rindex('e')             #=&gt; 1
   "hello".rindex('l')             #=&gt; 3
   "hello".rindex('a')             #=&gt; nil
   "hello".rindex(101)             #=&gt; 1
   "hello".rindex(/[aeiou]/, -2)   #=&gt; 1
</code></pre>

<h5>3.判断字符串中是否包含另一个串</h5>

<pre><code>str.include? other_str =&gt; true or false
"hello".include? "lo"   #=&gt; true
"hello".include? "ol"   #=&gt; false
"hello".include? ?h     #=&gt; true
</code></pre>

<h5>4.字符串插入</h5>

<pre><code>str.insert(index, other_str) =&gt; str
"abcd".insert(0, 'X')    #=&gt; "Xabcd"
"abcd".insert(3, 'X')    #=&gt; "abcXd"
"abcd".insert(4, 'X')    #=&gt; "abcdX"
"abcd".insert(-3, 'X')
-3, 'X')   #=&gt; "abXcd"
"abcd".insert(-1, 'X')   #=&gt; "abcdX"
</code></pre>

<h5>5.字符串分隔,默认分隔符为空格</h5>

<pre><code>str.split(pattern=$;, [limit]) =&gt; anArray
" now's the time".split        #=&gt; ["now's", "the", "time"]
"1, 2.34,56, 7".split(%r{,\s*}) #=&gt; ["1", "2.34", "56", "7"]
"hello".split(//)               #=&gt; ["h", "e", "l", "l", "o"]
"hello".split(//, 3)            #=&gt; ["h", "e", "llo"]
"hi mom".split(%r{\s*})         #=&gt; ["h", "i", "m", "o", "m"]
"mellow yellow".split("ello")   #=&gt; ["m", "w y", "w"]
"1,2,,3,4,,".split(',')         #=&gt; ["1", "2", "", "3", "4"]
"1,2,,3,4,,".split(',', 4)      #=&gt; ["1", "2", "", "3,4,,"]
</code></pre>

<h5>6.字符串替换</h5>

<pre><code>str.gsub(pattern, replacement) =&gt; new_str
str.gsub(pattern) {|match| block } =&gt; new_str
"hello".gsub(/[aeiou]/, '*')              #=&gt; "h*ll*"     #将元音替换成*号
"hello".gsub(/([aeiou])/, '&lt;\1&gt;')         #=&gt; "h&lt;e&gt;ll&lt;o&gt;"   #将元音加上尖括号,\1表示保留原有字符???
"hello".gsub(/./) {|s| s[0].to_s + ' '}   #=&gt; "104 101 108 108 111 "
</code></pre>

<p>ruby中带“!&ldquo;和不带&rdquo;!&ldquo;的方法的最大的区别就是带”!"的会改变调用对象本身了。比方说str.gsub(/a/, &lsquo;b&rsquo;)，不会改变str本身，只会返回一个新的str。而str.gsub!(/a/, &lsquo;b&rsquo;)就会把str本身给改了。<br/>
但是gsub和gsub!还有另外一个不同点就是，gsub不管怎么样都会返回一个新的字符串，而gsub!只有在有字符被替换的情况下才会返回一个新的字符串，假如说没有任何字符被替换，gsub!只会返回nil.</p>

<h6>字符串替换二:</h6>

<pre><code>str.replace(other_str) =&gt; str
s = "hello"         #=&gt; "hello"
s.replace "world"   #=&gt; "world"
</code></pre>

<h5>7.字符串删除:</h5>

<pre><code>str.delete([other_str]+) =&gt; new_str
"hello".delete "l","lo"        #=&gt; "heo"
"hello".delete "lo"            #=&gt; "he"
"hello".delete "aeiou", "^e"   #=&gt; "hell"
"hello".delete "ej-m"          #=&gt; "ho"
</code></pre>

<h5>8.去掉前和后的空格</h5>

<pre><code>str.lstrip =&gt; new_str
" hello ".lstrip   #=&gt; "hello "
"hello".lstrip       #=&gt; "hello"
</code></pre>

<h5>9.字符串匹配</h5>

<pre><code>str.match(pattern) =&gt; matchdata or nil
</code></pre>

<h5>10.字符串反转</h5>

<pre><code>str.reverse =&gt; new_str
"stressed".reverse   #=&gt; "desserts"
</code></pre>

<h5>11.去掉重复的字符</h5>

<pre><code>str.squeeze([other_str]*) =&gt; new_str
"yellow moon".squeeze                  #=&gt; "yelow mon" #默认去掉串中所有重复的字符
" now   is the".squeeze(" ")         #=&gt; " now is the" #去掉串中重复的空格
"putters shoot balls".squeeze("m-z")   #=&gt; "puters shot balls" #去掉指定范围内的重复字符
</code></pre>

<h5>12.转化成数字</h5>

<pre><code>str.to_i=&gt; str
"12345".to_i             #=&gt; 12345
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base/"/>
    <updated>2014-12-14T14:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base</id>
    <content type="html"><![CDATA[<h4>打印一个完整的回溯</h4>

<pre><code>    puts caller
</code></pre>

<h4>Find</h4>

<p><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html">http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html</a></p>

<pre><code>    require 'find'
    total_size = 0
    Find.find(ENV["HOME"]) do |path|
      if FileTest.directory?(path)
        if File.basename(path)[0] == ?.
          Find.prune       # Don't look any further into this directory.
        else
          next
        end
      else
        total_size += FileTest.size(path)
      end
    end
</code></pre>

<h4>Time</h4>

<pre><code>    p Time.parse(“2002-03-17”)       #=&gt; Sun Mar 17 00:00:00 +0800[v2] 2002
    p Time.now        # =&gt;Mon Oct 20 06:02:10 JST 2003
    p Time.now.to_a      # =&gt; [10, 2, 6, 20, 10, 2003, 1, 293,false, "JST"]
    p Time.now.to_f      # =&gt; 1418540681.0154862
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[liquid用法笔记]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid/"/>
    <updated>2014-12-14T14:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/dont27/article/details/38097581">原文</a></p>

<ul>
<li>注意本文代码中的 <code>{ {</code>,<code>{ %</code>,<code>% }</code>,<code>} }</code>,<code>{ { {</code>,<code>} } }</code> 中间的空格都要去掉才能执行</li>
</ul>


<p>在折腾github上博客的时候, 遇到一些jekyll, 正确来说应该是Liquid用法的问题。
于是一系列搜索之后终于找到了比较容易理解的<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">文档>></a></p>

<p>关于Liquid的语法使用，看完一遍，就能愉快的在github上继续折腾博客了。有些看不大懂，没翻译，都是自己的见解，有些根本用不上就不解释了。</p>

<h5>Liquid有两种标记类型： Output 和 Tag.</h5>

<p>  Output标记，用于输出文本，格式采用 <code>{ { 两个尖括号包围 } }</code><br/>
  Tag标记，用于执行命令或者处理 格式: <code>{ % 一对尖括号内一对百分号 % }</code></p>

<p>我的见解是: 类比jsp格式, Output相当于 &lt;%=variable>，即输出变量值;<br/>
Tag相当于&lt;% int i=2 ;%>,一种数据处理,但不做输出效果.</p>

<h4>Output</h4>

<p>例子:
<code>
Hello { {name} }
Hello { {user.name} }
Hello { { 'tobi' } }
</code></p>

<h5>高级Output: Filters//过滤器</h5>

<p>Filters过滤器,数据处理的操作方法.<br/>
过滤器的第一个参数，往往是过滤器运算符'|&lsquo;左边的Output，而过滤器的返回值，是通过过滤运算符右边的操作所得到的，过滤器可以叠加操作，最终得到该Output所要输出的值。(这段我见解，翻译不过来 = =)<br/>
如下：<br/>
<code>
Hello { { 'tobi' | upcase } }
Hello tobi has { { 'tobi' | size } } letters!
Hello { { 'now' | date: "%Y %h" } }
</code></p>

<h5>标准过滤器</h5>

<pre><code>    date - 格式化时间
    capitalize - 输出字符串，字符串（句子）首字母大写 e.g. 假设tb为"hello world"{ { tb|capitalize } } #=&gt; 'Hello world'
    downcase - 转换小写
    upcase - 转换大写
    first - 获取数组的第一个元素
    last - 获取数组的最后一个元素
    join - 用指定的字符拼接数组元素
    sort - 排序数组
    map - map/collect an array on a given property
    size - 返回数组大小
    escape - 转移字符串
    escape_once - returns an escaped version of html without affecting existing escaped entities
    strip_html - 除去字符串中的html标签?
    strip_newlines - 除去字符串中的回车?
    newline_to_br - 将所有的回车"\n" 转换成"&lt;br /&gt;"?
    replace - 替换所有匹配内容 e.g.{ { 'forfor' | replace:'for', 'bar' } } #=&gt; 'barbar'
    replace_first - 替换第一个匹配内容 e.g.{ { 'forfor' | replace_first:'for', 'bar' } } #=&gt; 'barfor'
    remove - 移除所有匹配内容 e.g.{ { 'forbarforbar' | remove:'for'} } #=&gt; 'barbar'
    remove_first - 移除第一个匹配内容 e.g.{ { 'forbarforbar' | remove_first:'for'} } #=&gt; 'barforbar'
    truncate - truncate a string down to x characters
    truncatewords - truncate a string down to x words
    prepend - 在字符串前面加上内容 e.g.{ {'bar'|prepend:'far'} } #=&gt; 'farbar'
    append - 字符串后面加上内容 e.g.{ {'bar'|append: 'foo'} }#=&gt; 'barfoo'
    minus - 减法 e.g. { {4|minus:2} } #=&gt;2
    plus - 加法 e.g. { { 4|plus:2} } #=&gt; 6
    times - 乘法 e.g. { {10|times:2} } #=&gt; 20
    divided_by - 除法 e.g. { { 10 | divided_by:2} } #=&gt; 5
    split - 分割字符串 e.g.{ { "a~b" | split:'~'} } #=&gt; ['a','b']
    modulo - 取余 e.g. { { 3 | modulo:2 } } #=&gt; 1
</code></pre>

<h4>Tags</h4>

<p>Tag在模板中起到处理逻辑的作用。<br/>
下面是目前支持的Tag:
<code>
    assign - 定义变量 e.g. { % assign tt = 1 % } 定义了变量tt数值为1
    capture - Block tag为变量赋值 e.g.{ % capture dont % }{ { tt } }{ % endcapture % } 将tt的值赋给 dont
    case - Block tag its the standard case...when block
    comment - Block tag 注释
    cycle - Cycle is usually used within a loop to alternate between values, like colors or DOM classes.
    for - for循环block
    if - 判断block
    include - 引入模板
    raw - 转义内容tag e.g.{ % raw % }{ { this } }{ % endraw% } #=&gt; '{ { this } }'
    unless - Mirror of if statement
</code></p>

<h5>Comments</h5>

<p>注释隐藏
<code>
We made 1 million dollars { % comment % } in losses { % endcomment % } this year
Raw
</code>
当包裹内容出现冲突语法时，不会执行其处理。
<code>
    { % raw % }
      In Handlebars, { { this } } will be HTML-escaped, but { { { that } } } will not.
    { % endraw % }
</code></p>

<h5>if/else</h5>

<p>e.g.
<code>
    { % if user % }
      Hello { { user.name } }
    { % endif % }
</code>
<code>
    # Same as above
    { % if user != null % }
      Hello { { user.name } }
    { % endif % }
</code></p>

<pre><code>    { % if user.name != 'tobi' % }
      Hello non-tobi
    { % endif % }
</code></pre>

<pre><code>    # Same as above
    { % unless user.name == 'tobi' % }
      Hello non-tobi
    { % endunless % }
</code></pre>

<pre><code>    { % if user.payments.size &gt; 0  % }
       you paid !
    { % endif % }
</code></pre>

<h5>Case Statement</h5>

<p>多条件
<code>
    { % case condition % }
    { % when 1 % }
    hit 1
    { % when 2 or 3 % }
    hit 2 or 3
    { % else % }
    ... else ...
    { % endcase % }
</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % case template % }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{ % when 'label' % }
</span><span class='line'> // { { label.title } }
</span><span class='line'>{ % when 'product' % }
</span><span class='line'> // { { product.vendor | link_to_vendor } } / { { product.title } }
</span><span class='line'>{ % else % }
</span><span class='line'> // { {page_title} }
</span><span class='line'>{ % endcase % }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### Cycle
</span><span class='line'>循环列举
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;结果：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;one
</span><span class='line'>two
</span><span class='line'>three
</span><span class='line'>one
</span><span class='line'>&lt;code&gt;
</span><span class='line'>可以通过命名分组：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>{ % cycle &lsquo;group 1&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 1&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 2&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 2&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>&lt;code&gt;
</span><span class='line'>结果：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>one
</span><span class='line'>two
</span><span class='line'>one
</span><span class='line'>two</span></code></pre></td></tr></table></div></figure></p>

<h5>for 循环</h5>

<p>循环集合：
<code>
    { % for item in array % }
      { { item } }
    { % endfor % }
</code>
遍历hash时：item[0]包含键，item[1]包含值
<code>
    { % for item in hash % }
      { { item[0] } }: { { item[1] } }
    { % endfor % }
</code>
for循环时，下列变量可以辅助使用：
<code>
forloop.length      # =&gt; length of the entire for loop
forloop.index       # =&gt; index of the current iteration
forloop.index0      # =&gt; index of the current iteration (zero based)
forloop.rindex      # =&gt; how many items are still left?
forloop.rindex0     # =&gt; how many items are still left? (zero based)
forloop.first       # =&gt; is this the first iteration?
forloop.last        # =&gt; is this the last iteration?
</code>
还有一些变量可以用来处理循环时选择性处理：<br/>
limit:int - 限制遍历个数<br/>
offset:int - 从第n个数开始遍历
<code>
    # array = [1,2,3,4,5,6]
    { % for item in array limit:2 offset:2 % }
      { { item } }
    { % endfor % }
    # results in 3,4
</code>
反序遍历：
<code>
    { % for item in collection reversed % }
    { {item} }
    { % endfor % }
</code>
除了遍历集合，还可以定义一个范围的数字来遍历：
<code>
    # if item.quantity is 4...
    { % for i in (1..item.quantity) % }
      { { i } }
    { % endfor % }
    # results in 1,2,3,4
</code></p>

<h5>变量赋值</h5>

<p>赋值变量：
```
    { % assign name = &lsquo;freestyle&rsquo; % }</p>

<pre><code>{ % for t in collections.tags % }{ % if t == name % }
  &lt;p&gt;Freestyle!&lt;/p&gt;
{ % endif % }{ % endfor % }
</code></pre>

<pre><code>还可以赋值布尔值：
</code></pre>

<pre><code>{ % assign freestyle = false % }

{ % for t in collections.tags % }{ % if t == 'freestyle' % }
  { % assign freestyle = true % }
{ % endif % }{ % endfor % }

{ % if freestyle % }
  &lt;p&gt;Freestyle!&lt;/p&gt;
{ % endif % }
</code></pre>

<pre><code>赋值处理过的数据：可以用capture
</code></pre>

<pre><code>{ % capture attribute_name % }{ { item.title | handleize } }-{ { i } }-color{ % endcapture % }

  &lt;label for="{ { attribute_name } }"&gt;Color:&lt;/label&gt;
  &lt;select name="attributes[{ { attribute_name } }]" id="{ { attribute_name } }"&gt;
    &lt;option value="red"&gt;Red&lt;/option&gt;
    &lt;option value="green"&gt;Green&lt;/option&gt;
    &lt;option value="blue"&gt;Blue&lt;/option&gt;
  &lt;/select&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
