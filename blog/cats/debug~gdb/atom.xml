<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~gdb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~gdb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-04-26T14:38:06+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gdb struct]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-struct/"/>
    <updated>2019-12-12T11:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-struct</id>
    <content type="html"><![CDATA[<p><a href="http://bbs.chinaunix.net/thread-4101359-1-1.html">http://bbs.chinaunix.net/thread-4101359-1-1.html</a></p>

<h4>查看结构体中成员的偏移</h4>

<pre><code>    (gdb) p &amp;((struct task_struct *)0)-&gt;prio

    (gdb) ptype struct malloc_chunk
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb子进程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-fork/"/>
    <updated>2019-12-12T10:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-fork</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fingding/article/details/46459095">https://blog.csdn.net/fingding/article/details/46459095</a></p>

<h4>1. follow-fork-mode</h4>

<p>用法：set follow-fork-mode [parent|child]</p>

<p>进入gdb后，直接设置，默认是parent</p>

<p>所以如果想要调试子进程，进入gdb后设置set follow-fork-mode child，然后设置子进程的断点</p>

<p>可用使用show follow-fork-mode 来查询当前fork模式</p>

<p>使用follow-fork-mode，只能调试一个进程，不能同时调试父子进程</p>

<h4>2. detach-on-fork mode</h4>

<p>用法：set detach-on-fork [on|off]</p>

<p>on: 只调试父进程或子进程的其中一个(根据follow-fork-mode来决定)，这是默认的模式。</p>

<p>off: 父子进程都在gdb的控制之下，其中一个进程正常调试(根据follow-fork-mode来决定),另一个进程会被设置为暂停状态。</p>

<p>如果设置了set detach-on-fork off且follow-fork-mode为parent，fork后子进程并不运行，而是处于暂停状态。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb线程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread/"/>
    <updated>2016-05-11T20:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread</id>
    <content type="html"><![CDATA[<p>GDB多线程调试的基本命令。</p>

<p>info threads 显示当前可调试的所有线程，每个线程会有一个GDB为其分配的ID，后面操作线程的时候会用到这个ID。 前面有*的是当前调试的线程。</p>

<p>thread ID 切换当前调试的线程为指定ID的线程。</p>

<p>break thread_test.c:123 thread all 在所有线程中相应的行上设置断点</p>

<p>thread apply ID1 ID2 command 让一个或者多个线程执行GDB命令command。</p>

<p>thread apply all command 让所有被调试线程执行GDB命令command。</p>

<p>set scheduler-locking off|on|step 估计是实际使用过多线程调试的人都可以发现，在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。off 不锁定任何线程，也就是所有线程都执行，这是默认值。 on 只有当前被调试程序会执行。 step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb break/watch/catch]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break/"/>
    <updated>2015-07-21T15:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break</id>
    <content type="html"><![CDATA[<p><a href="http://sourceware.org/gdb/current/onlinedocs/gdb">http://sourceware.org/gdb/current/onlinedocs/gdb</a></p>

<p><a href="http://blog.csdn.net/yangzhongxuan/article/details/6897968">gdb break 断点设置（一）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6899186">gdb watch 断点设置（二）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901440">gdb catch 断点设置（三）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901477">gdb 断点删除（四）</a></p>

<hr />

<h3>二、断点设置</h3>

<h4>gdb断点分类：</h4>

<p>以设置断点的命令分类：</p>

<p>breakpoint 可以根据行号、函数、条件生成断点。
watchpoint 监测变量或者表达式的值发生变化时产生断点。
catchpoint 监测信号的产生。例如c++的throw，或者加载库的时候。</p>

<p>gdb中的变量从1开始标号，不同的断点采用变量标号同一管理，可以 用enable、disable等命令管理，同时支持断点范围的操作，比如有些命令接受断点范围作为参数。</p>

<h4>1、break及break变种详解：</h4>

<p>相关命令有break，tbreak，rbreak,hbreak，thbreak，后两种是基于硬件的，先不介绍。</p>

<h5>break 与 tbeak</h5>

<p>break，tbreak可以根据行号、函数、条件生成断点。tbreak设置方法与break相同，只不过tbreak只在断点停一次，过后会自动将断点删除，break需要手动控制断点的删除和使能。</p>

<p>break 可带如下参数：<br/>
  linenum            本地行号，即list命令可见的行号<br/>
  filename:linenum   制定个文件的行号<br/>
  function           函数，可以是自定义函数也可是库函数，如open<br/>
  filename:function  制定文件中的函数<br/>
  condtion           条件<br/>
  *address           地址，可是函数，变量的地址，此地址可以通过info add命令得到。</p>

<p>例如：
<code>
    break 10    
    break test.c:10
    break main
    break test.c:main
    break system
    break open
</code></p>

<p>如果想在指定的地址设置断点，比如在main函数的地址出设断点。可用info add main 获得main的地址如0x80484624，然后用break *0x80484624.</p>

<h6>条件断点</h6>

<p>就是在如上述指定断点的同时指定进入断点的条件。</p>

<p>例如：（假如有int 类型变量 index）
<code>
    break 10 if index == 3
    tbreak 12 if index == 5
</code></p>

<h5>rbreak</h5>

<p>rbreak 可以跟一个规则表达式。rbreak + 表达式的用法与grep + 表达式相似。即在所有与表达式匹配的函数入口都设置断点。</p>

<p>rbreak list<em>* 即在所有以 list</em> 为开头字符的函数地方都设置断点。</p>

<p>rbreak ^list_ 功能与上同。</p>

<h5>查看断点信息</h5>

<pre><code>    info break [break num ]
    info break 可列出所有断点信息，info break 后也可设置要查看的break num如：
    info break 1 列出断点号是1的断点信息

    Num        Type                    Disp Enb  Address      What
     1       breakpoint                keep y    &lt;MULTIPLE&gt;
     stop only if i==1
     breakpoint already hit 1 time
     1.1                                    y    0x080486a2 in void foo&lt;int&gt;() at t.cc:8
     1.2                                    y    0x080486ca in void foo&lt;double&gt;() at t.cc:8
</code></pre>

<hr />

<h4>2、watch</h4>

<pre><code>    watch [-l|-location] expr [thread threadnum] [mask maskvalue]
</code></pre>

<p>-l 与 mask没有仔细研究，thread threadnum 是在多线程的程序中限定只有被线程号是threadnum的线程修改值后进入断点。</p>

<p>经常用到的如下命令：
watch <expr><br/>
为表达式（变量）expr设置一个观察点。变量量表达式值有变化时，马上停住程序。</p>

<p>表达式可以是一个变量, 例如：watch value_a</p>

<p>表达式可以是一个地址, 例如：watch <em>(int </em>)0x12345678 可以检测4个字节的内存是否变化。</p>

<p>表达式可以是一个复杂的语句表达式, 例如：watch a*b + c/d</p>

<p>watch 在有些操作系统支持硬件观测点，硬件观测点的运行速度比软件观测点的快。如果系统支持硬件观测的话，当设置观测点是会打印如下信息：<code>Hardware watchpoint num: expr</code></p>

<p>如果不想用硬件观测点的话可如下设置：<code>set can-use-hw-watchpoints</code></p>

<p>watch两个变种 rwatch，awatch，这两个命令只支持硬件观测点如果系统不支持硬件观测点会答应出不支持这两个命令的信息:，</p>

<p>rwatch <expr><br/>
当表达式（变量）expr被读时，停住程序。</p>

<p>awatch <expr><br/>
当表达式（变量）的值被读或被写时，停住程序。</p>

<p>info watchpoints<br/>
列出当前所设置了的所有观察点。</p>

<p>watch 所设置的断点也可以用控制断点的命令来控制。如 disable、enable、delete等。</p>

<p>可以为停止点设定运行命令
<code>
    commands [bnum]
    ... command-list ...
    end
</code></p>

<p>为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。</p>

<p>例如：
<code>
    break foo if x&gt;0
    commands
    printf "x is %d/n",x
    continue
    end
</code></p>

<p>断点设置在函数foo中，断点条件是x>0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。</p>

<p>注意：watch 设置也是断点，如果调试的时候设置的断点（任何种类的断点）过多的时候，watch断点会被忽略，有时候没有任何提示，这是我在测试的时候发现的，只有把多余的断点删除后才可用。</p>

<hr />

<p>在调试的时候通常用catchpoints来捕获事件，如c++的异常等。捕获点的设置通过catch与tcatch两个命令。</p>

<p>tcatch所设置的断点停止一次后自动删除，设置断点的方法与catch相同。</p>

<p>用法：catch event</p>

<p>这些event事件如下：
```
    throw
        The throwing of a C++ exception.
    catch
        The catching of a C++ exception.
    exception</p>

<pre><code>exception unhandled
    An exception that was raised but is not handled by the program.
assert
    Ada 语言 assert断言失败时，断点被踩到。
exec
    调用exec时断点被踩到。
syscall
syscall [name | number] ...
    通过系统函数的名称和系统号，来设置捕获点，当所设定的系统调用时，断点被踩到。
    因为经常在linux用c语言，所以主要用到的event是最后四个，其他的没有仔细研究。
</code></pre>

<pre><code>
例如：
</code></pre>

<pre><code>catch syscall open
catch syscall 5
</code></pre>

<pre><code>这两个捕获断点一样。

--------------

断点的删除与断点的设置同样的重要。删除断点的命令有两个: delete, clear

##### delete
用法：  
delete [breakpoints num] [range...]

delete可删除单个断点，也可删除一个断点的集合，这个集合用连续的断点号来描述。

例如：
</code></pre>

<pre><code>delete 5
delete 1-10
</code></pre>

<pre><code>
##### clear
用法:  
clear  
删除所在行的多有断点。

clear location  
clear 删除所选定的环境中所有的断点  
clear location location描述具体的断点。  

例如：
</code></pre>

<pre><code>clear list_insert         //删除函数的所有断点
clear list.c:list_delet   //删除文件：函数的所有断点
clear 12                  //删除行号的所有断点
clear list.c:12           //删除文件：行号的所有断点
</code></pre>

<p>```</p>

<p>clear 删除断点是基于行的，不是把所有的断点都删除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb 修改寄存器/变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set/"/>
    <updated>2015-07-21T15:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set</id>
    <content type="html"><![CDATA[<pre><code>    # 查看所有寄存器
    (gdb) info register  # 可以简写成 i r

    # 查看单个寄存器
    (gdb) i r rax

    # 修改寄存器
    (gdb) set $rax=3



    # 查看变量
    (gdb) i local

    # 修改变量
    (gdb) set var b=4
</code></pre>
]]></content>
  </entry>
  
</feed>
