<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~kdump、crash | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~kdump,-crash/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-12T15:09:44+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu crash]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-ubuntu-kdump/"/>
    <updated>2019-12-12T12:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/12/12/debug-ubuntu-kdump</id>
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/3c92647140f7">https://www.jianshu.com/p/3c92647140f7</a></p>

<p><a href="https://help.ubuntu.com/lts/serverguide/kernel-crash-dump.html">https://help.ubuntu.com/lts/serverguide/kernel-crash-dump.html</a></p>

<h4>自己编译的内核会OOM，需要增大内存</h4>

<p>If the dump does not work due to OOM (Out Of Memory) error, then try increasing the amount of reserved memory by editing</p>

<p>/etc/default/grub.d/kdump-tools.cfg
<code>
    GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=384M-:256M"
</code>
run sudo update-grub and then reboot afterwards, and then test again.</p>

<hr />

<h4>安装</h4>

<pre><code>    sudo apt-get install linux-crashdump
</code></pre>

<p>重启机器</p>

<h4>需要启动下面的服务</h4>

<pre><code>    $ service --status-all | grep ' k'
    [ + ] kdump-tools
    [ + ] kerneloops
    [ + ] kexec
    [ + ] kexec-load
</code></pre>

<h4>查看kdump的状态</h4>

<pre><code>    $ kdump-config show
    DUMP_MODE:        kdump
    USE_KDUMP:        1
    KDUMP_SYSCTL:     kernel.panic_on_oops=1
    KDUMP_COREDIR:    /var/crash
    crashkernel addr: 0x21000000
       /var/lib/kdump/vmlinuz: symbolic link to /boot/vmlinuz-4.15.18
    kdump initrd: 
       /var/lib/kdump/initrd.img: symbolic link to /var/lib/kdump/initrd.img-4.15.18
    current state:    ready to kdump
</code></pre>

<h4>验证</h4>

<pre><code>    echo 1 &gt; /proc/sys/kernel/sysrq
    echo c &gt; /proc/sysrq-trigger
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash struct]]></title>
    <link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-crash-struct/"/>
    <updated>2019-12-12T11:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2019/12/12/debug-crash-struct</id>
    <content type="html"><![CDATA[<p><a href="http://bbs.chinaunix.net/thread-4101359-1-1.html">http://bbs.chinaunix.net/thread-4101359-1-1.html</a></p>

<h4>查看结构体中成员的偏移</h4>

<pre><code>    crash&gt; struct -o task_struct

    crash&gt; struct task_struct
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash执行shell脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/08/05/debug-crash_shell/"/>
    <updated>2018-08-05T23:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/08/05/debug-crash_shell</id>
    <content type="html"><![CDATA[<p>crash执行shell脚本</p>

<pre><code>    crash&gt; kmem -S TCP &gt; /tmp/slabinfo

    [root@vm1 ~]# cat /tmp/slabinfo | grep '\[fff' | awk -F[ '{print $2}' | awk -F] '{print "sock "$1" | grep skc_portpair &gt;&gt; /tmp/sock"}' &gt; /tmp/sock.sh

    crash&gt; &lt; /tmp/sock.sh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kdump时间错误]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/12/debug-kdump-rtc/"/>
    <updated>2016-01-12T15:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/12/debug-kdump-rtc</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016/01/06/debug-mark-rtc/">CentOS 5.x安装新内核之后时钟混乱问题</a></p>

<p>解决kdump的vmcore保存的目录的时间错误问题</p>

<pre><code>    diff --git a/mkdumprd b/mkdumprd
    index d567085..7d946f4 100755
    --- a/mkdumprd
    +++ b/mkdumprd
    @@ -2279,12 +2279,19 @@ mknod /dev/systty c 4 0
     mknod /dev/tty c 5 0
     mknod /dev/console c 5 1
     mknod /dev/ptmx c 5 2
    -mknod /dev/rtc c 10 135
     mknod /dev/urandom c 1 9
     mknod /dev/efirtc c 10 136
     export network_up=0
     EOF

    +kernelval=`echo $kernel | awk -F "[-|.]" '{print $1*65536+$2*256+$3}'`
    +#echo "kernel=$kernel kernelval=$kernelval"
    +if [ $kernelval -lt 132640 ]; then
    +   emit "mknod /dev/rtc c 10 135"
    +else
    +   emit "mknod /dev/rtc c 254 0"
    +fi
    +
     # XXX really we need to openvt too, in case someting changes the
     # color palette and then changes vts on fbcon before gettys start.
     # (yay, fbcon bugs!)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash kmem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem/"/>
    <updated>2015-07-02T10:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem</id>
    <content type="html"><![CDATA[<h4>一、kmem -s 查看slab</h4>

<pre><code>    crash&gt; kmem -s
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ...
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    ffff8808135e1400 sock_inode_cache         704        298       470     94     4k
    ...
</code></pre>

<h4>二、kmem -S 查看slab中详细内容</h4>

<pre><code>    crash&gt; kmem -S request_sock_TCP
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    SLAB              MEMORY            TOTAL  ALLOCATED  FREE
    ffff88078b9c6000  ffff88078b9c60c0     30          2    28
    FREE / [ALLOCATED]
       ffff88078b9c60c0
       ffff88078b9c6140
       ffff88078b9c61c0
       ffff88078b9c6240
       ffff88078b9c62c0
       ffff88078b9c6340
       ffff88078b9c63c0
       ffff88078b9c6440
       ffff88078b9c64c0
       ffff88078b9c6540
       ffff88078b9c65c0
       ffff88078b9c6640
       ffff88078b9c66c0
      [ffff88078b9c6740]
      [ffff88078b9c67c0]
       ffff88078b9c6840
       ffff88078b9c68c0
       ffff88078b9c6940
       ffff88078b9c69c0
    ...
</code></pre>

<p>request_sock_TCP 是 struct request_sock 类型，所以对于已分配的地址可以直接查看</p>

<pre><code>    crash&gt; struct request_sock 0xffff88078b9c6740
    struct request_sock {
      dl_next = 0x0, 
      mss = 1460, 
      retrans = 0 '\000', 
      cookie_ts = 0 '\000', 
      window_clamp = 8388480, 
      rcv_wnd = 14600, 
      ts_recent = 0, 
      expires = 4302901768, 
      rsk_ops = 0xffffffff81c0e840 &lt;tcp_request_sock_ops&gt;, 
      sk = 0xffff880771dad800, 
      secid = 3039208612, 
      peer_secid = 3672081930
    }
</code></pre>

<p><a href="http://blog.csdn.net/u011279649/article/details/17529315">http://blog.csdn.net/u011279649/article/details/17529315</a></p>
]]></content>
  </entry>
  
</feed>
