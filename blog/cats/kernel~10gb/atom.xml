<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~10gb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~10gb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2025-01-16T19:52:41+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[netmap 介绍及使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/05/21/netmap/"/>
    <updated>2020-05-21T17:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/05/21/netmap</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fengfengdiandia/article/details/52869290">https://blog.csdn.net/fengfengdiandia/article/details/52869290</a></p>

<p><a href="https://blog.csdn.net/liyu123__/article/details/80853150">https://blog.csdn.net/liyu123__/article/details/80853150</a></p>

<p><a href="https://www.cnblogs.com/ne-liqian/p/9294757.html">https://www.cnblogs.com/ne-liqian/p/9294757.html</a></p>

<p><a href="https://wenku.baidu.com/view/af41b0f065ce05087632137a">https://wenku.baidu.com/view/af41b0f065ce05087632137a</a></p>

<p>netmap官网：<a href="http://info.iet.unipi.it/~luigi/netmap/">http://info.iet.unipi.it/~luigi/netmap/</a></p>

<p>netmap的githab网址：<a href="https://github.com/luigirizzo/netmap">https://github.com/luigirizzo/netmap</a></p>

<p>netmap是一个高效的收发报文的 I/O 框架，已经集成在 FreeBSD 的内部了。
当然，也可以在 Linux 下编译使用 。</p>

<h3>一、架构</h3>

<p>现在的网卡都使用多个 buffer 来发送和接收 packet，并有一个叫NIC ring的环形数组。</p>

<p>NIC ring 是静态分配的，它的槽指向mbufs链的部分缓冲区。</p>

<p><img src="/images/kernel/20200521-20.png" alt="" /></p>

<p>netmap 内存映射网卡的packet buffer到用户态，实现了自己的发送和接收报文的circular ring来对应网卡的 ring，使用 netmap 时，程序运行在用户态，即使出了问题也不会 crash 操作系统。</p>

<p>下图显示了一个接口可以有多个 netmap ring。</p>

<p>将文件描述符绑定到 NIC 时，应用程序可以选择将所有 ring或仅一个 ring附加到文件描述符。</p>

<p>使用所有 ring，相同的代码可以用于单队列或多队列 NIC。</p>

<p>使用一个 ring，可以通过每个 ring 一个进程/CPU core 来构建高性能系统，从而在系统中并行。</p>

<p><img src="/images/kernel/20200521-21.png" alt="" /></p>

<p>netmap 使用poll等待网卡的文件描述符可接收或可发送。</p>

<p>netmap 会建立一个字符设备/dev/netmap，然后通过nm_open来注册网卡为 netmap 模式。</p>

<ul>
<li>注意：这里顺便提一下，网卡进入 netmap 模式后，ifconfig 是看不到网卡统计信息变化的，wireshark 也抓不到报文，因为协议栈被旁路了。</li>
</ul>


<p>内存映射的区域里面，有网卡的收发队列，这样可以通过将接收缓冲区的地址写在发送的 ring 里面实现零拷贝（Zero-copy）。</p>

<h3>二、性能</h3>

<p>netmap 官网说在 10GigE 上测试，发包速率可以达到 14.88Mpps，收包的速率和发包相近。同时还支持多网卡队列。</p>

<p><img src="/images/kernel/20200521-22.png" alt="" /></p>

<h3>三、编译安装</h3>

<pre><code>    git clone https://github.com/luigirizzo/netmap.git
    或
    git clone https://github.com/abcdxyzk/netmap.git

    cd netmap/LINUX
    ./configure --drivers=ixgbe --kernel-sources=/usr/src/linux-headers-4.15.18/ --kernel-dir=/usr/src/linux-headers-4.15.18/

    rmmod ixgbe

    insmod netmap.ko
    insmod ixgbe/ixgbe.ko
</code></pre>

<h3>四、发送、接收</h3>

<p>发送
<code>
    ./build-apps/pkt-gen/pkt-gen -i enp3s0 -f tx -c 1 -p 1 -z -d 12.0.0.100:80
</code></p>

<p>接收
<code>
    gcc rcv.c -I../sys
</code></p>

<p>cat rcv.c
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
<span class='line-number'>1146</span>
<span class='line-number'>1147</span>
<span class='line-number'>1148</span>
<span class='line-number'>1149</span>
<span class='line-number'>1150</span>
<span class='line-number'>1151</span>
<span class='line-number'>1152</span>
<span class='line-number'>1153</span>
<span class='line-number'>1154</span>
<span class='line-number'>1155</span>
<span class='line-number'>1156</span>
<span class='line-number'>1157</span>
<span class='line-number'>1158</span>
<span class='line-number'>1159</span>
<span class='line-number'>1160</span>
<span class='line-number'>1161</span>
<span class='line-number'>1162</span>
<span class='line-number'>1163</span>
<span class='line-number'>1164</span>
<span class='line-number'>1165</span>
<span class='line-number'>1166</span>
<span class='line-number'>1167</span>
<span class='line-number'>1168</span>
<span class='line-number'>1169</span>
<span class='line-number'>1170</span>
<span class='line-number'>1171</span>
<span class='line-number'>1172</span>
<span class='line-number'>1173</span>
<span class='line-number'>1174</span>
<span class='line-number'>1175</span>
<span class='line-number'>1176</span>
<span class='line-number'>1177</span>
<span class='line-number'>1178</span>
<span class='line-number'>1179</span>
<span class='line-number'>1180</span>
<span class='line-number'>1181</span>
<span class='line-number'>1182</span>
<span class='line-number'>1183</span>
<span class='line-number'>1184</span>
<span class='line-number'>1185</span>
<span class='line-number'>1186</span>
<span class='line-number'>1187</span>
<span class='line-number'>1188</span>
<span class='line-number'>1189</span>
<span class='line-number'>1190</span>
<span class='line-number'>1191</span>
<span class='line-number'>1192</span>
<span class='line-number'>1193</span>
<span class='line-number'>1194</span>
<span class='line-number'>1195</span>
<span class='line-number'>1196</span>
<span class='line-number'>1197</span>
<span class='line-number'>1198</span>
<span class='line-number'>1199</span>
<span class='line-number'>1200</span>
<span class='line-number'>1201</span>
<span class='line-number'>1202</span>
<span class='line-number'>1203</span>
<span class='line-number'>1204</span>
<span class='line-number'>1205</span>
<span class='line-number'>1206</span>
<span class='line-number'>1207</span>
<span class='line-number'>1208</span>
<span class='line-number'>1209</span>
<span class='line-number'>1210</span>
<span class='line-number'>1211</span>
<span class='line-number'>1212</span>
<span class='line-number'>1213</span>
<span class='line-number'>1214</span>
<span class='line-number'>1215</span>
<span class='line-number'>1216</span>
<span class='line-number'>1217</span>
<span class='line-number'>1218</span>
<span class='line-number'>1219</span>
<span class='line-number'>1220</span>
<span class='line-number'>1221</span>
<span class='line-number'>1222</span>
<span class='line-number'>1223</span>
<span class='line-number'>1224</span>
<span class='line-number'>1225</span>
<span class='line-number'>1226</span>
<span class='line-number'>1227</span>
<span class='line-number'>1228</span>
<span class='line-number'>1229</span>
<span class='line-number'>1230</span>
<span class='line-number'>1231</span>
<span class='line-number'>1232</span>
<span class='line-number'>1233</span>
<span class='line-number'>1234</span>
<span class='line-number'>1235</span>
<span class='line-number'>1236</span>
<span class='line-number'>1237</span>
<span class='line-number'>1238</span>
<span class='line-number'>1239</span>
<span class='line-number'>1240</span>
<span class='line-number'>1241</span>
<span class='line-number'>1242</span>
<span class='line-number'>1243</span>
<span class='line-number'>1244</span>
<span class='line-number'>1245</span>
<span class='line-number'>1246</span>
<span class='line-number'>1247</span>
<span class='line-number'>1248</span>
<span class='line-number'>1249</span>
<span class='line-number'>1250</span>
<span class='line-number'>1251</span>
<span class='line-number'>1252</span>
<span class='line-number'>1253</span>
<span class='line-number'>1254</span>
<span class='line-number'>1255</span>
<span class='line-number'>1256</span>
<span class='line-number'>1257</span>
<span class='line-number'>1258</span>
<span class='line-number'>1259</span>
<span class='line-number'>1260</span>
<span class='line-number'>1261</span>
<span class='line-number'>1262</span>
<span class='line-number'>1263</span>
<span class='line-number'>1264</span>
<span class='line-number'>1265</span>
<span class='line-number'>1266</span>
<span class='line-number'>1267</span>
<span class='line-number'>1268</span>
<span class='line-number'>1269</span>
<span class='line-number'>1270</span>
<span class='line-number'>1271</span>
<span class='line-number'>1272</span>
<span class='line-number'>1273</span>
<span class='line-number'>1274</span>
<span class='line-number'>1275</span>
<span class='line-number'>1276</span>
<span class='line-number'>1277</span>
<span class='line-number'>1278</span>
<span class='line-number'>1279</span>
<span class='line-number'>1280</span>
<span class='line-number'>1281</span>
<span class='line-number'>1282</span>
<span class='line-number'>1283</span>
<span class='line-number'>1284</span>
<span class='line-number'>1285</span>
<span class='line-number'>1286</span>
<span class='line-number'>1287</span>
<span class='line-number'>1288</span>
<span class='line-number'>1289</span>
<span class='line-number'>1290</span>
<span class='line-number'>1291</span>
<span class='line-number'>1292</span>
<span class='line-number'>1293</span>
<span class='line-number'>1294</span>
<span class='line-number'>1295</span>
<span class='line-number'>1296</span>
<span class='line-number'>1297</span>
<span class='line-number'>1298</span>
<span class='line-number'>1299</span>
<span class='line-number'>1300</span>
<span class='line-number'>1301</span>
<span class='line-number'>1302</span>
<span class='line-number'>1303</span>
<span class='line-number'>1304</span>
<span class='line-number'>1305</span>
<span class='line-number'>1306</span>
<span class='line-number'>1307</span>
<span class='line-number'>1308</span>
<span class='line-number'>1309</span>
<span class='line-number'>1310</span>
<span class='line-number'>1311</span>
<span class='line-number'>1312</span>
<span class='line-number'>1313</span>
<span class='line-number'>1314</span>
<span class='line-number'>1315</span>
<span class='line-number'>1316</span>
<span class='line-number'>1317</span>
<span class='line-number'>1318</span>
<span class='line-number'>1319</span>
<span class='line-number'>1320</span>
<span class='line-number'>1321</span>
<span class='line-number'>1322</span>
<span class='line-number'>1323</span>
<span class='line-number'>1324</span>
<span class='line-number'>1325</span>
<span class='line-number'>1326</span>
<span class='line-number'>1327</span>
<span class='line-number'>1328</span>
<span class='line-number'>1329</span>
<span class='line-number'>1330</span>
<span class='line-number'>1331</span>
<span class='line-number'>1332</span>
<span class='line-number'>1333</span>
<span class='line-number'>1334</span>
<span class='line-number'>1335</span>
<span class='line-number'>1336</span>
<span class='line-number'>1337</span>
<span class='line-number'>1338</span>
<span class='line-number'>1339</span>
<span class='line-number'>1340</span>
<span class='line-number'>1341</span>
<span class='line-number'>1342</span>
<span class='line-number'>1343</span>
<span class='line-number'>1344</span>
<span class='line-number'>1345</span>
<span class='line-number'>1346</span>
<span class='line-number'>1347</span>
<span class='line-number'>1348</span>
<span class='line-number'>1349</span>
<span class='line-number'>1350</span>
<span class='line-number'>1351</span>
<span class='line-number'>1352</span>
<span class='line-number'>1353</span>
<span class='line-number'>1354</span>
<span class='line-number'>1355</span>
<span class='line-number'>1356</span>
<span class='line-number'>1357</span>
<span class='line-number'>1358</span>
<span class='line-number'>1359</span>
<span class='line-number'>1360</span>
<span class='line-number'>1361</span>
<span class='line-number'>1362</span>
<span class='line-number'>1363</span>
<span class='line-number'>1364</span>
<span class='line-number'>1365</span>
<span class='line-number'>1366</span>
<span class='line-number'>1367</span>
<span class='line-number'>1368</span>
<span class='line-number'>1369</span>
<span class='line-number'>1370</span>
<span class='line-number'>1371</span>
<span class='line-number'>1372</span>
<span class='line-number'>1373</span>
<span class='line-number'>1374</span>
<span class='line-number'>1375</span>
<span class='line-number'>1376</span>
<span class='line-number'>1377</span>
<span class='line-number'>1378</span>
<span class='line-number'>1379</span>
<span class='line-number'>1380</span>
<span class='line-number'>1381</span>
<span class='line-number'>1382</span>
<span class='line-number'>1383</span>
<span class='line-number'>1384</span>
<span class='line-number'>1385</span>
<span class='line-number'>1386</span>
<span class='line-number'>1387</span>
<span class='line-number'>1388</span>
<span class='line-number'>1389</span>
<span class='line-number'>1390</span>
<span class='line-number'>1391</span>
<span class='line-number'>1392</span>
<span class='line-number'>1393</span>
<span class='line-number'>1394</span>
<span class='line-number'>1395</span>
<span class='line-number'>1396</span>
<span class='line-number'>1397</span>
<span class='line-number'>1398</span>
<span class='line-number'>1399</span>
<span class='line-number'>1400</span>
<span class='line-number'>1401</span>
<span class='line-number'>1402</span>
<span class='line-number'>1403</span>
<span class='line-number'>1404</span>
<span class='line-number'>1405</span>
<span class='line-number'>1406</span>
<span class='line-number'>1407</span>
<span class='line-number'>1408</span>
<span class='line-number'>1409</span>
<span class='line-number'>1410</span>
<span class='line-number'>1411</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;poll.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define NETMAP_WITH_LIBS
</span><span class='line'>#include &lt;net/netmap_user.h&gt;
</span><span class='line'>
</span><span class='line'>unsigned long pps = 0;
</span><span class='line'>
</span><span class='line'>static void receive_packets(struct netmap_ring *ring)
</span><span class='line'>{
</span><span class='line'>int i;
</span><span class='line'>char *buf;
</span><span class='line'>
</span><span class='line'>while (!nm_ring_empty(ring)) {
</span><span class='line'>    i   = ring-&gt;cur;
</span><span class='line'>    buf = NETMAP_BUF(ring, ring-&gt;slot[i].buf_idx);
</span><span class='line'>    pps++;
</span><span class='line'>
</span><span class='line'>    ring-&gt;head = ring-&gt;cur = nm_ring_next(ring, i); 
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int main(void)
</span><span class='line'>{
</span><span class='line'>struct nm_desc *d;
</span><span class='line'>struct pollfd fds;
</span><span class='line'>struct netmap_ring *ring;
</span><span class='line'>int i; 
</span><span class='line'>
</span><span class='line'>d = nm_open("netmap:eth1", NULL, 0, 0); 
</span><span class='line'>
</span><span class='line'>fds.fd     = d-&gt;fd;
</span><span class='line'>fds.events = POLLIN;
</span><span class='line'>
</span><span class='line'>while (1) {
</span><span class='line'>    if (poll(&amp;fds, 1, 1) &lt; 0) {
</span><span class='line'>        perror("poll()");
</span><span class='line'>        exit(1);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (i = d-&gt;first_rx_ring; i &lt;= d-&gt;last_rx_ring; i++) {
</span><span class='line'>        ring = NETMAP_RXRING(d-&gt;nifp, i);
</span><span class='line'>        receive_packets(ring);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[ixgbe驱动初始化]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2020/05/21/ixgbe-init/"/&gt;
</span><span class='line'>&lt;updated&gt;2020-05-21T15:33:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2020/05/21/ixgbe-init&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://www.cnblogs.com/scottieyuyang/p/5663213.html"&gt;https://www.cnblogs.com/scottieyuyang/p/5663213.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;首先模块加载insmod ixgbe.ko&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    module_init(ixgbe_init_module);
</span><span class='line'>
</span><span class='line'>module_init(ixgbe_init_module);
</span><span class='line'>{
</span><span class='line'>    int ret;
</span><span class='line'>    pr_info("%s - version %s\n", ixgbe_driver_string, ixgbe_driver_version);
</span><span class='line'>    pr_info("%s\n", ixgbe_copyright);
</span><span class='line'>
</span><span class='line'>    ixgbe_dbg_init();
</span><span class='line'> 　　　　ret = pci_register_driver(&amp;ixgbe_driver);
</span><span class='line'>    if (ret) {
</span><span class='line'>        ixgbe_dbg_exit();
</span><span class='line'>        return ret;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_IXGBE_DCA
</span><span class='line'>    dca_register_notify(&amp;dca_notifier);
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;于是看pci设备的核心结构体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static struct pci_driver ixgbe_driver = {
</span><span class='line'>    .name     = ixgbe_driver_name,
</span><span class='line'>    .id_table = ixgbe_pci_tbl,
</span><span class='line'>    .probe    = ixgbe_probe,
</span><span class='line'>    .remove   = ixgbe_remove,
</span><span class='line'>#ifdef CONFIG_PM
</span><span class='line'>    .suspend  = ixgbe_suspend,
</span><span class='line'>    .resume   = ixgbe_resume,
</span><span class='line'>#endif
</span><span class='line'>    .shutdown = ixgbe_shutdown,
</span><span class='line'>    .sriov_configure = ixgbe_pci_sriov_configure,
</span><span class='line'>    .err_handler = &amp;ixgbe_err_handler
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当设备加载成功后，会执行ixgbe_probe函数&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static int ixgbe_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
</span><span class='line'>{
</span><span class='line'>    /*分配struct net_device *netdev 结构体*/
</span><span class='line'>    netdev = alloc_etherdev_mq(sizeof(struct ixgbe_adapter), indices);
</span><span class='line'>
</span><span class='line'>    if (!netdev) {
</span><span class='line'>        err = -ENOMEM;
</span><span class='line'>        goto err_alloc_etherdev;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    SET_NETDEV_DEV(netdev, &amp;pdev-&gt;dev);
</span><span class='line'>
</span><span class='line'>    /*分配struct ixgbe_adapter *adapter结构体*/
</span><span class='line'>    adapter = netdev_priv(netdev);
</span><span class='line'>
</span><span class='line'>    /*分配dev结构体的ops函数指针集合*/
</span><span class='line'>    netdev-&gt;netdev_ops = &amp;ixgbe_netdev_ops;
</span><span class='line'>
</span><span class='line'>    err = ixgbe_sw_init(adapter);
</span><span class='line'>
</span><span class='line'>    err = ixgbe_init_interrupt_scheme(adapter);
</span><span class='line'>    /*设备注册完毕*/&lt;br&gt;
</span><span class='line'>    err = register_netdev(netdev);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;重点看ixgbe_init_interrupt_scheme(adapter)函数，该函数里面会初始化adapter结构体以及napi相关的东西&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int ixgbe_init_interrupt_scheme(struct ixgbe_adapter *adapter)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    err = ixgbe_alloc_q_vectors(adapter);
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>static int ixgbe_alloc_q_vectors(struct ixgbe_adapter *adapter)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    if (q_vectors &gt;= (rxr_remaining + txr_remaining)) {
</span><span class='line'>        for (; rxr_remaining; v_idx++) {
</span><span class='line'>            err = ixgbe_alloc_q_vector(adapter, q_vectors, v_idx,
</span><span class='line'>                           0, 0, 1, rxr_idx);
</span><span class='line'>
</span><span class='line'>            if (err)
</span><span class='line'>                goto err_out;
</span><span class='line'>
</span><span class='line'>            /* update counts and index */
</span><span class='line'>            rxr_remaining--;
</span><span class='line'>            rxr_idx++;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>static int ixgbe_alloc_q_vector(struct ixgbe_adapter *adapter,
</span><span class='line'>                int v_count, int v_idx,
</span><span class='line'>                int txr_count, int txr_idx,
</span><span class='line'>                int rxr_count, int rxr_idx)
</span><span class='line'>{
</span><span class='line'>    /* setup affinity mask and node */
</span><span class='line'>    if (cpu != -1)
</span><span class='line'>        cpumask_set_cpu(cpu, &amp;q_vector-&gt;affinity_mask);
</span><span class='line'>    q_vector-&gt;numa_node = node;
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_IXGBE_DCA
</span><span class='line'>    /* initialize CPU for DCA */
</span><span class='line'>    q_vector-&gt;cpu = -1;
</span><span class='line'>
</span><span class='line'>#endif
</span><span class='line'>    /* initialize NAPI */
</span><span class='line'>    netif_napi_add(adapter-&gt;netdev, &amp;q_vector-&gt;napi,
</span><span class='line'>               ixgbe_poll, 64);
</span><span class='line'>    napi_hash_add(&amp;q_vector-&gt;napi);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;到此为止，网卡设置初始化完毕　　&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;其中涉及到如下几个结构体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;ixgbe_adapter&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* board specific private data structure */
</span><span class='line'>struct ixgbe_adapter {
</span><span class='line'>
</span><span class='line'>    //发送的rings
</span><span class='line'>    struct ixgbe_ring *tx_ring[MAX_TX_QUEUES] ____cacheline_aligned_in_smp;
</span><span class='line'>
</span><span class='line'>    //接收的rings
</span><span class='line'>    struct ixgbe_ring *rx_ring[MAX_RX_QUEUES];
</span><span class='line'>
</span><span class='line'>    //这个vector里面包含了napi结构
</span><span class='line'>    //应该是跟下面的entries一一对应起来做为是一个中断向量的东西吧
</span><span class='line'>    struct ixgbe_q_vector *q_vector[MAX_Q_VECTORS];
</span><span class='line'>
</span><span class='line'>    //这个里面估计是MSIX的多个中断对应的响应接口
</span><span class='line'>    struct msix_entry *msix_entries;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct ixgbe_q_vector {
</span><span class='line'>    struct ixgbe_adapter *adapter;
</span><span class='line'>ifdef CONFIG_IXGBE_DCA
</span><span class='line'>    int cpu;            /* CPU for DCA */
</span><span class='line'>#endif
</span><span class='line'>    u16 v_idx;              /* index of q_vector within array, also used for
</span><span class='line'>                 * finding the bit in EICR and friends that
</span><span class='line'>                 * represents the vector for this ring */
</span><span class='line'>    u16 itr;                /* Interrupt throttle rate written to EITR */
</span><span class='line'>    struct ixgbe_ring_container rx, tx;
</span><span class='line'>
</span><span class='line'>    struct napi_struct napi;/*napi结构体*/
</span><span class='line'>    cpumask_t affinity_mask;
</span><span class='line'>    int numa_node;
</span><span class='line'>    struct rcu_head rcu;    /* to avoid race with update stats on free */
</span><span class='line'>    char name[IFNAMSIZ + 9];
</span><span class='line'>
</span><span class='line'>    /* for dynamic allocation of rings associated with this q_vector */
</span><span class='line'>    struct ixgbe_ring ring[0] ____cacheline_internodealigned_in_smp;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>struct napi_struct {
</span><span class='line'>    /* The poll_list must only be managed by the entity which
</span><span class='line'>     * changes the state of the NAPI_STATE_SCHED bit.  This means
</span><span class='line'>     * whoever atomically sets that bit can add this napi_struct
</span><span class='line'>     * to the per-cpu poll_list, and whoever clears that bit
</span><span class='line'>     * can remove from the list right before clearing the bit.
</span><span class='line'>     */
</span><span class='line'>    struct list_head    poll_list;
</span><span class='line'>
</span><span class='line'>    unsigned long       state;
</span><span class='line'>    int         weight;
</span><span class='line'>    unsigned int        gro_count;
</span><span class='line'>    int         (*poll)(struct napi_struct *, int);//poll的接口实现
</span><span class='line'>#ifdef CONFIG_NETPOLL
</span><span class='line'>    spinlock_t      poll_lock;
</span><span class='line'>    int         poll_owner;
</span><span class='line'>#endif
</span><span class='line'>    struct net_device   *dev;
</span><span class='line'>    struct sk_buff      *gro_list;
</span><span class='line'>    struct sk_buff      *skb;
</span><span class='line'>    struct list_head    dev_list;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;然后当我们ifconfig dev up 时，会执行dev_ops-&gt;open函数&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static int ixgbe_open(struct net_device *netdev)
</span><span class='line'>{
</span><span class='line'>    /* allocate transmit descriptors */
</span><span class='line'>    err = ixgbe_setup_all_tx_resources(adapter);
</span><span class='line'>    if (err)
</span><span class='line'>        goto err_setup_tx;
</span><span class='line'>
</span><span class='line'>    /* allocate receive descriptors */
</span><span class='line'>    err = ixgbe_setup_all_rx_resources(adapter);
</span><span class='line'>    /*注册中断*/
</span><span class='line'>    err = ixgbe_request_irq(adapter);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static int ixgbe_request_irq(struct ixgbe_adapter *adapter)
</span><span class='line'>{
</span><span class='line'>    struct net_device *netdev = adapter-&gt;netdev;
</span><span class='line'>    int err;
</span><span class='line'>
</span><span class='line'>    if (adapter-&gt;flags &amp; IXGBE_FLAG_MSIX_ENABLED)
</span><span class='line'>        err = ixgbe_request_msix_irqs(adapter);
</span><span class='line'>    else if (adapter-&gt;flags &amp; IXGBE_FLAG_MSI_ENABLED)
</span><span class='line'>        err = request_irq(adapter-&gt;pdev-&gt;irq, ixgbe_intr, 0,
</span><span class='line'>                  netdev-&gt;name, adapter);
</span><span class='line'>    else
</span><span class='line'>        err = request_irq(adapter-&gt;pdev-&gt;irq, ixgbe_intr, IRQF_SHARED,
</span><span class='line'>                  netdev-&gt;name, adapter);
</span><span class='line'>
</span><span class='line'>    if (err)
</span><span class='line'>        e_err(probe, "request_irq failed, Error %d\n", err);
</span><span class='line'>
</span><span class='line'>    return err;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static int ixgbe_request_msix_irqs(struct ixgbe_adapter *adapter)
</span><span class='line'>{
</span><span class='line'>    for (vector = 0; vector &lt; adapter-&gt;num_q_vectors; vector++) {
</span><span class='line'>        struct ixgbe_q_vector *q_vector = adapter-&gt;q_vector[vector];
</span><span class='line'>        struct msix_entry *entry = &amp;adapter-&gt;msix_entries[vector];
</span><span class='line'>
</span><span class='line'>        err = request_irq(entry-&gt;vector, &amp;ixgbe_msix_clean_rings, 0,
</span><span class='line'>                  q_vector-&gt;name, q_vector);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从上面的代码流程可以看出，最终注册的中断处理函数为ixgbe_msix_clean_rings&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static irqreturn_t ixgbe_msix_clean_rings(int irq, void *data)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_q_vector *q_vector = data;
</span><span class='line'>
</span><span class='line'>    /* EIAM disabled interrupts (on this vector) for us */
</span><span class='line'>
</span><span class='line'>    if (q_vector-&gt;rx.ring || q_vector-&gt;tx.ring)
</span><span class='line'>        napi_schedule(&amp;q_vector-&gt;napi);
</span><span class='line'>
</span><span class='line'>    return IRQ_HANDLED;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从上述代码中可以看，该中断处理函数仅仅作为napi的调度者&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当数据包到来时，首先唤醒硬中断执行ixgbe_msix_clean_rings函数，最终napi_schedule会调用 &lt;code&gt;__raise_softirq_irqoff&lt;/code&gt; 去触发一个软中断NET_RX_SOFTIRQ，然后又对应的软中断接口去实现往上的协议栈逻辑&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;然后看看napi 调度函数都做了些什么工作&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static inline void napi_schedule(struct napi_struct *n)
</span><span class='line'>{
</span><span class='line'>    if (napi_schedule_prep(n))
</span><span class='line'>        __napi_schedule(n);
</span><span class='line'>}
</span><span class='line'>void __napi_schedule(struct napi_struct *n)
</span><span class='line'>{
</span><span class='line'>    unsigned long flags;
</span><span class='line'>
</span><span class='line'>    local_irq_save(flags);
</span><span class='line'>    ____napi_schedule(this_cpu_ptr(&amp;softnet_data), n);
</span><span class='line'>    local_irq_restore(flags);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>最终可以看出napi调度函数把napi结构体挂到了per cpu的私有数据结构softnet_data上
</span><span class='line'>struct softnet_data {
</span><span class='line'>    struct Qdisc        *output_queue;
</span><span class='line'>    struct Qdisc        **output_queue_tailp;
</span><span class='line'>    struct list_head    poll_list;
</span><span class='line'>    struct sk_buff      *completion_queue;
</span><span class='line'>    struct sk_buff_head process_queue;
</span><span class='line'>
</span><span class='line'>    /* stats */
</span><span class='line'>    unsigned int        processed;
</span><span class='line'>    unsigned int        time_squeeze;
</span><span class='line'>    unsigned int        cpu_collision;
</span><span class='line'>    unsigned int        received_rps;
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_RPS
</span><span class='line'>    struct softnet_data *rps_ipi_list;
</span><span class='line'>
</span><span class='line'>    /* Elements below can be accessed between CPUs for RPS */
</span><span class='line'>    struct call_single_data csd ____cacheline_aligned_in_smp;
</span><span class='line'>    struct softnet_data *rps_ipi_next;
</span><span class='line'>    unsigned int        cpu;
</span><span class='line'>    unsigned int        input_queue_head;
</span><span class='line'>    unsigned int        input_queue_tail;
</span><span class='line'>#endif
</span><span class='line'>    unsigned int        dropped;
</span><span class='line'>    struct sk_buff_head input_pkt_queue;
</span><span class='line'>    struct napi_struct  backlog;/*napi结构体里面的双向链表中*/
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NET_RX_SOFTIRQ是收到数据包的软中断信号对应的接口是net_rx_action&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NET_TX_SOFTIRQ是发送完数据包后的软中断信号对应的接口是net_tx_action　　&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static void net_rx_action(struct softirq_action *h)
</span><span class='line'>{
</span><span class='line'>    /* 获取每个cpu的数据*/
</span><span class='line'>    struct softnet_data *sd = this_cpu_ptr(&amp;softnet_data);
</span><span class='line'>    while (!list_empty(&amp;sd-&gt;poll_list)) {
</span><span class='line'>        struct napi_struct *n;
</span><span class='line'>                n = list_first_entry(&amp;sd-&gt;poll_list, struct napi_struct, poll_list);
</span><span class='line'>
</span><span class='line'>        if (test_bit(NAPI_STATE_SCHED, &amp;n-&gt;state)) {
</span><span class='line'>            work = n-&gt;poll(n, weight);
</span><span class='line'>            trace_napi_poll(n);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;于是就执行到初始化napi结构体中的poll函数，在这里为ixgbe_poll&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int ixgbe_poll(struct napi_struct *napi, int budget)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_q_vector *q_vector =
</span><span class='line'>                container_of(napi, struct ixgbe_q_vector, napi);
</span><span class='line'>    struct ixgbe_adapter *adapter = q_vector-&gt;adapter;
</span><span class='line'>    struct ixgbe_ring *ring;
</span><span class='line'>    int per_ring_budget;
</span><span class='line'>    bool clean_complete = true;
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_IXGBE_DCA
</span><span class='line'>    if (adapter-&gt;flags &amp; IXGBE_FLAG_DCA_ENABLED)
</span><span class='line'>        ixgbe_update_dca(q_vector);
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    ixgbe_for_each_ring(ring, q_vector-&gt;tx)
</span><span class='line'>        clean_complete &amp;= !!ixgbe_clean_tx_irq(q_vector, ring);
</span><span class='line'>
</span><span class='line'>    if (!ixgbe_qv_lock_napi(q_vector))
</span><span class='line'>        return budget;
</span><span class='line'>
</span><span class='line'>    /* attempt to distribute budget to each queue fairly, but don't allow
</span><span class='line'>     * the budget to go below 1 because we'll exit polling */
</span><span class='line'>    if (q_vector-&gt;rx.count &gt; 1)
</span><span class='line'>        per_ring_budget = max(budget/q_vector-&gt;rx.count, 1);
</span><span class='line'>    else
</span><span class='line'>        per_ring_budget = budget;
</span><span class='line'>
</span><span class='line'>    ixgbe_for_each_ring(ring, q_vector-&gt;rx)
</span><span class='line'>        clean_complete &amp;= (ixgbe_clean_rx_irq(q_vector, ring,
</span><span class='line'>                   per_ring_budget) &lt; per_ring_budget);
</span><span class='line'>
</span><span class='line'>    ixgbe_qv_unlock_napi(q_vector);
</span><span class='line'>    /* If all work not completed, return budget and keep polling */
</span><span class='line'>    if (!clean_complete)
</span><span class='line'>        return budget;
</span><span class='line'>
</span><span class='line'>    /* all work done, exit the polling mode */
</span><span class='line'>    napi_complete(napi);
</span><span class='line'>    if (adapter-&gt;rx_itr_setting &amp; 1)
</span><span class='line'>        ixgbe_set_itr(q_vector);
</span><span class='line'>    if (!test_bit(__IXGBE_DOWN, &amp;adapter-&gt;state))
</span><span class='line'>        ixgbe_irq_enable_queues(adapter, ((u64)1 &lt;&lt; q_vector-&gt;v_idx));
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static int ixgbe_clean_rx_irq(struct ixgbe_q_vector *q_vector,
</span><span class='line'>                   struct ixgbe_ring *rx_ring,
</span><span class='line'>                   const int budget)
</span><span class='line'>{
</span><span class='line'>       ixgbe_rx_skb(q_vector, skb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void ixgbe_rx_skb(struct ixgbe_q_vector *q_vector,
</span><span class='line'>             struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    if (ixgbe_qv_busy_polling(q_vector))
</span><span class='line'>        netif_receive_skb(skb);
</span><span class='line'>    else
</span><span class='line'>        napi_gro_receive(&amp;q_vector-&gt;napi, skb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int netif_receive_skb(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    int ret;
</span><span class='line'>
</span><span class='line'>    net_timestamp_check(netdev_tstamp_prequeue, skb);
</span><span class='line'>
</span><span class='line'>    if (skb_defer_rx_timestamp(skb))
</span><span class='line'>        return NET_RX_SUCCESS;
</span><span class='line'>
</span><span class='line'>    rcu_read_lock();
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_RPS
</span><span class='line'>    if (static_key_false(&amp;rps_needed)) {
</span><span class='line'>        struct rps_dev_flow voidflow, *rflow = &amp;voidflow;
</span><span class='line'>        int cpu = get_rps_cpu(skb-&gt;dev, skb, &amp;rflow);
</span><span class='line'>
</span><span class='line'>        if (cpu &gt;= 0) {
</span><span class='line'>            ret = enqueue_to_backlog(skb, cpu, &amp;rflow-&gt;last_qtail);
</span><span class='line'>            rcu_read_unlock();
</span><span class='line'>            return ret;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>#endif
</span><span class='line'>        /*最终协议栈开始收报*/
</span><span class='line'>    ret = __netif_receive_skb(skb);
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    return ret;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[基于82599网卡的二层网络数据包接收]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2020/05/21/82599-recv/"/&gt;
</span><span class='line'>&lt;updated&gt;2020-05-21T11:00:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2020/05/21/82599-recv&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://tqr.ink/2017/04/16/intel-82599-receive-packet/"&gt;https://tqr.ink/2017/04/16/intel-82599-receive-packet/&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本篇文档主要描述了网络数据包在二层的接收流程，主要包括以下三个部分：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、82599网卡和数据包接收相关的内容；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、ixgbe网卡驱动数据包接收相关的配置；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　3）、ixgbe网卡驱动napi接口的处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;82599网卡和数据包接收相关的内容&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　这一部分要介绍的是82599网卡中和数据包接收相关的内容。网络报文接收流程所涉及的内容很多，如报文过滤、mac层卸载、报文接收描述符、校验和卸载以及分离报文有效载荷和头部等，由于篇幅原因，这里只介绍了报文接收描述符相关的内容，其他内容会在后续描述中进行穿插。　　&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　说到网卡报文接收，就必须得说到报文接收描述符，因为报文接收描述符承载了报文从网卡流入到主存的过程。对于网卡硬件而言，当网卡收到网络报文的时候，会往报文接收描述符中指定的地址写入报文数据，而网卡驱动则会从报文接收描述符中指定的地址读取报文，并送往上层协议栈处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　除了上面说到的存放报文的内存地址，报文接收描述符中还有用于存储报文信息的域。对于82599网卡而言，其支持两种格式的报文接收描述符，即传统格式和高级格式。虽然有两种不同格式的报文接收描述符，但是两种格式的报文接收描述符所占用的内存大小是一样的（目前为16字节），只是对这块内存使用有所不同。对于两种不同格式的报文接收描述符，可以在网卡驱动初始化的时候进行配置，通过设置网卡的SRRCTL寄存器的DRSCTYPE域进而选择使用某种格式的报文接收描述符。在初始化阶段，网卡驱动会申请报文描述符，并填充描述符中相关的域，然后告诉网卡该描述符可用，后续网卡接收到报文就可以用报文描述符来存储报文相关的信息，然后网卡将报文描述符回写给网卡驱动，网卡驱动从中获取所需要信息，并交由上层进行处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;传统格式报文接收描述符&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　先来看下82599网卡中对传统格式报文接收描述符的定义，如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-10.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图1 传统格式报文接收描述符&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从上面的图中可以看到，报文接收描述符的低八个字节存放的是用于存放报文的内存起始地址，而高八个字节存放的是网卡对报文进行预处理得到的一些信息，如报文长度，VLAN　Tag以及校验和信息等，这部分信息会在网卡回写报文描述符给驱动的时候存到描述符对应的域中。对于一些比较固定的功能，比如报文相关校验和计算，VLAN头的解析等功能都可以卸载到网卡，由网卡来操作，这样可以加速报文的处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;高级格式报文接收描述符&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　相比于传统格式，高级格式的报文接收描述符可以用来支持更多的功能特性，如分离报文有效负载和报文头等。高级格式的报文描述符由于需要支持更多的功能特性，所以分为了读格式和回写格式。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　先来看下82599网卡中读格式的定义，如下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-11.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图２ 高级格式报文接收描述符-读格式&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从图中可以看到，读格式的报文描述符中主要有四个部分，分别是报文缓冲区地址、A0位、头缓冲区地址和DD位。对于报文缓冲区地址和头缓冲区地址，顾名思义，存储的就是用来存放报文有效载荷和头部的缓冲区首地址。而对于DD位的作用，网卡驱动可以通过读取该位的值来判断该描述符对应的缓冲区中是否已经存放了网卡接收的报文。 　　再来看下82599网卡中回写格式的定义，如下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-12.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图３ 高级格式报文接收描述符-回写格式&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　回写代表的就是网卡往描述符对应的缓冲区中存放了报文数据，并将报文相关的元信息写入到描述符对应的域中，并设置DD位，以告诉网卡驱动该描述已经存放了报文信息。回写格式中涉及到很多和报文相关的信息，如接收报文时所使用的RSS类型，报文长度和报文接收状态等信息。这里不一一介绍，详细可以参考82599的datasheet。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;报文接收描述符环形队列&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　上面说到，报文接收描述符承载了报文从网卡流入到主存的过程，是网卡驱动和网卡都会操作的对象，那么自然而然会有以下几个疑问：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、报文接收描述符是以何种组织形式在网卡驱动和网卡之间进行传递的？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、网卡驱动怎么通知网卡报文接收描述符可用的？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在报文接收流程中，报文接收描述符是通过环形队列来管理的，当然这个环形队列是逻辑上的，队列中的描述符在内存上是连续的。网卡或者网卡驱动在进行操作的时候，如果发现已经到达了队列的末尾，那么下次操作又会从队列头部开始，从而实现环形的操作逻辑。报文接收描述符环形队列的结构体如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-13.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图4 报文接收描述符环形队列结构&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　对于第一和第二个问题，其中也已经在上面的描述符环形队列图中有体现。在对问题进行回答之前先要了解下82599网卡中和报文接收描述符环形队列相关的几个寄存器。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、RDBA寄存器。这个寄存器存放了报文接收描述符环形队列的起始地址，也就是上图中Base指向的地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、RDLEN寄存器。这个寄存器存放了报文接收描述符环形队列的长度，也就是接收描述符环形队列所占用的字节数，对应上图中的Size。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　3）、RDH寄存器。这个寄存器存放的是一个距离队列头部的偏移值，代表的是第一个可以被网卡用来存放报文信息的描述符。当网卡完成了将一个报文信息存放到描述符后，就会更新RDH寄存器的值，使之指向下一个即将用来存放报文信息的描述符。也就是说这个寄存器的值是由网卡来更新的，该寄存器对应上图中的Head。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　4）、RDT寄存器。这个寄存器存放的也是一个距离队列头部的偏移值，代表的是硬件可以用来存放报文信息的最后一个描述符的下一个描述符。当网卡驱动填充了报文描述中的报文缓冲区地址后就会更新该寄存器的值，使之指向下一个即将填充地址信息并给网卡使用的描述符，该寄存器对应上图中的Tail。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在了解了这几个寄存器的作用之后，对于本节一开始提出的两个问题就比较容易知晓了。对于第一个问题，报文描述符是以环形队列的方式来组织的；对于第二个问题，因为网卡驱动在提供可用报文接收描述符给网卡后都会更新RDT寄存器的值，所以网卡可以根据RDT寄存器知道自己当前可用的描述符信息，简单来说RDH和RDT之间的描述符就是网卡可以使用的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ixgbe网卡驱动数据包接收相关的配置&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　第一部分已经讲了网卡对描述符的定义，以及网卡中用来操作描述符环形队列的几个相关的寄存器，对网卡是如何使用描述符有了一定的了解。这一部分我们一起来看下网卡驱动是如何使用描述符以及管理描述符环形队列的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　报文接收描述符以及描述符环形队列是网卡和网卡驱动都会操作的对象，所以网卡和网卡驱动对接收报文描述符的定义也必须保持一致。与网卡相对应的，网卡驱动从软件的角度定义了接收报文描述符，如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    union ixgbe_adv_rx_desc {
</span><span class='line'>    struct {
</span><span class='line'>        __le64 pkt_addr; /* Packet buffer address */
</span><span class='line'>        __le64 hdr_addr; /* Header buffer address */
</span><span class='line'>    } read;
</span><span class='line'>    struct {
</span><span class='line'>        struct {
</span><span class='line'>            union {
</span><span class='line'>                __le32 data;
</span><span class='line'>                struct {
</span><span class='line'>                    __le16 pkt_info; /* RSS, Pkt type */
</span><span class='line'>                    __le16 hdr_info; /* Splithdr, hdrlen */
</span><span class='line'>                } hs_rss;
</span><span class='line'>            } lo_dword;
</span><span class='line'>            union {
</span><span class='line'>                __le32 rss; /* RSS Hash */
</span><span class='line'>                struct {
</span><span class='line'>                    __le16 ip_id; /* IP id */
</span><span class='line'>                    __le16 csum; /* Packet Checksum */
</span><span class='line'>                } csum_ip;
</span><span class='line'>            } hi_dword;
</span><span class='line'>        } lower;
</span><span class='line'>        struct {
</span><span class='line'>            __le32 status_error; /* ext status/error */
</span><span class='line'>            __le16 length; /* Packet length */
</span><span class='line'>            __le16 vlan; /* VLAN tag */
</span><span class='line'>        } upper;
</span><span class='line'>    } wb;  /* writeback */
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　报文接收描述符环形队列是用做网络报文接收的，而在网卡中接收报文的最小单位是一个队列，即RX队列。所以一般来说就是一个RX队列对应一个报文接收描述符环形队列。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从ixgbe驱动的实现可以知道，ixgbe使用一个叫做中断向量的对象来管理队列，其定义如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct ixgbe_q_vector {
</span><span class='line'>    struct ixgbe_adapter *adapter;
</span><span class='line'>#ifdef CONFIG_IXGBE_DCA
</span><span class='line'>    int cpu;        /* CPU for DCA */
</span><span class='line'>#endif
</span><span class='line'>    u16 v_idx;      /* index of q_vector within array, also used for
</span><span class='line'>                 * finding the bit in EICR and friends that
</span><span class='line'>                 * represents the vector for this ring */
</span><span class='line'>    u16 itr;        /* Interrupt throttle rate written to EITR */
</span><span class='line'>
</span><span class='line'>    /* 分别以链表方式管理中断向量中的rx和tx队列 */
</span><span class='line'>    struct ixgbe_ring_container rx, tx;
</span><span class='line'>    struct napi_struct napi;
</span><span class='line'>    cpumask_t affinity_mask;
</span><span class='line'>    int numa_node;
</span><span class='line'>    struct rcu_head rcu;    /* to avoid race with update stats on free */
</span><span class='line'>    char name[IFNAMSIZ + 9];
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_NET_RX_BUSY_POLL
</span><span class='line'>    atomic_t state;
</span><span class='line'>#endif  /* CONFIG_NET_RX_BUSY_POLL */
</span><span class='line'>
</span><span class='line'>    /* for dynamic allocation of rings associated with this q_vector */
</span><span class='line'>    struct ixgbe_ring ring[0] ____cacheline_internodealigned_in_smp;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在上面的定义中，struct ixgbe_q_vector对象最后一个类型为struct ixgbe_ring的柔性数组成员就是由该中断向量所管理的队列，这里包括了RX队列和TX队列。报文接收流程只需要关注其中的RX队列即可。一般来说一个中断向量会关联一个硬件中断。当网卡往中断向量中的某个RX队列的描述符中写入报文信息时，就会触发对应的硬件中断，然后中断子系统就会调用我们注册的中断处理函数来处理这个中断，在ixgbe驱动中对应的就是ixgbe_intr()（在msi-x中断模式下对应的是ixgbe_msix_clean_rings()）。这里需要做一个说明，就是在legacy或者msi中断模式下，只会使用一个中断向量，对应的使用一个中断号；而在msi-x中断模式下，可能会有多个中断向量，对应的会有多个中断号，一般来说会把一个中断向量对应的中断号进行绑核处理，这样可以提高报文处理效率。而具体到某一个RX队列是如何同一个中断号进行关联的，这里还涉及到另外一个网卡寄存器，即Interrupt Vector Alloction（IVAR），这里不再详细介绍，可以参考ixgbe驱动的ixgbe_configure_msi_and_legacy()和ixgbe_configure_msix()函数，以及网卡中断部分的配置。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在ixgbe网卡驱动的实现中，我们可以看到驱动是以一个叫做struct ixgbe_ring的对象来管理报文描述符环形队列(不管是接收还是发送)，其定义如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct ixgbe_ring {
</span><span class='line'>    struct ixgbe_ring *next;    /* pointer to next ring in q_vector */
</span><span class='line'>    struct ixgbe_q_vector *q_vector; /* backpointer to host q_vector */
</span><span class='line'>    struct net_device *netdev;  /* netdev ring belongs to */
</span><span class='line'>    struct device *dev;     /* device for DMA mapping */
</span><span class='line'>    struct ixgbe_fwd_adapter *l2_accel_priv;
</span><span class='line'>
</span><span class='line'>    /* 环形队列缓冲区中的报文描述符数组 */
</span><span class='line'>    void *desc;         /* descriptor ring memory */
</span><span class='line'>
</span><span class='line'>    /* 与报文描述符数组一一对应的报文缓冲区对象 */
</span><span class='line'>    union {
</span><span class='line'>        struct ixgbe_tx_buffer *tx_buffer_info;
</span><span class='line'>        struct ixgbe_rx_buffer *rx_buffer_info;
</span><span class='line'>    };
</span><span class='line'>    unsigned long state;
</span><span class='line'>    u8 __iomem *tail;  /* 指向RDT寄存器对应的内核虚拟地址 */
</span><span class='line'>
</span><span class='line'>    /* 报文描述符数组对应的物理地址 */
</span><span class='line'>    dma_addr_t dma;         /* phys. address of descriptor ring */
</span><span class='line'>    unsigned int size;      /* length in bytes */
</span><span class='line'>
</span><span class='line'>    /* 环形队列缓冲区中的报文描述符个数 */
</span><span class='line'>    u16 count;          /* amount of descriptors */
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 环形队列缓冲区关联的rx队列索引，这个索引是用来在adapter-&gt;rx数组索引环形队列缓冲区的
</span><span class='line'>     */
</span><span class='line'>    u8 queue_index; /* needed for multiqueue queue management */
</span><span class='line'>    u8 reg_idx;         /* holds the special value that gets
</span><span class='line'>                     * the hardware register offset
</span><span class='line'>                     * associated with this ring, which is
</span><span class='line'>                     * different for DCB and RSS modes
</span><span class='line'>                     */
</span><span class='line'>    /*
</span><span class='line'>     * next_to_use是环形队列缓冲区中将要提供给硬件使用的第一个报文描述符的索引，对应的就是RDT寄存器
</span><span class='line'>     * next_to_clean是环形队列缓冲区中驱动将要处理的第一个报文描述符的索引
</span><span class='line'>     */
</span><span class='line'>    u16 next_to_use;
</span><span class='line'>    u16 next_to_clean;
</span><span class='line'>
</span><span class='line'>    unsigned long last_rx_timestamp;
</span><span class='line'>
</span><span class='line'>    union {
</span><span class='line'>        u16 next_to_alloc;
</span><span class='line'>        struct {
</span><span class='line'>            u8 atr_sample_rate;
</span><span class='line'>            u8 atr_count;
</span><span class='line'>        };
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    u8 dcb_tc;
</span><span class='line'>    struct ixgbe_queue_stats stats;
</span><span class='line'>    struct u64_stats_sync syncp;
</span><span class='line'>    union {
</span><span class='line'>        struct ixgbe_tx_queue_stats tx_stats;
</span><span class='line'>        struct ixgbe_rx_queue_stats rx_stats;
</span><span class='line'>    };
</span><span class='line'>} ____cacheline_internodealigned_in_smp;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　struct ixgbe_ring对象中最重要的几个成员都已经做了注解，其中的desc成员就是报文描述符队列，从这里的实现也可以看出，报文描述符队列实际上是线性的，其逻辑上的环形操作是通过struct ixgbe_ring对象中的成员，如next_to_clean、next_to_alloc和next_to_use等来实现的。另外，struct ixgbe_ring对象中还有一个类型为dma_addr_t的dma成员，该成员就是desc成员对应的物理地址，有desc成员的内核虚拟地址进行一致性dma映射得到。这样ixgbe驱动可以通过desc来操作描述符环形队列，而网卡可以通过dma成员来操作描述符环形队列。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　下面一起来看下ixgbe驱动是如何建立一个描述符环形队列管理对象的。其实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int ixgbe_setup_rx_resources(struct ixgbe_ring *rx_ring)
</span><span class='line'>{
</span><span class='line'>    struct device *dev = rx_ring-&gt;dev;
</span><span class='line'>    int orig_node = dev_to_node(dev);
</span><span class='line'>    int ring_node = -1;
</span><span class='line'>    int size;
</span><span class='line'>
</span><span class='line'>    size = sizeof(struct ixgbe_rx_buffer) * rx_ring-&gt;count;
</span><span class='line'>
</span><span class='line'>    if (rx_ring-&gt;q_vector)
</span><span class='line'>        ring_node = rx_ring-&gt;q_vector-&gt;numa_node;
</span><span class='line'>
</span><span class='line'>    rx_ring-&gt;rx_buffer_info = vzalloc_node(size, ring_node);
</span><span class='line'>    if (!rx_ring-&gt;rx_buffer_info)
</span><span class='line'>        rx_ring-&gt;rx_buffer_info = vzalloc(size);
</span><span class='line'>    if (!rx_ring-&gt;rx_buffer_info)
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    u64_stats_init(&amp;rx_ring-&gt;syncp);
</span><span class='line'>
</span><span class='line'>    /* Round up to nearest 4K */
</span><span class='line'>    rx_ring-&gt;size = rx_ring-&gt;count * sizeof(union ixgbe_adv_rx_desc);
</span><span class='line'>    rx_ring-&gt;size = ALIGN(rx_ring-&gt;size, 4096);
</span><span class='line'>
</span><span class='line'>    set_dev_node(dev, ring_node);
</span><span class='line'>    rx_ring-&gt;desc = dma_alloc_coherent(dev,
</span><span class='line'>                       rx_ring-&gt;size,
</span><span class='line'>                       &amp;rx_ring-&gt;dma,
</span><span class='line'>                       GFP_KERNEL);
</span><span class='line'>    set_dev_node(dev, orig_node);
</span><span class='line'>    if (!rx_ring-&gt;desc)
</span><span class='line'>        rx_ring-&gt;desc = dma_alloc_coherent(dev, rx_ring-&gt;size,
</span><span class='line'>                           &amp;rx_ring-&gt;dma, GFP_KERNEL);
</span><span class='line'>    if (!rx_ring-&gt;desc)
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    rx_ring-&gt;next_to_clean = 0;
</span><span class='line'>    rx_ring-&gt;next_to_use = 0;
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>err:
</span><span class='line'>    vfree(rx_ring-&gt;rx_buffer_info);
</span><span class='line'>    rx_ring-&gt;rx_buffer_info = NULL;
</span><span class='line'>    dev_err(dev, "Unable to allocate memory for the Rx descriptor ring\n");
</span><span class='line'>    return -ENOMEM;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　函数ixgbe_setup_rx_resources()处理流程很清晰：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、根据之前配置好的环形队列中报文接收描述符个数申请报文描述符数组所需要的内存，以及对应的用来管理报文缓冲区地址信息的缓冲区对象，这个时候缓冲区对象中用来存放报文内容的地址仍然是无效的，因为还没有申请内存，在函数ixgbe_alloc_rx_buffers()处理完成之后，缓冲区对象中存放报文内容的地址就是有效的，可以提供给网卡用来存放报文数据。此外，对报文接收描述符数组内存进行一致性dma映射，获取对应的物理地址，网卡需要使用物理地址，而不是虚拟地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、初始化描述符环形队列操作所涉及到的索引成员，包括next_to_use和next_to_clean。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　经过ixgbe_setup_rx_resources()函数的处理，就已经成功创建了一个描述符环形的管理对象。接下来就需要告诉网卡这个描述符环形队列的信息，这个就是函数ixgbe_configure_rx_ring()所要做的事情了，其实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    void ixgbe_configure_rx_ring(struct ixgbe_adapter *adapter,
</span><span class='line'>                 struct ixgbe_ring *ring)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_hw *hw = &amp;adapter-&gt;hw;
</span><span class='line'>
</span><span class='line'>    /* 环形队列缓冲区中报文描述符数组对应的物理地址 */
</span><span class='line'>    u64 rdba = ring-&gt;dma;
</span><span class='line'>    u32 rxdctl;
</span><span class='line'>    u8 reg_idx = ring-&gt;reg_idx;
</span><span class='line'>
</span><span class='line'>    /* disable queue to avoid issues while updating state */
</span><span class='line'>    rxdctl = IXGBE_READ_REG(hw, IXGBE_RXDCTL(reg_idx));
</span><span class='line'>    ixgbe_disable_rx_queue(adapter, ring);
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 将报文描述符数组的首地址写入到RDBAH和RDBAL寄存器中，并将描述符数组的长度
</span><span class='line'>     * 写入到RDLEN寄存器中，这样网卡芯片就知道了报文描述符的信息，后续可以收到
</span><span class='line'>     * 合适的网络报文后，就会将报文存放到描述符里面的dma地址中，并递增内部的
</span><span class='line'>     * head寄存器值
</span><span class='line'>     */
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RDBAL(reg_idx), (rdba &amp; DMA_BIT_MASK(32)));
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RDBAH(reg_idx), (rdba &gt;&gt; 32));
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RDLEN(reg_idx),
</span><span class='line'>            ring-&gt;count * sizeof(union ixgbe_adv_rx_desc));
</span><span class='line'>    /* Force flushing of IXGBE_RDLEN to prevent MDD */
</span><span class='line'>    IXGBE_WRITE_FLUSH(hw);
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 初始状态下，网卡芯片的head和tail指针都为0，表示网卡没有可用的报文描述符
</span><span class='line'>     * 等后面驱动申请了n个报文描述符中的dma地址后，就会将tail寄存器值设置为n，
</span><span class='line'>     * 表示目前网卡可用的报文描述符数量为n个。这样，等网卡收到了合适的报文之后
</span><span class='line'>     * 就会存到报文描述符中的dma地址处。
</span><span class='line'>     */
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RDH(reg_idx), 0);
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RDT(reg_idx), 0);
</span><span class='line'>    ring-&gt;tail = adapter-&gt;io_addr + IXGBE_RDT(reg_idx);
</span><span class='line'>
</span><span class='line'>    ixgbe_configure_srrctl(adapter, ring);
</span><span class='line'>    ixgbe_configure_rscctl(adapter, ring);
</span><span class='line'>
</span><span class='line'>    if (hw-&gt;mac.type == ixgbe_mac_82598EB) {
</span><span class='line'>        /*
</span><span class='line'>         * enable cache line friendly hardware writes:
</span><span class='line'>         * PTHRESH=32 descriptors (half the internal cache),
</span><span class='line'>         * this also removes ugly rx_no_buffer_count increment
</span><span class='line'>         * HTHRESH=4 descriptors (to minimize latency on fetch)
</span><span class='line'>         * WTHRESH=8 burst writeback up to two cache lines
</span><span class='line'>         */
</span><span class='line'>        rxdctl &amp;= ~0x3FFFFF;
</span><span class='line'>        rxdctl |=  0x080420;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /* enable receive descriptor ring */
</span><span class='line'>    rxdctl |= IXGBE_RXDCTL_ENABLE;
</span><span class='line'>    IXGBE_WRITE_REG(hw, IXGBE_RXDCTL(reg_idx), rxdctl);
</span><span class='line'>
</span><span class='line'>    ixgbe_rx_desc_queue_enable(adapter, ring);
</span><span class='line'>
</span><span class='line'>    /* 申请报文描述符中用于存储报文数据的内存 */
</span><span class='line'>    ixgbe_alloc_rx_buffers(ring, ixgbe_desc_unused(ring));
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从该函数的实现就可以看到，网卡驱动就是通过将接收报文描述符数组对应的物理地址写入到RDBA寄存器，并初始化RDH和RDT寄存器。通过写RDBA、RDH和RDT寄存器，网卡就知道了当前的描述符环形队列的信息。接着调用函数ixgbe_alloc_rx_buffers()申请用来存放报文数据的内存，并将对应的物理地址保存到接收描述符中，然后设置RDT寄存器，这样网卡就可以使用RDH和RDT之间的描述符进行接收报文处理了，ixgbe_alloc_rx_buffers()函数的实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    void ixgbe_alloc_rx_buffers(struct ixgbe_ring *rx_ring, u16 cleaned_count)
</span><span class='line'>{
</span><span class='line'>    union ixgbe_adv_rx_desc *rx_desc;
</span><span class='line'>    struct ixgbe_rx_buffer *bi;
</span><span class='line'>    u16 i = rx_ring-&gt;next_to_use;
</span><span class='line'>
</span><span class='line'>    /* nothing to do */
</span><span class='line'>    if (!cleaned_count)
</span><span class='line'>        return;
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 获取下一个将要提供给硬件使用的报文描述符(对应的索引为rx_ring-&gt;next_to_use)，
</span><span class='line'>     * 以及报文描述符对应的缓冲区对象，缓冲区对象中保存了用于存放报文数据的内存地址信息，
</span><span class='line'>     * 当然用于存放报文的内存对应的物理地址也会保存到报文描述符中。
</span><span class='line'>     */
</span><span class='line'>    rx_desc = IXGBE_RX_DESC(rx_ring, i);
</span><span class='line'>    bi = &amp;rx_ring-&gt;rx_buffer_info[i];
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 这个地方执行这个计算的目的是什么呢?我们知道报文描述符队列在逻辑上是环形的(
</span><span class='line'>     * 实际上是线性的，因为内存地址是线性分布的)，当我们操作这个队列到达末尾的时候，
</span><span class='line'>     * 通过将索引重新指向队列开头来实现环形操作。所以呢，在计算之后，i表示的就是
</span><span class='line'>     * 目前位置距离队列末尾之间还没有提供给硬件使用的报文描述符个数的相反数，也就是
</span><span class='line'>     * 当前处理位置和队列末尾距离。
</span><span class='line'>     * 在下面的循环中，每处理一个报文描述符(申请用于存放报文数据的内存)都会将i递增，
</span><span class='line'>     * 当i等于0的时候，说明达到了队列的末尾，下次处理就要从队列头开始了，从而实现
</span><span class='line'>     * 队列的环形操作。
</span><span class='line'>     */
</span><span class='line'>    i -= rx_ring-&gt;count;
</span><span class='line'>
</span><span class='line'>    do {
</span><span class='line'>        /*
</span><span class='line'>         * 申请用于存放报文数据的内存，并进行dma流式映射
</span><span class='line'>         */
</span><span class='line'>        if (!ixgbe_alloc_mapped_page(rx_ring, bi))
</span><span class='line'>            break;
</span><span class='line'>
</span><span class='line'>        /*
</span><span class='line'>         * Refresh the desc even if buffer_addrs didn't change
</span><span class='line'>         * because each write-back erases this info.
</span><span class='line'>         */
</span><span class='line'>        /* rx_desc-&gt;read.pkt_addr存放的地址就是用于存放报文的dma起始地址 */
</span><span class='line'>        rx_desc-&gt;read.pkt_addr = cpu_to_le64(bi-&gt;dma + bi-&gt;page_offset);
</span><span class='line'>
</span><span class='line'>        /* rx_desc和bi递增，指向下一个描述符和对应的缓冲区对象 */
</span><span class='line'>        rx_desc++;
</span><span class='line'>        bi++;
</span><span class='line'>        i++;
</span><span class='line'>        /*
</span><span class='line'>         * 如果i == 0，说明操作环形队列缓冲区已经转了一圈了，这个时候就需要重新让
</span><span class='line'>         * rx_desc和bi分别指向描述符数组和缓冲区数组的起始位置，从头开始处理，当然
</span><span class='line'>         * 对应的i值也就要重新计算了，此时的值为队列中描述符个数的相反数。
</span><span class='line'>         */
</span><span class='line'>        if (unlikely(!i)) {
</span><span class='line'>            /*
</span><span class='line'>             * 考虑下为什么描述符环形队列中已经被网卡使用过的描述符中存放报文内容的
</span><span class='line'>             * 内存需要重新申请并进行流式dma映射呢?我们知道，一个描述符中用来存放
</span><span class='line'>             * 报文的内存(实际上是一个页)，接收完报文后如果空间足够，有可能被其他描述符
</span><span class='line'>             * 重用，或者报文较大而产生分片，这个时候并不会从描述符中存放报文的内存中
</span><span class='line'>             * 将报文数据拷贝到skb-&gt;data中，而是将描述符中存放报文的页内存挂载到
</span><span class='line'>             * skb_shinfo(skb)-&gt;frags数组中，无论前面的哪种情况，本描述符中用于
</span><span class='line'>             * 存放报文数据的内存在本描述符用于接收报文之后都不能再被该描述符继续使用了，
</span><span class='line'>             * 所需每次都需要重新申请内存，或者重用之前的报文描述符的页内存。这也是为什么
</span><span class='line'>             * 在函数ixgbe_fetch_rx_buffer()末尾会将rx_buffer-&gt;page置空的原因。
</span><span class='line'>             */
</span><span class='line'>            rx_desc = IXGBE_RX_DESC(rx_ring, 0);
</span><span class='line'>            bi = rx_ring-&gt;rx_buffer_info;
</span><span class='line'>            i -= rx_ring-&gt;count;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        /* clear the status bits for the next_to_use descriptor */
</span><span class='line'>        rx_desc-&gt;wb.upper.status_error = 0;
</span><span class='line'>
</span><span class='line'>        cleaned_count--;
</span><span class='line'>    } while (cleaned_count);
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * i加上rx_ring-&gt;count之后指向的就是最后一个可用(对网卡芯片来说)的报文描述符的
</span><span class='line'>     * 下一个位置,，这个时候需要将这个索引值i写入到网卡芯片的tail寄存器中，让网卡
</span><span class='line'>     * 芯片知道目前可用的报文描述数量(tail - head)
</span><span class='line'>     */
</span><span class='line'>    i += rx_ring-&gt;count;
</span><span class='line'>
</span><span class='line'>    if (rx_ring-&gt;next_to_use != i) {
</span><span class='line'>        /*
</span><span class='line'>         * 因为i指向的是最后一个可用报文描述符的下一个位置，这个位置也是下一次要
</span><span class='line'>         * 提供给网卡芯片使用的报文描述符的位置
</span><span class='line'>         */
</span><span class='line'>        rx_ring-&gt;next_to_use = i;
</span><span class='line'>
</span><span class='line'>        /* update next to alloc since we have filled the ring */
</span><span class='line'>        rx_ring-&gt;next_to_alloc = i;
</span><span class='line'>
</span><span class='line'>        /* Force memory writes to complete before letting h/w
</span><span class='line'>         * know there are new descriptors to fetch.  (Only
</span><span class='line'>         * applicable for weak-ordered memory model archs,
</span><span class='line'>         * such as IA-64).
</span><span class='line'>         */
</span><span class='line'>        wmb();
</span><span class='line'>        /* 将i值写入到tail寄存器中 */
</span><span class='line'>        writel(i, rx_ring-&gt;tail);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　补充说明：RDT寄存器由网卡驱动在提供报文接收描述符给网卡之后更新，而RDH寄存器由网卡在回写一个报文接收描述符给驱动之后更新。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ixgbe网卡驱动napi接口的处理&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　NAPI是Linux中综合了中断和轮询方式的网卡数据处理API。下面描述下ixgbe中是如何使用NAPI方式来进行收包处理的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;NAPI对象&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在Linux中，NAPI接口提供了一个NAPI对象，这个是设备使用NAPI接口进行数据包处理的必要条件，先来看下其定义：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct napi_struct {
</span><span class='line'>    /* The poll_list must only be managed by the entity which
</span><span class='line'>     * changes the state of the NAPI_STATE_SCHED bit.  This means
</span><span class='line'>     * whoever atomically sets that bit can add this napi_struct
</span><span class='line'>     * to the per-CPU poll_list, and whoever clears that bit
</span><span class='line'>     * can remove from the list right before clearing the bit.
</span><span class='line'>     */
</span><span class='line'>    struct list_head    poll_list;
</span><span class='line'>
</span><span class='line'>    unsigned long       state;
</span><span class='line'>    int         weight;
</span><span class='line'>    unsigned int        gro_count;
</span><span class='line'>    int         (*poll)(struct napi_struct *, int);
</span><span class='line'>#ifdef CONFIG_NETPOLL
</span><span class='line'>    spinlock_t      poll_lock;
</span><span class='line'>    int         poll_owner;
</span><span class='line'>#endif
</span><span class='line'>    struct net_device   *dev;
</span><span class='line'>    struct sk_buff      *gro_list;
</span><span class='line'>    struct sk_buff      *skb;
</span><span class='line'>    struct hrtimer      timer;
</span><span class='line'>    struct list_head    dev_list;
</span><span class='line'>    struct hlist_node   napi_hash_node;
</span><span class='line'>    unsigned int        napi_id;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　一般来说，如果某个设备要使用NAPI接口进行数据包处理，那么该设备会在自己的设备对象中定义一个struct napi_struct类型的对象成员。在第二部分讲到过，ixgbe驱动中每个中断向量会关联一个中断号，从而在硬中断处理函数能获取到中断向量，而如果利用NAPI进行数据包处理的话，也就必须要获取到对应的struct napi_struct类型的对象，所以自然而然地ixgbe驱动将struct napi_struct类型的对象定义在了中断向量中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　下面对其中的部分重要成员进行简单的介绍：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、 poll_list。用于将本设备加入到cpu私有数据中类型为struct softnet_data的对象的待轮询设备链表中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、state。设备的状态，有如下几种：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    enum {
</span><span class='line'>    NAPI_STATE_SCHED,   /* Poll is scheduled */
</span><span class='line'>    NAPI_STATE_DISABLE, /* Disable pending */
</span><span class='line'>    NAPI_STATE_NPSVC,   /* Netpoll - don't dequeue from poll_list */
</span><span class='line'>    NAPI_STATE_HASHED,  /* In NAPI hash (busy polling possible) */
</span><span class='line'>    NAPI_STATE_NO_BUSY_POLL,/* Do not add in napi_hash, no busy polling */
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　3）、weight。设备每次轮询所能处理的包的最大数量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　4）、poll。设备注册的轮询回调，在该回调中一般会遍历设备的所有rx队列，取出报文，送往上层处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;NAPI初始化&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从驱动实现我们知道，ixgbe驱动在中断向量中定义了一个类型为struct napi_struct的NAPI实例。在ixgbe驱动初始化的时候，会在创建中断向量的时候初始化其对应NAPI实例，实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static int ixgbe_alloc_q_vector(struct ixgbe_adapter *adapter,
</span><span class='line'>                int v_count, int v_idx,
</span><span class='line'>                int txr_count, int txr_idx,
</span><span class='line'>                int rxr_count, int rxr_idx)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_q_vector *q_vector;
</span><span class='line'>    struct ixgbe_ring *ring;
</span><span class='line'>    int node = NUMA_NO_NODE;
</span><span class='line'>    int cpu = -1;
</span><span class='line'>    int ring_count, size;
</span><span class='line'>    u8 tcs = netdev_get_num_tc(adapter-&gt;netdev);
</span><span class='line'>
</span><span class='line'>    /* 计算这个中断向量所需要申请的环形队列缓冲区的总数量 */
</span><span class='line'>    ring_count = txr_count + rxr_count;
</span><span class='line'>
</span><span class='line'>    /* 申请中断向量内存以及环形队列缓冲区对应的柔性数组内存。 */
</span><span class='line'>    size = sizeof(struct ixgbe_q_vector) +
</span><span class='line'>           (sizeof(struct ixgbe_ring) * ring_count);
</span><span class='line'>    ……
</span><span class='line'>    /* allocate q_vector and rings */
</span><span class='line'>    /* numa架构下，在cpu所在的本地内存申请中断向量所需内存 */
</span><span class='line'>    q_vector = kzalloc_node(size, GFP_KERNEL, node);
</span><span class='line'>    if (!q_vector)
</span><span class='line'>        q_vector = kzalloc(size, GFP_KERNEL);
</span><span class='line'>    if (!q_vector)
</span><span class='line'>        return -ENOMEM;
</span><span class='line'>
</span><span class='line'>    /* initialize NAPI */
</span><span class='line'>    /* 初始化napi收包方式 */
</span><span class='line'>    netif_napi_add(adapter-&gt;netdev, &amp;q_vector-&gt;napi,
</span><span class='line'>               ixgbe_poll, 64);
</span><span class='line'>    ……
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从函数ixgbe_alloc_q_vector()调用netif_napi_add()初始化NAPI对象可以看到，ixgbe驱动注册的poll回调钩子是ixgbe_poll()，而每次轮询最大可处理的数据包为64个。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;NAPI调度&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在ixgbe驱动中因为使用了NAPI接口进行数据包处理，所以对应的上半部实现就变成了当硬中断触发后，在硬中断处理函数中调用NAPI的调度接口napi_schedule_irqoff()将设备加入到cpu私有数据中类型为struct softnet_data的对象的待轮询设备链表中，并触发软中断。以msi-x中断模式为例，其对应的具体实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static irqreturn_t ixgbe_msix_clean_rings(int irq, void *data)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_q_vector *q_vector = data;
</span><span class='line'>
</span><span class='line'>    /* EIAM disabled interrupts (on this vector) for us */
</span><span class='line'>
</span><span class='line'>    if (q_vector-&gt;rx.ring || q_vector-&gt;tx.ring)
</span><span class='line'>        napi_schedule_irqoff(&amp;q_vector-&gt;napi);
</span><span class='line'>
</span><span class='line'>    return IRQ_HANDLED;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　而下半部的处理就是在网络子系统的软中断处理函数net_rx_action()中遍历cpu私有数据中类型为struct softnet_data的对象中的待轮询设备链表，依次调用每个设备注册的poll回调钩子进行报文接收处理，其对应的具体实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static __latent_entropy void net_rx_action(struct softirq_action *h)
</span><span class='line'>{
</span><span class='line'>    struct softnet_data *sd = this_cpu_ptr(&amp;softnet_data);
</span><span class='line'>    unsigned long time_limit = jiffies + 2;
</span><span class='line'>    int budget = netdev_budget;
</span><span class='line'>    LIST_HEAD(list);
</span><span class='line'>    LIST_HEAD(repoll);
</span><span class='line'>
</span><span class='line'>    local_irq_disable();
</span><span class='line'>    list_splice_init(&amp;sd-&gt;poll_list, &amp;list);
</span><span class='line'>    local_irq_enable();
</span><span class='line'>
</span><span class='line'>    for (;;) {
</span><span class='line'>        struct napi_struct *n;
</span><span class='line'>
</span><span class='line'>        if (list_empty(&amp;list)) {
</span><span class='line'>            if (!sd_has_rps_ipi_waiting(sd) &amp;&amp; list_empty(&amp;repoll))
</span><span class='line'>                return;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        n = list_first_entry(&amp;list, struct napi_struct, poll_list);
</span><span class='line'>        budget -= napi_poll(n, &amp;repoll);
</span><span class='line'>
</span><span class='line'>        /* If softirq window is exhausted then punt.
</span><span class='line'>         * Allow this to run for 2 jiffies since which will allow
</span><span class='line'>         * an average latency of 1.5/HZ.
</span><span class='line'>         */
</span><span class='line'>        if (unlikely(budget &lt;= 0 ||
</span><span class='line'>                 time_after_eq(jiffies, time_limit))) {
</span><span class='line'>            sd-&gt;time_squeeze++;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    __kfree_skb_flush();
</span><span class='line'>    local_irq_disable();
</span><span class='line'>
</span><span class='line'>    list_splice_tail_init(&amp;sd-&gt;poll_list, &amp;list);
</span><span class='line'>    list_splice_tail(&amp;repoll, &amp;list);
</span><span class='line'>    list_splice(&amp;list, &amp;sd-&gt;poll_list);
</span><span class='line'>    if (!list_empty(&amp;sd-&gt;poll_list))
</span><span class='line'>        __raise_softirq_irqoff(NET_RX_SOFTIRQ);
</span><span class='line'>
</span><span class='line'>    net_rps_action_and_irq_enable(sd);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　上面说到过，在下半部的软中断处理函数中会调用设备注册的回调函数poll进行收包处理，而ixgbe驱动中对应的轮询回调函数就是ixgbe_poll()。在这个函数中会遍历NAPI对象关联的中断向量中的所有RX队列，将收到的每一个报文通过调用函数__netif_receive_skb()送往上层协议栈进行处理，具体处理细节可以参考驱动实现。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　通过上面对ixgbe驱动中使用NAPI接口的描述，我们可以总结出NAPI接口的数据包接收流程如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-14.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图5 NAPI调度流程&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　注：上面的流程图中NAPI假设上层会关闭和打开的硬中断&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[基于82599网卡的二层网络数据包发送]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2020/05/21/82599-send/"/&gt;
</span><span class='line'>&lt;updated&gt;2020-05-21T10:41:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2020/05/21/82599-send&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://tqr.ink/2017/05/01/intel-82599-transmit-packet/"&gt;https://tqr.ink/2017/05/01/intel-82599-transmit-packet/&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这篇文档主要介绍了网络数据包在二层的发送流程。网络数据包在二层的发送主要包括了网络设备层和驱动层两个部分，所以下面将会从这两个方面讲述报文在二层的发送流程。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;网络设备层在报文发送时的处理流程&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　当网络协议栈上层准备好了待发送的报文，即构造了一个管理着待发送报文数据的skb对象之后，便会调用网络设备层的主入口函数dev_queue_xmit()进行后续的发送处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　当上层已经准备好的skb对象达到网络设备层之后，一般来说并不是直接交给网卡驱动的（在没有设置TCQ_F_CAN_BYPASS的情况下），而是会用类型为struct netdev_queue的发送队列先将skb对象缓存起来，接着依次处理发送队列中的skb对象，将其中的报文数据交给网卡发送出去。而在类型为struct netdev_queue的发送队列中，真正用来缓存skb对象的则是类型为struct Qdisc的实例，该类型的实例通常会实现一组出入队列的回调函数，来实现skb的缓存，重传和移除等操作。当发送队列中struct Qdisc的实例设置了TCQ_F_CAN_BYPASS标志的时候，会将上层下发的skb对象直接通过网卡驱动交给网卡进行发送。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　下图是网络设备层的报文发送主要流程：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-1.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图1 网络设备层报文发送流程图&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从上图中我们可以看到在网络设备层用struct Qdisc队列实例来缓存skb对象时，会调用函数 &lt;code&gt;__qdisc_run()&lt;/code&gt; 来处理struct Qdisc队列实例中的skb对象，其实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void __qdisc_run(struct Qdisc *q)
</span><span class='line'>{
</span><span class='line'>int quota = weight_p;
</span><span class='line'>int packets;
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * 循环发送qdisc队列中的报文，直到达到了发送阈值，或者队列中的报文发送完毕，
</span><span class='line'> * 或者时间片到了，其他进程需要使用cpu
</span><span class='line'> */
</span><span class='line'>while (qdisc_restart(q, &amp;packets)) {
</span><span class='line'>    /*
</span><span class='line'>     * Ordered by possible occurrence: Postpone processing if
</span><span class='line'>     * 1. we've exceeded packet quota
</span><span class='line'>     * 2. another process needs the CPU;
</span><span class='line'>     */
</span><span class='line'>    quota -= packets;
</span><span class='line'>
</span><span class='line'>    /*
</span><span class='line'>     * 如果quota &lt;= 0，说明qdisc队列中仍然有报文没有发送完，这个时候需要触发
</span><span class='line'>     * 软中断，在软中断处理函数中发送剩余报文
</span><span class='line'>     */
</span><span class='line'>    if (quota &lt;= 0 || need_resched()) {
</span><span class='line'>        __netif_schedule(q);
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>qdisc_run_end(q);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从 &lt;code&gt;__qdisc_run()&lt;/code&gt; 函数的实现我们可以看到会有如下两种情况发生：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1) 一次性将struct Qdisc队列实例中所有的skb对象通过网卡驱动交给网卡发送出去。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2) 在某次处理struct Qdisc队列实例中的skb对象时，由于某些原因中途停止了，队列实例中可能还有skb对象没有处理完。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　当struct Qdisc队列实例中还有skb对象没有处理完时，就会调用netif_schedule()函数触发一次发送软中断（NET_TX_SOFTIRQ），并将struct Qdisc队列实例加入到cpu私有数据对象softnet_data的output_queue链表成员中，在软中断中会遍历output_queue，继续处理其中的struct Qdisc队列实例剩余的skb对象。发送软中断处理函数实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static __latent_entropy void net_tx_action(struct softirq_action *h)
</span><span class='line'>{
</span><span class='line'>    struct softnet_data *sd = this_cpu_ptr(&amp;softnet_data);
</span><span class='line'>
</span><span class='line'>    ……
</span><span class='line'>    /*
</span><span class='line'>     * softnet_data-&gt;output_queue链表不为空，说明其中存有数据没有发送完毕的qdisc
</span><span class='line'>     * 队列，那么这个时候需要调用qdisc_run()尝试将队列中的报文发送出去
</span><span class='line'>     */
</span><span class='line'>    if (sd-&gt;output_queue) {
</span><span class='line'>        struct Qdisc *head;
</span><span class='line'>
</span><span class='line'>        local_irq_disable();
</span><span class='line'>        head = sd-&gt;output_queue;
</span><span class='line'>        sd-&gt;output_queue = NULL;
</span><span class='line'>        sd-&gt;output_queue_tailp = &amp;sd-&gt;output_queue;
</span><span class='line'>        local_irq_enable();
</span><span class='line'>
</span><span class='line'>        while (head) {
</span><span class='line'>            struct Qdisc *q = head;
</span><span class='line'>            spinlock_t *root_lock;
</span><span class='line'>
</span><span class='line'>            head = head-&gt;next_sched;
</span><span class='line'>
</span><span class='line'>            root_lock = qdisc_lock(q);
</span><span class='line'>            spin_lock(root_lock);
</span><span class='line'>            /* We need to make sure head-&gt;next_sched is read
</span><span class='line'>             * before clearing __QDISC_STATE_SCHED
</span><span class='line'>             */
</span><span class='line'>            smp_mb__before_atomic();
</span><span class='line'>            clear_bit(__QDISC_STATE_SCHED, &amp;q-&gt;state);
</span><span class='line'>            qdisc_run(q);
</span><span class='line'>            spin_unlock(root_lock);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在net_tx_action()函数的实现中可以看到，其间接又调用了 &lt;code&gt;__qdisc_run()&lt;/code&gt; 函数，这说明只要struct Qdisc队列实例中有skb对象没有处理完，就会继续触发发送软中断直到所有的队列中所有的skb对象都被处理完。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ixgbe驱动中和数据发送相关的内容&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在二层网络报文接收流程中，接收报文描述符承载了报文从网卡到主存的过程，与之相对应的，发送报文描述符则承载了报文从主存到网卡的过程。对于网卡驱动而言，当收到来自协议栈上层下发的网络报文时，网卡驱动会将存放着报文数据的地址写入到报文发送描述符中，并将填充了报文地址信息的描述符传递给网卡，而网卡则从报文发送描述符中存放的地址中读取报文数据。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;报文发送描述符&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　对于82599网卡而言，其支持两种格式的报文发送描述符，即传统格式和高级格式。虽然有两种不同格式的报文发送描述符，但是两种格式的报文发送描述符所占用的内存大小是一样的（目前为16字节），只是对这块内存使用有所不同。对于两种不同格式的报文发送描述符，可以通过设置报文发送描述符中的TDESC.DEXT位进行区分，当该位设置为0的时候，表明使用的是传统格式；当该位设置为1的时候，表明使用的是高级格式。下面介绍高级格式的报文发送描述符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　相比于传统格式，高级格式的报文发送描述符可以用来支持更多的功能特性。高级格式的报文描述符由于需要支持更多的功能特性，所以分为了读格式和回写格式。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　先来看下82599网卡中读格式的定义，如下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-2.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图2 高级格式报文发送描述符-读格式&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从图中可以看到，读格式的报文发送描述符中主要包含了报文数据所在的内存地址和一些报文元信息，如报文长度等。这里不再详述，详细可以参考82599网卡的datasheet。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　再来看下82599网卡中回写格式的定义：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-3.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图3 高级格式报文发送描述符-回写格式&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　从图中可以看到，回写格式的报文发送描述符中有效的域很少，只有STA，而STA中有效位有只有DD位，网卡驱动可以通过该位是否被置位来判断报文发送描述符对应的报文数据是否已经被网卡处理过了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在初始化阶段，网卡驱动会申请一定数量的报文发送描述符，并将这些内存进行dma一致性映射，获取对应的物理地址，并写入到网卡的寄存器中，这样网卡驱动和网卡就能同时操作这些报文发送描述符了。当网卡驱动收到协议栈下发的skb对象后，会将skb对象中存放的报文数据进行dma映射，获取对应的物理地址，并存放到报文发送描述符中对应的成员中，这样网卡就能从报文发送描述符中获取存放了报文数据的物理地址，然后从该地址中读取报文数据，并发送到网络中去。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;报文发送描述符环形队列&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　上面说到，报文发送描述符承载了报文从主存流入到网卡的过程，是网卡驱动和网卡都会操作的对象，那么自然而然会有以下几个疑问：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、报文发送描述符是以何种组织形式在网卡驱动和网卡之间进行传递的？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、网卡驱动怎么通知网卡报文发送描述符可用的？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在报文发送流程中，报文发送描述符是通过环形队列来管理的，当然这个环形队列是逻辑上的，队列中的描述符在内存上是连续的。网卡或者网卡驱动在进行操作的时候，如果发现已经到达了队列的末尾，那么下次操作又会从队列头部开始，从而实现环形的操作逻辑。报文发送描述符环形队列的结构体如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-4.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图4 报文发送描述符环形队列结构&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　对于第一和第二个问题，其中也已经在上面的描述符环形队列图中有体现。在对问题进行回答之前先要了解下82599网卡中和报文发送描述符环形队列相关的几个寄存器。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　1）、TDBA寄存器。这个寄存器存放了报文发送描述符环形队列的起始地址，也就是上图中Base指向的地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　2）、TDLEN寄存器。这个寄存器存放了报文发送描述符环形队列的长度，也就是报文发送描述符环形队列所占用的字节数，对应上图中的Size。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　3）、TDH寄存器。这个寄存器存放的是一个距离队列头部的偏移值，代表的是第一个填充了报文地址信息的描述符。当网卡处理完一个描述符对应的报文数据后，就会更新TDH寄存器的值，使之指向下一个填充了报文地址信息的描述符。也就是说这个寄存器的值是由网卡来更新的，该寄存器对应上图中的Head。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　4）、TDT寄存器。这个寄存器存放的也是一个距离队列头部的偏移值，代表的是最后一个存放了报文地址信息的描述符的下一个描述符。当网卡驱动将一个skb对象中所有的数据分段对应的物理地址都填充到了对应的报文发送描述符中后，就会更新该寄存器的值，使之指向下一个即将被填充报文地址信息并给网卡使用的描述符，该寄存器对应上图中的Tail。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　在了解了这几个寄存器的作用之后，对于本节一开始提出的两个问题就比较容易知晓了。对于第一个问题，报文描述符是以环形队列的方式来组织的；对于第二个问题，因为网卡驱动在填充完一个skb对象中数据分段的报文地址信息到报文发送描述符后，网卡驱动都会更新TDT寄存器的值，所以网卡可以根据TDT寄存器知道自己当前可用的描述符信息，简单来说TDH和TDT之间的描述符就是网卡可以使用的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;数据分段和报文发送描述符关系&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　上面说到网卡驱动会将skb对象中存放了报文数据的内存进行dma映射，并将得到的物理地址存放到报文发送描述符中，而一个skb对象中可能存有多个数据分段，对于这种情况，网卡驱动则会将一个数据分段对应一个报文发送描述符，其对应关系如下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/20200521-5.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图5 数据分段与报文发送描述符对应关系&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;报文发送描述符的回收&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当网卡完成报文发送之后，就会触发硬件中断。这里需要注意的是，新的数据包达到或者外发数据包的传输已经完成所触发的中断对应的中断号是同一个，所以在这个中断号对应的中断处理函数中需要考虑到是新的数据包达到所产生的中断，还是外发数据包的传输已经完成触发的中断。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　另外，ixgbe驱动中因为使用了NAPI的收包方式，所以在中断处理函数中只是调用NAPI模块调度接口napi_schedule_irqoff()将设备加入到cpu私有数据中类型为struct softnet_data的对象的待轮询设备链表中，并触发软中断，而在软中断处理函数net_rx_action()中又只会调用设备注册的NAPI回调函数poll。所以无论是新的数据包达到，或者是外发数据包的传输已经完成所触发的中断，最终都会调用设备注册给NAPI接口的poll回调函数，因此报文发送描述符的回收也是在这个函数中完成的，在ixgbe驱动中，poll回调函数就是ixgbe_poll()。在ixgbe_poll()函数中又会调用ixgbe_clean_tx_irq()函数来完成报文发送描述符的回收，该函数实现如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static bool ixgbe_clean_tx_irq(struct ixgbe_q_vector *q_vector,
</span><span class='line'>                   struct ixgbe_ring *tx_ring, int napi_budget)
</span><span class='line'>{
</span><span class='line'>    struct ixgbe_adapter *adapter = q_vector-&gt;adapter;
</span><span class='line'>    struct ixgbe_tx_buffer *tx_buffer;
</span><span class='line'>    union ixgbe_adv_tx_desc *tx_desc;
</span><span class='line'>    unsigned int total_bytes = 0, total_packets = 0;
</span><span class='line'>    unsigned int budget = q_vector-&gt;tx.work_limit;
</span><span class='line'>
</span><span class='line'>    /* 获取第一个可以被网卡驱动处理的描述符索引 */
</span><span class='line'>    unsigned int i = tx_ring-&gt;next_to_clean;
</span><span class='line'>
</span><span class='line'>    if (test_bit(__IXGBE_DOWN, &amp;adapter-&gt;state))
</span><span class='line'>        return true;
</span><span class='line'>
</span><span class='line'>    tx_buffer = &amp;tx_ring-&gt;tx_buffer_info[i];
</span><span class='line'>    tx_desc = IXGBE_TX_DESC(tx_ring, i);
</span><span class='line'>    i -= tx_ring-&gt;count;
</span><span class='line'>
</span><span class='line'>    do {
</span><span class='line'>
</span><span class='line'>        /*
</span><span class='line'>         * tx_buffer-&gt;next_to_watch保存的是环形队列中第一个没有存放某个报文数据
</span><span class='line'>         * 的报文发送描述符
</span><span class='line'>         */
</span><span class='line'>        union ixgbe_adv_tx_desc *eop_desc = tx_buffer-&gt;next_to_watch;
</span><span class='line'>
</span><span class='line'>        /* if next_to_watch is not set then there is no work pending */
</span><span class='line'>        /*
</span><span class='line'>         * 如果某个报文发送描述符对应的报文缓冲区的next_to_watch成员没有设置，
</span><span class='line'>         * 说明这个缓冲区对象并不是某个报文对应的第一个缓冲区(当报文以共享方式
</span><span class='line'>         * 存放的时候，一个报文可能会对应多个缓冲区)。
</span><span class='line'>         */
</span><span class='line'>        if (!eop_desc)
</span><span class='line'>            break;
</span><span class='line'>
</span><span class='line'>        read_barrier_depends();
</span><span class='line'>
</span><span class='line'>        /*
</span><span class='line'>         * 如果eop_desc描述符对应的dd为没有被设置，说明网卡还没有处理完属于该报文
</span><span class='line'>         * 对应的所有缓冲区，所以就暂时不处理对应的描述符了，而是要等到属于该报文
</span><span class='line'>         * 的所有描述符都被网卡处理完了之后才去处理属于该报文的所有描述符
</span><span class='line'>         */
</span><span class='line'>        if (!(eop_desc-&gt;wb.status &amp; cpu_to_le32(IXGBE_TXD_STAT_DD)))
</span><span class='line'>            break;
</span><span class='line'>
</span><span class='line'>        tx_buffer-&gt;next_to_watch = NULL;
</span><span class='line'>
</span><span class='line'>        total_bytes += tx_buffer-&gt;bytecount;
</span><span class='line'>        total_packets += tx_buffer-&gt;gso_segs;
</span><span class='line'>
</span><span class='line'>        napi_consume_skb(tx_buffer-&gt;skb, napi_budget);
</span><span class='line'>
</span><span class='line'>        /* 取消skb-&gt;data指向内存的dma映射，以让cpu可以使用该块内存 */
</span><span class='line'>        dma_unmap_single(tx_ring-&gt;dev,
</span><span class='line'>                 dma_unmap_addr(tx_buffer, dma),
</span><span class='line'>                 dma_unmap_len(tx_buffer, len),
</span><span class='line'>                 DMA_TO_DEVICE);
</span><span class='line'>
</span><span class='line'>        tx_buffer-&gt;skb = NULL;
</span><span class='line'>        dma_unmap_len_set(tx_buffer, len, 0);
</span><span class='line'>
</span><span class='line'>        /* 取消skb中分片数据对应内存的dma映射，以让cpu可以使用该块内存 */
</span><span class='line'>        while (tx_desc != eop_desc) {
</span><span class='line'>            tx_buffer++;
</span><span class='line'>            tx_desc++;
</span><span class='line'>            i++;
</span><span class='line'>            if (unlikely(!i)) {
</span><span class='line'>                i -= tx_ring-&gt;count;
</span><span class='line'>                tx_buffer = tx_ring-&gt;tx_buffer_info;
</span><span class='line'>                tx_desc = IXGBE_TX_DESC(tx_ring, 0);
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            /* unmap any remaining paged data */
</span><span class='line'>            if (dma_unmap_len(tx_buffer, len)) {
</span><span class='line'>                dma_unmap_page(tx_ring-&gt;dev,
</span><span class='line'>                           dma_unmap_addr(tx_buffer, dma),
</span><span class='line'>                           dma_unmap_len(tx_buffer, len),
</span><span class='line'>                           DMA_TO_DEVICE);
</span><span class='line'>                dma_unmap_len_set(tx_buffer, len, 0);
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        /* move us one more past the eop_desc for start of next pkt */
</span><span class='line'>        tx_buffer++;
</span><span class='line'>        tx_desc++;
</span><span class='line'>        i++;
</span><span class='line'>        if (unlikely(!i)) {
</span><span class='line'>            i -= tx_ring-&gt;count;
</span><span class='line'>            tx_buffer = tx_ring-&gt;tx_buffer_info;
</span><span class='line'>            tx_desc = IXGBE_TX_DESC(tx_ring, 0);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        /* issue prefetch for next Tx descriptor */
</span><span class='line'>        prefetch(tx_desc);
</span><span class='line'>
</span><span class='line'>        /* update budget accounting */
</span><span class='line'>        budget--;
</span><span class='line'>    } while (likely(budget));
</span><span class='line'>
</span><span class='line'>    /* 更新环形队列中的next_to_clean */
</span><span class='line'>    i += tx_ring-&gt;count;
</span><span class='line'>    tx_ring-&gt;next_to_clean = i;
</span><span class='line'>    ……
</span><span class='line'>
</span><span class='line'>    return !!budget;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;　　到这里，报文在二层的发送流程就介绍完了。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[X520-T1 Linux内核收包14Mpps]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2019/12/09/10Gb-recv/"/&gt;
</span><span class='line'>&lt;updated&gt;2019-12-09T14:56:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2019/12/09/10Gb-recv&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h3&gt;目的&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;测试并优化Linux内核收包&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ixgbe收包&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;前期设置：cpu和网卡队列一一绑定，service irqbalance stop等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rx_ring-&gt;rx_buffer_info[]是收包用的循环队列。rx_ring中关于循环队列的一些重要变量：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    rx_ring-&gt;next_to_clean  网卡收到的下一个包放这里，所以要预先申请好内存
</span><span class='line'>rx_ring-&gt;next_to_alloc  下一个要申请内存的位置
</span><span class='line'>rx_ring-&gt;next_to_use    [next_to_clean, next_to_use)这个区间的内存是申请好的了，网卡可以直接用。
</span><span class='line'>            一般取值为[next_to_alloc - IXGBE_RX_BUFFER_WRITE, next_to_alloc], next_to_use 在ixgbe_alloc_rx_buffers里更新。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;假设收包队列为512，那么ixgbe初始化之后
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rx_ring-&gt;next_to_clean  = 0;
</span><span class='line'>rx_ring-&gt;next_to_use    = 511;
</span><span class='line'>rx_ring-&gt;next_to_alloc  = 511;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这里刚好留了一个位置没申请内存，这个跟reuse有关，后面再看。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;初始化流程：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ixgbe_up() -&gt; ixgbe_configure() -&gt; ixgbe_configure_rx() -&gt; ixgbe_configure_rx_ring() -&gt; ixgbe_alloc_rx_buffers(ring, ixgbe_desc_unused(ring))&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ixgbe_desc_unused 决定了预留一个位置。</span></code></pre></td></tr></table></div></figure>
    static inline u16 ixgbe_desc_unused(struct ixgbe_ring *ring)
    {
        u16 ntc = ring->next_to_clean;
        u16 ntu = ring->next_to_use;</p>

<pre><code>    return ((ntc &gt; ntu) ? 0 : ring-&gt;count) + ntc - ntu - 1; // 这里保留一个位置
}
</code></pre>

<pre><code>
#### 收包函数 ixgbe_clean_rx_irq 简化流程为

1. 预先申请内存，为[next_to_use, next_to_clean)这段“没申请”内存的队列申请
</code></pre>

<pre><code>if (cleaned_count &gt;= IXGBE_RX_BUFFER_WRITE) {
    ixgbe_alloc_rx_buffers(rx_ring, cleaned_count);
    cleaned_count = 0;
}
</code></pre>

<pre><code>
2. 检查是否收到数据
</code></pre>

<pre><code>rx_desc = IXGBE_RX_DESC(rx_ring, rx_ring-&gt;next_to_clean);
size = le16_to_cpu(rx_desc-&gt;wb.upper.length);
if (!size)
    break;
</code></pre>

<pre><code>
3. 申请skb
</code></pre>

<pre><code>rx_buffer = ixgbe_get_rx_buffer(rx_ring, rx_desc, &amp;skb, size);
if (skb)
    ixgbe_add_rx_frag(rx_ring, rx_buffer, skb, size); // EOP 场景才到这里
else
    skb = ixgbe_build_skb(rx_ring, rx_buffer, rx_desc, size);
</code></pre>

<pre><code>
4. reuse buffer
</code></pre>

<pre><code>ixgbe_put_rx_buffer(rx_ring, rx_buffer, skb);
</code></pre>

<pre><code>
5. EOP
</code></pre>

<pre><code>if (ixgbe_is_non_eop(rx_ring, rx_desc, skb))
    continue;
</code></pre>

<pre><code>
#### reuse buffer
先不看EOP、XDP, 流程就很简单，唯一问题是reuse buffer。

其实在ixgbe初始化时rx_ring-&gt;rx_buffer_info队列上每个位置申请的内存都可以放两个包的，假设rx_ring-&gt;rx_buffer_info[0]上的空间为b1、b2。

网卡收第一个包时，存在了b1，但b2没被使用，在ixgbe_put_rx_buffer()里将b2放到next_to_alloc里，所以前面初始化时至少要空一个位置。这时
</code></pre>

<pre><code>rx_ring-&gt;next_to_clean  = 1;
rx_ring-&gt;next_to_use    = 511;
rx_ring-&gt;next_to_alloc  = 0;
</code></pre>

<p>```</p>

<p>b1、b2中间隔了510个包</p>

<p>当收第512个包时，网卡把它存在了b2，这时b1如果被消费了（大概率事件），那么b1又是可以被reuse，再把b1放到next_to_alloc。这样在skb及时消费的情况下就不用再申请内存给网卡。</p>

<h4>EOP</h4>

<p>EOP = End of Packet</p>

<p>如果收上来的数据没有EOP标志位，说明不是一个完整的包，要等后面的数据。</p>

<p>一个包对应一个skb结构，第一块数据到的时候就申请了skb，下一个数据到来的时候不需要再申请skb。</p>

<p>ixgbe做法是在ixgbe_is_non_eop()中将skb放到ntc=next_to_clean+1中的rx_ring->rx_buffer_info[ntc].skb = skb; 下一块数据到来时直接在ixgbe_get_rx_buffer()中取出这个skb，不需要再申请。之后收到的数据会依次放到skb_shinfo(skb)->frags[]中, 具体见ixgbe_add_rx_frag()。</p>

<h4>XDP</h4>

<p>XDP是在申请skb结构之前直接处理网卡收到的数据，如果要丢弃就不用申请skb了。</p>

<p>较新的Linux内核或官网驱动ixgbe-5.6.5中包含该功能。</p>

<h3>测试</h3>

<h4>环境</h4>

<p>ga-b250m-hd3
I5-6500, 4核4线程
X520-T1
ubuntu 16.04, linux-image-4.15.0-XX
主板设置只开启一核(直接丢包场景下增加核数处理能力线性增加)</p>

<h4>netmap</h4>

<p>netmap是一种网卡旁路方法，用netmap测试，只用一个cpu。
1个cpu, 2GHz， 12.8Mpps   100%
1个cpu, 3.6GHz，14.2Mpps  100%</p>

<h4>模仿XDP丢包</h4>

<p>ixgbe-5.6.5 的带了XDP功能, 在 ixgbe_run_xdp 直接 return ERR_PTR(-IXGBE_XDP_CONSUMED); 也就是全部丢包。
1个cpu, 2GHz， 14.2Mpps   &lt;20% ?   用 ixgbe-5.3.8 加上XDP功能 cpu需要 93%
1个cpu, 3.6GHz，14.2Mpps  &lt;10% ?   用 ixgbe-5.3.8 加上XDP功能 cpu需要 30%</p>

<h4>pre_routing 丢包</h4>

<p>1个cpu, 2GHz， 3.2Mpps   100%
1个cpu, 3.6GHz，5.5Mpps  100%</p>

<h4>local_in 丢包</h4>

<p>1个cpu, 2GHz， 1.2Mpps   100%
1个cpu, 3.6GHz，2.1Mpps  100%
local_in比pre_routing多了路由查找，这个都太慢。</p>

<h4>不处理</h4>

<p>1个cpu, 2GHz， 1.2Mpps   100%
1个cpu, 3.6GHz，2.1Mpps  100%</p>

<h3>参考</h3>

<p><a href="http://launchpadlibrarian.net/443052277/linux-source-4.15.0_4.15.0-65.74_all.deb">linux-source-4.15.0_4.15.0-65.74_all.deb</a></p>

<p><a href="https://blog.csdn.net/one_clouder/article/details/52685249">二层报文发送之qdisc实现分析</a></p>

<p><a href="https://www.cnblogs.com/ne-liqian/p/9294757.html">netmap配置</a></p>

<p><a href="https://tqr.ink/2017/04/16/intel-82599-receive-packet/">基于82599网卡的二层网络数据包接收</a></p>

<p><a href="https://tqr.ink/2017/05/01/intel-82599-transmit-packet/">基于82599网卡的二层网络数据包发送</a></p>

<p><a href="https://www.ichenfu.com/2019/03/10/how-to-drop-10-million-packets-per-second/">如何在一秒之内丢弃1000万个网络数据包</a></p>
]]></content>
  </entry>
  
</feed>
