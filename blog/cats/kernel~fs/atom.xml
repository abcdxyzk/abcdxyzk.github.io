<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~fs | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~fs/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T12:57:39+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux的inode的理解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/09/23/kernel-fs-inode/"/>
    <updated>2015-09-23T17:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/09/23/kernel-fs-inode</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/itech/archive/2012/05/15/2502284.html">http://www.cnblogs.com/itech/archive/2012/05/15/2502284.html</a></p>

<h4>一、inode是什么？</h4>

<p>理解inode，要从文件储存说起。</p>

<p>文件储存在硬盘上，硬盘的最小存储单位叫做"扇区"（Sector）。每个扇区储存512字节（相当于0.5KB）。</p>

<p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，最常见的是4KB，即连续八个 sector组成一个 block。</p>

<p>文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"。</p>

<h4>二、inode的内容</h4>

<p>inode包含文件的元信息，具体来说有以下内容：
* 文件的字节数<br/>
* 文件拥有者的User ID<br/>
* 文件的Group ID<br/>
* 文件的读、写、执行权限<br/>
* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。<br/>
* 链接数，即有多少文件名指向这个inode<br/>
* 文件数据block的位置</p>

<p>可以用stat命令，查看某个文件的inode信息：
<code>
    stat example.txt
</code></p>

<p>总之，除了文件名以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。</p>

<h4>三、inode的大小</h4>

<p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。
每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。</p>

<p>查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。
<code>
    df -i
</code>
查看每个inode节点的大小，可以用如下命令：
<code>
    sudo dumpe2fs -h /dev/hda | grep "Inode size"
</code>
由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p>

<h4>四、inode号码</h4>

<p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。</p>

<p>这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。</p>

<p>使用ls -i命令，可以看到文件名对应的inode号码：
<code>
    ls -i example.txt
</code></p>

<h4>五、目录文件</h4>

<p>Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。</p>

<p>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。</p>

<p>ls命令只列出目录文件中的所有文件名：
<code>
    ls /etc
</code></p>

<p>ls -i命令列出整个目录文件，即文件名和inode号码：
<code>
    ls -i /etc
</code></p>

<p>如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。ls -l命令列出文件的详细信息。
<code>
    ls -l /etc
</code></p>

<h4>六、硬链接</h4>

<p>一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为"硬链接"（hard link）。</p>

<p>ln命令可以创建硬链接：
<code>
    ln 源文件 目标文件
</code></p>

<p>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。</p>

<p>这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项：".&ldquo;和&rdquo;..&ldquo;。前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的“硬链接”和当前目录下的&rdquo;.硬链接“。</p>

<h4>七、软链接</h4>

<p>除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号链接（symbolic link）。</p>

<p>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such file or directory"。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode"链接数"不会因此发生变化。</p>

<p>ln -s命令可以创建软链接。
<code>
    ln -s 源文文件或目录 目标文件或目录
</code></p>

<h4>八、inode的特殊作用</h4>

<p>由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。</p>

<ol>
<li><p>有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。</p></li>
<li><p>移动文件或重命名文件，只是改变文件名，不影响inode号码。</p></li>
<li><p>打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</p></li>
</ol>


<p>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核文件读取]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/03/kernel-read-file/"/>
    <updated>2013-06-03T11:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/03/kernel-read-file</id>
    <content type="html"><![CDATA[<pre><code>    // test_file.c

    #include &lt;linux/module.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/init.h&gt;

    #include &lt;linux/types.h&gt;

    #include &lt;linux/fs.h&gt;
    #include &lt;linux/string.h&gt;
    #include &lt;asm/uaccess.h&gt; /* get_fs(),set_fs(),get_ds() */


    static int __init file_test_init(void)
    {
        char *FILE_DIR = "/root/test.txt";
        char *buff = "module read/write test";
        char tmp[100];
        struct file *filp = NULL;
        mm_segment_t old_fs;
        ssize_t ret;

        filp = filp_open(FILE_DIR, O_RDWR | O_CREAT, 0644);

        if(IS_ERR(filp)) {
            printk("open error...\n");
            return -2;
        }

        old_fs = get_fs();
        set_fs(get_ds());

        filp-&gt;f_op-&gt;write(filp, buff, strlen(buff), &amp;filp-&gt;f_pos);
        filp-&gt;f_op-&gt;llseek(filp, 0, 0);
        ret = filp-&gt;f_op-&gt;read(filp, tmp, strlen(buff), &amp;filp-&gt;f_pos);

        set_fs(old_fs);

        if(ret &gt; 0)
            printk("%s\n", tmp);
        else if(ret == 0)
            printk("read nothing.............\n");
        else {
            printk("read error\n");
            return -1;
        }

        filp_close(filp, NULL);
        return 0;
    }

    static void __exit file_test_exit(void)
    {
        printk("file test exit\n");
    }

    module_init(file_test_init);
    module_exit(file_test_exit);

    MODULE_LICENSE("GPL");
</code></pre>

<pre><code>// Makefile

obj-m := test_file.o

KDIR := /lib/modules/$(uname -r)/build/
PWD := $(shellpwd)

all:
        make -C $(KDIR) M=$(PWD) modules
clean:
        make -C $(KDIR) M=$(PWD) clean
</code></pre>

<h4>注意：</h4>

<p>在调用filp->f_op->read和filp->f_op->write等对文件的操作之前，应该先设置FS。<br/>
默认情况下，filp->f_op->read或者filp->f_op->write会对传进来的参数buff进行指针检查。如果不是在用户空间会拒绝访问。因为是在内核模块中，所以buff肯定不在用户空间，所以要增大其寻址范围。</p>

<p>拿filp->f_op->write为例来说明：<br/>
filp->f_op->write最终会调用access_ok ==> range_ok.<br/>
而range_ok会判断访问的地址是否在0 ～ addr_limit之间。如果在，则ok，继续。如果不在，则禁止访问。而内核空间传过来的buff肯定大于addr_limit。所以要set_fs(get_ds())。<br/>
这些函数在asm/uaccess.h中定义。以下是这个头文件中的部分内容：<br/>
```
    #define MAKE_MM_SEG(s)  ((mm_segment_t) { (s) })</p>

<pre><code>#define KERNEL_DS   MAKE_MM_SEG(-1UL)
#define USER_DS     MAKE_MM_SEG(PAGE_OFFSET)

#define get_ds()    (KERNEL_DS)
#define get_fs()    (current_thread_info()-&gt;addr_limit)
#define set_fs(x)   (current_thread_info()-&gt;addr_limit = (x))

#define segment_eq(a, b)    ((a).seg == (b).seg)
</code></pre>

<p>```</p>

<p>可以看到set_fs(get_ds())改变了addr_limit的值。这样就使得从模块中传递进去的参数也可以正常使用了。</p>

<p>在写测试模块的时候，要实现的功能是写进去什么，然后读出来放在tmp数组中。但写完了以后filp->f_ops已经在末尾了，这个时候读是什么也 读不到的，如果想要读到数据，则应该改变filp->f-ops的值，这就要用到filp->f_op->llseek函数了。其中的参数需要记下笔记：<br/>
系统调用：<br/>
off_t sys_lseek(unsigned int fd, off_t offset, unsigned int origin)<br/>
offset是偏移量。<br/>
若origin是SEEK_SET(0)，则将该文件的位移量设置为距文件开始处offset 个字节。<br/>
若origin是SEEK_CUR(1)，则将该文件的位移量设置为其当前值加offset, offset可为正或负。<br/>
若origin是SEEK_END(2)，则将该文件的位移量设置为文件长度加offset, offset可为正或负。</p>

<p><a href="http://blog.csdn.net/yf210yf/article/details/8997007">http://blog.csdn.net/yf210yf/article/details/8997007</a></p>
]]></content>
  </entry>
  
</feed>
