<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~ipsec | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~ipsec/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:22:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[strongswan ipsec 配置 -- win]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/09/24/strongswan-conf-win/"/>
    <updated>2022-09-24T23:01:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/09/24/strongswan-conf-win</id>
    <content type="html"><![CDATA[<h2>RunAsDate 修改时间运行，达到永久试用</h2>

<p><a href="/download/tools/RunAsDate.zip">RunAsDate.zip</a></p>

<p>运行32位版本</p>

<p><img src="/images/kernel/vpn-win/20221129-40.png" alt="" /></p>

<p>需要运行的程序 C:\Program Files (x86)\TheGreenBow\TheGreenBow VPN\vpnconf.exe</p>

<p>时间/日期 调到安装之前</p>

<p>可以运行 或者 创建桌面快捷方式</p>

<hr />

<h2>server</h2>

<pre><code>    setenforce 0

    vim /etc/sysconfig/selinux
    SELINUX=enforcing       =&gt;      SELINUX=disabled
</code></pre>

<p>vim /etc/strongswan/strongswan.d/charon.conf</p>

<pre><code>    port_nat_t = 4501
</code></pre>

<p>vim /etc/strongswan/swanctl/swanctl.conf</p>

<pre><code>    # Include config snippets
    include conf.d/*.conf

    connections {
        # cp www.abcxyzkk.xyz_apache/root_bundle.crt /etc/strongswan/swanctl/x509ca/
        # cp www.abcxyzkk.xyz_apache/www.abcxyzkk.xyz.crt /etc/strongswan/swanctl/x509/
        # cp www.abcxyzkk.xyz_apache/www.abcxyzkk.xyz.key /etc/strongswan/swanctl/private/
        # EAP android 客户端 https://download.strongswan.org/Android/
        # EAP android 客户端 https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/strongSwan-2.3.3.apk
        # EAP 服务端转发上网 iptables -t nat -A POSTROUTING -s 100.64.0.0/24 -o eth0 -j MASQUERADE
        # echo 1 &gt; /proc/sys/net/ipv4/ip_forward
            testEAP {
                    version = 2
                    proposals = default
                    local_addrs = 192.168.100.178
                    pools = pool1
                    rekey_time = 24h

                    local {
                            certs = www.npcable.cn.crt
                            id = www.npcable.cn
                    }
                    remote {
                            auth = eap-mschapv2
                            id = %any
                    }
                    children {
                            testEAP_child {
                                    # local_ts = 0.0.0.0/0
                                    local_ts = 192.168.100.0/24
                                    #remote_ts = 100.64.0.0/24
                                    esp_proposals = default

                                    rekey_time = 24h
                            }
                    }
            }
    }

    secrets {
            private-www {
                    file = www.npcable.cn.key
            }
            eap-user {
                    id = abc
                    secret = abc123
            }
            eap-user1 {
                    id = abc1
                    secret = abc123
            }
    }

    pools {
        pool1 {
            addrs = 100.64.0.0/24
            # hk的时候必须要填
            dns = 8.8.8.8
        }
    }
</code></pre>

<pre><code>    service strongswan restart

    swanctl --load-all
    swanctl --list-sas
</code></pre>

<h2>exe</h2>

<p><a href="https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/TheGreenBow_VPN_Client_6.64.3.2.exe">https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/TheGreenBow_VPN_Client_6.64.3.2.exe</a></p>

<p><a href="https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/tgbvpnvirtm.inf_amd64_6.1.zip">https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/tgbvpnvirtm.inf_amd64_6.1.zip</a></p>

<p><a href="https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/tgbmpenum.inf_amd64_6.1.zip">https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/tgbmpenum.inf_amd64_6.1.zip</a></p>

<h2>先调系统时间</h2>

<p>改到2035年左右，这样可以一直试用。时间改太大也不行？</p>

<h2>win10</h2>

<p>安装 6.64.3.2 就 OK</p>

<h2>win7</h2>

<p>先安装 6.64.3.2 , 再调整两个驱动: 网络适配器、系统设备</p>

<h3>调整驱动 TheGreenBow Virtual Miniport Adapter</h3>

<h4>计算机管理 &ndash;> 设备管理器 &ndash;> 点击"网络适配器", 再点击"菜单"上的"操作"， 再点击"添加过时硬件(L)"</h4>

<p><img src="/images/kernel/vpn-win/20220924-2.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-3.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-4.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-5.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-6.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-7.png" alt="" /></p>

<h4>再卸载这个设备，同时勾选"删除此设备的驱动程序软件"</h4>

<p><img src="/images/kernel/vpn-win/20220924-9.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-10.png" alt="" /></p>

<h4>再添加从 6.10.14.4 那里copy来的驱动</h4>

<p>点击"网络适配器", 再点击"菜单"上的"操作"， 再点击"添加过时硬件(L)"</p>

<p>tgbvpnvirtm.inf_amd64_6.1.zip</p>

<p><img src="/images/kernel/vpn-win/20220924-11.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-12.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-13.png" alt="" /></p>

<h3>调整驱动 TheGreenBow VPN Miniport Enumerator</h3>

<h4>不用先添加，可以直接卸载。同时勾选"删除此设备的驱动程序软件"</h4>

<p><img src="/images/kernel/vpn-win/20220924-1.jpg" alt="" /></p>

<h4>再添加从 6.10.14.4 那里copy来的驱动</h4>

<p>点击"系统设备", 再点击"菜单"上的"操作"， 再点击"添加过时硬件(L)"</p>

<p>tgbmpenum.inf_amd64_6.1.zip</p>

<p><img src="/images/kernel/vpn-win/20220924-14.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-15.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-16.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-17.png" alt="" /></p>

<h2>配置</h2>

<p>rekey可能失败，改长 ike_sa, ipsec_sa 的存活时间</p>

<p><img src="/images/kernel/vpn-win/20220924-20.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-21.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-22.png" alt="" /></p>

<p><img src="/images/kernel/vpn-win/20220924-23.png" alt="" /></p>

<h2>win7 在连接的时候有一定的失败概率</h2>

<h4>多网卡可能会失败，禁用掉其他网卡</h4>

<h4>点两下 “从网关请求设置” 好像能恢复。</h4>

<p><img src="/images/kernel/vpn-win/20220924-30.png" alt="" /></p>

<h2>破解</h2>

<p>似乎是这个字段，但基本无法破解</p>

<p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\TgbIke.exe</p>

<p>sBoot32</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strongswan ipsec 配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/09/18/strongswan-conf/"/>
    <updated>2022-09-18T20:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/09/18/strongswan-conf</id>
    <content type="html"><![CDATA[<h2>error</h2>

<pre><code>    swanctl --list-sas
    plugin 'sqlite': failed to load - sqlite_plugin_create not found and no plugin file available
</code></pre>

<pre><code>    yum install strongswan-sqlite
</code></pre>

<h2>安装</h2>

<pre><code>    setenforce 0

    vim /etc/sysconfig/selinux
    SELINUX=enforcing       =&gt;      SELINUX=disabled
</code></pre>

<hr />

<p><a href="https://koji.fedoraproject.org/koji/packageinfo?buildStart=0&amp;packageID=13302&amp;buildOrder=-completion_time&amp;tagOrder=name&amp;tagStart=0#buildlist">https://koji.fedoraproject.org/koji/packageinfo?buildStart=0&amp;packageID=13302&amp;buildOrder=-completion_time&amp;tagOrder=name&amp;tagStart=0#buildlist</a></p>

<h4>ubuntu</h4>

<p>sudo apt-get install strongswan-swanctl</p>

<p>vim /etc/swanctl/swanctl.conf</p>

<h4>centos</h4>

<p>yum install epel-release -y</p>

<p>yum install strongswan</p>

<p>vim /etc/strongswan/swanctl/swanctl.conf</p>

<h4>版本</h4>

<p>1、通用的配置文件为strongswan.conf，及strongswan.d目录下文件；</p>

<p>2、Used by swanctl and the preferred vici plugin：      //推荐使用</p>

<p>需要配置swanctl目录下的文件。主要是swanctl目录下的swanctl.conf文件，如果你保持安装状态的swanctl.conf文件，则需要在swanctl/conf.d目录下增加新的配置文件，默认的swanctl/swanctl.conf文件会包含你新增的配置文件。</p>

<p>3、Used by starter and the deprecated stroke plugin:   //过期，不推荐</p>

<p> 3.1）配置ipsec.conf。</p>

<p> 3.2）配置ipsec.secrets。</p>

<p> 3.3）配置ipsec.d下的配置文件。</p>

<p>特别说明：当使用swanctl和starter工具时，需要的配置文件是完全不同的。
1的配置是必须，而2和3的配置你可以选择其中之一。</p>

<p>本文后述的配置均基于swanctl工具。</p>

<h4>基本命令</h4>

<pre><code>    echo 1 &gt; /proc/sys/net/ipv4/ip_forward
    ethtool -K eth0 gro off gso off tso off

    service strongswan restart

    swanctl --load-all
    swanctl --list-conns
    swanctl --list-sas

    swanctl --initiate --child test_child
</code></pre>

<pre><code>    在执行 sudo swanctl --load-all 时，遇到
    connecting to 'unix:///var/run/charon.vici' failed: Connection refused
    Error: connecting to 'default' URI failed: Connection refused

    择需要先执行
    service strongswan restart
</code></pre>

<p>服务端转发上网
<code>
    iptables -t nat -A POSTROUTING -s 100.64.0.0/24 -o eth0 -j MASQUERADE
</code></p>

<h4>官方配置样例</h4>

<p><a href="https://www.strongswan.org/testing/testresults/">https://www.strongswan.org/testing/testresults/</a></p>

<h2>网络拓扑</h2>

<p><img src="/images/kernel/20220918-1.png" alt="" /></p>

<h4>aliyun 配置</h4>

<pre><code>    include conf.d/*.conf

    connections {
        # 防火墙主动连接aliyun可行
        # TODO aliyun主动连接防火墙失败？？？
        test {
            version = 2
            proposals = default
            local_addrs = 192.168.0.47
            remote_addrs = 2.2.2.2

            local {
                auth = psk
                id = 192.168.0.48
            }
            remote {
                auth = psk
                id = 2.2.2.2
            }
            children {
                test_child {
                    local_ts = 172.17.0.0/24
                    remote_ts = 192.168.120.0/24
                    esp_proposals = default
                }
            }
        }

        # aliyun主动连接服务器，服务器需要改端口，不然和防火墙冲突，防火墙对端口做DNAT
        test178 {
            version = 2
            proposals = default
            local_addrs = 192.168.0.47
            local_port = 4500
            remote_addrs = 2.2.2.2
            remote_port = 4501

            local {
                auth = psk
                id = 119.23.222.240
            }
            remote {
                auth = psk
                id = 2.2.2.2
            }
            children {
                test178_child {
                    local_ts = 172.17.0.0/24
                    remote_ts = 192.168.100.0/24
                    esp_proposals = default
                }
            }
        }

        # 家连接aliyun
        testh {
            version = 2
            proposals = default
            local_addrs = 192.168.0.47

            local {
                auth = psk
                id = 119.23.222.240
            }
            remote {
                auth = psk
                id = 192.168.0.105
            }
            children {
                testh_child {
                    local_ts = 172.17.0.0/24
                    remote_ts = 10.0.0.0/24
                    esp_proposals = default
                }
            }
        }

        # 手机用 IPSEC IKEv2 PSK 连接aliyun
        tests7 {
            version = 2
            proposals = default
            local_addrs = 192.168.0.47
            pools = pool1

            local {
                auth = psk
                id = 119.23.222.240
            }
            remote {
                auth = psk
                id = 100.64.0.111
            }
            children {
                tests7_child {
                    local_ts = 172.17.0.0/24
                    #remote_ts = 100.64.0.0/24
                    esp_proposals = default
                }
            }
        }

        # 失败。 手机用 IPSEC Xauth PSK 连接aliyun，手机的DH-group是modp1024, strongswan 从5.6.1开始取消了modp1024。。。
        # https://wiki.strongswan.org/versions/67
        tests77 {
            version = 1
            aggressive = yes
            proposals = default
            local_addrs = 192.168.0.47
            pools = pool1

            local {
                auth = psk
                id = 119.23.222.240
            }
            remote {
                auth = psk
                id = 100.64.0.111
            }
            remote-xauth {
                auth = xauth
            }
            children {
                tests77_child {
                    local_ts = 172.17.0.0/24
                    remote_ts = 100.64.0.0/24
                    esp_proposals = default
                }
            }
        }

        # cp www.abcxyzkk.xyz_apache/root_bundle.crt /etc/strongswan/swanctl/x509ca/
        # cp www.abcxyzkk.xyz_apache/www.abcxyzkk.xyz.crt /etc/strongswan/swanctl/x509/
        # cp www.abcxyzkk.xyz_apache/www.abcxyzkk.xyz.key /etc/strongswan/swanctl/private/
        # EAP android 客户端 https://download.strongswan.org/Android/
        # EAP android 客户端 https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/strongSwan-2.3.3.apk
        # EAP 服务端转发上网 iptables -t nat -A POSTROUTING -s 100.64.0.0/24 -o eth0 -j MASQUERADE
        # echo 1 &gt; /proc/sys/net/ipv4/ip_forward
        testEAP {
            version = 2
            proposals = default
            local_addrs = 192.168.0.47
            pools = pool1

            local {
                certs = www.abcxyzkk.xyz.crt
                id = www.abcxyzkk.xyz
            }
            remote {
                auth = eap-mschapv2
                id = %any
            }
            children {
                testEAP_child {
                    #local_ts = 172.17.0.0/24
                    local_ts = 0.0.0.0/0
                    #remote_ts = 100.64.0.0/24
                    esp_proposals = default
                }
            }
        }

        # window 用 SHREW IPSec VPN 客户端，https://www.shrew.net/download/vpn/vpn-client-2.2.2-release.exe
        # 只能用 ikev1,  https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/vpn-client-2.2.2-release.exe
        # 公司和阿里云可以连接，但是用手机热点不能连
        # 使用野蛮模式aggressive = yes 需要配置 vim /etc/strongswan/strongswan.d/charon.conf
        # i_dont_care_about_security_and_use_aggressive_mode_psk = yes
        test_window {
            version = 1
            # aggressive = yes
            proposals = default
            local_addrs = 192.168.0.47
            pools = pool1

            local {
                auth = psk
                id = 192.168.0.48
            }
            remote {
                auth = psk
                id = 220.160.201.164
            }
            children {
                test_child {
                    # local_ts = 192.168.100.0/24
                    local_ts = 0.0.0.0/0
                    # remote_ts = 100.64.0.0/24
                    esp_proposals = default
                }
            }
        }

    }

    secrets {
        ike-testh {
            id-vir = 192.168.0.105
            secret = abc123
        }
        ike-tests7 {
            id-vir = 100.64.0.111
            secret = abc123
        }
        ike-test {
            id-vir = 2.2.2.2
            secret = abc123
        }

        xauth-kk1 {
            id = kk1
            secret = 123
        }
        xauth-kk2 {
            id = kk2
            secret = 123
        }

        private-www {
            file = www.abcxyzkk.xyz.key
        }
        eap-user {
            id = kk3
            secret = 123
        }
    }

    pools {
        pool1 {
            addrs = 100.64.0.0/24
        }
    }
</code></pre>

<h2>家</h2>

<p>TODO 连接防火墙不成功</p>

<pre><code>    include conf.d/*.conf

    connections {

        # 家连接防火墙
        test {
            version = 2
            proposals = default
            local_addrs = 192.168.0.105
            remote_addrs = 119.23.222.240

            local {
                auth = psk
                id = 192.168.0.105
            }
            remote {
                auth = psk
                id = 119.23.222.240
            }
            children {
                test_child {
                    local_ts = 10.0.0.0/24
                    remote_ts = 172.17.0.0/24
                    esp_proposals = default
                }
            }
        }

        # 家连接服务器
        testh {
            version = 2
            proposals = default
            local_addrs = 192.168.0.105
            local_port = 4500
            remote_addrs = 2.2.2.2
            remote_port = 4501

            local {
                auth = psk
                id = 192.168.0.105
            }
            remote {
                auth = psk
                id = 2.2.2.2
            }
            children {
                testh_child {
                    local_ts = 10.0.0.0/24
                    remote_ts = 192.168.100.0/24
                    esp_proposals = default
                }
            }
        }

        # linux用EAP连接服务器，要用指定的源IP发起连接才有用。
        # swanctl -i --child conn_EAP
        hk_EAP {
            version = 2
            remote_addrs = hk.abc.xyz
            remote_port = 4501
            local_port = 4502

            vips = 0.0.0.0

            local {
                auth = eap-mschapv2
                id = kk_hk
            }
            remote {
                auth = pubkey
                id = hk.abc.xyz
            }
            children {
                conn_EAP {
                    remote_ts = 0.0.0.0/0
                    rekey_time = 24h
                }
            }
        }
    }

    secrets {
        ike-test {
            id-vir = 119.23.222.240
            secret = abc123
        }
        ike-test2 {
            id-vir = 2.2.2.2
            secret = abc123
        }

        eap-user_hk {
            id = kk_hk
            secret = abc123
        }
    }
</code></pre>

<h4>用win7自带客户端连接aliyun EAP</h4>

<p><a href="https://wiki.strongswan.org/projects/strongswan/wiki/WindowsClients/65">https://wiki.strongswan.org/projects/strongswan/wiki/WindowsClients/65</a></p>

<p>win7 默认DH-group 是 modp1024，strongswan已经不在支持</p>

<p>修改 win7 配置 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Rasman\Parameters\</p>

<p>增加 NegotiateDH2048_AES256 DWORD 1</p>

<p><img src="/images/kernel/20220919-2.png" alt="" /></p>

<p><img src="/images/kernel/20220919-3.jpg" alt="" /></p>

<h4>window 用 SHREW IPSec VPN 客户端</h4>

<p><a href="http://www.easynetworks.com.cn/forum/faq/detail/id/24">http://www.easynetworks.com.cn/forum/faq/detail/id/24</a></p>

<p>window 用 SHREW IPSec VPN 客户端，<a href="https://www.shrew.net/download/vpn/vpn-client-2.2.2-release.exe">https://www.shrew.net/download/vpn/vpn-client-2.2.2-release.exe</a></p>

<p>只能用 ikev1,  <a href="https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/vpn-client-2.2.2-release.exe">https://raw.githubusercontent.com/abcdxyzk/abcdxyzk.github.io_files/master/tools/vpn/vpn-client-2.2.2-release.exe</a></p>

<p>公司和阿里云可以连接，但是用手机热点不能连</p>

<p>使用野蛮模式aggressive = yes 需要配置 vim /etc/strongswan/strongswan.d/charon.conf
i_dont_care_about_security_and_use_aggressive_mode_psk = yes</p>

<p><img src="/images/kernel/20220919-10.png" alt="" /></p>

<h2>服务器</h2>

<p>TODO 应为改了端口，不好用手机连服务器</p>

<p>/etc/strongswan/strongswan.d/charon.conf</p>

<pre><code>    # port = 500
    port = 501



    # port_nat_t = 4500
    port_nat_t = 4501
</code></pre>

<p>/etc/strongswan/swanctl/swanctl.conf</p>

<pre><code>    include conf.d/*.conf

    connections {
        # aliyun 连服务器
        test {
            version = 2
            proposals = default
            local_addrs = 192.168.100.178
            # local_port = 4501
            # remote_addrs = 119.23.222.240
            remote_port = 4500

            local {
                auth = psk
                id = 2.2.2.2
            }
            remote {
                auth = psk
                id = 119.23.222.240
            }
            children {
                test_child {
                    local_ts = 192.168.100.0/24
                    remote_ts = 172.17.0.0/24
                    esp_proposals = default
                }
            }
        }

        # 家连接服务器
        testhome {
            version = 2
            proposals = default
            local_addrs = 192.168.100.178
            # local_port = 4501
            # remote_addrs = 119.23.222.240
            remote_port = 4500

            local {
                auth = psk
                id = 2.2.2.2
            }
            remote {
                auth = psk
                id = 192.168.0.105
            }

            children {
                test_child {
                    local_ts = 192.168.100.0/24
                    remote_ts = 10.0.0.0/24
                    esp_proposals = default
                }
            }
        }

        # cp ~/www.npcable.cn_apache/root_bundle.crt /etc/strongswan/swanctl/x509ca/
        # cp ~/www.npcable.cn_apache/www.npcable.cn.crt /etc/strongswan/swanctl/x509/
        # cp ~/www.npcable.cn_apache/www.npcable.cn.key /etc/strongswan/swanctl/private/
        # EAP 服务端转发上网 iptables -t nat -A POSTROUTING -s 100.64.0.0/24 -o eth0 -j MASQUERADE
        # echo 1 &gt; /proc/sys/net/ipv4/ip_forward
        testEAP {
            version = 2
            proposals = default
            local_addrs = 192.168.100.178
            pools = pool1

            local {
                certs = www.npcable.cn.crt
                id = www.npcable.cn
            }
            remote {
                auth = eap-mschapv2
                id = %any
            }
            children {
                testEAP_child {
                    local_ts = 192.168.100.0/24,192.168.200.0/24,192.168.120.0/24
                    #local_ts = 0.0.0.0/0
                    #remote_ts = 100.64.0.0/24
                    esp_proposals = default
                }
            }
        }
    }

    secrets {
        ike-test {
            id-vir = 119.23.222.240
            secret = abc123
        }
        ike-testhome {
            id-vir = 192.168.0.105
            secret = abc123
        }
        private-www {
            file = www.npcable.cn.key
        }
        eap-user {
            id = kk3
            secret = abc123
        }
    }

    pools {
        pool1 {
            addrs = 100.64.0.0/24
        }
    }
</code></pre>

<h2>手机配置</h2>

<h4>to aliyun ikev2</h4>

<p><img src="/images/kernel/20220918-toaliyunikev2.jpg" alt="" /></p>

<h4>to aliyun xauth</h4>

<p>失败。 手机用 IPSEC Xauth PSK 连接aliyun，手机的DH-group是modp1024, strongswan 从5.6.1开始取消了modp1024。。。</p>

<p><img src="/images/kernel/20220918-toaliyunxauth.jpg" alt="" /></p>

<h4>to firewall 不成功</h4>

<p><img src="/images/kernel/20220918-tofire.jpg" alt="" /></p>

<h4>EAP</h4>

<p><img src="/images/kernel/20220919-1.jpg" alt="" /></p>

<h2>防火墙配置</h2>

<p>DH-group 要改成 group14 及以上，太低strongswan不认</p>

<p><img src="/images/kernel/20220918-fire1.png" alt="" /></p>

<p><img src="/images/kernel/20220918-fire2.jpg" alt="" /></p>

<h2>参考</h2>

<p><a href="https://help.aliyun.com/document_detail/110816.html">https://help.aliyun.com/document_detail/110816.html</a></p>

<p><a href="https://blog.csdn.net/weixin_43190642/article/details/122080246">https://blog.csdn.net/weixin_43190642/article/details/122080246</a></p>

<p><a href="https://www.cnblogs.com/shaoyangz/p/10345698.html">https://www.cnblogs.com/shaoyangz/p/10345698.html</a></p>

<p><a href="https://blog.csdn.net/qq_42760638/article/details/122042536">https://blog.csdn.net/qq_42760638/article/details/122042536</a></p>

<p><a href="https://www.likecs.com/show-204025603.html">https://www.likecs.com/show-204025603.html</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/645066815">https://zhuanlan.zhihu.com/p/645066815</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPSEC野蛮模式介绍]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/07/10/net-ipsec-aggressive/"/>
    <updated>2021-07-10T11:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/07/10/net-ipsec-aggressive</id>
    <content type="html"><![CDATA[<p><a href="https://www.jb51.net/hack/57003.html">https://www.jb51.net/hack/57003.html</a></p>

<h3>IKE 的协商模式</h3>

<p>在RFC2409（The Internet Key Exchange ）中规定，IKE 第一阶段的协商可以采用两种模式：主模式（Main Mode ）和野蛮模式（Aggressive Mode ）。</p>

<p>主模式被设计成将密钥交换信息与身份、认证信息相分离。这种分离保护了身份信息；交换的身份信息受已生成的 Diffie-Hellman共享密钥的保护。但这增加了3 条消息的开销。</p>

<p>野蛮模式则允许同时传送与SA、密钥交换和认证相关的载荷。将这些载荷组合到一条消息中减少了消息的往返次数，但是就无法提供身份保护了。虽然野蛮模式存在一些功能限制，但可以满足某些特定的网络环境需求。例如：远程访问时，如果响应者（服务器端）无法预先知道发起者（终端用户）的地址、或者发起者的地址总在变化，而双方都希望采用预共享密钥验证方法来创建IKE SA，那么，不进行身份保护的野蛮模式就是唯一可行的交换方法；另外，如果发起者已知响应者的策略，或者对响应者</p>

<h3>野蛮模式的作用：</h3>

<p>对于两端IP地址不是固定的情况（如ADSL拨号上网），并且双方都希望采用预共享密钥验证方法来创建IKE SA，就需要采用野蛮模式。另外如果发起者已知回应者的策略，采用野蛮模式也能够更快地创建IKE SA。</p>

<h3>ipsec下两种模式的区别：</h3>

<p>1、野蛮模式协商比主模式协商更快。主模式需要交互6个消息，野蛮模式只需要交互3个消息。</p>

<p>2、主模式协商比野蛮模式协商更严谨、更安全。因为主模式在5、6个消息中对ID信息进行了加密。而野蛮模式由于受到交换次数的限制，ID信息在1、2个消息中以明文的方式发送给对端。即主模式对对端身份进行了保护，而野蛮模式则没有。</p>

<p>3、两种模式在确定预共享密钥的方式不同。主模式只能基于IP地址来确定预共享密钥。而积极模式是基于ID信息（主机名和IP地址）来确定预共享密钥。</p>

<h3>野蛮模式的必要性：</h3>

<p>两边都是主机名的时候，就一定要用野蛮模式来协商，如果用主模式的话，就会出现根据源IP地址找不到预共享密钥的情况，以至于不能生成SKEYID。</p>

<p>1、因为主模式在交换完3、4消息以后，需要使用预共享密钥来计算SKEYID，但是由于双方的ID信息在消息5、6中才会被发送，此时主模式的设备只能使用消息3、4中的源IP地址来找到与其对应的预共享密钥；如果主模式采用主机名方式，主机名信息却包含在消息5、6中，而IPSEC双方又必须在消息5、6之前找到其相应的预共享密钥，所以就造成了矛盾。</p>

<p>2、在野蛮模式中，ID信息（IP地址或者主机名）在消息1、2中就已经发送了，对方可以根据ID信息查找到对应的预共享密钥，从而计算出SKEYID。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPSEC.CONF(5) -- IPsec配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/07/10/net-ipsec-conf/"/>
    <updated>2021-07-10T11:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/07/10/net-ipsec-conf</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lanmolei814/article/details/38078361">https://blog.csdn.net/lanmolei814/article/details/38078361</a></p>

<h4>DESCRIPTION</h4>

<p>ipsec.conf指定了Openswan IPsec子系统的大多数配置和控制信息。</p>

<pre><code>    include ipsec.*.conf
</code></pre>

<p>包含指定的配置文件</p>

<h4>CONN SECTIONS</h4>

<p>conn项定义了一个IPsec连接的规范，名字可以随意定义。例如：</p>

<pre><code>    conn snt
        left=10.11.11.1
        leftsubnet=10.0.1.0/24
        leftnexthop=172.16.55.66
        leftsourceip=10.0.1.1
        right=192.168.22.1
        rightsubnet=10.0.2.0/24
        rightnexthop=172.16.88.99
        rightsourceip=10.0.2.1
        keyingtries=%forever
</code></pre>

<h4>CONN PARAMETERS: GENERAL</h4>

<pre><code>connaddrfamily
    连接地址族，可用参数为 ipv4（缺省）或者 ipv6。

    IPv6在openswan 2.4中的NETKEY支持和openswan 2.6.33中的KLIPS支持

type
    连接类型；参数 tunnel（缺省）表示 host-to-host，host-to-subnet，subnet-to-subnet 隧道； transport，表示 host-to-host传输模式；
    passthrough，表示不使用IPsec； drop，表示丢弃数据； reject，表示丢弃数据并返回ICMP诊断包

left
    [必选项] 左侧设备公网接口IP地址，其中IP地址的格式请看 ipsec_ttoaddr(3)。当前支持IPv4和IPv6。
    如果其参数为  %defaultroute，同时  config setup 项中的  interfaces 包含  %defaultroute，那么 left将自动由本地的缺省路由接口地址填充； leftnexthop也支持。
    %any 表示在协商时填充。
    %opportunistic 表示  left 和  lefnexthop 的参数从 left 侧客户端的DNS数据中获取。

leftsubnet
    左侧设备的私有子网，格式为  network/netmask (请看 ipsec_ttosubnet(3));当前支持IPv4和IPv6地址范围。
    支持 vhost: 和 vnet: 这2个速记，语法与 virtual_private 相同
    %priv 表示子网与 virtual_private相同
    %no 表示没有子网

leftsubnets
    指定左侧设备的多个私有子网，格式  { networkA/netmaskA networkB/netmaskB [..] }。leftsubnet 和 leftsubnets 不能同时使用。 例子请看 testing/pluto/multinet-*

leftprotoport
    指定隧道中允许的通过的协议和端口。参数可以是数字或者协议名（请在 /etc/protocols 中查找），例如 leftprotoport=icmp，或 protocol/port，如 tcp/smtp。
    ports可以使用数字或名字表示（请在 /etc/services 中查找）。
    %any 表示所有的协议端口。

leftnexthop
    左侧设备连接公网的下一跳网关IP地址；缺省为  %direct。如果这方法没有使用，则 leftnexthop为  %defaultroute

leftsourceip
    连接中主机的IP地址

leftupdown
    中连接状态改变时， “updown”中的脚本调整路由和防火墙（缺省为  ipsec _updown）。 详细请看  ipsec_pluto(8)

leftfirewall
    不再使用此选项
</code></pre>

<h4>CONN PARAMETERS：AUTOMATIC KEYING</h4>

<p>下面所有项选自动生成key中起作用，在手动指定key中被忽略。</p>

<pre><code>auto
    IPsec启动时自动执行；现在支持的参数有  add （ ipsec auto --add）， route（ ipsec auto --route）， start（ ipsec auto --up）， manual（ ipsec manual --up）， ignore 表示不自动启动
    具体请看  config setup

authby
    2个安全网关之间的认证方法；
    secret 表示共享密钥， rsasig 表示RSA数据签名（缺省）， secret|rsasig 同时使用，

ike
    IKE第一阶段（ISAKMP SA）中的加密/认证算法。格式为 ” cipher-hash;modpgroup,cipher-hash;modpgroup,...“。
    例如： ike=3des-sha1,aes-sha1, ike=aes, ike=aes128-md5;modp2048, ike=aes128-sha1;dh22, ike=3des-md5;modp1024,aes-sha1;modp1536 or ike=modp1536
    算法值请查看  ipsec_spi(8)中的  --ike选项。
    IKE组合形式：
        cipher:         3des or aes
        hash:           sha1 or md5
        pfsgroupt(DHgroup): modp1024 or modp1536   

phase2
    设置将产生的SA类型。 esp用于加密（缺省）， ah用于认证

phase2alg
    指定第二阶段中支持的算法。算法之间用逗号分隔。

esp
    此选项不再使用，用 phase2alg代替

ah
    连接中的AH算法。算法格式请看  ipsec_spi(8)中的  --ah选项。

ikev2
    IKEv2（RFC4309）设置使用。
    never 或  no 表示不使用IKEv2； propos 或  yes 表示允许使用IKEv2，同时缺省使用IKEv2进行协商； insist，表示只接受IKEv2协商，IKEv1将被拒绝；
    permit（缺省），表示不主动使用IKEv2，但对端使用IKEv2的话也接受

sareftrack
    XXXXXX

leftid
    左侧参加者的身份确认方法。
    可以是IP地址，域名
    %fromcert 表示ID从证书的DN获取； %none 表示不使用ID值。

leftrsasigkey
    左侧RSA签名认证，格式使用RFC2537  ipsec_ttodata(3)编码。
    %none 表示不指定值；  %dnsondemand 表示值从DNS中获取当需要使用到此值时；  %dnsonload 表示值从DNS中获取当读取 ipsec.conf时；
    %cert 表示信息从  %leftcert 中获取

leftrsasigkey2
    第2个公钥

leftcert
    指定X509证书，如果没有指定全路径，则从  /etc/ipsec.d/certs/ 目录中查找。如果opesnswan编译时指定了  USE_LIBNSS=true，那么openswan将会去NSS数据库中查找RSA key。

leftca
    指定CA，如果没有指定，那么将用  leftcert 中的证书认为是CA证书。

leftsendcert
    openswan发送X509证书到远程主机的选项配置。 yes|always 表示总是允许发送证书， ifasked 表示如果远程主机要求证书则进行发送；  no|never 表示从不发送证书。
    缺省参数为  ifasked。

leftxauthserver
    左侧为XAUH服务端。可以使用PAM认证或  /etc/ipsec.d/passwd中的MD5口令。对端必须配置为  rightxauthclient ，做为XAUTH客户端。

leftxauthclient
    左侧为XAUT客户端。xauth连接必须进行交互启动，不能使用配置  atuo=start。它必须使用命令行  ipsec auto --up conname。

leftxauthusername
    XAUTH认证中使用的用户名，XAUTH密码在  ipsec.secrets 文件中配置

leftmodecfgserver
    左侧是模式配置服务端。它能下发网络配置到客户端。 参数为  yes 或  no （缺省）

leftmodecfgclient
    左侧是模式配置客户端。它能从服务端接收网络配置。参数为  yes 或  no （缺省）

modecfgpull
    从服务端接收模式配置信息。参数为  yes 或  no （缺省）

modecfgdns1, modecfgdns2, modecfgwins1, modecfgwins2
    指定DNS、WINS的IP地址

remote_peer_type
    设置远程主机类型。参数为  cisco 或  ietf 。

nm_configured
    XXXX

forceencaps
    参数为  yes 或  no （缺省为no）。当 forceencaps=yes时将强制使用RFC-3948封装（UPD端口4500包封闭ESP）。如果此选项打开，那么  nat_traveral=yes必须打开。

overlapip
    XXXX

dpddelay
    主机探测延迟时间，缺省为30秒。如果此选项被设置， dpdtimeout也应该设置

dpdtimeout
    主机探测超时时间（以秒为单位），缺省为120秒。如果超时，将删除SA。

dpdaction
    当PDP探测到主机死亡时要执行的动作。 hold （缺省）表示eroute将进入 %hold 状态； clear 表示eroute和SA都要清除；
    restart 表示SA将立即从协商； restart_by_peer 表示所有死亡主机的SA将进行从协商

pfs
    参数为  yes 或  no （缺省为 yes）

aggrmode
    使用野蛮模式替换主模式。野蛮模式不安全，容易受到服务拒绝攻击。
    参数为  yes 或  no （缺省为 no）

salifetime
    SA存活时间，参数为数字+  s/m/h/d （缺省为 8h，最大 24h）
    " keylife" " lifetime" 是 " salifetime" 的别名

rekey
    参数为  yes 或  no （缺省为  yes）。表示当密钥到期后是否进行从协商。

rekeymargin
    密钥到期前多长时间进行从协商。参数请看  salifetime （缺省 9m）

keyingtries
    协商尝试次数。  %forever 表示从不放弃，一直进行协商

ikelifetime
    IKE存活时间。参数请看 salifetime

compress
    是否进行压缩处理。 参数为  yes 或  no （缺省为  no）

metric
    设置ipsecX 或 mastX 接口的 metric 优先级

mtu
    设置MTU

disablearrivalcheck
    XXXX    参数为  yes 或  no （缺省为  no）

failureshunt
    当协商失败时执行的动作。缺省为  none； passthrough； drop； reject；具体看选项  type。
</code></pre>

<h4>CONFIG SECTIONS</h4>

<p>config部分使用为一名字 setup，此部分包含了软件启动时所使用到的信息 （ ipsec_setup（8））。例如：</p>

<pre><code>    config setup
        interfaes="ipsec0=eth1 ipsec1=ppp0"
        klipsdebug=none
        plutodebug=control
        protostack=auto
        manualstart=
</code></pre>

<p>config setup 目前可用的选项如下：</p>

<pre><code>myid
    XXX

protostack
    指定IPsec协议攻栈。参数为  auto/klips/netkey/mast。 mast是klips的变种。

interfaces
    IPsec使用的虚接口和实接口。格式为 " virtual=physical virtual=physical ..."。
    XXXX

listen
    监听IP地址

nat_traversal
    是否支持NAT。参数为  yes 或  no （缺省为 no）

disable_port_floasting
    是否启用NAT-T。 参数为  yes 或  no （缺省为 no）

force_keepalive
    是否强制发送NAT-T保活。参数为  yes 或  no （缺省为 no）

keep_alive
    NAT-T保活包发送间隔时间

virtual_private
    XXXX

oe
    是否启用机会加密（Opportunistic Encryption）。参数为  yes 或  no（缺省为 no）
    只有KLIPS支持此选项

nhelpers
    设置pluto处理密码运算的进程（线程）。 0表示所有操作都在主线程； -1表示根据CPU进行计算（n-1，n是CPU数）；其它值则表示强制的进程（线程）数

crlcheckinterval
    CRL检查间隔时间，单位为秒。 如果设置为 0表示开关CRL检查

strictcrlpolicy
    是否强制进行CRL检查。参数为  yes 或  no （缺省为 no）

forwardcontrol
    此选项不再使用。请使用  /etc/sysctl.conf 文件中的  net.ipv4.ip_forward=0 控制IP转发设置

rp_filter
    此选项不再使用。请使用  /etc/sysctl.conf 文件中的  net.ipv4.conf/[iface]/rp_filter=0 。 此参数在IPsec必须设置为0

syslog
    syslog(2)中的显示名。缺省为  daemon.error

klipsdebug
    KLIPS日志输出设置。 none表示不输出； all表示全部输出。具体参数请看  ipsec_klipsdebug(8)

plutodebug
    pluto日志输出设置。 none表示不输出； all表示全部输出。具体参数请看  ipsec_pluto(8)

uniqueids
    唯一ID。参数为  yes 或  no （缺省为 yes）

plutorestartoncrash
    当pluto崩溃时重启，并生成core文件。参数为  yes 或  no（缺省为 yes）

plutopts
    设置pluto的额外参数。具体请看 ipsec_pluto(8)

plutostderrlog
    不使用syslog，把日志输出重定向到指定的文件中

pluto
    是否启动 pluto。参数为  yes 或  no（缺省为 yes）

plutowait
    在处理下一个协商时，pluto是否等待当前协商完成。参数为  yes 或  no（缺省为 no）

prepluto
    配置Pluto启动前执行的脚本

postpluto
    配置Pluto启动后执行的脚本

dumpdir
    设置core dump文件路径

fragicmp
    包被分片时是否发送ICMP消息。参数为  yes 或  no （缺省为 yes）。此选项只对KLIPS起作用

hidetos
    隧道中数据包的TOS设置为0。参数为  yes 或  no（缺省为 yes）。此选项只对KLIPS起作用

overridemtu
    设置ipsecX接口的MTU。此选项只对KLIPS起作用
</code></pre>

<h4>IMPLICIT CONNS</h4>

<p>系统自动定义了一些conns部分于用默认的策略组。如果conn中定义了 auto=ignore，那么默认定义将被忽略</p>

<p>下面是自动提供的定义</p>

<pre><code>    conn clear 
        type=passthrough 
        authby=never 
        left=%defaultroute 
        right=%group 
        auto=route 

    conn clear-or-private 
        type=passthrough 
        left=%defaultroute 
        leftid=%myid 
        right=%opportunisticgroup 
        failureshunt=passthrough 
        keyingtries=3 
        ikelifetime=1h 
        salifetime=1h 
        rekey=no 
        auto=route 

    conn private-or-clear 
        type=tunnel 
        left=%defaultroute 
        leftid=%myid 
        right=%opportunisticgroup 
        failureshunt=passthrough 
        keyingtries=3 
        ikelifetime=1h 
        salifetime=1h 
        rekey=no 
        auto=route 

    conn private 
        type=tunnel 
        left=%defaultroute 
        leftid=%myid 
        right=%opportunisticgroup 
        failureshunt=drop 
        keyingtries=3 
        ikelifetime=1h 
        salifetime=1h 
        rekey=no 
        auto=route 

    conn block 
        type=reject 
        authby=never 
        left=%defaultroute 
        right=%group 
        auto=route 

    # default policy 

    conn packetdefault 
        type=tunnel 
        left=%defaultroute 
        leftid=%myid 
        left=0.0.0.0/0 
        right=%opportunistic 
        failureshunt=passthrough 
        keyingtries=3 
        ikelifetime=1h 
        salifetime=1h 
        rekey=no 
        auto=route 
</code></pre>

<h4>POLICY GROUP FILES</h4>

<p>配置文件在 /etc/ipsec.d/policies/ 目录下，包括
<code>
    /etc/ipsec.d/policies/block
    /etc/ipsec.d/policies/clear
    /etc/ipsec.d/policies/clear-or-private
    /etc/ipsec.d/policies/private
    /etc/ipsec.d/policies/private-or-clear
</code></p>

<p>man: <a href="http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/manpage.d/ipsec.conf.5.html">http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/manpage.d/ipsec.conf.5.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ipsec(AH和ESP)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ah-esp/"/>
    <updated>2021-06-15T22:24:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/15/net-ipsec-ah-esp</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lyg920/article/details/51658295">https://blog.csdn.net/lyg920/article/details/51658295</a></p>

<h2>介绍</h2>

<p>最初的IP协议是没有任何的安全措施的。IP数据报含有诸如源地址，目的地址，版本，长度，生存周期，承载协议，承载数据等字段。虽然其拥有“首部校验和”这样的字段来提供极其简易的完整性功能，但无力抗拒对数据的意外或者故意修改，也无法阻止信息的泄露等问题。</p>

<p>IPSec（Intemet Protocol Security）是由IEIF设计的一种端到端的确保IP层通信安全的机制，它不是一个单独的协议，而是一组协议。IPSec是IPv6的组成部分，也是IPv4的可选扩展协议。目前IPSec最主要的应用是构造虚拟专用网（VPN），它作为一个第三层隧道协议实现了VPN通信，可以为IP网络通信提供透明的安全服务，保证数据的完整性和机密性，有效抵御网络攻击。它所使用的加密算法和完整性验证算法从目前看来是不可能被破解的。定义IPSec协议簇的RFC如表3.5.1所示。</p>

<pre><code>    RFC 内容
    2401    IPSec体系结构
    2402    AH协议
    2403    HMAC-MD5-96在AH和ESP中的应用
    2404    HMAC-SHA-1-96在AH和ESP中的应用
    2405    DES-CBC在ESP中的应用
    2406    ESP协议
    2407    IPSec DOI
    2408    ISAKMP协议
    2409    IKE协议
    2410    NULL加密算法及其在IPSec中的应用
    2411    IPSec文档路线图
    2412    OAKLEY协议
</code></pre>

<p>IPSec众多的RFC通过关系图组织在一起，IPSec各组件的关系图如图3.5.1所示。</p>

<p>它包含了三个最重要的协议：认证头AH（Authentication Header），封装安全载荷ESP（Encapsulating Security Payload），密钥交换协议IKE（Internet Key Exchange），注意这些协议的使用均可独立于具体的加密算法：</p>

<p>（1）AH为IP数据包提供3种服务（统称验证）：数据完整性验证，通过使用Hash函数（如MD5）产生的验证码来实现；数据完整性时加入一个共享的会话密钥来实现；防重放攻击，在AH报头中加入序列号可以防止重放攻击。</p>

<p>（2）ESP除了为IP数据包提供AH上述的3种服务外，还能够提供数据加密。</p>

<h2>3.5.2 技术细节</h2>

<h3>（1）认证头（AH）</h3>

<h4>AH概述</h4>

<p>IPSec的子协议头认证协议AH，为IP报文提供数据完整性验证和数据源身份认证，使用的是HMAC算法，HMAC算法和非常相似，一般是由Hash算法演变而来，也就是将输入报文和双方事先已经共享的对称密钥结合然后应用Hash算法。采用相同的HMAC算法并共享密钥的双方才能产生相同的验证数据。所有的IPSec必须实现两个算法：HMAC-MD5和HMAC-SHA1.
AH和ESP的最大区别有两个：一个是AH不提供加密服务，另一个是它们验证的范围不同，ESP不验证IP报头，而AH同时验证部分报头，所以需要结合使用AH和ESP才能保证IP报头的机密性和完整性。AH为IP报头提供尽可能多的验证保护，验证失败的包将被丢弃，不交给上层协议解密，这种操作模式可以减少拒绝服务攻击成功的机会。</p>

<h4>AH头部格式</h4>

<p>AH协议是被IP协议封装的协议之一，如果IP协议头部的“下一个头”字段是51，则IP包的载荷就是AH协议，在IP包头后面跟的就是AH协议头部。AH报文头部如图3.5.2所示。</p>

<p><img src="/images/kernel/20210615-21.png" alt="" /></p>

<p>（1）下一个头（8位）：表示紧跟在AH头部后面的协议类型。在传输模式下，该字段是处于保护中的传输层协议的值，如6（TCP），17（UDP）或50（ESP）。在隧道模式下，AH保护整个IP包，该值是4，表示是IP-in-IP协议。</p>

<p>（2）有效载荷长度（8位）：其值是以32位（4字节）为单位的整个AH数据（包括头部和变长验证数据）的长度再减2。</p>

<p>（3）保留（16位）：准备将来对AH协议扩展时使用，目前协议规定这个字段应该被置为0。</p>

<p>（4）安全参数索引SPI（32位）：值为[256,2<sup>32</sup>-1]。实际上它是用来标识发送方在处理IP数据包时使用了哪些安全策略，当接收方看到这个字段后就知道如何处理收到的IPsec包。</p>

<p>（5）序列号（32位）：一个单调递增的计数器，为每个AH包赋予一个序号。当通信双方建立SA时，初始化为0。SA是单向的，每发送/接收一个包，外出/进入SA的计数器增1。该字段可用于抗重放攻击。</p>

<p>（6）验证数据：可变长，取决于采用何种消息验证算法。包含完整性验证码，也就是HMAC算法的结果，称为ICV，它的生成算法由SA指定。</p>

<h3>（2）封装安全载荷（ESP）</h3>

<h2>ESP概述</h2>

<p>ESP协议提供数据完整性验证和数据源身份认证的原理和AH一样，只是和AH比ESP的验证范围要小些。ESP协议规定了所有IPSec系统必须实现的验证算法：HMAC-MD5，HMAC-SHA1，NULL。和L2TP，GRE，AH等其他轨道技术相比，ESP具有特有的安全机制——加密，而且可以和其他隧道协议结合使用，为用户的远程通信提供更强大的安全支持。ESP加密采用的则是对称加密算法，它规定了所有IPSec系统必须实现的加密算法是DES-CBC和NULL，使用NULL是指实际上不进行加密或验证。</p>

<h3>ESP头部格式</h3>

<p>ESP协议是被IP协议封装的协议之一。如果IP协议头部的“下一个头”字段是50，IP包的载荷就是ESP协议，在IP包头后面跟的就是ESP协议头部。ESP报文头部如3.5.3所示，其中ESP头部包含SPI和序列号字段，ESP尾部包含填充项，填充长度和下一个头字段。</p>

<p><img src="/images/kernel/20210615-22.png" alt="" /></p>

<p>（1）安全参数索引SPI（32位）：值为[256,2<sup>32</sup>-1]。</p>

<p>（2）序列号（32位）：一个单调递增的计数器，为每个AH包赋予一个序号。当通信双方建立SA时，初始化为0。SA是单向的，每发送/接收一个包，外出/进入SA的计数器增1。该字段可用于抗重放攻击。</p>

<p>（3）报文有效载荷：是变长的字段，如果SA采用加密，该部分是加密后的密文；如果没有加密，该部分就是明文。</p>

<p>（4）填充项：是可选的字段，为了对齐待加密数据而根据需要将其填充到4字节边界。</p>

<p>（5）填充长度：以字节为单位指示填充项长度，范围为[0，255]。保证加密数据的长度适应分组加密算法的长度，也可以用以掩饰载荷的真实长度对抗流量分析。</p>

<p>（6）下一个头：表示紧跟在ESP头部后面的协议，其中值为6表示后面封装的是TCP。</p>

<p>（7）验证数据：是变长字段，只有选择了验证服务时才需要有该字段。</p>

<p>很多情况下，AH的功能已经能满足安全的需要，ESP由于需要使用高强度的加密算法，需要消耗更多的计算机运算资源，使用上受到一定限制。</p>

<p>在IPSec协议簇中使用两种不同功能的协议使得IPSec具有对网络安全细粒度的功能选则，便于用户依据自己的安全需要对网络进行灵活配置。</p>

<h3>（3）IPSec的两种模式</h3>

<h4>a. 传输模式</h4>

<p>传输模式（Transport Mode）是IPSec的默认模式,又称端到端（End-to-End）模式，它适用于两台主机之间进行IPSec通信。</p>

<p>传输模式下只对IP负载进行保护，可能是TCP/UDP/ICMP协议，也可能是AH/ESP协议。传输模式只为上层协议提供安全保护，在此种模式下，参与通信的双方主机都必须安装IPSec协议，而且它不能隐藏主机的IP地址。启用IPSec传输模式后，IPSec会在传输层包的前面增加AH/ESP头部或同时增加两种头部，构成一个AH/ESP数据包，然后添加IP头部组成IP包。在接收方，首先处理的是IP，然后再做IPSec处理，最后再将载荷数据交给上层协议。</p>

<pre><code>    IP头   IPSec头    IP载荷
</code></pre>

<p>传输模式的数据包结构</p>

<h4>b. 隧道模式</h4>

<p>隧道模式（Tunnel Mode）使用在两台网关之间，站点到站点（Site-to-Site）的通信。参与通信的两个网关实际是为了两个以其为边界的网络中的计算机提供安全通信的服务。</p>

<p>隧道模式为整个IP包提供保护，为IP协议本身而不只是上层协议提供安全保护。通常情况下只要使用IPSec的双方有一方是安全网关，就必须使用隧道模式，隧道模式的一个优点是可以隐藏内部主机和服务器的IP地址。大部分VPN都使用隧道模式，因为它不仅对整个原始报文加密，还对通信的源地址和目的地址进行部分和全部加密，只需要在安全网关，而不需要在内部主机上安装VPN软件，期间所有加密和
解密以及协商操作均由前者负责完成。</p>

<p>启用IPSec隧道模式后，IPSec将原始IP看作一个整体作为要保护的内容，前面加上AH/ESP头部，再加上新IP头部组成新IP包。隧道模式的数据包有两个IP头，内部头由路由器背后的主机创建，是通信终点；外部头由提供IPSec的设备（如路由器）创建，是IPSec的终点。事实上，IPSec的传输模式和隧道模式分别类似于其他隧道协议（如L2TP）的自愿隧道和强制隧道，即一个是由用户实施，另一个由网络设备实施。</p>

<pre><code>    外部IP头 IPSec头    内部IP头 IP载荷
</code></pre>

<p>隧道模式下，隧道中的数据包结构</p>

<h3>（4）身份验证与AH</h3>

<p>AH通过对报文应用一个使用密钥的单向散列函数来创建一个散列或消息摘要来进行身份验证。散列与文本合在一起传输。接收方对接收到的报文运用同样的单向散列函数并将结果与发送方提供的消息摘要的值比较，从而检测报文在传输过程中是否有部分发生变化。由于单向散列也包含两个系统之间的一个共享密钥，因此能确保真实性。
AH作用于整个报文，但任意会在传输中改变的IP头字段除外。例如，由沿传输路径的路由器修改的生存时间（Time to Live, TTL）字段是可变字段。</p>

<h4>AH的处理过程顺序如下。</h4>

<p>步骤1 使用共享密钥对IP头和数据载荷进行散列。</p>

<p>步骤2 散列构建一个新的AH头，插入到原始报文中。</p>

<p>步骤3 新报文路由器使用共享密钥对IP头和数据载荷进行散列，从AH头中取出传输的散列，再比较两个散列。</p>

<p>散列值必须精确匹配。如果报文传输中有一个比特位发生了变化，则接收到的报文的散列输出将改变，AH头将不能匹配。</p>

<p>AH支持HMAC-MD5和HMAC-SHA-1算法。在使用NAT的环境中，AH可能会遇到问题。</p>

<h3>（5）使用ESP进行身份验证与加密</h3>

<p>ESP通过加密载荷实现机密性，它支持多种对称加密算法。如果选择了ESP作为IPSec协议，也必须选择一种加密算法。IPSec的默认算法是56位DES。</p>

<p>ESP也能提供完整性和认证。首先对载荷加密，然后对加密过的载荷使用一种散列算法（HMAC-MD5或HMAC-SHA-1）。散列为数据载荷提供认证和数据完整性。</p>

<p>作为可选功能，ESP还能进行防重放保护。防重放保护验证每个报文是唯一的且没有被复制，这种保护确保黑客不能拦截报文和在数据流中插入改变后的报文。防重放的工作原理是跟踪报文顺序号并在目的端使用一个滑动窗口。当在源和目的间建立了一条连接时，两端的计数器被初始化为0。每次有报文发送时，源给报文追加一个顺序号，目的端使用滑动窗口确定预期的顺序号。目的端验证的报文的顺序号不是复制的，并且以正确的顺序被接收。例如，如果目的端的滑动窗口设为1，目的端期望接收到顺序号为1的报文。收到这样的报文后，滑动窗口进入到2.如果检测到重放的报文，重放报文将被丢弃，对此事件记录日志。</p>

<p>原始数据通过ESP得到良好保护，因为完整的原始IP数据报和ESP附加尾部都被加密。使用ESP认证，加密的IP数据报和附加尾部以及ESP头都得到散列进程处理。最后，一个新的IP头被附加到经过认证的载荷，使用新的IP地址在Internet中路由报文。</p>

<p>如果同时选择了认证和加密，先执行加密。这种处理顺序的一个原因是它有助于接收设备快速检测和丢弃重放的或伪造的报文。在解密报文之前，接收方可以认证进入的报文。这样可以快速检测到问题，并间接的降低了DoS攻击的影响。</p>

<h3>（6）IPSec工作流程</h3>

<h3>（7）IPSec的好处</h3>

<p>a.节约成本和方便网络管理</p>

<p>b.IPSec隧道可以用来创建安全的网络</p>

<p>c.IPSec隧道可以用来安全的远程管理</p>

<p>d.确保安全通信的认证和机密性</p>

<p>e.数据包认证提高了地址伪装与地址欺骗攻击的难度</p>

<p>f.通过non-end-to-end服务，IPSec可以确保一对或一组站点之间的消息都是加密的</p>
]]></content>
  </entry>
  
</feed>
