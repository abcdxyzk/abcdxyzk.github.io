<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~mptcp | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~mptcp/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:07:16+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MPTCP mptcp_v6_mapped bug]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/kernel-mptcp-bug/"/>
    <updated>2023-07-09T15:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/kernel-mptcp-bug</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/multipath-tcp/mptcp/issues/501">https://github.com/multipath-tcp/mptcp/issues/501</a></p>

<p>git log -p -1 6baa3e5d7fd3e8efa6e9ced5f1ee22547c0889d1</p>

<pre><code>    commit 6baa3e5d7fd3e8efa6e9ced5f1ee22547c0889d1
    Author: Matthieu Baerts &lt;matthieu.baerts@tessares.net&gt;
    Date:   Thu Dec 29 15:35:24 2022 +0100

        mptcp: set icsk_af_ops to mptcp_v6 one if mptcp

        abcdxyzk recently opened a very detailed bug report on Github where it
        is noticed that surprisingly, AF_INET{4,6} operations were set to MPTCP
        specific functions if the attached connection was *not* an MPTCP one.

        This is a typo of course.

        As explained by Christoph, there was no consequences: mptcp_v6_mapped
        only changes conn_request to mptcp_conn_request(): that's only important
        with listening sockets, not used here then.

        Anyway, it is still better to properly fix that just in case other
        functions from mptcp_v6_mapped are modified later.

        Closes: https://github.com/multipath-tcp/mptcp/issues/501
        Fixes: db745ef1568d ("mptcp: Only access the sysctl once to detect mptcp-enabled")
        Suggested-by: Christoph Paasch &lt;cpaasch@apple.com&gt;
        Reviewed-by: Timothée Boucher-Lambert &lt;timothee.boucher-lambert@tessares.net&gt;
        Acked-by: Christoph Paasch &lt;cpaasch@apple.com&gt;
        Signed-off-by: Matthieu Baerts &lt;matthieu.baerts@tessares.net&gt;
        (cherry picked from commit edd63c2dab7ecb48b1613d112d2779c222d2bec1)
        Signed-off-by: Matthieu Baerts &lt;matthieu.baerts@tessares.net&gt;
        (cherry picked from commit 772b4de2997d6bcda92ca37afa9f69ed853c6b7a)
        Signed-off-by: Matthieu Baerts &lt;matthieu.baerts@tessares.net&gt;

    diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
    index 2e262aa2674a..bbdd53191c35 100644
    --- a/net/ipv6/tcp_ipv6.c
    +++ b/net/ipv6/tcp_ipv6.c
    @@ -1161,7 +1161,7 @@ struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *skb,
            /* We must check on the request-socket because the listener
             * socket's flag may have been changed halfway through.
             */
    -       if (!inet_rsk(req)-&gt;saw_mpc)
    +       if (inet_rsk(req)-&gt;saw_mpc)
                inet_csk(newsk)-&gt;icsk_af_ops = &amp;mptcp_v6_mapped;
            else
     #endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP sched]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched/"/>
    <updated>2020-08-15T01:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched</id>
    <content type="html"><![CDATA[<pre><code>    $ git grep mptcp_register_scheduler net/mptcp/
    net/mptcp/mptcp_blest.c:        if (mptcp_register_scheduler(&amp;mptcp_sched_blest))
    net/mptcp/mptcp_redundant.c:    if (mptcp_register_scheduler(&amp;mptcp_sched_red))
    net/mptcp/mptcp_rr.c:   if (mptcp_register_scheduler(&amp;mptcp_sched_rr))
    net/mptcp/mptcp_sched.c:int mptcp_register_scheduler(struct mptcp_sched_ops *sched)
</code></pre>

<h4>blest</h4>

<h4>redundant</h4>

<h4>rr</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP cong]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong/"/>
    <updated>2020-08-15T01:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong</id>
    <content type="html"><![CDATA[<p>不设置时，默认的就是cubic</p>

<pre><code>    $ git grep tcp_congestion_ops net/mptcp/
    net/mptcp/mctcp_desync.c:static struct tcp_congestion_ops mctcp_desync = {
    net/mptcp/mptcp_balia.c:static struct tcp_congestion_ops mptcp_balia = {
    net/mptcp/mptcp_coupled.c:static struct tcp_congestion_ops mptcp_ccc = {
    net/mptcp/mptcp_olia.c:static struct tcp_congestion_ops mptcp_olia = {
    net/mptcp/mptcp_wvegas.c:static struct tcp_congestion_ops mptcp_wvegas __read_mostly = {
</code></pre>

<h4>desync</h4>

<h4>balia</h4>

<h4>ccc</h4>

<h4>olia</h4>

<h4>wvegas</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP pm]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm/"/>
    <updated>2020-08-15T00:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fenglt/p/8570343.html">https://www.cnblogs.com/fenglt/p/8570343.html</a></p>

<p><a href="http://www.doc88.com/p-2354903996876.html">http://www.doc88.com/p-2354903996876.html</a></p>

<pre><code>    $ git grep mptcp_register_path_manager net/
    net/mptcp/mptcp_binder.c:       if (mptcp_register_path_manager(&amp;binder))
    net/mptcp/mptcp_fullmesh.c:     ret = mptcp_register_path_manager(&amp;full_mesh);
    net/mptcp/mptcp_ndiffports.c:   if (mptcp_register_path_manager(&amp;ndiffports))
    net/mptcp/mptcp_netlink.c:      ret = mptcp_register_path_manager(&amp;mptcp_nl_pm_ops);
    net/mptcp/mptcp_pm.c:int mptcp_register_path_manager(struct mptcp_pm_ops *pm)
</code></pre>

<h4>fullmesh</h4>

<p>两边IP都会建连，即建立 <code>n*m</code> 条连接</p>

<p>IP查看 cat /proc/net/mptcp_fullmesh</p>

<h4>ndiffports 两边只在一组IP上建立多条连接。</h4>

<pre><code>    echo ndiffports &gt; /proc/sys/net/mptcp/mptcp_path_manager
    echo 5 &gt; /sys/module/mptcp_ndiffports/parameters/num_subflows # 总共建5条，即额外再建4条
</code></pre>

<h4>netlink</h4>

<p>通过genetlink和应用层交互，在应用层实现pm功能。</p>

<h4>binder</h4>

<p>将松散源路由（Loose Source and Record Routing, LSRR）选项添加到MPTCP，以确保MPTCP子流使用所有可用网关，即采用LSRR分发子流的数据包。Binder路径管理算法允许用户终端设备从网关直接获得更高的网络吞吐量，而不需要进行任何修改，可用图a和b谁明其工作原理。理论上，只有在网络中设置了LSRR选项，才能使其B>0，从而使得Binder路径管理算法发挥良好效果。</p>

<p><img src="/images/kernel/20200815.png" alt="" /></p>

<p>松散源路由：允许相邻两个IP地址之间跳过多个网络。</p>

<p>通俗解释：发送端指明了流量或者数据包必须经过的IP地址清单，但如果需要，也可以经过一些其他的地址。换句话说，不用考虑数据包经过的确切地址，只要它经过这些地址就可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP skb路径]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path/"/>
    <updated>2020-07-20T00:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path</id>
    <content type="html"><![CDATA[<h3>发送</h3>

<p>tcp_sendmsg 将 skb 写入 meta_sk 的 sk_write_queue 然后复制一份skb，将 clone_skb 写入subsk的sk_write_queue。</p>

<p>相同的[seq, endseq]会同时存在meta_sk->sk_write_queue, meta_sk->reinject_queue, subsk->sk_write_queue</p>

<p>meta_sk->reinject_queue 跟 meta_sk->sk_write_queue 差不多，目前的pm中reinject_queue的发送优先级高于sk_write_queue。</p>

<p>reinject_queue 中skb的来源有：</p>

<ol>
<li><p>重传时调mptcp_reinject_data将skb放到meta_sk的reinject_queue，也就是一个subsk重传skb，可以放到另一个subsk</p></li>
<li><p>subsk 调 tcp_write_queue_purge 时可能这些skb还是要发出去的，所以把skb放到meta_sk的reinject_queue</p></li>
<li><p>mptcp_sub_retransmit_timer, mptcp_del_sock, mptcp_send_reset_rem_id 等</p></li>
</ol>


<pre><code>    mptcp_write_wakeup
        reinject = 0
    mptcp_write_xmit
        if (skb from reinject_queue)
            reinject = 1
        else
            reinject = 0
    mptcp_retransmit_skb
        reinject = -1

        -&gt; mptcp_skb_entail(, skb, reinject)
            -&gt; mptcp_save_dss_data_seq 设置seq
            -&gt; tcp_add_write_queue_tail 或 tcp_transmit_skb


    mptcp_sub_retransmit_timer
    mptcp_del_sock
    mptcp_send_reset_rem_id
    tcp_write_queue_purge
        -&gt; mptcp_reinject_data
            -&gt; skb_queue_tail(meta_sk-&gt;reinject_queue, skb)
</code></pre>

<h3>接收</h3>

<pre><code>    mptcp_data_ready
        -&gt; mptcp_queue_skb
            -&gt; tcp_queue_rcv(meta_sk, tmp1, 0, &amp;fragstolen)
            -&gt; tcp_data_queue_ofo(meta_sk, tmp1);

    tcp_validate_incoming
        -&gt; mptcp_handle_options
            -&gt; mptcp_process_data_ack
                -&gt; mptcp_clean_rtx_queue
                    -&gt; 清理 meta_sk-&gt;sk_write_queue
                    -&gt; 清理 mpcb-&gt;reinject_queue
    tcp_ack
        -&gt; tcp_clean_rtx_queue
            -&gt; 清理 subsk-&gt;sk_write_queue
</code></pre>
]]></content>
  </entry>
  
</feed>
