<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~mptcp | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~mptcp/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MPTCP sched]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched/"/>
    <updated>2020-08-15T01:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched</id>
    <content type="html"><![CDATA[<pre><code>    $ git grep mptcp_register_scheduler net/mptcp/
    net/mptcp/mptcp_blest.c:        if (mptcp_register_scheduler(&amp;mptcp_sched_blest))
    net/mptcp/mptcp_redundant.c:    if (mptcp_register_scheduler(&amp;mptcp_sched_red))
    net/mptcp/mptcp_rr.c:   if (mptcp_register_scheduler(&amp;mptcp_sched_rr))
    net/mptcp/mptcp_sched.c:int mptcp_register_scheduler(struct mptcp_sched_ops *sched)
</code></pre>

<h4>blest</h4>

<h4>redundant</h4>

<h4>rr</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP cong]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong/"/>
    <updated>2020-08-15T01:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong</id>
    <content type="html"><![CDATA[<p>不设置时，默认的就是cubic</p>

<pre><code>    $ git grep tcp_congestion_ops net/mptcp/
    net/mptcp/mctcp_desync.c:static struct tcp_congestion_ops mctcp_desync = {
    net/mptcp/mptcp_balia.c:static struct tcp_congestion_ops mptcp_balia = {
    net/mptcp/mptcp_coupled.c:static struct tcp_congestion_ops mptcp_ccc = {
    net/mptcp/mptcp_olia.c:static struct tcp_congestion_ops mptcp_olia = {
    net/mptcp/mptcp_wvegas.c:static struct tcp_congestion_ops mptcp_wvegas __read_mostly = {
</code></pre>

<h4>desync</h4>

<h4>balia</h4>

<h4>ccc</h4>

<h4>olia</h4>

<h4>wvegas</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP pm]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm/"/>
    <updated>2020-08-15T00:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fenglt/p/8570343.html">https://www.cnblogs.com/fenglt/p/8570343.html</a></p>

<p><a href="http://www.doc88.com/p-2354903996876.html">http://www.doc88.com/p-2354903996876.html</a></p>

<pre><code>    $ git grep mptcp_register_path_manager net/
    net/mptcp/mptcp_binder.c:       if (mptcp_register_path_manager(&amp;binder))
    net/mptcp/mptcp_fullmesh.c:     ret = mptcp_register_path_manager(&amp;full_mesh);
    net/mptcp/mptcp_ndiffports.c:   if (mptcp_register_path_manager(&amp;ndiffports))
    net/mptcp/mptcp_netlink.c:      ret = mptcp_register_path_manager(&amp;mptcp_nl_pm_ops);
    net/mptcp/mptcp_pm.c:int mptcp_register_path_manager(struct mptcp_pm_ops *pm)
</code></pre>

<h4>fullmesh</h4>

<p>两边IP都会建连，即建立 <code>n*m</code> 条连接</p>

<p>IP查看 cat /proc/net/mptcp_fullmesh</p>

<h4>ndiffports 两边只在一组IP上建立多条连接。</h4>

<pre><code>    echo ndiffports &gt; /proc/sys/net/mptcp/mptcp_path_manager
    echo 5 &gt; /sys/module/mptcp_ndiffports/parameters/num_subflows # 总共建5条，即额外再建4条
</code></pre>

<h4>netlink</h4>

<p>通过genetlink和应用层交互，在应用层实现pm功能。</p>

<h4>binder</h4>

<p>将松散源路由（Loose Source and Record Routing, LSRR）选项添加到MPTCP，以确保MPTCP子流使用所有可用网关，即采用LSRR分发子流的数据包。Binder路径管理算法允许用户终端设备从网关直接获得更高的网络吞吐量，而不需要进行任何修改，可用图a和b谁明其工作原理。理论上，只有在网络中设置了LSRR选项，才能使其B>0，从而使得Binder路径管理算法发挥良好效果。</p>

<p><img src="/images/kernel/20200815.png" alt="" /></p>

<p>松散源路由：允许相邻两个IP地址之间跳过多个网络。</p>

<p>通俗解释：发送端指明了流量或者数据包必须经过的IP地址清单，但如果需要，也可以经过一些其他的地址。换句话说，不用考虑数据包经过的确切地址，只要它经过这些地址就可以。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP skb路径]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path/"/>
    <updated>2020-07-20T00:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-skb-path</id>
    <content type="html"><![CDATA[<h3>发送</h3>

<p>tcp_sendmsg 将 skb 写入 meta_sk 的 sk_write_queue 然后复制一份skb，将 clone_skb 写入subsk的sk_write_queue。</p>

<p>相同的[seq, endseq]会同时存在meta_sk->sk_write_queue, meta_sk->reinject_queue, subsk->sk_write_queue</p>

<p>meta_sk->reinject_queue 跟 meta_sk->sk_write_queue 差不多，目前的pm中reinject_queue的发送优先级高于sk_write_queue。</p>

<p>reinject_queue 中skb的来源有：</p>

<ol>
<li><p>重传时调mptcp_reinject_data将skb放到meta_sk的reinject_queue，也就是一个subsk重传skb，可以放到另一个subsk</p></li>
<li><p>subsk 调 tcp_write_queue_purge 时可能这些skb还是要发出去的，所以把skb放到meta_sk的reinject_queue</p></li>
<li><p>mptcp_sub_retransmit_timer, mptcp_del_sock, mptcp_send_reset_rem_id 等</p></li>
</ol>


<pre><code>    mptcp_write_wakeup
        reinject = 0
    mptcp_write_xmit
        if (skb from reinject_queue)
            reinject = 1
        else
            reinject = 0
    mptcp_retransmit_skb
        reinject = -1

        -&gt; mptcp_skb_entail(, skb, reinject)
            -&gt; mptcp_save_dss_data_seq 设置seq
            -&gt; tcp_add_write_queue_tail 或 tcp_transmit_skb


    mptcp_sub_retransmit_timer
    mptcp_del_sock
    mptcp_send_reset_rem_id
    tcp_write_queue_purge
        -&gt; mptcp_reinject_data
            -&gt; skb_queue_tail(meta_sk-&gt;reinject_queue, skb)
</code></pre>

<h3>接收</h3>

<pre><code>    mptcp_data_ready
        -&gt; mptcp_queue_skb
            -&gt; tcp_queue_rcv(meta_sk, tmp1, 0, &amp;fragstolen)
            -&gt; tcp_data_queue_ofo(meta_sk, tmp1);

    tcp_validate_incoming
        -&gt; mptcp_handle_options
            -&gt; mptcp_process_data_ack
                -&gt; mptcp_clean_rtx_queue
                    -&gt; 清理 meta_sk-&gt;sk_write_queue
                    -&gt; 清理 mpcb-&gt;reinject_queue
    tcp_ack
        -&gt; tcp_clean_rtx_queue
            -&gt; 清理 subsk-&gt;sk_write_queue
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPTCP 64bit seq]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-64/"/>
    <updated>2020-07-20T00:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/07/20/kernel-mptcp-64</id>
    <content type="html"><![CDATA[<h3>一、snd_high_order, rcv_high_order</h3>

<p>发送和接收都将seq映射到64位上，这样能防止不同子流之间seq造成的歧义。</p>

<pre><code>    # 发送
    static inline __be32 mptcp_get_highorder_sndbits(const struct sk_buff *skb, const struct mptcp_cb *mpcb)
    {
        return htonl(mpcb-&gt;snd_high_order[(TCP_SKB_CB(skb)-&gt;mptcp_flags &amp;
                MPTCPHDR_SEQ64_INDEX) ? 1 : 0]);
    }

    static inline void mptcp_check_sndseq_wrap(struct tcp_sock *meta_tp, int inc)
    {
        if (unlikely(meta_tp-&gt;snd_nxt &gt; meta_tp-&gt;snd_nxt + inc)) {
            struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
            mpcb-&gt;snd_hiseq_index = mpcb-&gt;snd_hiseq_index ? 0 : 1;
            mpcb-&gt;snd_high_order[mpcb-&gt;snd_hiseq_index] += 2;
        }
    }

    # 接收
    static inline u64 mptcp_get_data_seq_64(const struct mptcp_cb *mpcb, int index, u32 data_seq_32)
    {
        return ((u64)mpcb-&gt;rcv_high_order[index] &lt;&lt; 32) | data_seq_32;
    }

    static inline u64 mptcp_get_rcv_nxt_64(const struct tcp_sock *meta_tp)
    {
        struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
        return mptcp_get_data_seq_64(mpcb, mpcb-&gt;rcv_hiseq_index,
                         meta_tp-&gt;rcv_nxt);
    }

    static inline void mptcp_check_rcvseq_wrap(struct tcp_sock *meta_tp, u32 old_rcv_nxt)
    {
        if (unlikely(old_rcv_nxt &gt; meta_tp-&gt;rcv_nxt)) {
            struct mptcp_cb *mpcb = meta_tp-&gt;mpcb;
            mpcb-&gt;rcv_high_order[mpcb-&gt;rcv_hiseq_index] += 2;
            mpcb-&gt;rcv_hiseq_index = mpcb-&gt;rcv_hiseq_index ? 0 : 1;
        }
    }
</code></pre>

<h4>1. 发送端 MPTCPHDR_SEQ64_INDEX</h4>

<p>MPTCPHDR_SEQ64_INDEX 在发送和接收上有不同用法，在发送上</p>

<pre><code>    static bool mptcp_skb_entail(struct sock *sk, struct sk_buff *skb, int reinject)
    {
        ...
        if (!reinject) // 如果是第一次发送的包, MPTCPHDR_SEQ64_INDEX 只是作为 snd_hiseq_index 的替代
            TCP_SKB_CB(skb)-&gt;mptcp_flags |= (mpcb-&gt;snd_hiseq_index ? MPTCPHDR_SEQ64_INDEX : 0);
        ...
</code></pre>

<h4>2. wrap</h4>

<p>在 mptcp_check_sndseq_wrap 中 snd_hiseq_index ^= 1, 然后 snd_high_order[i] += 2; 所以 snd_high_order使用 snd_high_order[i] 和 snd_high_order[i-1]。</p>

<p>在 mptcp_check_rcvseq_wrap 中 rcv_high_order[i] += 2; rcv_hiseq_index ^= 1; 所以 rcv_high_order 使用 rcv_high_order[i] 和 rcv_high_order[i+1]。</p>

<p>为什么？</p>

<p>因为发送的时候只需要用到最高seq(snd_nxt)，但接收的时候会超高最高seq(rcv_nxt)。在 mptcp_detect_mapping 中指明了：
<code>
    if (unlikely(after(data_seq, meta_tp-&gt;rcv_nxt) &amp;&amp; data_seq &lt; meta_tp-&gt;rcv_nxt)) {
        tp-&gt;mptcp-&gt;map_data_seq = mptcp_get_data_seq_64(mpcb, !mpcb-&gt;rcv_hiseq_index, data_seq);
</code></p>

<h3>二、64bit OR 33bit</h3>

<h4>1. 接收端 MPTCPHDR_SEQ64_INDEX</h4>

<p>在 mptcp_write_dss_data_ack() 中 mdss->m = 0; 所以 MPTCPHDR_SEQ64_SET 永远不启用。 接收端只有在 MPTCPHDR_SEQ64_SET 启用时 MPTCPHDR_SEQ64_INDEX, MPTCPHDR_SEQ64_OFO 才有用， 见 mptcp_get_64_bit</p>

<pre><code>    static inline u8 mptcp_get_64_bit(u64 data_seq, struct mptcp_cb *mpcb)
    {
        u64 data_seq_high = (u32)(data_seq &gt;&gt; 32);

        if (mpcb-&gt;rcv_high_order[0] == data_seq_high)
            return 0;
        else if (mpcb-&gt;rcv_high_order[1] == data_seq_high)
            return MPTCPHDR_SEQ64_INDEX;
        else
            return MPTCPHDR_SEQ64_OFO;
    }

    static inline __u32 *mptcp_skb_set_data_seq(const struct sk_buff *skb, u32 *data_seq, struct mptcp_cb *mpcb)
    {
        __u32 *ptr = (__u32 *)(skb_transport_header(skb) + TCP_SKB_CB(skb)-&gt;dss_off);

        if (TCP_SKB_CB(skb)-&gt;mptcp_flags &amp; MPTCPHDR_SEQ64_SET) {
            u64 data_seq64 = get_unaligned_be64(ptr);

            if (mpcb)
                TCP_SKB_CB(skb)-&gt;mptcp_flags |= mptcp_get_64_bit(data_seq64, mpcb);

            *data_seq = (u32)data_seq64;
            ptr++;
        } else {
            *data_seq = get_unaligned_be32(ptr);
        }

        return ptr;
    }
</code></pre>

<h4>2. bug??</h4>

<pre><code>    if (mpcb-&gt;rcv_high_order[0] == data_seq_high)
        return 0;
    else if (mpcb-&gt;rcv_high_order[1] == data_seq_high)
        return MPTCPHDR_SEQ64_INDEX;
</code></pre>

<p>这四句应该改成:
<code>
    i = mpcb-&gt;rcv_hiseq_index;
    if (mpcb-&gt;rcv_high_order[i] == data_seq_high)
        return 0;
    else if (mpcb-&gt;rcv_high_order[i^1] == data_seq_high)
        return MPTCPHDR_SEQ64_INDEX;
</code></p>

<h4>3. 33bit</h4>

<pre><code>    rcv_high_order[i^1] = rcv_high_order[i] + 1;
</code></pre>

<p>所以所谓的64bit，其实是33bit。</p>

<h4>4. MPTCPHDR_SEQ64_OFO</h4>

<p>33bit seq 超过了 <code>rcv_high_order[i^1]</code>，判定为无效数据，不收取</p>
]]></content>
  </entry>
  
</feed>
