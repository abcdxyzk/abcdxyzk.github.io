<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~vpn | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~vpn/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-10-27T09:30:41+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vpn CONNECT方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/04/26/kernel-vpn-CONNECT/"/>
    <updated>2021-04-26T20:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/04/26/kernel-vpn-CONNECT</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xyl1932432873/p/7735866.html">https://www.cnblogs.com/xyl1932432873/p/7735866.html</a></p>

<p>CONNECT这个方法的作用就是把服务器作为跳板，让服务器代替用户去访问其它网页，之后把数据原原本本的返回给用户。这样用户就可以访问到一些只有服务器上才能访问到的网站了，这就是HTTP代理。</p>

<p>假如我想通过代理访问这个博客（www.web-tinker.com），我就需要建立一个TCP连接，连接到服务器监听的那个端口，然后给服务器发送一个HTTP头。下面就是这个HTTP头的内容：
<code>
    CONNECT www.web-tinker.com:80 HTTP/1.1
    Host: www.web-tinker.com:80
    Proxy-Connection: Keep-Alive
    Proxy-Authorization: Basic *
    Content-Length: 0
</code>
所有的HTTP头都是类似的，第一行是方法名、主要参数、HTTP版本。接着一行一个参数，最后用两个换行来结束。这个地方应该填写验证的用户名和密码。</p>

<p>发送完这个请求之后，就是服务器端响应请求了。如果用户名和密码验证通过，就会返回一个状态码为200的响应信息。虽然状态码是200，但是这个状态描述不是OK，而是Connection Established。
<code>
    HTTP/1.1 200 Connection Established
</code></p>

<p>如果用户名和密码验证不通过。会返回一个407的状态码，状态表述是Unauthorized。表示没有权限访问代理服务器。
<code>
    HTTP/1.1 407 Unauthorized
</code></p>

<p>验证通过之后，我们就可以做普通的HTTP操作了。完全可以把现在的代理服务器看作是请求连接的Internet服务器，也就是说可以像直接访问普通的服务器一样，使用GET、POST等方法来请求Internet服务器上的页面了。我们在发送CONNECT请求的时候就已经告诉了服务器我们需要访问的Internet服务器，上面我用了这个博客的网址。现在我们要访问这个博客的主页就可以发送一个简单的GET请求。
<code>
    GET / HTTP/1.1
    Host: www.web-tinker.com
    Content-Length: 0
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[udp vpn, 代理dota2]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/04/08/kernel-udp-vpn/"/>
    <updated>2021-04-08T21:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/04/08/kernel-udp-vpn</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>手机端MTU有时是1300？？？，改大了似乎tcp不通，改成1350似乎没问题。
ifconfig rmnet_data0 mtu 1350</p>

<h3>方案</h3>

<p>用udp fullnat，起始点在包的末尾加上最终目标IP，中间点以目标IP为VIP建立session，最后点去除额外加的数据，然后发给目标IP</p>

<h3>方法一</h3>

<h4>client(dota2):</h4>

<pre><code>    ip route add default via 192.168.56.3 table 1
    ip rule add to 103.10.0.0/16 table 1
    ip rule add to 106.52.0.0/16 table 1
    ip rule add to 139.45.0.0/16 table 1
    ip rule add to 146.66.0.0/16 table 1
    ip rule add to 153.254.0.0/16 table 1
    ip rule add to 155.133.0.0/16 table 1
    ip rule add to 162.254.0.0/16 table 1
    ip rule add to 185.25.0.0/16 table 1
    ip rule add to 190.217.0.0/16 table 1
    ip rule add to 205.185.0.0/16 table 1
    ip rule add to 205.196.0.0/16 table 1
</code></pre>

<p>client不用安装模块，通过策略路由将包导到本地虚拟机, 发出包 192.168.8.100:12345 &ndash;> 153.254.86.167:27023</p>

<h4>start_point(local vm):</h4>

<pre><code>    insmod ip_vs.ko; insmod ip_vs_wrr.ko
    echo 192.168.8.103 &gt; /proc/sys/net/ipv4/vs/laddr_v4_str
    echo 106.52.108.171 &gt; /proc/sys/net/ipv4/vs/default_dest_v4_str
</code></pre>

<p>收到包: 192.168.8.100:12345 &ndash;> 153.254.86.167:27023
发出包: 192.168.8.103:5001 &ndash;> 106.52.108.171:27023 在包的末尾加上153.254.86.167
收包和发包可以不在同一网卡</p>

<h4>middle_point(gz):</h4>

<pre><code>    insmod ip_vs.ko; insmod ip_vs_wrr.ko
    echo 101.32.220.184 &gt; /proc/sys/net/ipv4/vs/default_dest_v4_str
</code></pre>

<p>单纯转发</p>

<h4>end_point(hk):</h4>

<pre><code>    insmod ip_vs.ko; insmod ip_vs_wrr.ko
</code></pre>

<p>取出包的末尾153.254.86.167作为rs，去除末尾自己加的数据，然后转发</p>

<h3>用法二：</h3>

<h4>client(dota2):</h4>

<pre><code>    insmod ip_vs.ko local_out=1
    echo 119.29.157.106 &gt; /proc/sys/net/ipv4/vs/default_dest_v4_str
</code></pre>

<p>在包过local_out时修改目标IP为middle_ip、末尾加数据、建立session，session按cip:cport &ndash;> middle_ip:dport建，所以两条连接的cport、dport相同而dip不同则会冲突(TODO)
只换ip，没有重新路由，所以dip和middle_ip的出口需要在一张网卡上</p>

<h4>middle_point(gz):</h4>

<pre><code>    insmod ip_vs.ko; insmod ip_vs_wrr.ko
    echo 101.32.220.184 &gt; /proc/sys/net/ipv4/vs/default_dest_v4_str
</code></pre>

<h4>end_point(hk):</h4>

<pre><code>    insmod ip_vs.ko; insmod ip_vs_wrr.ko
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gre]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/11/kernel-gre/"/>
    <updated>2020-12-11T11:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/11/kernel-gre</id>
    <content type="html"><![CDATA[<h4>1. GRE介绍</h4>

<p>GRE隧道是一种IP-over-IP的隧道，是通用路由封装协议，可以对某些网路层协议的数据报进行封装，使这些被封装的数据报能够在IPv4/IPv6 网络中传输。</p>

<p>Tunnel 是一个虚拟的点对点的连接，提供了一条通路使封装的数据报文能够在这个通路上传输，并且在一个Tunnel 的两端分别对数据报进行封装及解封装。一个X协议的报文要想穿越IP网络在Tunnel中传输，必须要经过加封装与解封装两个过程。</p>

<p>要在Linux上创建GRE隧道，需要ip_gre内核模块，它是GRE通过IPv4隧道的驱动程序。</p>

<h4>2.</h4>

<p>A 1.1.1.1, lo:0 10.1.2.3</p>

<p>B 2.2.2.2, lo:0 10.4.5.6</p>

<p>A 上面：
<code>
    ifconfig lo:0 10.1.2.3/24 up
    ip tunnel add gre1 mode gre remote 1.1.1.1 local 2.2.2.2 ttl 225 dev enp13s0
    ip addr add 10.1.2.3/24 peer 10.4.5.6/24 dev gre1
    ip link set dev gre1 up
    ip route add 10.4.5.6/24 dev gre1
</code></p>

<p>B 上面：
<code>
    ifconfig lo:0 10.4.5.6/24 up
    ip tunnel add gre1 mode gre remote 2.2.2.2 local 1.1.1.1 ttl 225 dev enp13s0
    ip addr add 10.4.5.6/24 peer 10.1.2.3/24 dev gre1
    ip link set dev gre1 up
    ip route add 10.1.2.3/24 dev gre1
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vpn]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/09/10/kernel-vpn/"/>
    <updated>2020-09-10T04:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/09/10/kernel-vpn</id>
    <content type="html"><![CDATA[<h3>方案一</h3>

<p>client &mdash;&ndash; xor;drop &mdash;-> hongkong(squid) &mdash;&mdash;&mdash;&ndash;> server</p>

<h3>方案二</h3>

<p>client &mdash;&ndash; xor;drop &mdash;-> guangzhou(squid) &mdash;&ndash; xor;drop;icmp+mss &mdash;&ndash;> hongkong(squid) &mdash;&mdash;&mdash;> server</p>

<p><a href="/blog/cats/tools~squid/">squid</a></p>

<p><a href="/blog/2020/07/09/kernel-tcp-icmp/">icmp</a></p>

<p>有些时候client和hongkong之间能够ping通，但是tcp就是不通，全被丢弃了，这时需要方案二。</p>

<p>client 和 squid 之间不好使用icmp，因为client大都是在NAT后面，主动发起的icmp能通，但被动的请求进不来。这时需要加上guangzhou中间节点</p>

<p><a href="/blog/2020/07/09/kernel-adjust-mss/">mss</a></p>

<p>为了加icmp头，需要减少TCP_MSS。</p>

<p><a href="/blog/2020/09/10/kernel-digest-xor/">xor</a></p>

<p>drop: 丢弃异常reset、fin等包。</p>

<h3>通过web，实现跨平台随时随地购买使用</h3>

<h4>购买CVM</h4>

<p><a href="/blog/2019/12/12/buy-cvm/">脚本购买CVM</a></p>

<p>web购买CVM:</p>

<pre><code>    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;
    &lt;meta name="MobileOptimized" content="320"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt;

    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;proxy&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;?php
        $region = "hk";
        if (isset($_GET['region']))
            $region = $_GET['region'];
        $count = "0";
        if (isset($_GET['count']))
            $count = $_GET['count'];
    ?&gt;
    &lt;form action="index.php" method="get"&gt;
    &lt;input name="region" value="&lt;?php echo $region; ?&gt;" style="width:100px"&gt;
    &lt;input name="count" value="0" style="width:100px"&gt;
    &lt;input class="submit" type="submit" value="创建"&gt;
    &lt;/form&gt;
    &lt;?php
        $cmd = "python CVM.py $region $count";

        echo date("Y-m-d H:i:s") . " " . $cmd;
        echo "&lt;/br&gt;&lt;br&gt;";

        exec($cmd);

        if (filesize("show.log") &gt; 0) {
            $myfile = fopen("show.log", "r");
            echo fread($myfile, filesize("show.log"));
            fclose($myfile);
        }
    ?&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<h4>web配置cache_peer, 方案二中的guangzhou才需要</h4>

<p>cachemgr.cgi 没找到接口，可惜</p>

<h5>填写 IP</h5>

<pre><code>    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;meta name="viewport" content="width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"/&gt;
    &lt;meta name="MobileOptimized" content="320"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"&gt;

    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;squid&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;?php
        $up = "";
        if (isset($_GET['up']))
            $up = $_GET['up'];
    ?&gt;
    &lt;form action="squid.php" method="get"&gt;
    &lt;input name="up" value="&lt;?php echo $up; ?&gt;" style="width:200px"&gt;
    &lt;input class="submit" type="submit" value="更新"&gt;
    &lt;/form&gt;
    &lt;?php

        echo date("Y-m-d H:i:s");
        echo "&lt;/br&gt;&lt;br&gt;";

        if (strlen($up) &gt; 3 &amp;&amp; strlen($up) &lt; 128) {
            $myfile = fopen("squid.log", "w");
            fwrite($myfile, $up . " up.com\n");
            fclose($myfile);
        }
        $myfile = fopen("squid.log", "r");
        echo fread($myfile, filesize("squid.log"));
        fclose($myfile);
    ?&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<h5>刷新squid</h5>

<pre><code>    # */1 * * * * cd /var/www/html/; /var/www/html/squid.sh
    # */1 * * * * sleep 30; cd /var/www/html/; /var/www/html/squid.sh
    # chown -R www-data:www-data ../html/
    cat /etc/hosts | grep up.com &gt; hosts_tmp
    diff hosts_tmp squid.log &gt; /dev/null
    if [ $? -eq 0 ]; then exit; fi

    cat /etc/hosts | grep -v up.com &gt; hosts
    cat squid.log &gt;&gt; hosts 
    cp hosts /etc/

    /usr/sbin/squid -k reconfigure -f /root/squid/squid.conf
</code></pre>
]]></content>
  </entry>
  
</feed>
