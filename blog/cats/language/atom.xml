<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2025-07-21T17:22:06+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PerformanceObserver监测网页性能]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/07/21/lang-web-perf/"/>
    <updated>2025-07-21T17:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/07/21/lang-web-perf</id>
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000012833867?utm_source=sf-related">https://segmentfault.com/a/1190000012833867?utm_source=sf-related</a></p>

<p><a href="https://www.5axxw.com/questions/content/e8hdl8">https://www.5axxw.com/questions/content/e8hdl8</a></p>

<p><a href="https://www.cnblogs.com/momo798/p/17292621.html">https://www.cnblogs.com/momo798/p/17292621.html</a></p>

<h4>处理模型</h4>

<p><img src="/images/lang/20250721-11.png" alt="" /></p>

<p>参数说明
<code>
    navigationStart 加载起始时间
    redirectStart 重定向开始时间（如果发生了HTTP重定向，每次重定向都和当前文档同域的话，就返回开始重定向的fetchStart的值。其他情况，则返回0）
    redirectEnd 重定向结束时间（如果发生了HTTP重定向，每次重定向都和当前文档同域的话，就返回最后一次重定向接受完数据的时间。其他情况则返回0）
    fetchStart 浏览器发起资源请求时，如果有缓存，则返回读取缓存的开始时间
    domainLookupStart 查询DNS的开始时间。如果请求没有发起DNS请求，如keep-alive，缓存等，则返回fetchStart
    domainLookupEnd 查询DNS的结束时间。如果没有发起DNS请求，同上
    connectStart 开始建立TCP请求的时间。如果请求是keep-alive，缓存等，则返回domainLookupEnd
    (secureConnectionStart) 如果在进行TLS或SSL，则返回握手时间
    connectEnd 完成TCP链接的时间。如果是keep-alive，缓存等，同connectStart
    requestStart 发起请求的时间
    responseStart 服务器开始响应的时间
    domLoading 从图中看是开始渲染dom的时间，具体未知
    domInteractive 未知
    domContentLoadedEventStart 开始触发DomContentLoadedEvent事件的时间
    domContentLoadedEventEnd DomContentLoadedEvent事件结束的时间
    domComplete 从图中看是dom渲染完成时间，具体未知
    loadEventStart 触发load的时间，如没有则返回0
    loadEventEnd load事件执行完的时间，如没有则返回0
    unloadEventStart unload事件触发的时间
    unloadEventEnd unload事件执行完的时间
</code></p>

<h4>兼容性：</h4>

<p><img src="/images/lang/20250721-12.png" alt="" /></p>

<h4>案例</h4>

<p>DNS解析时间： domainLookupEnd - domainLookupStart</p>

<p>TCP建立连接时间： connectEnd - connectStart</p>

<p>白屏时间： responseStart - navigationStart</p>

<p>dom渲染完成时间： domContentLoadedEventEnd - navigationStart</p>

<p>页面onload时间： loadEventEnd - navigationStart</p>

<pre><code>    &lt;script type="text/javascript"&gt;
        const perfObserver = new PerformanceObserver((observedEntries) =&gt; {
            const entry = observedEntries.getEntriesByType('navigation')[0];
            tim = entry.loadEventEnd - entry.domainLookupStart;
            //console.log('pageload time: ', tim);
            if (tim &lt; 1000)
                    document.getElementById('pageTimeShow').innerHTML = '耗时: ' + Math.round(tim) + '毫秒';
            else
                    document.getElementById('pageTimeShow').innerHTML = '耗时: ' + (Math.round(tim/10) / 100) + '秒';
        })
        perfObserver.observe({ entryTypes: ['navigation'] });
        //console.log(performance.getEntriesByType("navigation")[0]);
        //console.log(performance.timing);
    &lt;/script&gt;
</code></pre>

<h4>字段说明</h4>

<table>
<thead>
<tr>
<th style="text-align: left"><strong>key</strong></th>
<th style="text-align: left"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left">connectEnd</td>
<td style="text-align: left">HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等,如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</td>
</tr>
<tr>
<td style="text-align: left">connectStart</td>
<td style="text-align: left">HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等,如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</td>
</tr>
<tr>
<td style="text-align: left">decodedBodySize</td>
<td style="text-align: left">从HTTP或缓存中获取的消息体积大小</td>
</tr>
<tr>
<td style="text-align: left">domainLookupEnd</td>
<td style="text-align: left">DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</td>
</tr>
<tr>
<td style="text-align: left">domainLookupStart</td>
<td style="text-align: left">DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</td>
</tr>
<tr>
<td style="text-align: left">duration</td>
<td style="text-align: left">加载时间</td>
</tr>
<tr>
<td style="text-align: left">encodedBodySize</td>
<td style="text-align: left">从HTTP或缓存中获取的body体积大小</td>
</tr>
<tr>
<td style="text-align: left">entryType</td>
<td style="text-align: left">资源类型，entryType类型不同数组中的对象结构也不同</td>
</tr>
<tr>
<td style="text-align: left">fetchStart</td>
<td style="text-align: left">浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</td>
</tr>
<tr>
<td style="text-align: left">initiatorType</td>
<td style="text-align: left">谁发起的请求</td>
</tr>
<tr>
<td style="text-align: left">name</td>
<td style="text-align: left">资源名称，是资源的绝对路径或调用mark方法自定义的名称</td>
</tr>
<tr>
<td style="text-align: left">nextHopProtocol</td>
<td style="text-align: left">获取资源使用的网络协议</td>
</tr>
<tr>
<td style="text-align: left">redirectEnd</td>
<td style="text-align: left">最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内的重定向才算，否则值为 0</td>
</tr>
<tr>
<td style="text-align: left">redirectStart</td>
<td style="text-align: left">第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</td>
</tr>
<tr>
<td style="text-align: left">requestStart</td>
<td style="text-align: left">HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存,连接错误重连时，这里显示的也是新建立连接的时间</td>
</tr>
<tr>
<td style="text-align: left">responseEnd</td>
<td style="text-align: left">HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</td>
</tr>
<tr>
<td style="text-align: left">responseStart</td>
<td style="text-align: left">HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</td>
</tr>
<tr>
<td style="text-align: left">secureConnectionStart</td>
<td style="text-align: left">HTTPS 连接开始的时间，如果不是安全连接，则值为 0</td>
</tr>
<tr>
<td style="text-align: left">serverTiming</td>
<td style="text-align: left">包含服务时间元数据的数组</td>
</tr>
<tr>
<td style="text-align: left">startTime</td>
<td style="text-align: left">开始时间</td>
</tr>
<tr>
<td style="text-align: left">transferSize</td>
<td style="text-align: left">加载资源的体积大小，包含请求头及请求体</td>
</tr>
<tr>
<td style="text-align: left">workerStart</td>
<td style="text-align: left">DOMHighResTimeStamp</td>
</tr>
</tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[phpexcel单元格内换行]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/07/21/lang-phpexcel-wrap/"/>
    <updated>2025-07-21T16:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/07/21/lang-phpexcel-wrap</id>
    <content type="html"><![CDATA[<pre><code>    $objPHPExcel-&gt;setActiveSheetIndex(0)
            -&gt;setCellValue('A4', “Hello\nWorld”)；
</code></pre>

<p>然后注意两点</p>

<p>一是要有下面的代码配合
<code>
    $objPHPExcel-&gt;getActiveSheet()-&gt;getStyle('A4')-&gt;getAlignment()-&gt;setWrapText(true);
</code></p>

<p>二是要换行的字符串Hello\nWorld外面必须是双引号</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php获取客户端真实IP]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/02/28/lang-php-real-ip/"/>
    <updated>2025-02-28T16:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/02/28/lang-php-real-ip</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ammu402004/article/details/101494775">https://blog.csdn.net/ammu402004/article/details/101494775</a></p>

<p>apache 日志默认情况下log日志格式为：
<code>
    LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
</code>
其中%h 是记录访问者的IP，如果在web的前端有一层代理，那么这个%h其实就是代理机器的IP，这不是我们想要的。在这种情况下，</p>

<p><code>%{X-FORWARDED-FOR}i</code>  字段会记录客户端真实的IP。所以log日志改为：
<code>
    LogFormat "%h %{X-FORWARDED-FOR}i %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
</code></p>

<hr />

<p><a href="https://www.php.cn/faq/48483.html">https://www.php.cn/faq/48483.html</a></p>

<p>php中http_x_forwarded_for 和 remote_addr的使用</p>

<p>1.REMOTE_ADDR:浏览当前页面的用户计算机的ip地址</p>

<p>2.HTTP_X_FORWARDED_FOR: 浏览当前页面的用户计算机的网关</p>

<p>3.HTTP_CLIENT_IP:客户端的ip</p>

<p>在PHP 中使用 <code>$_SERVER["REMOTE_ADDR"]</code> 来取得客户端的 IP 地址，但如果客户端是使用代理服务器来访问，那取到的就是代理服务器的 IP 地址，而不是真正的客户端 IP 地址。要想透过代理服务器取得客户端的真实 IP 地址，就要使用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 来读取。</p>

<p>不过要注意的事，并不是每个代理服务器都能用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 来读取客户端的真实 IP，有些用此方法读取到的仍然是代理服务器的 IP。</p>

<p>还有一点需要注意的是：如果客户端没有通过代理服务器来访问，那么用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 取到的值将是空的。</p>

<pre><code>    if ($_SERVER['HTTP_X_FORWARDED_FOR'] &amp;&amp; preg_match('/^([0-9]{1,3}.){3}[0-9]{1,3}$/',$_SERVER['HTTP_X_FORWARDED_FOR'])) {  
        $onlineip = $_SERVER['HTTP_X_FORWARDED_FOR'];  
    } elseif  ($_SERVER['HTTP_CLIENT_IP']  &amp;&amp; preg_match('/^([0-9]{1,3}.){3}[0-9]{1,3}$/',$_SERVER['HTTP_CLIENT_IP'])) {  
        $onlineip = $_SERVER['HTTP_CLIENT_IP']; 
    }
</code></pre>

<p>获取用户IP地址的三个属性的区别 (HTTP_X_FORWARDED_FOR,HTTP_VIA,REMOTE_ADDR)</p>

<h4>一、没有使用代理服务 器的情况：</h4>

<p>REMOTE_ADDR = 您的 IP</p>

<p>HTTP_VIA = 没数值或不显示</p>

<p>HTTP_X_FORWARDED_FOR = 没数值或不显示</p>

<h4>二、使用透明代理服务器的情 况：Transparent Proxies</h4>

<p>REMOTE_ADDR = 最后一个代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 您的真实 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>这类代理服务器还是将您的信息转发给您的访问对象，无法达到隐藏真实身份的目的。</p>

<h4>三、使用普通匿名代理服务器的情况：Anonymous Proxies</h4>

<p>REMOTE_ADDR = 最后一个代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 代理服务器 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>隐藏了您的真实IP，但是向访问对象透露了您是使用代理服务器访问他们的。</p>

<h4>四、使用欺骗性代理服务器的情况：Distorting Proxies</h4>

<p>REMOTE_ADDR = 代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 随机的 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>告诉了访问对象您使用了代理服务器，但编造了一个虚假的随机IP代替您的真实IP欺骗它。</p>

<h4>五、使用高匿名代理服务器的情况：High Anonymity Proxies (Elite proxies)</h4>

<p>REMOTE_ADDR = 代理服务器 IP</p>

<p>HTTP_VIA = 没数值或不显示</p>

<p>HTTP_X_FORWARDED_FOR = 没数值或不显示 ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>完全用代理服务器的信息替代了您的所有信息，就象您就是完全使用那台代理服务器直接访问对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[钉钉开放平台API]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/09/14/lang-web-ding/"/>
    <updated>2024-09-14T10:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/09/14/lang-web-ding</id>
    <content type="html"><![CDATA[<p><a href="https://open.dingtalk.com/document/orgapp/chatbots-send-one-on-one-chat-messages-in-batches">https://open.dingtalk.com/document/orgapp/chatbots-send-one-on-one-chat-messages-in-batches</a></p>

<pre><code>    public $corpId = 'XXX';
    public $AppID = 'XXX';
    public $AgentId = 'XXX';
    public $ClientID = 'XXX';
    public $ClientSecret = 'XXX';


    function index($startpage = 0)
    {
        echo "111&lt;br&gt;";
        echo "&lt;div id='cc'&gt;333&lt;/div&gt;";
        echo "&lt;div id='dd'&gt;333&lt;/div&gt;";
        echo '&lt;script src="https://g.alicdn.com/dingding/dingtalk-jsapi/3.0.25/dingtalk.open.js"&gt;&lt;/script&gt;';
        echo "&lt;script&gt; dd.getAuthCode({ corpId: 'XXX',  success: (res) =&gt; { document.getElementById('cc').innerHTML = res.code; }, }); document.getElementById('dd').innerHTML = 'ff'; &lt;/script&gt;";
        // echo "&lt;script&gt; dd.replacePage({ url: 'http://www.baidu.com' }); /* dd.closePage(); */ &lt;/script&gt;";

        // 根据 code access_token 获取免密用户信息
        // curl -X POST -d "code=XXX" "https://oapi.dingtalk.com/topapi/v2/user/getuserinfo?access_token=XXX"

        echo "222&lt;br&gt;";
    }

    function auth($startpage = 0)
    {
        echo "555&lt;br&gt;";
        echo "&lt;div id='cc'&gt;444&lt;/div&gt;";
        echo "&lt;div id='dd'&gt;444&lt;/div&gt;";
        echo '&lt;script src="https://g.alicdn.com/dingding/dingtalk-jsapi/3.0.25/dingtalk.open.js"&gt;&lt;/script&gt;';
        //echo "&lt;script&gt; dd.getAuthCode({ corpId: 'XXX',  success: (res) =&gt; { document.getElementById('cc').innerHTML = res.code; }, }); document.getElementById('dd').innerHTML = 'ff'; &lt;/script&gt;";
        // echo "&lt;script&gt; dd.replacePage({ url: 'http://www.baidu.com' }); /* dd.closePage(); */ &lt;/script&gt;";
        echo "&lt;script&gt; dd.getAuthCode({ corpId: 'XXX',  success: (res) =&gt; { dd.openLink({url: 'https://www.baidu.com' }); dd.closePage(); }, }); document.getElementById('dd').innerHTML = 'ff'; &lt;/script&gt;";

        // 根据 code access_token 获取免密用户信息
        // curl -X POST -d "code=XXX" "https://oapi.dingtalk.com/topapi/v2/user/getuserinfo?access_token=XXX"

        echo "666&lt;br&gt;";
    }

    function auth2($startpage = 0)
    {
        echo "555&lt;br&gt;";
        echo "&lt;div id='cc'&gt;444&lt;/div&gt;";
        echo "&lt;div id='dd'&gt;444&lt;/div&gt;";
        echo '&lt;script src="https://g.alicdn.com/dingding/dingtalk-jsapi/3.0.25/dingtalk.open.js"&gt;&lt;/script&gt;';

        $url = "http://n.com/rs/ding/auth2";
        $nonceStr = 'kk';
        $agentId = $this-&gt;AgentId;
        $timeStamp = time() * 1000;
        $corpId = $this-&gt;corpId;

        $jsticket = 'XXX';

        $plain = "jsapi_ticket=" . $jsticket . "&amp;noncestr=" . $nonceStr . "&amp;timestamp=" . $timeStamp . "&amp;url=" . $url;
        echo $plain;

        // TODO
        $sign = sha1($plain);
        var_dump($sign);


        //echo "&lt;script&gt; dd.getAuthCode({ corpId: 'XXX',  success: (res) =&gt; { document.getElementById('cc').innerHTML = res.code; }, }); document.getElementById('dd').innerHTML = 'ff'; &lt;/script&gt;";
        // echo "&lt;script&gt; dd.replacePage({ url: 'http://www.baidu.com' }); /* dd.closePage(); */ &lt;/script&gt;";
        echo "&lt;script&gt; dd.getAuthCode({ corpId: 'XXX',  success: (res) =&gt; { dd.openLink({url: 'https://www.baidu.com' }); dd.closePage(); }, }); document.getElementById('dd').innerHTML = 'ff'; &lt;/script&gt;";

        // 根据 code access_token 获取免密用户信息
        // curl -X POST -d "code=XXX" "https://oapi.dingtalk.com/topapi/v2/user/getuserinfo?access_token=XXX"

        echo "666&lt;br&gt;";
    }



    function gettoken()
    {
        return 'XXX';

        $cget = new DingTalkClient(DingTalkConstant::$CALL_TYPE_OAPI, DingTalkConstant::$METHOD_GET , DingTalkConstant::$FORMAT_JSON);
        $req = new OapiGettokenRequest();
        $req-&gt;setAppkey($this-&gt;ClientID);
        $req-&gt;setAppsecret($this-&gt;ClientSecret);
        $resp = $cget-&gt;execute($req, '', "https://oapi.dingtalk.com/gettoken");
        var_dump($resp-&gt;access_token);
        var_dump($resp);
    }

    // 获取jsapiTicket
    function jsapiTicket()
    {
        $accessToken = $this-&gt;gettoken();

        $url = "https://api.dingtalk.com/v1.0/oauth2/jsapiTickets";

        $header = array('Content-Type: application/json', "x-acs-dingtalk-access-token: {$accessToken}");

        $fields = array(
                '1' =&gt; '1'
            );
        $postfields = json_encode($fields);
        //var_dump($postfields);
        $res = $this-&gt;Wxapi_model-&gt;queryUrl($url, $header, $postfields);
        $res = json_decode($res, true);
        var_dump($res);
    }


    // 获取免密用户信息
    function getuserinfo()
    {
        $code = $this-&gt;input-&gt;get('code');

        $accessToken = $this-&gt;gettoken();

        $url = "https://oapi.dingtalk.com/topapi/v2/user/getuserinfo?access_token={$accessToken}";

        $header = array('Content-Type: application/json');
        $fields = array('code' =&gt; $code);
        $postfields = json_encode($fields);
        $res = $this-&gt;Wxapi_model-&gt;queryUrl($url, $header, $postfields);
        $res = json_decode($res, true);
        if (isset($res['errcode']) and $res['errcode'] == 0) {
            echo $res['errmsg'], "&lt;br&gt;&lt;br&gt;";
            var_dump($res['result']['userid']);
            echo "&lt;br&gt;&lt;br&gt;";
            var_dump($res['result']);
            echo "&lt;br&gt;&lt;br&gt;";
        }
        var_dump($res);
    }


    /*
    // 批量发送人与机器人会话中机器人消息 样例
    curl -X POST -H "x-acs-dingtalk-access-token:"XXX" -H "Content-Type:application/json" -d '{"robotCode":"XXX","userIds":["XXX"],"msgKey":"sampleMarkdown","msgParam":"{\"text\": \"hello text\",\"title\": \"hello title\"}"}' "https://api.dingtalk.com/v1.0/robot/oToMessages/batchSend"

    // 批量发送人与机器人会话中机器人消息
    curl -X POST -H "x-acs-dingtalk-access-token:"XXX" -H "Content-Type:application/json" -d '{"robotCode":"XXX","userIds":["XXX"],"msgKey":"sampleLink","msgParam":"{\"text\": \"hello text\",\"title\": \"hello title\",\"picUrl\":\"https://n.com/.png\",\"messageUrl\":\"dingtalk://dingtalkclient/action/openapp?XXX\"}"}' "https://api.dingtalk.com/v1.0/robot/oToMessages/batchSend"
    */

    // 批量发送人与机器人会话中机器人消息 样例
    function batchSend_test()
    {
        $accessToken = $this-&gt;gettoken();

        $url = "https://api.dingtalk.com/v1.0/robot/oToMessages/batchSend";

        $header = array('Content-Type: application/json', "x-acs-dingtalk-access-token: {$accessToken}");

        $fields = array("robotCode" =&gt; "XXX",
                "userIds" =&gt; ["XXX"],
                "msgKey" =&gt; "sampleMarkdown",
                "msgParam" =&gt; json_encode(["text" =&gt; "hello text", "title" =&gt; "hello title"])
            );
        $postfields = json_encode($fields);
        //var_dump($postfields);
        $res = $this-&gt;Wxapi_model-&gt;queryUrl($url, $header, $postfields);
        $res = json_decode($res, true);
        var_dump($res);
    }

    // 批量发送人与机器人会话中机器人消息
    function batchSend()
    {
        $accessToken = $this-&gt;gettoken();

        $url = "https://api.dingtalk.com/v1.0/robot/oToMessages/batchSend";

        $header = array('Content-Type: application/json', "x-acs-dingtalk-access-token: {$accessToken}");

        $fields = array("robotCode" =&gt; "XXX",
                "userIds" =&gt; ["XXX"],
                "msgKey" =&gt; "sampleLink",
                "msgParam" =&gt; json_encode(["text" =&gt; "hello text", "title" =&gt; "hello title",
                            "picUrl" =&gt; "https://n.com/gztp4.png",
                            "messageUrl" =&gt; "dingtalk://dingtalkclient/action/openapp?XXX"])
            );
        $postfields = json_encode($fields);
        //var_dump($postfields);
        $res = $this-&gt;Wxapi_model-&gt;queryUrl($url, $header, $postfields);
        $res = json_decode($res, true);
        var_dump($res);
    }



    // 发送工作通知
    function MessageCorpconversationAsyncsendV2()
    {
        $accessToken = $this-&gt;gettoken();

        $c = new DingTalkClient(DingTalkConstant::$CALL_TYPE_OAPI, DingTalkConstant::$METHOD_POST , DingTalkConstant::$FORMAT_JSON);

        $req = new OapiMessageCorpconversationAsyncsendV2Request();
        $req-&gt;setAgentId($this-&gt;AgentId);
        $req-&gt;setUseridList('XXX');
        $req-&gt;setToAllUser(false);

        /*
        $msg = array(
            "msgtype" =&gt; "text",
            "text" =&gt; ["content"=&gt;"12333"],
            );
        */
        /*
        $msg = array(
            "msgtype" =&gt; "link",
            "link" =&gt; [
                "picUrl" =&gt; "https://n.com/gztp4.png",
                "messageUrl" =&gt; "https://n.com",
                "text" =&gt; "text",
                "title" =&gt; "title"
                ]
            );
        */
        $msg = array(
            "msgtype" =&gt; "link",
            "link" =&gt; [
                "picUrl" =&gt; "https://n.com/gztp4.png",
                "messageUrl" =&gt; "dingtalk://dingtalkclient/action/openapp?XXX",
                "text" =&gt; "text",
                "title" =&gt; "title"
                ]
            );
        $req-&gt;setMsg($msg);

        $resp = $c-&gt;execute($req, $accessToken, "https://oapi.dingtalk.com/topapi/message/corpconversation/asyncsend_v2");
        var_dump($resp);
    }


    // 获取部门列表
    function DepartmentListsub($depid = 1)
    {
        $accessToken = $this-&gt;gettoken();

        $c = new DingTalkClient(DingTalkConstant::$CALL_TYPE_OAPI, DingTalkConstant::$METHOD_POST , DingTalkConstant::$FORMAT_JSON);
        $req = new OapiV2DepartmentListsubRequest();
        $req-&gt;setDeptId($depid);
        $req-&gt;setLanguage("zh_CN");
        $resp = $c-&gt;execute($req, $accessToken, "https://oapi.dingtalk.com/topapi/v2/department/listsub");
        var_dump($resp);
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[腾讯地图--静态地图API]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/09/14/lang-web-staticmap/"/>
    <updated>2024-09-14T10:37:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/09/14/lang-web-staticmap</id>
    <content type="html"><![CDATA[<p><a href="https://lbs.qq.com/service/staticV2/staticGuide/staticDoc#9">https://lbs.qq.com/service/staticV2/staticGuide/staticDoc#9</a></p>

<h4>图标（markers）</h4>

<pre><code>        echo "&lt;td&gt;";
        $mstr = "&amp;markers=" . $latitude . "," . $longitude;
        $labels = "";
        $et = date('H时i分', strtotime($row-&gt;jstime));
        $labels = "&amp;labels=color:0xff0000|bgcolor:0x00ff00|位置{$et}|" . $latitude . "," . $longitude;
        $zoom = ($data['zoom'] == '') ? "" : "&amp;zoom={$data['zoom']}";
        $key = "key";
        $url = "https://apis.map.qq.com/ws/staticmap/v2/?size={$data['size']}{$zoom}&amp;key={$key}{$mstr}{$labels}";
        $pstr = sprintf("&lt;input type=button style='width:40px;vertical-align:baseline;color:blue;' value='%s' onclick=\"showimg('%s','%s')\"&gt;", '预览', $url, $row-&gt;jstime);
        echo $pstr;
        echo "&lt;/td&gt;";
</code></pre>

<h4>文本（labels） 路径（path）</h4>

<pre><code>
    if (!empty($path)) {
        $pn = count($path);
        if ($pn == 1) {
            $path[] = $path[0];
            $jstime[] = $jstime[0];
            $pn ++;
        }

        $mstr = "&amp;markers=" . $path[0] . "|" . $path[$pn - 1];

        //$path = array_reverse($path);
        $pathstr = "weight:3|" . implode('|', $path);

        $labels = "";
        if ($pn &gt; 1) {
            $st = date('H点i', strtotime($jstime[$pn-1]));
            $et = date('H点i', strtotime($jstime[0]));
            $labels = "&amp;labels=color:0xff0000|bgcolor:0x00aa00|起{$st}|{$path[$pn-1]}|止{$et}|{$path[0]}";
        }

        $zoom = ($data['zoom'] == '') ? "" : "&amp;zoom={$data['zoom']}";

        $key = "key";
        $url = "https://apis.map.qq.com/ws/staticmap/v2/?size={$data['size']}{$zoom}&amp;key={$key}&amp;path={$pathstr}{$mstr}{$labels}";

        echo "&lt;script&gt; document.getElementById('imgid0').src = '{$url}'; &lt;/script&gt;";

        $sm = strtotime($jstime[$pn-1]);
        $em = strtotime($jstime[0]);
        $mm = (int)(($em - $sm) / 60);
        $ss = (int)($em - $sm) % 60;
        $vv = ($em - $sm != 0) ? round($g1s / ($em - $sm), 2) : 0;
        $dstr= "耗时{$mm}分{$ss}秒; 速度{$vv}米/秒; 路程{$g1s}米; 直线{$disD}米";
        echo "&lt;script&gt; document.getElementById('sid').innerHTML = '{$dstr}'; &lt;/script&gt;";
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
