<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-05-16T17:25:48+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Centos8安装PHP8]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/05/16/lang-centos8-php8/"/>
    <updated>2024-05-16T17:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/05/16/lang-centos8-php8</id>
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/615971837">https://zhuanlan.zhihu.com/p/615971837</a></p>

<pre><code>    $ sudo dnf install -y epel-release
    $ sudo dnf install -y  http://rpms.remirepo.net/enterprise/remi-release-8.5.rpm  # remi-release-8.rpm 要求更高版本centos
    $ sudo dnf install -y dnf-utils
    $ sudo dnf module list php
    $ sudo dnf module reset php
    $ sudo dnf module install -y php:remi-8.0
    yum install php php-xml php-zip php-mbstring php-gd php-devel php-mysqlnd
</code></pre>

<hr />

<p>sudo dnf install -y php-fpm</p>

<p>systemctl status php-fpm</p>

<p>systemctl restart php-fpm</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php ci 数据缓存]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/23/lang-ci-cache/"/>
    <updated>2024-03-23T10:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/23/lang-ci-cache</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_30289299/article/details/115545367">https://blog.csdn.net/weixin_30289299/article/details/115545367</a></p>

<p>CI框架中有个比较好的查询优化，就是数据库缓存优化</p>

<h4>1.开启缓存</h4>

<p>在application/config.php中开启
<code>
    $db['default']['cache_on'] = TRUE;
</code></p>

<p>在application/config.php中开启</p>

<pre><code>    $db['default']['cachedir'] = './cache';
</code></pre>

<p>并在对应的目录中加一个可写缓存目录cache</p>

<h4>2. 在对应的查询中开启缓存语句</h4>

<p>打开缓存开关</p>

<pre><code>    $this-&gt;db-&gt;cache_on();

    $query = $this-&gt;db-&gt;query("SELECT * FROM mytable");
</code></pre>

<p>使下面这条查询不被缓存</p>

<pre><code>    $this-&gt;db-&gt;cache_off();

    $query = $this-&gt;db-&gt;query("SELECT * FROM members WHERE member_id = '$current_user'");

    // Turn caching back on

    $this-&gt;db-&gt;cache_on();

    $query = $this-&gt;db-&gt;query("SELECT * FROM another_table");
</code></pre>

<h4>3. 添加相应的 清空缓存</h4>

<p>缓存不会自动删除 只能手动删除</p>

<p>这样 你可以在对应的 增改删 语句中清除缓存 就ok了</p>

<p>清空所有缓存</p>

<pre><code>    $this-&gt;db-&gt;cache_delete_all()
</code></pre>

<h5>清空单个缓存</h5>

<p>example.com/index.php/blog/comments的页面, 缓存系统会把所有生成的缓存文件放进</p>

<p>一个以 blog+comments做为名称的文件夹里. 如果您要删除关于刚才提到的这个例子与</p>

<p>之对应的缓存文件 需要执行以下代码:</p>

<pre><code>    $this-&gt;db-&gt;cache_delete('/blog', 'comments');
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax使用FormData上传文件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-FormData/"/>
    <updated>2024-02-26T20:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-FormData</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/suflowers1700218/p/14230852.html">https://www.cnblogs.com/suflowers1700218/p/14230852.html</a></p>

<h4>1 使用form表单初始化FormData对象方式上传文件</h4>

<pre><code>    &lt;form id="uploadForm" enctype="multipart/form-data"&gt;
        &lt;input id="file" type="file" name="file"/&gt;
        &lt;button id="upload" type="button"&gt;upload&lt;/button&gt;
    &lt;/form&gt;

    &lt;script&gt;
    $("#upload").click(function () {
        $.ajax({
            url: '/Default/UploadFile',
            type: 'POST',
            cache: false,
            data: new FormData($('#uploadForm')[0]),
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.result)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>

<p>这里要注意几点：</p>

<pre><code>    processData设置为false。因为data值是FormData对象，不需要对数据做处理。

    &lt;form&gt;标签添加 enctype="multipart/form-data" 属性。

    cache设置为false，上传文件不需要缓存。

    contentType设置为false，不设置contentType值，因为是由&lt;form&gt;表单构造的FormData对象，且已经声明了属性 enctype="multipart/form-data"，所以这里设置为false。

    上传后，服务器端代码需要使用从查询参数名为file获取文件输入流对象，因为&lt;input&gt;中声明的是name="file"
</code></pre>

<h4>2.使用FormData对象添加字段方式上传文件</h4>

<pre><code>    &lt;script&gt;
    $("#upload").click(function () {
        var formData = new FormData();
        formData.append('file', $('#file')[0].files[0]);
        $.ajax({
            url: '/Default/UploadFileByFormData',
            type: 'POST',
            cache: false,
            data: formData,
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.result)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>

<p>这里有几处不一样：</p>

<pre><code>    append()的第二个参数应是文件对象，即$('#file')[0].files[0]。

    contentType也要设置为‘false’。

    从代码$('#file')[0].files[0]中可以看到一个&lt;input type="file"&gt;标签能够上传多个文件，

    只需要在&lt;input type="file"&gt;里添加multiple或multiple="multiple"属性。
</code></pre>

<h4>3. Ajax使用FormData上传多个文件</h4>

<p>在 input type=&ldquo;file&rdquo; 里添加 multiple=&ldquo;multiple&rdquo; 属性，选择文件时，按住Ctrl键或Shift键选择多个文件</p>

<pre><code>    &lt;script type="text/javascript"&gt;
    $("#upload").click(function () {
        var formData = new FormData();
        for (var i = 0; i &lt; $('#file')[0].files.length; i++) {
            formData.append('files', $('#file')[0].files[i]);
        }
        $.ajax({
            url: '/Default/UploadFilesByFormData',
            type: 'POST',
            cache: false,
            data: formData,
            processData: false,
            contentType: false,
            success: function (data) {
                alert(data.message)
            }
        }).fail(function (res) {
            alert("系统错误")
        });
    });
    &lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pdf预览 jquery.media.js]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-pdf-view/"/>
    <updated>2024-02-26T20:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-pdf-view</id>
    <content type="html"><![CDATA[<p><a href="https://huaweicloud.csdn.net/639fed54dacf622b8df90495.html">https://huaweicloud.csdn.net/639fed54dacf622b8df90495.html</a></p>

<pre><code>    &lt;script src="jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="jquery.media.js" type="text/javascript"&gt;&lt;/script&gt;

    &lt;a class='media' href='url/a.pdf'&gt;预览&lt;/a&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript随机打乱数组]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/lang-web-shuffle/"/>
    <updated>2024-02-26T20:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/lang-web-shuffle</id>
    <content type="html"><![CDATA[<p><a href="https://www.coder.work/article/3779797">https://www.coder.work/article/3779797</a></p>

<pre><code>    const shuffle = ([...array]) =&gt; {
        let i = 0;
        let j = 0;
        let temp = null;

        for (i = array.length - 1; i &gt; 0; i -= 1) {
            j = Math.floor(Math.random() * (i + 1));
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }

    id2nos = shuffle(id2nos);
</code></pre>
]]></content>
  </entry>
  
</feed>
