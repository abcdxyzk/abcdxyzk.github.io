<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~c | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~c/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-10-27T09:30:41+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[localtime函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/08/09/lang-c-localtime/"/>
    <updated>2024-08-09T15:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/08/09/lang-c-localtime</id>
    <content type="html"><![CDATA[<p><a href="https://www.php.cn/faq/631443.html">https://www.php.cn/faq/631443.html</a></p>

<p>localtime函数的原型是
<code>
    struct tm *localtime(const time_t *timep);
</code></p>

<p>这个函数接受一个指向 time_t 类型的指针作为参数，返回一个指向structtm类型的指针，表示本地时间。</p>

<p>localtime是一个常用的函数，它可以将一个时间戳转换为一个本地时间的结构体。</p>

<p>time_t 是一个表示时间戳的数据类型，它通常是一个长整型(long int)，表示自 1970 年 1 月 1 日以来经过的秒数。structtm 是一个表示日期和时间的结构体，它包含了年、月、日、时、分、秒等信息。</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;time.h&gt;

    int main()
    {
        time_t timestamp = time(NULL);          // 获取当前的时间戳
        structtm *local_time = localtime(timestamp);    // 将时间戳转换为本地时间

        // 输出本地时间的各个字段
        printf("Year: %d\n", local_time-&gt;tm_year + 1900);   // 加1900是为了得到实际的年份
        printf("Month: %d\n", local_time-&gt;tm_mon + 1);      // 加1是为了得到实际的月份(1-12月)
        printf("Day: %d\n", local_time-&gt;tm_mday);
        printf("Hour: %d\n", local_time-&gt;tm_hour);
        printf("Minute: %d\n", local_time-&gt;tm_min);
        printf("Second: %d\n", local_time-&gt;tm_sec);
        printf("Day of week: %d\n", local_time-&gt;tm_wday);   // 周几，从0开始计数，0表示星期一，6表示星期日
        printf("Day of year: %d\n", local_time-&gt;tm_yday);   // 一年中的第几天，从0开始计数，0表示1月1日，365表示12月31日
        printf("Zone: %s\n", asctime(local_time));      // 输出本地时间的字符串表示，例如："Wed Jun 30 21:49:08 1993\n"

        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C2 A0 不可见字符到底是什么？半角非中断空格]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/space/"/>
    <updated>2023-07-09T16:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/space</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qfzhangwei/article/details/89505441">https://blog.csdn.net/qfzhangwei/article/details/89505441</a></p>

<p>首先看下 UTF-8 编码 C2 A0 代表的含义：<a href="https://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec">https://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec</a></p>

<p><img src="/images/lang/20230709-0.png" alt="" /></p>

<p><img src="/images/lang/20230709-1.png" alt="" /></p>

<p>翻译过来就是：半角非中断空格</p>

<p>这是什么鬼？</p>

<p>长这样，你看到了吗？我没看到 ?因为就是不可见的</p>

<p>unicode non-breaking space</p>

<p>建议 替换位正常的空格</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux编程之UDP SOCKET]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/27/c-udp/"/>
    <updated>2022-11-27T19:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/27/c-udp</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/skyfsm/p/6287787.html">https://www.cnblogs.com/skyfsm/p/6287787.html</a></p>

<h2>一、基本的udp socket编程</h2>

<h4>1. UDP编程框架</h4>

<p>要使用UDP协议进行程序开发，我们必须首先得理解什么是什么是UDP？这里简单概括一下。</p>

<p>UDP（user datagram protocol）的中文叫用户数据报协议，属于传输层。UDP是面向非连接的协议，它不与对方建立连接，而是直接把我要发的数据报发给对方。所以UDP适用于一次传输数据量很少、对可靠性要求不高的或对实时性要求高的应用场景。正因为UDP无需建立类如三次握手的连接，而使得通信效率很高。</p>

<p>UDP的应用非常广泛，比如一些知名的应用层协议（SNMP、DNS）都是基于UDP的，想一想，如果SNMP使用的是TCP的话，每次查询请求都得进行三次握手，这个花费的时间估计是使用者不能忍受的，因为这会产生明显的卡顿。所以UDP就是SNMP的一个很好的选择了，要是查询过程发生丢包错包也没关系的，我们再发起一个查询就好了，因为丢包的情况不多，这样总比每次查询都卡顿一下更容易让人接受吧。</p>

<p>UDP通信的流程比较简单，因此要搭建这么一个常用的UDP通信框架也是比较简单的。以下是UDP的框架图。</p>

<p><img src="/images/lang/20221127-1.jpg" alt="" /></p>

<p>由以上框图可以看出，客户端要发起一次请求，仅仅需要两个步骤（socket和sendto），而服务器端也仅仅需要三个步骤即可接收到来自客户端的消息（socket、bind、recvfrom）。</p>

<h4>2. UDP程序设计常用函数</h4>

<pre><code>    #include &lt;sys/types.h&gt;          
    #include &lt;sys/socket.h&gt;
    int socket(int domain, int type, int protocol);
</code></pre>

<p>参数domain:用于设置网络通信的域，socket根据这个参数选择信息协议的族</p>

<pre><code>    Name                                     Purpose                         
    AF_UNIX, AF_LOCAL              Local communication              
    AF_INET                        IPv4 Internet protocols          //用于IPV4
    AF_INET6                       IPv6 Internet protocols          //用于IPV6
    AF_IPX                         IPX - Novell protocols
    AF_NETLINK                     Kernel user interface device     
    AF_X25                         ITU-T X.25 / ISO-8208 protocol   
    AF_AX25                        Amateur radio AX.25 protocol
    AF_ATMPVC                      Access to raw ATM PVCs
    AF_APPLETALK                   AppleTalk                        
    AF_PACKET                      Low level packet interface       
    AF_ALG                         Interface to kernel crypto API
</code></pre>

<p>对于该参数我们仅需熟记AF_INET和AF_INET6即可
 </p>

<h4>小插曲：PF_XXX和AF_XXX</h4>

<p>我们在看Linux网络编程相关代码时会发现PF_XXX和AF_XXX会混着用，他们俩有什么区别呢？以下内容摘自《UNP》。</p>

<p><code>AF_</code> 前缀表示地址族（Address Family），而<code>PF_</code>前缀表示协议族（Protocol Family）。历史上曾有这样的想法：单个协议族可以支持多个地址族，<code>PF_</code>的值可以用来创建套接字，而<code>AF_</code>值用于套接字的地址结构。但实际上，支持多个地址族的协议族从来就没实现过，而头文件 &lt;sys/socket.h> 中为一给定的协议定义的<code>PF_</code>值总是与此协议的<code>AF_</code>值相同。
所以我在实际编程时还是偏向于使用AF_XXX。
 
参数type（只列出最重要的三个）:
<code>
    SOCK_STREAM         Provides sequenced, reliable, two-way, connection-based byte streams.   //用于TCP
    SOCK_DGRAM          Supports datagrams (connectionless, unreliable messages ). //用于UDP
    SOCK_RAW            Provides raw network protocol access.  //RAW类型，用于提供原始网络访问
</code></p>

<p>参数protocol：置0即可</p>

<p>返回值：</p>

<p>成功：非负的文件描述符</p>

<p>失败：-1
 
<code>
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
            const struct sockaddr *dest_addr, socklen_t addrlen);
</code></p>

<p>第一个参数sockfd:正在监听端口的套接口文件描述符，通过socket获得<br/>
第二个参数buf：发送缓冲区，往往是使用者定义的数组，该数组装有要发送的数据<br/>
第三个参数len:发送缓冲区的大小，单位是字节<br/>
第四个参数flags:填0即可<br/>
第五个参数dest_addr:指向接收数据的主机地址信息的结构体，也就是该参数指定数据要发送到哪个主机哪个进程<br/>
第六个参数addrlen:表示第五个参数所指向内容的长度</p>

<p>返回值：</p>

<p>成功：返回发送成功的数据长度</p>

<p>失败： -1</p>

<pre><code>    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
            struct sockaddr *src_addr, socklen_t *addrlen);
</code></pre>

<p>第一个参数sockfd:正在监听端口的套接口文件描述符，通过socket获得<br/>
第二个参数buf：接收缓冲区，往往是使用者定义的数组，该数组装有接收到的数据<br/>
第三个参数len:接收缓冲区的大小，单位是字节<br/>
第四个参数flags:填0即可<br/>
第五个参数src_addr:指向发送数据的主机地址信息的结构体，也就是我们可以从该参数获取到数据是谁发出的<br/>
第六个参数addrlen:表示第五个参数所指向内容的长度</p>

<p>返回值：</p>

<p>成功：返回接收成功的数据长度</p>

<p>失败： -1
 
<code>
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    int bind(int sockfd, const struct sockaddr* my_addr, socklen_t addrlen);
</code></p>

<p>第一个参数sockfd:正在监听端口的套接口文件描述符，通过socket获得<br/>
第二个参数my_addr:需要绑定的IP和端口<br/>
第三个参数addrlen：my_addr的结构体的大小</p>

<p>返回值：</p>

<p>成功：0</p>

<p>失败：-1
 
<code>
    #include &lt;unistd.h&gt;
    int close(int fd);
</code></p>

<p>close函数比较简单，只要填入socket产生的fd即可。</p>

<h4>3. 搭建UDP通信框架</h4>

<p>server：
```
    #include &lt;stdio.h>
    #include &lt;sys/types.h>
    #include &lt;sys/socket.h>
    #include &lt;netinet/in.h>
    #include &lt;string.h></p>

<pre><code>#define SERVER_PORT 8888
#define BUFF_LEN 1024

void handle_udp_msg(int fd)
{
    char buf[BUFF_LEN];  //接收缓冲区，1024字节
    socklen_t len;
    int count;
    struct sockaddr_in clent_addr;  //clent_addr用于记录发送方的地址信息
    while (1) {
        memset(buf, 0, BUFF_LEN);
        len = sizeof(clent_addr);
        count = recvfrom(fd, buf, BUFF_LEN, 0, (struct sockaddr*)&amp;clent_addr, &amp;len);  //recvfrom是拥塞函数，没有数据就一直拥塞
        if (count == -1) {
            printf("recieve data fail!\n");
            return;
        }
        printf("client:%s\n",buf);  //打印client发过来的信息
        memset(buf, 0, BUFF_LEN);
        sprintf(buf, "I have recieved %d bytes data!\n", count);  //回复client
        printf("server:%s\n",buf);  //打印自己发送的信息给
        sendto(fd, buf, BUFF_LEN, 0, (struct sockaddr*)&amp;clent_addr, len);  //发送信息给client，注意使用了clent_addr结构体指针

    }
}


/*
    server:
        socket--&gt;bind--&gt;recvfrom--&gt;sendto--&gt;close
*/

int main(int argc, char* argv[])
{
    int server_fd, ret;
    struct sockaddr_in ser_addr; 

    server_fd = socket(AF_INET, SOCK_DGRAM, 0); //AF_INET:IPV4;SOCK_DGRAM:UDP
    if (server_fd &lt; 0) {
        printf("create socket fail!\n");
        return -1;
    }

    memset(&amp;ser_addr, 0, sizeof(ser_addr));
    ser_addr.sin_family = AF_INET;
    ser_addr.sin_addr.s_addr = htonl(INADDR_ANY); //IP地址，需要进行网络序转换，INADDR_ANY：本地地址
    ser_addr.sin_port = htons(SERVER_PORT);  //端口号，需要网络序转换

    ret = bind(server_fd, (struct sockaddr*)&amp;ser_addr, sizeof(ser_addr));
    if (ret &lt; 0) {
        printf("socket bind fail!\n");
        return -1;
    }

    handle_udp_msg(server_fd);   //处理接收到的数据

    close(server_fd);
    return 0;
}
</code></pre>

<pre><code>
client：
</code></pre>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;string.h&gt;

#define SERVER_PORT 8888
#define BUFF_LEN 512
#define SERVER_IP "172.0.5.182"


void udp_msg_sender(int fd, struct sockaddr* dst)
{

    socklen_t len;
    struct sockaddr_in src;
    while (1) {
        char buf[BUFF_LEN] = "TEST UDP MSG!\n";
        len = sizeof(*dst);
        printf("client:%s\n",buf);  //打印自己发送的信息
        sendto(fd, buf, BUFF_LEN, 0, dst, len);
        memset(buf, 0, BUFF_LEN);
        recvfrom(fd, buf, BUFF_LEN, 0, (struct sockaddr*)&amp;src, &amp;len);  //接收来自server的信息
        printf("server:%s\n",buf);
        sleep(1);  //一秒发送一次消息
    }
}

/*
    client:
        socket--&gt;sendto--&gt;revcfrom--&gt;close
*/

int main(int argc, char* argv[])
{
    int client_fd;
    struct sockaddr_in ser_addr;

    client_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (client_fd &lt; 0) {
        printf("create socket fail!\n");
        return -1;
    }

    memset(&amp;ser_addr, 0, sizeof(ser_addr));
    ser_addr.sin_family = AF_INET;
    //ser_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
    ser_addr.sin_addr.s_addr = htonl(INADDR_ANY);  //注意网络序转换
    ser_addr.sin_port = htons(SERVER_PORT);  //注意网络序转换

    udp_msg_sender(client_fd, (struct sockaddr*)&amp;ser_addr);

    close(client_fd);

    return 0;
}
</code></pre>

<pre><code>
以上的框架用于一台主机不同端口的UDP通信，现象如下：

我们先建立server端，等待服务；然后我们建立client端请求服务。

server端：

 
client端：
 
自己主机跟自己通信不是很爽，我们想跟其他主机通信怎么搞？很简单，上面client的代码的第49行的注释打开，并注释掉下面那行，在宏定义里填入自己想通信的serverip就可以了。现象如下：

server端：
 
client端：
 
这样我们就实现了主机172.0.5.183和172.0.5.182之间的网络通信。
 
UDP通用框架搭建完成，我们可以利用该框架跟指定主机进行通信了。
 
如果想学习UDP的基础知识，以上的知识就足够了；如果想继续深入学习一下UDP SOCKET一些高级知识（奇技淫巧），可以花点时间往下看。
 
## 二、高级udp socket编程

#### 1. udp的connect函数

什么？UDP也有conenct？connect不是用于TCP编程的吗？

是的，UDP网络编程中的确有connect函数，但它仅仅用于表示确定了另一方的地址，并没有其他含义。

有了以上认识后，我们可以知道UDP套接字有以下区分：

1）未连接的UDP套接字

2）已连接的UDP套接字

对于未连接的套接字，也就是我们常用的的UDP套接字，我们使用的是sendto/recvfrom进行信息的收发，目标主机的IP和端口是在调用sendto/recvfrom时确定的；

在一个未连接的UDP套接字上给两个数据报调用sendto函数内核将执行以下六个步骤：

1）连接套接字  
2）输出第一个数据报  
3）断开套接字连接  
4）连接套接字  
5）输出第二个数据报  
6）断开套接字连接

对于已连接的UDP套接字，必须先经过connect来向目标服务器进行指定，然后调用read/write进行信息的收发，目标主机的IP和端口是在connect时确定的，也就是说，一旦conenct成功，我们就只能对该主机进行收发信息了。

已连接的UDP套接字给两个数据报调用write函数内核将执行以下三个步骤：

1）连接套接字  
2）输出第一个数据报  
3）输出第二个数据报  

由此可以知道，当应用进程知道给同一个目的地址的端口号发送多个数据报时，显示套接字效率更高。

下面给出带connect函数的UDP通信框架

![](/images/lang/20221127-2.jpg)

具体框架代码不再给出了，因为跟上面不带connect的代码大同小异，仅仅多出一个connect函数处理而已，下面给出处理conenct()的基本步骤。
</code></pre>

<pre><code>void udp_handler(int s, struct sockaddr* to)
{
    char buf[1024] = "TEST UDP !";
    int n = 0;
    connect(s, to, sizeof(*to);

    n = write(s, buf, 1024);

    read(s, buf, n);
}
</code></pre>

<pre><code> 
#### 2. udp报文丢失问题

因为UDP自身的特点，决定了UDP会相对于TCP存在一些难以解决的问题。第一个就是UDP报文缺失问题。

在UDP服务器客户端的例子中，如果客户端发送的数据丢失，服务器会一直等待，直到客户端的合法数据过来。如果服务器的响应在中间被路由丢弃，则客户端会一直阻塞，直到服务器数据过来。

防止这样的永久阻塞的一般方法是给客户的recvfrom调用设置一个超时，大概有这么两种方法：

1）使用信号SIGALRM为recvfrom设置超时。首先我们为SIGALARM建立一个信号处理函数，并在每次调用前通过alarm设置一个5秒的超时。如果recvfrom被我们的信号处理函数中断了，那就超时重发信息；若正常读到数据了，就关闭报警时钟并继续进行下去。

2）使用select为recvfrom设置超时

设置select函数的第五个参数即可。

 
#### 3. udp报文乱序问题

所谓乱序就是发送数据的顺序和接收数据的顺序不一致，例如发送数据的顺序为A、B、C，但是接收到的数据顺序却为：A、C、B。产生这个问题的原因在于，每个数据报走的路由并不一样，有的路由顺畅，有的却拥塞，这导致每个数据报到达目的地的顺序就不一样了。UDP协议并不保证数据报的按序接收。

解决这个问题的方法就是发送端在发送数据时加入数据报序号，这样接收端接收到报文后可以先检查数据报的序号，并将它们按序排队，形成有序的数据报。


#### 4. udp流量控制问题

总所周知，TCP有滑动窗口进行流量控制和拥塞控制，反观UDP因为其特点无法做到。UDP接收数据时直接将数据放进缓冲区内，如果用户没有及时将缓冲区的内容复制出来放好的话，后面的到来的数据会接着往缓冲区放，当缓冲区满时，后来的到的数据就会覆盖先来的数据而造成数据丢失（因为内核使用的UDP缓冲区是环形缓冲区）。因此，一旦发送方在某个时间点爆发性发送消息，接收方将因为来不及接收而发生信息丢失。

解决方法一般采用增大UDP缓冲区，使得接收方的接收能力大于发送方的发送能力。
</code></pre>

<pre><code>int n = 220 * 1024; //220kB
setsocketopt(sockfd, SOL_SOCKET, SO_RCVBUF, &amp;n, sizeof(n));
</code></pre>

<p>```</p>

<p>这样我们就把接收方的接收队列扩大了，从而尽量避免丢失数据的发生。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程通信--pipe管道]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/11/19/lang-c-pipe/"/>
    <updated>2018-11-19T02:45:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/11/19/lang-c-pipe</id>
    <content type="html"><![CDATA[<h4>Linux函数原型</h4>

<pre><code>    #include &lt;unistd.h&gt;

    int pipe(int filedes[2]);
</code></pre>

<p>filedes[0]用于读出数据，读取时必须关闭写入端，即close(filedes[1]);</p>

<p>filedes[1]用于写入数据，写入时必须关闭读取端，即close(filedes[0])。</p>

<h4>程序实例：</h4>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;unistd.h&gt;

    #define MAXLINE 20
    int main(void)
    {
        int n;
        int fd[2];
        pid_t pid;
        char line[MAXLINE];

        if (pipe(fd) &lt; 0) {             /* 先建立管道得到一对文件描述符 */
            return -1;
        }

        if ((pid = fork()) &lt; 0)             /* 父进程把文件描述符复制给子进程 */
            return -2;
        else if(pid &gt; 0) {              /* 父进程写 */
            close(fd[0]);               /* 关闭读描述符 */
            write(fd[1], "\nhello world\n", 14);
        } else {                            /* 子进程读 */
            close(fd[1]);               /* 关闭写端 */
            n = read(fd[0], line, MAXLINE);
            write(STDOUT_FILENO, line, n);
        }

        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进程通信--消息队列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/11/15/lang-c-msg/"/>
    <updated>2018-11-15T01:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/11/15/lang-c-msg</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lh2016rocky/article/details/70256844">https://blog.csdn.net/lh2016rocky/article/details/70256844</a></p>

<p>消息队列提供了一种由一个进程向另一个进程发送块数据的方法。另外，每一个数据块被看作有一个类型，而接收进程可以独立接收具有不同类型的数据块。消息队列的好处在于我们几乎可以完全避免同步问题，并且可以通过发送消息屏蔽有名管道的问题。更好的是，我们可以使用某些紧急方式发送消息。坏处在于，与管道类似，在每一个数据块上有一个最大尺寸限制，同时在系统中所有消息队列上的块尺寸上也有一个最大尺寸限制。</p>

<p>尽管有这些限制，但是X/Open规范并没有定义这些限制的具体值，除了指出超过这些尺寸是某些消息队列功能失败的原因。Linux系统有两个定义，MSGMAX与MSGMNB，这分别定义单个消息与一个队列的最大尺寸。这些宏定义在其他系统上也许并不相同，甚至也许就不存在。</p>

<h4>消息队列函数定义如下：</h4>

<pre><code>    #include &lt;sys/msg.h&gt;

    int msgget(key_t key, int msgflg);
    int msgrcv(int msqid, void *msg_ptr, size_t msg_sz, long int msgtype, int msgflg);
    int msgsnd(int msqid, const void *msg_ptr, size_t msg_sz, int msgflg);
    int msgctl(int msqid, int cmd, struct msqid_ds *buf);
</code></pre>

<p>与信息号和共享内存一样，头文件sys/types.h与sys/ipc.h通常也是需要的。</p>

<h4>msgget</h4>

<p>我们可以使用msgget函数创建与访问一个消息队列：
<code>
    int msgget(key_t key, int msgflg);
</code></p>

<p>与其他IPC工具类似，程序必须提供一个指定一个特定消息队列的key值。特殊值IPC_PRIVATE创建一个私有队列，这在理论上只可以为当前进程所访问。与信息量和共享内存一样，在某些Linux系统上，消息队列并不是私有的。因为私有队列用处较少，因而这并不是一个严重问题。与前面一样，第二个参数，msgflg，由9个权限标记组成。要创建一个新的消息队列，由IPC_CREAT特殊位必须与其他的权限位进行或操作。设置IPC_CREAT标记与指定一个已存在的消息队列并不是错误。如果消息队列已经存在，IPC_CREAT标记只是简单的被忽略。</p>

<p>如果成功，msgget函数会返回一个正数作为队列标识符，如果失败则会返回-1。</p>

<h4>msgsnd</h4>

<p>msgsnd函数允许我们将消息添加到消息队列：
<code>
    int msgsnd(int msqid, const void *msg_ptr, size_t msg_sz, int msgflg);
</code></p>

<p>消息结构由两种方式来限定。第一，他必须小于系统限制，第二，必须以long int开始，这在接收函数中会用作一个消息类型。当我们在使用消息时，最好是以如下形式来定义我们的消息结构：</p>

<pre><code>    struct my_message {
        long int message_type;
        /* The data you wish to transfer */
    }
</code></pre>

<p>因为message_type用于消息接收，所以我们不能简单的忽略他。我们必须定义我们自己的数据结构来包含并对其进行初始化，从而他可以包含一个可知的值。</p>

<p>第一个参数，msgid，是由msgget函数所返回的消息队列标识符。</p>

<p>第二个参数，msg_ptr，是一个指向要发送消息的指针，正如前面所描述的，这个消息必须以long int类型开始。</p>

<p>第三个参数，msg_sz，是由msg_ptr所指向的消息的尺寸。这个尺寸必须不包含long int消息类型。</p>

<p>第四个参数，msgflg，控制如果当前消息队列已满或是达到了队列消息的系统限制时如何处理。如果msgflg标记设置了IPC_NOWAIT，函数就会立即返回而不发送消息，并且返回值为-1。如果msgflg标记清除了IPC_NOWAIT标记，发送进程就会被挂起，等待队列中有可用的空间。</p>

<p>如果成功，函数会返回0，如果失败，则会返回-1。如果调用成功，系统就会复制一份消息数据并将其放入消息队列中。</p>

<h4>msgrcv</h4>

<p>msgrcv函数由一个消息队列中收取消息：
<code>
    int msgrcv(int msqid, void *msg_ptr, size_t msg_sz, long int msgtype, int msgflg);
</code></p>

<p>第一个参数，msqid，是由msgget函数所返回的消息队列标记符。</p>

<p>第二个参数，msg_ptr，是一个指向将要接收消息的指针，正如在msgsnd函数中所描述的，这个消息必须以long int类型开始。</p>

<p>第三个参数，msg_sz，是由msg_ptr所指向的消息的尺寸，并不包含long int消息类型。</p>

<p>第四个参数，msgtype，是一个long int类型，允许一个接收优先级形式的实现。如果msgtype的值为0，队列中第一个可用的消息就会被接收。如果其值大于0，具有相同消息类型的第一个消息就会被接收。如果其值小于0，第一个具有相同类型或是小于msgtype绝对值的消息就会被接收。</p>

<p>这听起来要比实际操作复杂得多。如果我们只是简单的希望以其发送的顺序来接收消息，我们可以将msgtype设置为0。如果我们希望接收特殊消息类型的消息，我们可以将msgtype设置为等于这个值。如果我们希望接收消息类型为n或是小于n的值，我们可以将msgtype设置为-n。</p>

<p>第五个参数，msgflg，控制当没有合适类型的消息正在等待被接收时如何处理。如果在msgflg中设置了IPC_NOWAIT位，调用就会立即返回，而返回值为-1。如果msgflg标记中消除了IPC_NOWAIT位，进程就会被挂起，等待一个合适类型的消息到来。</p>

<p>如果成功，msgrcv会返回放入接收缓冲区中的字节数，消息会被拷贝到由msg_ptr所指向的用户分配缓冲区中，而数据就会由消息队列中删除。如果失败则会返回-1。</p>

<h4>msgctl</h4>

<p>最后一个消息队列函数是msgctl，这与共享内存中的控制函数十分类似。
<code>
    int msgctl(int msqid, int command, struct msqid_ds *buf);
</code></p>

<p>msqid_ds结构至少包含下列成员：
<code>
    struct msqid_ds {
        uid_t msg_perm.uid;
        uid_t msg_perm.gid
        mode_t msg_perm.mode;
    }
</code>
第一个参数，msqid，是由msgget函数所返回的标记符。</p>

<p>第二个参数，command，是要执行的动作。他可以取下面三个值：</p>

<p>命令        描述<br/>
IPC_STAT    设置msqid_ds结构中的数据来反射与消息队列相关联的值。<br/>
IPC_SET     如果进程有权限这样做，这个命令会设置与msqid_ds数据结构中所提供的消息队列相关联的值。<br/>
IPC_RMID    删除消息队列。</p>

<h4>msgrecv.c</h4>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/ipc.h&gt;
    #include &lt;sys/msg.h&gt;

    #define MSG_KEY 3

    struct my_msg_st
    {
        long int my_msg_type;
        char some_text[BUFSIZ];
    };

    int main()
    {
        int running = 1;
        int msgid;
        struct my_msg_st some_data;
        long int msg_to_receive = 0;
        msgid = msgget(MSG_KEY, 0666|IPC_CREAT);
        if (msgid == -1) {
            fprintf(stderr,"msgget failed with error: %d\n", errno);
            return -1;
        }
        while (running) {
            if (msgrcv(msgid, (void *)&amp;some_data, BUFSIZ, msg_to_receive, 0) == -1) {
                fprintf(stderr, "msgrcv failed with errno: %d\n", errno);
                return -2;
            }
            printf("recvmsg: %s", some_data.some_text);
            if (strncmp(some_data.some_text, "end", 3) == 0)
                running = 0;
        }
        if (msgctl(msgid, IPC_RMID, 0) == -1) {
            fprintf(stderr, "msgctl(IPC_RMID) failed\n");
            return -3;
        }
        return 0;
    }
</code></pre>

<h4>msgsend.c</h4>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;string.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/ipc.h&gt;
    #include &lt;sys/msg.h&gt;

    #define MAX_TEXT 512
    #define MSG_KEY 3

    struct my_msg_st
    {
        long int my_msg_type;
        char some_text[MAX_TEXT];
    };

    int main()
    {
        int running = 1;
        struct my_msg_st some_data;
        int msgid;
        char buffer[BUFSIZ];
        msgid = msgget(MSG_KEY, 0666|IPC_CREAT);
        if (msgid == -1) {
            fprintf(stderr,"msgget failed with errno: %d\n", errno);
            return -1;
        }
        while (running) {
            printf("Enter some text: ");
            fgets(buffer, BUFSIZ, stdin);
            printf("You wrote: %s", buffer);

            some_data.my_msg_type = 1;
            strcpy(some_data.some_text, buffer);
            if (msgsnd(msgid, (void *)&amp;some_data, MAX_TEXT, 0) == -1) {
                fprintf(stderr, "msgsnd failed\n");
                return -2;
            }
            if (strncmp(some_data.some_text, "end", 3) == 0)
                running = 0;
        }
        if (msgctl(msgid, IPC_RMID, 0) == -1) {
            fprintf(stderr, "msgctl(IPC_RMID) failed\n");
            return -3;
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
