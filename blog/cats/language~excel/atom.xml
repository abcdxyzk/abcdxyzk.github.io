<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~excel | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~excel/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:22:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel 的列与数字转换]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/06/lang-excel/"/>
    <updated>2023-06-06T08:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/06/lang-excel</id>
    <content type="html"><![CDATA[<h4>Excel 的列与数字转换</h4>

<pre><code>    十进制   0 1 ... 9 10 11 ... 100 101
    按十进制 A B ... Z BA BB ... BAA BAB // Z=26  ZZ=26*26        ZZZ=26*26*26
    实际上   A B ... Z AA AB ... AAA AAB // Z=26  ZZ=26*26 + 26   ZZZ=26*26*26 + 26*26 + 26
        //                    转成公式  Z=26  ZZ=(Z)*26 + 26  ZZZ=(ZZ)*26 + 26
</code></pre>

<pre><code>    function id_to_xls($id)
    {
        $k = '';
        while (true) {
            $k = chr($id % 26 + ord('A')) . $k;
            $id -= 26;
            if ($id &lt; 0)
                break;
            $id = (int)($id / 26);
        }
        return $k;
    }

    function xls_to_id($xlsCol)
    {
        $hh = 0;
        for ($i = 0; $i &lt; strlen($xlsCol); $i ++) { // ZZ = 26*26 + 26
            $hh = $hh * 26;             //      26*26
            $hh += ord($xlsCol[$i]) - ord('A') + 1; //      26
        }
        return $hh - 1;
    }


    for ($i = 0; $i &lt; 26*26*26 + 26*26 + 26 + 10; $i ++) {
        $k = id_to_xls($i);
        $id = xls_to_id($k);
        echo $i, "\t", $k, "\t", $id, "\n";
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excel getOldCalculatedValue 忽略计算值]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/06/lang-excel-oldval/"/>
    <updated>2023-06-06T08:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/06/lang-excel-oldval</id>
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/ask/sof/111247127">https://cloud.tencent.com/developer/ask/sof/111247127</a></p>

<p><a href="https://blog.csdn.net/weixin_36251052/article/details/115960992">https://blog.csdn.net/weixin_36251052/article/details/115960992</a></p>

<p>XLS文件中的每个单元格都包含一个预先计算的值以及公式。如果我可以让PHPExcel在读取文件时不尝试计算公式(而只是按原样使用预先计算的值)</p>

<p>使用 getOldCalculatedValue() 将返回为在MS Excel中生成的公式单元格计算的最后一个值(即使这样,也可以在MS Excel中禁用计算,然后不会设置此值). PHPExcel生成的文件不会填充此值,因此它只提供默认值0.</p>

<p>一般来说,在尝试评估公式值时,应始终使用getCalculatedValue()</p>

<p><a href="https://www.codenong.com/4584963/">https://www.codenong.com/4584963/</a></p>

<p>如果不确定单元格的内容(包括值或公式)，我建议您首先检查该单元格是否具有公式，然后进行复制-相应地粘贴。在这种情况下，getOldCalculatedValue()非常有用。这是一个例子：</p>

<pre><code>    $code = $sheet-&gt;getCell('A'.$y)-&gt;getValue();
    if (strstr($code, '=') == true) {
        $code = $sheet-&gt;getCell('A'.$y)-&gt;getOldCalculatedValue();
    }
    $objPHPExcel-&gt;setActiveSheetIndex(0)-&gt;setCellValue('A'.$l, $code);
</code></pre>

<p>对于大型数据集，getCalculatedValue() 函数确实很麻烦，并且需要大量内存才能正确执行。</p>

<p><a href="https://www.codenong.com/5983845/">https://www.codenong.com/5983845/</a></p>

<p><a href="https://blog.csdn.net/weixin_30770783/article/details/98541565">https://blog.csdn.net/weixin_30770783/article/details/98541565</a></p>

<p>getValue() 获取的是公式本身</p>

<p>而通过 getCalculatedValue()会有对象     getFormattedValue() 获取到的是公式计算后的值</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python读写Excel，优化PHPExcel]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/07/10/lang-python-xlwt/"/>
    <updated>2021-07-10T09:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/07/10/lang-python-xlwt</id>
    <content type="html"><![CDATA[<p>用PHP_XLSXWriter导出的文件测试, python 的 trans.py 取不到值, 说明是类似 PHPExcel 的 getOldCalculatedValue, 也就是不计算公式</p>

<hr />

<p>PHPExcel getCalculatedValue() 可能很慢，一次需要30ms。预先有python处理后就很快了</p>

<pre><code>    yum install python-pip
    pip install xlrd==1.2.0 xlwt
</code></pre>

<hr />

<p><a href="https://www.cnblogs.com/caesar-id/p/11802440.html#top">https://www.cnblogs.com/caesar-id/p/11802440.html#top</a></p>

<pre><code>    #coding:utf-8
    import xlrd
    import xlwt
    import sys

    if len(sys.argv) != 3:
        print 'python export.py xlsx sheet'
        exit(1)

    filename = sys.argv[1]
    sheetname = sys.argv[2]

    data = xlrd.open_workbook(filename)
    #table = data.sheet_by_index(0)
    table = data.sheet_by_name(sheetname.decode('utf-8'))

    workbook = xlwt.Workbook(encoding = 'utf-8')
    worksheet = workbook.add_sheet(sheetname)

    for rn in range(table.nrows):
        line = table.row_values(rn)
        j = 0
        for v in line:
            worksheet.write(rn, j, line[j])
            j = j + 1

    workbook.save((filename+'.xls'))
</code></pre>
]]></content>
  </entry>
  
</feed>
