<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~jsp | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~jsp/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:07:16+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[idea Spring MVC]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-idea-mvc/"/>
    <updated>2020-12-20T18:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-idea-mvc</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/wormday/p/8435617.html">https://www.cnblogs.com/wormday/p/8435617.html</a></p>

<h4>创建Spring MVC项目</h4>

<p>File -> new -> Project&hellip; -> Spring -> Spring MVC</p>

<h4>配置</h4>

<p>run -> Edit Configurations&hellip;</p>

<p><img src="/images/lang/2020-12-20-1.png" alt="" /></p>

<p><img src="/images/lang/2020-12-20-2.png" alt="" /></p>

<p><img src="/images/lang/2020-12-20-3.png" alt="" /></p>

<h4>配置</h4>

<p>File -> Project Structure&hellip;</p>

<p><img src="/images/lang/2020-12-20-4.png" alt="" /></p>

<p><img src="/images/lang/2020-12-20-5.png" alt="" /></p>

<h4>运行</h4>

<p>浏览器输入地址 <a href="http://localhost:8080/index.jsp">http://localhost:8080/index.jsp</a></p>

<h2>添加Controller</h2>

<p>站点可以打开了，不过我们这个不是MVC，因为没有M、没有V也没有C</p>

<p>我们就从MVC中的C（Controller）开始，继续配置</p>

<p>在新建Controller之前，首先要建一个包，SpringMVC是没法运行在默认包下的，按照如下方式建包，</p>

<p>我建的包名称为：test</p>

<p>其实包名随意，但是必须要有。。。</p>

<p>再这个包下新建Java Class文件 MyController</p>

<pre><code>    package test;

    import org.springframework.ui.Model;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;
    import test.dao.BaseDao;

    import java.sql.*;

    @Controller
    @RequestMapping("/mvc")
    public class MyController {

        static BaseDao baseDB = new BaseDao();

        @RequestMapping("/hello")
        public String hello(Model model) {
            model.addAttribute("name","nameval");
            return "hello";
        }

        @RequestMapping("/db")
        public String db(Model model) {

            String ou = "";

            try {
                ResultSet rs  = baseDB.executeQuery("SELECT * FROM info;");
                while (rs.next()) {
                    ou = ou + rs.getString("id") + "   &amp;nbsp  " + rs.getString("name") + "  &amp;nbsp " + rs.getInt("val"); //将查询结果输出
                }
            } catch (Exception e) {
                return "err";
            }

            model.addAttribute("dv", ou);
            return "db";
        }
    }
</code></pre>

<p>也可以只把注解写在方法上，比如@RequestMapping(&ldquo;mvc/hello&rdquo;)</p>

<p>这个Controller的Action 地址应该是：</p>

<p><a href="http://localhost:8080/mvc/hello.form">http://localhost:8080/mvc/hello.form</a>   其实这个时候访问结果是404，因为后边还有不少配置没有做&hellip;</p>

<h2>修改 url-pattern（web.xml）</h2>

<p>先打开web\WEB-INF\web.xml文件</p>

<p>有关于ServletMapping的设置，通过这个设置，可以配置那些类型的url用那些servlet来处理</p>

<pre><code>    &lt;servlet&gt;
        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.form&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
</code></pre>

<p>结合这一段xml，我们可以看到,IDEA默认帮我配置了一个名字叫做dispatcher的Servlet</p>

<p>这个Servlet使用org.springframework.web.servlet.DispatcherServlet这个类来处理</p>

<p>这个Servlet对应的Url是<code>*.form</code></p>

<p>如果你跟我一样不喜欢每个MVC Url后边都带一个form，可以改成斜杠</p>

<pre><code>    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
</code></pre>

<p>如果你现在重新启动程序，然后继续访问<a href="http://localhost:8080/mvc/hello">http://localhost:8080/mvc/hello</a></p>

<p>发现，依旧404，并且伴随每次访问，都在Server的Output窗口有一个错误日志</p>

<p>org.springframework.web.servlet.PageNotFound.noHandlerFound No mapping found for HTTP request with URI [/mvc/hello] in DispatcherServlet with name &lsquo;dispatcher&rsquo;</p>

<p>意思就是没有找到相应的Controller，不但要把Controller的代码写好，还要告诉Spring(在这里其实是dispatcher servlet)去哪里找这些Controller。。。</p>

<p>作为验证，你可以在Controller里边加一个断点，然后刷新页面，程序根本就没有执行到Controller里边</p>

<h2>配置 component-scan（dispatcher-servlet.xml）</h2>

<p>component-scan就是告诉Servlet去哪里找到相应的Controller</p>

<p>打开 dispatcher-servlet.xml</p>

<p>在已经存在的<beans></beans>中间加上</p>

<pre><code>    &lt;context:component-scan base-package="test"/&gt;
</code></pre>

<p>再加上view前后缀
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans"
</span><span class='line'>   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>   xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>   xmlns:mvc="http://www.springframework.org/schema/mvc"
</span><span class='line'>   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;context:component-scan base-package="test"/&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- don't handle the static resource --&gt;
</span><span class='line'>&lt;mvc:default-servlet-handler /&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- if you use annotation you must configure following setting --&gt;
</span><span class='line'>&lt;mvc:annotation-driven /&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- configure the InternalResourceViewResolver --&gt;
</span><span class='line'>&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
</span><span class='line'>  id="internalResourceViewResolver"&gt;
</span><span class='line'>&lt;!-- 前缀 --&gt;
</span><span class='line'>&lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;
</span><span class='line'>&lt;!-- 后缀 --&gt;
</span><span class='line'>&lt;property name="suffix" value=".jsp" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/beans&gt;</span></code></pre></td></tr></table></div></figure>
base-package指定的就是存放Controller的包</p>

<p>做完这一步之后，重新启动项目，再次访问  <a href="http://localhost:8080/mvc/hello">http://localhost:8080/mvc/hello</a></p>

<p>这次应该还是404错误，不过比刚才的404错误前进了一大步</p>

<p>毕竟这次Controller已经执行了，如果刚才的断点没有去掉，你可以验证一下看看</p>

<p>这一回是因为是“hello”这个View找不到（我们刚才确实只是告诉他这个位置，但是从来没有创建过这个文件）</p>

<h2>添加视图文件(.jsp)</h2>

<p>在 web/WEB-INF/jsp 下创建 hello.jsp</p>

<pre><code>    &lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
    &lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Title&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    ${name}, Hello world!!!!
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<h2>通过 Model 向 View 传值</h2>

<p>通过上面的操作，已经完成了MVC中的(V和C)，M还没见影子，让我们继续修改</p>

<p>打开刚才定义的Controller 也就是 MyController.java文件</p>

<p>增加 ui.Model</p>

<h4>打开copy来的项目时</h4>

<p>要在 File -> Project Structure&hellip; -> Project Settings -> Project -> SDK -> new sdk -> JDK 主路经: /usr/lib/jvm/jdk-15.0.1</p>

<h4>err1: Unsupported class file major version 57</h4>

<p>File -> Settings&hellip;</p>

<p>Build, Execution, Deployment -> Compiler -> Java Compiler 修改 project bytecode version</p>

<h4>err2: java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener</h4>

<p>在IDEA中点击File > Project Structure > Artifacts > 在右侧Output Layout右击项目名，选择Put into Output Root。</p>

<p>执行后，在WEB-INF在增加了lib目录，里面是项目引用的jar包，点击OK。</p>

<p><img src="/images/lang/2020-12-20-6.jpeg" alt="" /></p>

<p><a href="https://github.com/abcdxyzk/idea_springmvc/raw/master/spring_mvc.tar.gz">mvc example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[idea 安装]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-idea/"/>
    <updated>2020-12-20T18:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-idea</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_41890694/article/details/88651723">https://blog.csdn.net/qq_41890694/article/details/88651723</a></p>

<p><a href="https://pan.baidu.com/s/1Nv7J-tBMvhfZXstsOmhs_w">linux 2018.3.5 下载，提取码: 1314</a></p>

<p><a href="https://pan.baidu.com/s/1YtYuDRCNc4FWiA2HkEMYSw">win 2018.3.5 下载，提取码: 1314</a></p>

<p><a href="https://pan.baidu.com/s/1spV2plTJR-BJonb-kz6YkA">JetbrainsIdesCrack-4.2-release.jar 下载，提取码: 1314</a></p>

<p>将 JetbrainsIdesCrack-4.2-release.jar 放到 bin 目录，对两个文件进行修改(idea.vmoptions和idea64.vmoptions)，在这两个文件的最后一行添加下面这段代码</p>

<p>win
<code>
    -javaagent:C:/IntelliJ IDEA 2018.3.5/bin/JetbrainsIdesCrack-4.2-release.jar
</code></p>

<p>linux
<code>
    -javaagent:/home/kk/IntelliJ_IDEA_2018.3.5/bin/JetbrainsIdesCrack-4.2-release.jar
</code></p>

<p>运行 idea，选择 Activation code(激活代码)</p>

<pre><code>    ThisCrackLicenseId-{
    "licenseId":"ThisCrackLicenseId",
    "licenseeName":"Suger",
    "assigneeName":"",
    "assigneeEmail":"642481395@qq.com",
    "licenseRestriction":"For This Crack, Only Test! Please support genuine!!!",
    "checkConcurrentUse":false,
    "products":[
    {"code":"II","paidUpTo":"2099-12-31"},
    {"code":"DM","paidUpTo":"2099-12-31"},
    {"code":"AC","paidUpTo":"2099-12-31"},
    {"code":"RS0","paidUpTo":"2099-12-31"},
    {"code":"WS","paidUpTo":"2099-12-31"},
    {"code":"DPN","paidUpTo":"2099-12-31"},
    {"code":"RC","paidUpTo":"2099-12-31"},
    {"code":"PS","paidUpTo":"2099-12-31"},
    {"code":"DC","paidUpTo":"2099-12-31"},
    {"code":"RM","paidUpTo":"2099-12-31"},
    {"code":"CL","paidUpTo":"2099-12-31"},
    {"code":"PC","paidUpTo":"2099-12-31"}
    ],
    "hash":"2911276/0",
    "gracePeriodDays":7,
    "autoProlongated":false}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsp 环境初始化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-init/"/>
    <updated>2020-12-20T17:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/20/lang-jsp-init</id>
    <content type="html"><![CDATA[<h2>jdk</h2>

<p><a href="https://www.oracle.com/java/technologies/javase-jdk15-downloads.html">https://www.oracle.com/java/technologies/javase-jdk15-downloads.html</a></p>

<h4>linux 环境变量</h4>

<pre><code>    vim ~/.bashrc
    export JAVA_HOME=/usr/lib/jvm/jdk-15.0.1/
    export PATH=$PATH:/usr/lib/jvm/jdk-15.0.1/bin
</code></pre>

<h4>win 环境变量</h4>

<p>右键点击我的电脑，选择属性。点击左边高级系统设置,在弹出的窗口中切换至高级，点击最下面有一个环境变量，进入环境变量设置。</p>

<p>此处需要配置三个系统环境变量：JAVA_HOME 、CLASSPATH、Path;</p>

<p>首先配置点击JAVA_HOME，点击系统变量下的新建，变量名为JAVA_HOME，变量值为安装的jdk所在的路径，我的为：c:\java\jdk-15.0.1，点击确定</p>

<p>然后配置CLASSPATH，与上一步相同，点击新建，变量名为CLASSPATH，变量值为 .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;  ，注意最前面有个点不能省去，最后面要有英文的分号，点击确定</p>

<p>最后配置Path，在系统变量中找到Path并双击它，在变量值的最后加上：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;最后点击确定</p>

<h2>mysql</h2>

<h4>win</h4>

<p><a href="https://dl.pconline.com.cn/download/2260891.html">https://dl.pconline.com.cn/download/2260891.html</a></p>

<p>选择 server only</p>

<p>系统可能需要依赖 .NET Framework 4.5.2 <a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642">https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642</a></p>

<h4>mysql如何修改root用户的密码</h4>

<pre><code>    格式：mysql&gt; set password for 用户名@localhost = password('新密码'); 
    例子：mysql&gt; set password for root@localhost = password('123'); 
</code></pre>

<h4>增加内容</h4>

<pre><code>    create database test;
    use test
    create table info(id integer primary key, name varchar(30), val integer);
    alter table info modify id integer auto_increment;
    insert into info(name, val) values ('kk', 123);
    insert into info(name, val) values ('ll', 456);
    select * from info;
    quit
</code></pre>

<h2>tomcat</h2>

<p><a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>

<p>将 mysql-connector-java-5.1.47.jar 放到 lib/ 下</p>

<p>vim webapps/examples/db.jsp
```
    &lt;%@ page language=&ldquo;java&rdquo; contentType=&ldquo;text/html; charset=UTF-8&rdquo; pageEncoding=&ldquo;UTF-8&rdquo;%>
    &lt;%@ page import=&ldquo;java.sql.*&rdquo;%></p>

<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;通过JSP打开数据表&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;%
    try {
        Class.forName("com.mysql.jdbc.Driver");  //驱动程序名
        String url = "jdbc:mysql://localhost:3306/test"; //数据库名
        String username = "root";  //数据库用户名
        String password = "123";  //数据库用户密码
        Connection conn = DriverManager.getConnection(url, username, password);  //连接状态

        if (conn != null) {
            out.print("数据库连接成功！");
            out.print("&lt;br /&gt;");
            Statement stmt = null;
            ResultSet rs = null;
            String sql = "SELECT * FROM info;";  //查询语句
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            out.print("查询结果：");
            out.print("&lt;br /&gt;");
            out.println("姓名"+"  "+"性别 "+"  "+"年龄");
            out.print("&lt;br /&gt;");
            while (rs.next()) {
                out.println(rs.getString("id")+"   &amp;nbsp  "+rs.getString("name")+"  &amp;nbsp "+rs.getInt("val")); //将查询结果输出
                out.print("&lt;br /&gt;");
            }
        } else {
            out.print("连接失败！");
        }
    } catch (Exception e) {
        out.print("数据库连接异常！");
    }
%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>```</p>

<p>直接运行 bin/startup.sh</p>

<p>打开 127.0.0.1:8080/examples/db.jsp 即可看到数据库内容</p>

<h4>log 乱码</h4>

<p>打开Tomcat安装源码conf文件夹下的logging.properties文件，将UTF-8改成GBK</p>
]]></content>
  </entry>
  
</feed>
