<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~php | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~php/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-26T19:20:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[php ci 数据缓存]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/23/lang-ci-cache/"/>
    <updated>2024-03-23T10:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/23/lang-ci-cache</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_30289299/article/details/115545367">https://blog.csdn.net/weixin_30289299/article/details/115545367</a></p>

<p>CI框架中有个比较好的查询优化，就是数据库缓存优化</p>

<h4>1.开启缓存</h4>

<p>在application/config.php中开启
<code>
    $db['default']['cache_on'] = TRUE;
</code></p>

<p>在application/config.php中开启</p>

<pre><code>    $db['default']['cachedir'] = './cache';
</code></pre>

<p>并在对应的目录中加一个可写缓存目录cache</p>

<h4>2. 在对应的查询中开启缓存语句</h4>

<p>打开缓存开关</p>

<pre><code>    $this-&gt;db-&gt;cache_on();

    $query = $this-&gt;db-&gt;query("SELECT * FROM mytable");
</code></pre>

<p>使下面这条查询不被缓存</p>

<pre><code>    $this-&gt;db-&gt;cache_off();

    $query = $this-&gt;db-&gt;query("SELECT * FROM members WHERE member_id = '$current_user'");

    // Turn caching back on

    $this-&gt;db-&gt;cache_on();

    $query = $this-&gt;db-&gt;query("SELECT * FROM another_table");
</code></pre>

<h4>3. 添加相应的 清空缓存</h4>

<p>缓存不会自动删除 只能手动删除</p>

<p>这样 你可以在对应的 增改删 语句中清除缓存 就ok了</p>

<p>清空所有缓存</p>

<pre><code>    $this-&gt;db-&gt;cache_delete_all()
</code></pre>

<h5>清空单个缓存</h5>

<p>example.com/index.php/blog/comments的页面, 缓存系统会把所有生成的缓存文件放进</p>

<p>一个以 blog+comments做为名称的文件夹里. 如果您要删除关于刚才提到的这个例子与</p>

<p>之对应的缓存文件 需要执行以下代码:</p>

<pre><code>    $this-&gt;db-&gt;cache_delete('/blog', 'comments');
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php的GD库,相同的字符串生成相同的二维码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/01/06/lang-php-gd-random/"/>
    <updated>2024-01-06T19:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/01/06/lang-php-gd-random</id>
    <content type="html"><![CDATA[<p>相同的字符串生成相同的二维码</p>

<p>vim phpqrcode/phpqrcode.php</p>

<pre><code>    -    define('QR_FIND_FROM_RANDOM', 2);
    +    define('QR_FIND_FROM_RANDOM', false);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php的GD库imagettftext中文乱码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/01/06/lang-php-gd/"/>
    <updated>2024-01-06T19:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/01/06/lang-php-gd</id>
    <content type="html"><![CDATA[<p><a href="https://www.liuzhongwei.com/page/344218.html">https://www.liuzhongwei.com/page/344218.html</a></p>

<p>换成 SimHei.ttf 字体</p>

<pre><code>    imagettftext($image, $font_size, 0, 20, $QR_height + 23, $font_color, "tools/SimHei.ttf", $sid);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP数组实际占用内存大小的分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/lang-php-mem/"/>
    <updated>2023-12-10T16:48:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/lang-php-mem</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/ghjbk/p/6953562.html">https://www.cnblogs.com/ghjbk/p/6953562.html</a></p>

<p>一般来说，PHP数组的内存利用率只有 1/10, 也就是说，一个在C语言里面100M 内存的数组，在PHP里面就要1G。下面我们可以粗略的估算PHP数组占用内存的大小,首先我们测试1000个元素的整数占用的内存：</p>

<pre><code>    &lt;?php  
        echo memory_get_usage() , '&lt;br&gt;';  
        $start = memory_get_usage();  
        $a = Array();  
        for ($i=0; $i&lt;1000; $i++) {  
            $a[$i] = $i + $i;  
        }  
        $mid =  memory_get_usage();  
        echo memory_get_usage() , '&lt;br&gt;';  
        for ($i=1000; $i&lt;2000; $i++) {  
            $a[$i] = $i + $i;  
        }  
        $end =  memory_get_usage();  
        echo memory_get_usage() , '&lt;br&gt;';  
        echo 'argv:', ($mid - $start)/1000 ,'bytes' , '&lt;br&gt;';  
        echo 'argv:',($end - $mid)/1000 ,'bytes' , '&lt;br&gt;';  
</code></pre>

<p>输出是:</p>

<pre><code>    353352
    437848
    522024
    argv:84.416bytes
    argv:84.176bytes
</code></pre>

<p>大概了解1000 个元素的整数数组需要占用 82k 内存，平均每个元素占用 84 个字节。而纯 C 中整体只需要 4k(一个整型占用4byte * 1000 )。memory_get_usage() 返回的结果并不是全是被数组占用了，还要包括一些 PHP 运行本身分配的一些结构，可能用内置函数生成的数组更接近真实的空间:</p>

<pre><code>    &lt;?php  
        $start = memory_get_usage();  
        $a = array_fill(0, 10000, 1);  
        $mid = memory_get_usage(); //10k elements array;  
        echo 'argv:', ($mid - $start )/10000,'byte' , '&lt;br&gt;';  
        $b = array_fill(0, 10000, 1);  
        $end = memory_get_usage(); //10k elements array;  
        echo 'argv:', ($end - $mid)/10000 ,'byte' , '&lt;br&gt;';  
</code></pre>

<p>得到:</p>

<pre><code>    argv:54.5792byte
    argv:54.5784byte
</code></pre>

<p>从这个结果来看似乎一个数组元素大约占用了54个字节左右。</p>

<p>首先看一下32位机C语言各种类型占用的字节：</p>

<pre><code>    #include "stdafx.h"  
    //#include &lt;stdio.h&gt;  

    int main() {  
            printf("int:%d\nlong:%d\ndouble:%d\nchar*:%d\nsize_t:%d\n",   
            sizeof(int), sizeof(long),   
            sizeof(double), sizeof(char *),   
            sizeof(size_t));  
        return   0;   
    }  
</code></pre>

<pre><code>    int:4
    long:4
    double:8
    har*:4
    size_t:4
    在PHP中都使用long类型来代表数字，没有使用int类型
    大家都明白PHP是一种弱类型的语言，它不会去区分变量的类型，没有int float char *之类的概念。
    我们看看php在zend里面存储的变量，PHP中每个变量都有对应的 zval， Zval结构体定义在Zend/zend.h里面，其结构:
</code></pre>

<pre><code>    typedef struct _zval_struct zval;  
    struct _zval_struct {  
        /* Variable information */  
        zvalue_value value;  /* The value 1 12字节(32位机是12，64位机需要8+4+4=16) */  
        zend_uint refcount__gc; /* The number of references to this value (for GC) 4字节 */  
        zend_uchar type;        /* The active type 1字节*/  
        zend_uchar is_ref__gc;  /* Whether this value is a reference (&amp;) 1字节*/  
    };  
</code></pre>

<p>PHP使用一种UNION结构来存储变量的值,即zvalue_value 是一个union，UNION变量所占用的内存是由最大</p>

<p>成员数据空间决定。</p>

<pre><code>    typedef union _zvalue_value {  
        long lval;                /* long value */  
        double dval;                /* double value */  
        struct {                    /* string value */  
            char *val;  
            int len;  
        } str;   
        HashTable *ht;            /* hash table value */  
        zend_object_value obj;    /*object value */  
    } zvalue_value;  
</code></pre>

<p>最大成员数据空间是struct str，指针占 <code>*val</code> 用4字节，INT占用4字节，共8字节。</p>

<p>struct zval占用的空间为8+4+1+1 = 14字节，</p>

<p>其实呢，在zval中数组，字符串和对象还需要另外的存储结构，数组则是一个 HashTable:</p>

<p>HashTable结构体定义在Zend/zend_hash.h.</p>

<pre><code>    typedef struct _hashtable {  
        uint nTableSize;//4  
        uint nTableMask;//4  
        uint nNumOfElements;//4  
        ulong nNextFreeElement;//4  
        Bucket *pInternalPointer;   /* Used for element traversal 4*/  
        Bucket *pListHead;//4  
        Bucket *pListTail;//4  
        Bucket **arBuckets;//4  
        dtor_func_t pDestructor;//4  
        zend_bool persistent;//1  
        unsigned char nApplyCount;//1  
        zend_bool bApplyProtection;//1  
    #if ZEND_DEBUG  
        int inconsistent;//4  
    #endif  
    } HashTable;  
</code></pre>

<p>HashTable 结构需要 39 个字节，每个数组元素存储在 Bucket 结构中:</p>

<pre><code>    typedef struct bucket {  
        ulong h;            /* Used for numeric indexing            4字节 */  
        uint nKeyLength;        /* The length of the key (for string keys)  4字节 */  
        void *pData;            /* 4字节*/  
        void *pDataPtr;         /* 4字节*/  
        struct bucket *pListNext;   /* PHP arrays are ordered. This gives the next element in that order 4字节 */  
        struct bucket *pListLast;   /* and this gives the previous element         4字节 */  
        struct bucket *pNext;       /* The next element in this (doubly) linked list     4字节 */  
        struct bucket *pLast;       /* The previous element in this (doubly) linked list     4字节 */  
        char arKey[1];          /* Must be last element   1字节*/  
    } Bucket;  
</code></pre>

<p>Bucket 结构需要 33 个字节，键长超过四个字节的部分附加在 Bucket 后面，而元素值很可能是一个 zval 结构，另外每个数组会分配一个由 arBuckets 指向的 Bucket 指针数组， 虽然不能说每增加一个元素就需要一个指针，但是实际情况可能更糟。这么算来一个数组元素就会占用 54 个字节，与上面的估算几乎一样。</p>

<p>一个空数组至少会占用 14(zval) + 39(HashTable) + 33(arBuckets) = 86
个字节，作为一个变量应该在符号表中有个位置，也是一个数组元素，因此一个空数组变量需要 118
个字节来描述和存储。从空间的角度来看，小型数组平均代价较大，当然一个脚本中不会充斥数量很大的小型数组，可以以较小的空间代价来获取编程上的快捷。但如果将数组当作容器来使用就是另一番景象了，实际应用经常会遇到多维数组，而且元素居多。比如10k个元素的一维数组大概消耗540k内存，而10k
 x 10 的二维数组理论上只需要 6M 左右的空间，但是按照 memory_get_usage
的结果则两倍于此，[10k,5,2]的三维数组居然消耗了23M，小型数组果然是划不来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPExcel_Worksheet_Drawing() 设置图片大小问题]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/lang-phpexcel_drawing/"/>
    <updated>2023-11-19T18:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/lang-phpexcel_drawing</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/a6163238601/article/details/101482541">https://blog.csdn.net/a6163238601/article/details/101482541</a></p>

<p>PHPExcel_Worksheet_Drawing 默认有个按比例缩放，要是想自定义大小的话要设置为 false。</p>

<p>如果没有设置改缩放属性，总是最后一个设置的高度或宽度生效。比如setWidthAndHeight(160,120);</p>

<p>最后就是高度120，宽度就是按比例缩放。分开设置高度宽度也是同样的结果</p>

<p>新建的PHPExcel_Worksheet_Drawing 对象->setResizeProportional(false);</p>

<p>新建的PHPExcel_Worksheet_Drawing 对象->setWidthAndHeight(160,120);</p>

<p>这样设置出来的大小就是自定义大小了。。</p>
]]></content>
  </entry>
  
</feed>
