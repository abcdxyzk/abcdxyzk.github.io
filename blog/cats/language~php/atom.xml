<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~php | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~php/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-08-15T11:53:43+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unix时间戳, excel date, 儒略日julian date]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/08/09/lang-date/"/>
    <updated>2024-08-09T16:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/08/09/lang-date</id>
    <content type="html"><![CDATA[<h4>UNIX时间戳</h4>

<p><a href="https://www.cnblogs.com/xifengyeluo/p/8143059.html">https://www.cnblogs.com/xifengyeluo/p/8143059.html</a></p>

<p>Unix时间戳（英文为Unix epoch, Unix time, POSIX time 或 Unix timestamp）</p>

<p>是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒。</p>

<p>UNIX时间戳的0按照ISO 8601规范为 ：1970-01-01T00:00:00Z.</p>

<p>一个小时表示为UNIX时间戳格式为：3600秒；一天表示为UNIX时间戳为86400秒，闰秒不计算。</p>

<p>在大多数的UNIX系统中UNIX时间戳存储为32位，这样会引发2038年问题或Y2038。</p>

<h4>excel date</h4>

<p><a href="https://blog.csdn.net/luoluoyu2013/article/details/127750570">https://blog.csdn.net/luoluoyu2013/article/details/127750570</a></p>

<p>excel:
```
    日期转时间戳：B1=INT((A1-70<em>365-19)</em>86400-8<em>3600)</em>1000</p>

<pre><code>时间戳转日期：A1=TEXT((B1/1000+8*3600)/86400+70*365+19,"yyyy-mm-dd hh:mm:ss")
</code></pre>

<pre><code>
是从 1899-12-30 开始的天数 ???
</code></pre>

<pre><code>echo date('Y-m-d', strtotime("1899-12-30 +45506 days"));

$d1 = new DateTime('1970-01-01');
$d0 = new DateTime('1899-12-30');
echo $d1-&gt;diff($d0)-&gt;format("%a days");
</code></pre>

<pre><code></code></pre>

<pre><code>2024-08-02
25569 days
</code></pre>

<pre><code>
#### 儒略日 (Julian Date)

儒略日（Julian day，JD）是指由公元前4713年1月1日，协调世界时中午12时开始所经过的天数，多为天文学家采用，用以作为天文学的单一历法，把不同历法的年表统一起来。

儒略日(Julian Date)的简化: 由于儒略日数字位数太多，国际天文学联合会于1973年采用简化儒略日（MJD），其定义为 MJD = JD - 2400000.5。MJD相应的起点是1858年11月17日世界时0时。 例如1979年10月1日零时儒略日数为2,444,147.5。天文年历附表载有各年每月零日世界时12时的儒略日数。
</code></pre>

<pre><code>&lt;?php
    echo gregoriantojd(10, 1, 1979) - 0.5, "\n";
    echo gregoriantojd(10, 1, 1979) - 0.5 - 2400000.5, "\n";

    echo jdtogregorian(2444147.5 + 0.5), "\n";
</code></pre>

<pre><code></code></pre>

<pre><code>2444147.5
44147
10/1/1979
</code></pre>

<p>```</p>

<p><a href="https://blog.sina.com.cn/s/blog_65d6476a0101k54y.html">https://blog.sina.com.cn/s/blog_65d6476a0101k54y.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php如何让数组倒叙]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-php-reverse/"/>
    <updated>2024-07-31T17:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-php-reverse</id>
    <content type="html"><![CDATA[<p><a href="https://www.php.cn/faq/521537.html">https://www.php.cn/faq/521537.html</a></p>

<h4>array_reverse() 函数的基本使用方法</h4>

<pre><code>    array array_reverse ( array $array , bool $preserve_keys = FALSE )
</code></pre>

<p>其中，$array 参数是要反转的数组，$preserve_keys 参数如果设置为 true，则会保留数组原始的键值。如果设置为 false 或者不设置，则将重置数组的键值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP ZipArchive::setCompressionName压缩质量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-php-zip-c/"/>
    <updated>2024-07-31T16:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-php-zip-c</id>
    <content type="html"><![CDATA[<p>在添加文件之前，我们可以通过设置ZipArchive类的属性setCompressionName来设置文件的压缩质量。</p>

<p>压缩质量有几个选项可供选择，包括</p>

<p>ZipArchive::CM_STORE表示不进行压缩，</p>

<p>ZipArchive::CM_DEFLATE表示使用DEFLATE算法进行压缩。</p>

<p>默认情况下，压缩质量是ZipArchive::CM_STORE，即不进行压缩。</p>

<p><a href="https://www.php.net/manual/en/ziparchive.setcompressionname.php">https://www.php.net/manual/en/ziparchive.setcompressionname.php</a></p>

<pre><code>    public ZipArchive::setCompressionName(string $name, int $method, int $compflags = 0): bool

    name
        Name of the entry.
    method
        The compression method, one of the ZipArchive::CM_* constants.
    compflags
        Compression level.

    Returns true on success or false on failure. 
</code></pre>

<p>The compression level (compflags) option is, generally speaking, an integer value between 0 and 9. The behavior of the system depends on the selected method and the value of compflags and can sometimes be not you expected.</p>

<p>The result below is from PHP 8.1 on Windows platform and may possibly be different on other systems or versions:</p>

<ul>
<li><p>for the CM_DEFAULT method, always CM_DEFLATE is used with level 9, regardless of what you put as compflags,</p></li>
<li><p>for the CM_STORE method, for compflags 0-9 you get the same result, which is obvious because the method itself means &ldquo;no compression at all&rdquo;. However, for compflags>9, surprisingly the CM_DEFLATE method is used instead with compression level 9.</p></li>
<li><p>for CM_DEFLATE method, 1 means the fastest and weakest compression, while 9 - the slowest and strongest one. compflags=0 and compflags>9 works as it if were with compflags=9,</p></li>
<li><p>for CM_BZIP2 method, 1 means the fastest and weakest compression, while 9 - the slowest and strongest one. compflags=0 works like compflag=9, and if you use compflags>9, the method will surprisingly switch to CM_DEFLATE level 9,</p></li>
<li><p>for CM_XZ method, 0 means the fastest and weakest compression, while 9 - the slowest and strongest one. For compflags>9 the method surprisingly switch to CM_DEFLATE level 9.</p></li>
</ul>


<pre><code>    &lt;?php
    $zip = new ZipArchive;
    $res = $zip-&gt;open('test.zip', ZipArchive::CREATE);
    if ($res === TRUE) {
        $zip-&gt;addFromString('foo', 'Some text');
        $zip-&gt;addFromString('bar', 'Some other text');
        $zip-&gt;addFromString('baa', 'Some other text2');
        $zip-&gt;setCompressionName('foo', ZipArchive::CM_STORE);

        $zip-&gt;setCompressionName('bar', ZipArchive::CM_DEFLATE);
        $zip-&gt;setCompressionName('baa', ZipArchive::CM_DEFLATE, 1);

        $zip-&gt;close();
        echo 'ok';
    } else {
        echo 'failed';
    }
    ?&gt;
</code></pre>

<hr />

<p><a href="https://www.php.cn/faq/581904.html">https://www.php.cn/faq/581904.html</a></p>

<pre><code>    $zip-&gt;addFile('path/to/file.txt', 'file.txt');
    $zip-&gt;setCompressionName('file.txt', ZipArchive::CM_DEFLATE);
</code></pre>

<p>除了设置整个压缩文件的压缩质量，我们还可以为单独的文件设置压缩质量，代码示例如下：</p>

<pre><code>    $zip-&gt;setCompressionIndex(0, ZipArchive::CM_DEFLATE);
</code></pre>

<p>最后，我们需要关闭ZipArchive对象以完成整个压缩过程：
<code>
    $zip-&gt;close();
</code></p>

<hr />

<p><a href="https://www.cnblogs.com/aipiaoborensheng/p/6362858.html">https://www.cnblogs.com/aipiaoborensheng/p/6362858.html</a></p>

<p><a href="https://vimsky.com/examples/detail/php-ex---ZipArchive-setCompressionName.html">https://vimsky.com/examples/detail/php-ex---ZipArchive-setCompressionName.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sm1、sm2、sm3、sm4简单介绍]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/30/lang-php-sm1234/"/>
    <updated>2024-07-30T16:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/30/lang-php-sm1234</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/coolYuan/p/8630280.html">https://www.cnblogs.com/coolYuan/p/8630280.html</a></p>

<p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。密钥长度和分组长度均为128位。</p>

<p>SM1 为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</p>

<p>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</p>

<p>SM3 消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</p>

<p>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。</p>

<p>由于SM1、SM4加解密的分组大小为128bit，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。</p>

<p>补充：</p>

<p>当使用特定的芯片进行SM1或其他国密算法加密时，若用多个线程调用加密卡的API时，要考虑芯片对于多线程的支持情况。</p>

<p>国产密码算法（国密算法）是指国家密码局认定的国产商用密码算法，在金融领域目前主要使用公开的SM2、SM3、SM4三类算法，分别是非对称算法、哈希算法和对称算法。</p>

<p>SM2算法：SM2椭圆曲线公钥密码算法是我国自主设计的公钥密码算法，包括SM2-1椭圆曲线数字签名算法，SM2-2椭圆曲线密钥交换协议，SM2-3椭圆曲线公钥加密算法，分别用于实现数字签名密钥协商和数据加密等功能。SM2算法与RSA算法不同的是，SM2算法是基于椭圆曲线上点群离散对数难题，相对于RSA算法，256位的SM2密码强度已经比2048位的RSA密码强度要高。</p>

<p>SM3算法：SM3杂凑算法是我国自主设计的密码杂凑算法，适用于商用密码应用中的数字签名和验证消息认证码的生成与验证以及随机数的生成，可满足多种密码应用的安全需求。为了保证杂凑算法的安全性，其产生的杂凑值的长度不应太短，例如MD5输出128比特杂凑值，输出长度太短，影响其安全性SHA-1算法的输出长度为160比特，SM3算法的输出长度为256比特，因此SM3算法的安全性要高于MD5算法和SHA-1算法。</p>

<p>SM4算法：SM4分组密码算法是我国自主设计的分组对称密码算法，用于实现数据的加密/解密运算，以保证数据和信息的机密性。要保证一个对称密码算法的安全性的基本条件是其具备足够的密钥长度，SM4算法与AES算法具有相同的密钥长度分组长度128比特，因此在安全性上高于3DES算法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php sm2]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/30/lang-php-sm2/"/>
    <updated>2024-07-30T16:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/30/lang-php-sm2</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/lpilp/phpsm2sm3sm4">https://github.com/lpilp/phpsm2sm3sm4</a></p>

<pre><code>    yum --enablerepo=remi-php74 install php-gmp
    ./composer.phar require mdanter/ecc
    ./composer.phar require lpilp/guomi
</code></pre>

<pre><code>    require '../composer/vendor/autoload.php';
    use Rtgm\sm\RtSm2;

    // $sm2 = new RtSm2('hex', false); 相同字符串每次算出不同值
    $sm2 = new RtSm2();

    echo "sm2加解密测试:\n";
    $mks = $sm2-&gt;generateKey();
    var_dump($mks);
    $en = $sm2-&gt;doEncrypt($sm2-&gt;_str2hex($key), $mks[1]);
    var_dump($en);

    $de = $sm2-&gt;doDecrypt($en, $mks[0]);
    var_dump($de);
    var_dump(hex2bin($de));
    echo "\n";
    echo "\n";
</code></pre>

<hr />

<p><a href="https://www.cnblogs.com/blog-dyn/p/16301425.html">https://www.cnblogs.com/blog-dyn/p/16301425.html</a></p>

<pre><code>    use Mdanter\Ecc\Crypto\Key\PrivateKey;
    use Mdanter\Ecc\Crypto\Signature\Signature;
    use Mdanter\Ecc\Serializer\Signature\DerSignatureSerializer;
    use Rtgm\ecc\RtEccFactory;
    use Rtgm\sm\RtSm2;

    require 'vendor/autoload.php';

    $data = '{"request":{"body":{"TEST":"中文","TEST2":"!@#$%^&amp;*()","TEST3":12345,"TEST4":[{"arrItem1":"qaz","arrItem2":123,"arrItem3":true,"arrItem4":"中文"}],"buscod":"N02030"},"head":{"funcode":"DCLISMOD","userid":"N003261207"}},"signature":{"sigdat":"__signature_sigdat__"}}';
    $key = 'NBtl7WnuUtA2v5FaebEkU0/Jj1IodLGT6lQqwkzmd2E=';
    $key = bin2hex(base64_decode($key));//转为16进制
    $sm2 = new RtSm2('base64');
    $userid = 'N003261207' . "0000000000000000";
    $userid = substr($userid, 0, 16);
    //签名
    $sign = $sm2-&gt;doSign($data, $key, $userid);
    $sign = base64_decode($sign);
    $a = \FG\ASN1\ASNObject::fromBinary($sign)-&gt;getChildren();

    $aa = formatHex($a[0]-&gt;getContent());
    $bb = formatHex($a[1]-&gt;getContent());
    $sign = $aa. $bb;
    $sign = base64_encode(hex2bin($sign));
    var_dump($sign);
    //验签

    $signHex = bin2hex(base64_decode($sign));
    var_dump($signHex);
    $r = substr($signHex, 0, 64);
    $s = substr($signHex, 64, 64);
    var_dump($r, $s);
    $r = gmp_init($r, 16);
    $s = gmp_init($s, 16);
    /*$r = gmp_init('90416529259334433398865842692135340273188180784859666141339740103133164395295', 10);
    $s = gmp_init('51927610271972364114244381230895889971736075490328811928131691394657016568041', 10);*/
    $signature = new Signature( $r, $s );
    $serializer = new DerSignatureSerializer();
    $serializedSig = $serializer-&gt;serialize($signature);

    $sign = base64_encode($serializedSig);
    var_dump($sign);
    $adapter = RtEccFactory::getAdapter();
    $generator = RtEccFactory::getSmCurves()-&gt;generatorSm2();
    $secret = gmp_init($key, 16);
    $key = new PrivateKey($adapter, $generator, $secret);
    $pubkey = $key-&gt;getPublicKey()-&gt;getPoint();
    $x = $pubkey-&gt;getX();
    $y = $pubkey-&gt;getY();
    $pub = gmp_strval($x, 16);
    $pub .= gmp_strval($y, 16);
    var_dump($pub);
    $b = $sm2-&gt;verifySign($data, $sign, $pub, $userid);
    var_dump($b);

    function formatHex($dec)
    {
        $hex = gmp_strval(gmp_init($dec, 10), 16);
        $len = strlen($hex);
        if ($len == 64) {
            return $hex;
        }
        if ($len &lt; 64){
            $hex = str_pad($hex, 64, "0", STR_PAD_LEFT);
        }else {
            $hex = substr($hex, $len - 64, 64);
        }

        return $hex;
    }
</code></pre>

<h4>SM4加密</h4>

<pre><code>    $userid = 'N003261207' . "0000000000000000";
    $userid = substr($userid, 0, 16);
    $sm4 = new RtSm4($key);
    $sign = $sm4-&gt;encrypt($data,'sm4',$userid ,'base64');
</code></pre>

<h4>SM4解密</h4>

<pre><code>    $userid = 'N003261207' . "0000000000000000";
    $userid = substr($userid, 0, 16);
    $sm4 = new RtSm4($key);
    $data = $sm4-&gt;decrypt($sign,'sm4-cbc',$userid ,'base64');
</code></pre>
]]></content>
  </entry>
  
</feed>
