<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~php | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~php/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2025-07-21T17:22:06+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[phpexcel单元格内换行]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/07/21/lang-phpexcel-wrap/"/>
    <updated>2025-07-21T16:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/07/21/lang-phpexcel-wrap</id>
    <content type="html"><![CDATA[<pre><code>    $objPHPExcel-&gt;setActiveSheetIndex(0)
            -&gt;setCellValue('A4', “Hello\nWorld”)；
</code></pre>

<p>然后注意两点</p>

<p>一是要有下面的代码配合
<code>
    $objPHPExcel-&gt;getActiveSheet()-&gt;getStyle('A4')-&gt;getAlignment()-&gt;setWrapText(true);
</code></p>

<p>二是要换行的字符串Hello\nWorld外面必须是双引号</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php获取客户端真实IP]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/02/28/lang-php-real-ip/"/>
    <updated>2025-02-28T16:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/02/28/lang-php-real-ip</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ammu402004/article/details/101494775">https://blog.csdn.net/ammu402004/article/details/101494775</a></p>

<p>apache 日志默认情况下log日志格式为：
<code>
    LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
</code>
其中%h 是记录访问者的IP，如果在web的前端有一层代理，那么这个%h其实就是代理机器的IP，这不是我们想要的。在这种情况下，</p>

<p><code>%{X-FORWARDED-FOR}i</code>  字段会记录客户端真实的IP。所以log日志改为：
<code>
    LogFormat "%h %{X-FORWARDED-FOR}i %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
</code></p>

<hr />

<p><a href="https://www.php.cn/faq/48483.html">https://www.php.cn/faq/48483.html</a></p>

<p>php中http_x_forwarded_for 和 remote_addr的使用</p>

<p>1.REMOTE_ADDR:浏览当前页面的用户计算机的ip地址</p>

<p>2.HTTP_X_FORWARDED_FOR: 浏览当前页面的用户计算机的网关</p>

<p>3.HTTP_CLIENT_IP:客户端的ip</p>

<p>在PHP 中使用 <code>$_SERVER["REMOTE_ADDR"]</code> 来取得客户端的 IP 地址，但如果客户端是使用代理服务器来访问，那取到的就是代理服务器的 IP 地址，而不是真正的客户端 IP 地址。要想透过代理服务器取得客户端的真实 IP 地址，就要使用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 来读取。</p>

<p>不过要注意的事，并不是每个代理服务器都能用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 来读取客户端的真实 IP，有些用此方法读取到的仍然是代理服务器的 IP。</p>

<p>还有一点需要注意的是：如果客户端没有通过代理服务器来访问，那么用 <code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code> 取到的值将是空的。</p>

<pre><code>    if ($_SERVER['HTTP_X_FORWARDED_FOR'] &amp;&amp; preg_match('/^([0-9]{1,3}.){3}[0-9]{1,3}$/',$_SERVER['HTTP_X_FORWARDED_FOR'])) {  
        $onlineip = $_SERVER['HTTP_X_FORWARDED_FOR'];  
    } elseif  ($_SERVER['HTTP_CLIENT_IP']  &amp;&amp; preg_match('/^([0-9]{1,3}.){3}[0-9]{1,3}$/',$_SERVER['HTTP_CLIENT_IP'])) {  
        $onlineip = $_SERVER['HTTP_CLIENT_IP']; 
    }
</code></pre>

<p>获取用户IP地址的三个属性的区别 (HTTP_X_FORWARDED_FOR,HTTP_VIA,REMOTE_ADDR)</p>

<h4>一、没有使用代理服务 器的情况：</h4>

<p>REMOTE_ADDR = 您的 IP</p>

<p>HTTP_VIA = 没数值或不显示</p>

<p>HTTP_X_FORWARDED_FOR = 没数值或不显示</p>

<h4>二、使用透明代理服务器的情 况：Transparent Proxies</h4>

<p>REMOTE_ADDR = 最后一个代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 您的真实 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>这类代理服务器还是将您的信息转发给您的访问对象，无法达到隐藏真实身份的目的。</p>

<h4>三、使用普通匿名代理服务器的情况：Anonymous Proxies</h4>

<p>REMOTE_ADDR = 最后一个代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 代理服务器 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>隐藏了您的真实IP，但是向访问对象透露了您是使用代理服务器访问他们的。</p>

<h4>四、使用欺骗性代理服务器的情况：Distorting Proxies</h4>

<p>REMOTE_ADDR = 代理服务器 IP</p>

<p>HTTP_VIA = 代理服务器 IP</p>

<p>HTTP_X_FORWARDED_FOR = 随机的 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>告诉了访问对象您使用了代理服务器，但编造了一个虚假的随机IP代替您的真实IP欺骗它。</p>

<h4>五、使用高匿名代理服务器的情况：High Anonymity Proxies (Elite proxies)</h4>

<p>REMOTE_ADDR = 代理服务器 IP</p>

<p>HTTP_VIA = 没数值或不显示</p>

<p>HTTP_X_FORWARDED_FOR = 没数值或不显示 ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p>

<p>完全用代理服务器的信息替代了您的所有信息，就象您就是完全使用那台代理服务器直接访问对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unix时间戳, excel date, 儒略日julian date]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/08/09/lang-date/"/>
    <updated>2024-08-09T16:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/08/09/lang-date</id>
    <content type="html"><![CDATA[<h4>UNIX时间戳</h4>

<p><a href="https://www.cnblogs.com/xifengyeluo/p/8143059.html">https://www.cnblogs.com/xifengyeluo/p/8143059.html</a></p>

<p>Unix时间戳（英文为Unix epoch, Unix time, POSIX time 或 Unix timestamp）</p>

<p>是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒。</p>

<p>UNIX时间戳的0按照ISO 8601规范为 ：1970-01-01T00:00:00Z.</p>

<p>一个小时表示为UNIX时间戳格式为：3600秒；一天表示为UNIX时间戳为86400秒，闰秒不计算。</p>

<p>在大多数的UNIX系统中UNIX时间戳存储为32位，这样会引发2038年问题或Y2038。</p>

<h4>excel date</h4>

<p><a href="https://blog.csdn.net/luoluoyu2013/article/details/127750570">https://blog.csdn.net/luoluoyu2013/article/details/127750570</a></p>

<p>excel:
```
    日期转时间戳：B1=INT((A1-70<em>365-19)</em>86400-8<em>3600)</em>1000</p>

<pre><code>时间戳转日期：A1=TEXT((B1/1000+8*3600)/86400+70*365+19,"yyyy-mm-dd hh:mm:ss")
</code></pre>

<pre><code>
是从 1899-12-30 开始的天数 ???
</code></pre>

<pre><code>echo date('Y-m-d', strtotime("1899-12-30 +45506 days"));

$d1 = new DateTime('1970-01-01');
$d0 = new DateTime('1899-12-30');
echo $d1-&gt;diff($d0)-&gt;format("%a days");
</code></pre>

<pre><code></code></pre>

<pre><code>2024-08-02
25569 days
</code></pre>

<pre><code>
#### 儒略日 (Julian Date)

儒略日（Julian day，JD）是指由公元前4713年1月1日，协调世界时中午12时开始所经过的天数，多为天文学家采用，用以作为天文学的单一历法，把不同历法的年表统一起来。

儒略日(Julian Date)的简化: 由于儒略日数字位数太多，国际天文学联合会于1973年采用简化儒略日（MJD），其定义为 MJD = JD - 2400000.5。MJD相应的起点是1858年11月17日世界时0时。 例如1979年10月1日零时儒略日数为2,444,147.5。天文年历附表载有各年每月零日世界时12时的儒略日数。
</code></pre>

<pre><code>&lt;?php
    echo gregoriantojd(10, 1, 1979) - 0.5, "\n";
    echo gregoriantojd(10, 1, 1979) - 0.5 - 2400000.5, "\n";

    echo jdtogregorian(2444147.5 + 0.5), "\n";
</code></pre>

<pre><code></code></pre>

<pre><code>2444147.5
44147
10/1/1979
</code></pre>

<p>```</p>

<p><a href="https://blog.sina.com.cn/s/blog_65d6476a0101k54y.html">https://blog.sina.com.cn/s/blog_65d6476a0101k54y.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php如何让数组倒叙]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-php-reverse/"/>
    <updated>2024-07-31T17:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-php-reverse</id>
    <content type="html"><![CDATA[<p><a href="https://www.php.cn/faq/521537.html">https://www.php.cn/faq/521537.html</a></p>

<h4>array_reverse() 函数的基本使用方法</h4>

<pre><code>    array array_reverse ( array $array , bool $preserve_keys = FALSE )
</code></pre>

<p>其中，$array 参数是要反转的数组，$preserve_keys 参数如果设置为 true，则会保留数组原始的键值。如果设置为 false 或者不设置，则将重置数组的键值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP ZipArchive::setCompressionName压缩质量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-php-zip-c/"/>
    <updated>2024-07-31T16:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-php-zip-c</id>
    <content type="html"><![CDATA[<p>在添加文件之前，我们可以通过设置ZipArchive类的属性setCompressionName来设置文件的压缩质量。</p>

<p>压缩质量有几个选项可供选择，包括</p>

<p>ZipArchive::CM_STORE表示不进行压缩，</p>

<p>ZipArchive::CM_DEFLATE表示使用DEFLATE算法进行压缩。</p>

<p>默认情况下，压缩质量是ZipArchive::CM_STORE，即不进行压缩。</p>

<p><a href="https://www.php.net/manual/en/ziparchive.setcompressionname.php">https://www.php.net/manual/en/ziparchive.setcompressionname.php</a></p>

<pre><code>    public ZipArchive::setCompressionName(string $name, int $method, int $compflags = 0): bool

    name
        Name of the entry.
    method
        The compression method, one of the ZipArchive::CM_* constants.
    compflags
        Compression level.

    Returns true on success or false on failure. 
</code></pre>

<p>The compression level (compflags) option is, generally speaking, an integer value between 0 and 9. The behavior of the system depends on the selected method and the value of compflags and can sometimes be not you expected.</p>

<p>The result below is from PHP 8.1 on Windows platform and may possibly be different on other systems or versions:</p>

<ul>
<li><p>for the CM_DEFAULT method, always CM_DEFLATE is used with level 9, regardless of what you put as compflags,</p></li>
<li><p>for the CM_STORE method, for compflags 0-9 you get the same result, which is obvious because the method itself means &ldquo;no compression at all&rdquo;. However, for compflags>9, surprisingly the CM_DEFLATE method is used instead with compression level 9.</p></li>
<li><p>for CM_DEFLATE method, 1 means the fastest and weakest compression, while 9 - the slowest and strongest one. compflags=0 and compflags>9 works as it if were with compflags=9,</p></li>
<li><p>for CM_BZIP2 method, 1 means the fastest and weakest compression, while 9 - the slowest and strongest one. compflags=0 works like compflag=9, and if you use compflags>9, the method will surprisingly switch to CM_DEFLATE level 9,</p></li>
<li><p>for CM_XZ method, 0 means the fastest and weakest compression, while 9 - the slowest and strongest one. For compflags>9 the method surprisingly switch to CM_DEFLATE level 9.</p></li>
</ul>


<pre><code>    &lt;?php
    $zip = new ZipArchive;
    $res = $zip-&gt;open('test.zip', ZipArchive::CREATE);
    if ($res === TRUE) {
        $zip-&gt;addFromString('foo', 'Some text');
        $zip-&gt;addFromString('bar', 'Some other text');
        $zip-&gt;addFromString('baa', 'Some other text2');
        $zip-&gt;setCompressionName('foo', ZipArchive::CM_STORE);

        $zip-&gt;setCompressionName('bar', ZipArchive::CM_DEFLATE);
        $zip-&gt;setCompressionName('baa', ZipArchive::CM_DEFLATE, 1);

        $zip-&gt;close();
        echo 'ok';
    } else {
        echo 'failed';
    }
    ?&gt;
</code></pre>

<hr />

<p><a href="https://www.php.cn/faq/581904.html">https://www.php.cn/faq/581904.html</a></p>

<pre><code>    $zip-&gt;addFile('path/to/file.txt', 'file.txt');
    $zip-&gt;setCompressionName('file.txt', ZipArchive::CM_DEFLATE);
</code></pre>

<p>除了设置整个压缩文件的压缩质量，我们还可以为单独的文件设置压缩质量，代码示例如下：</p>

<pre><code>    $zip-&gt;setCompressionIndex(0, ZipArchive::CM_DEFLATE);
</code></pre>

<p>最后，我们需要关闭ZipArchive对象以完成整个压缩过程：
<code>
    $zip-&gt;close();
</code></p>

<hr />

<p><a href="https://www.cnblogs.com/aipiaoborensheng/p/6362858.html">https://www.cnblogs.com/aipiaoborensheng/p/6362858.html</a></p>

<p><a href="https://vimsky.com/examples/detail/php-ex---ZipArchive-setCompressionName.html">https://vimsky.com/examples/detail/php-ex---ZipArchive-setCompressionName.html</a></p>
]]></content>
  </entry>
  
</feed>
