<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~web | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~web/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-07-31T15:24:28+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chrome浏览器使用Overrides调试线上代码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-web-override/"/>
    <updated>2024-07-31T14:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-web-override</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_42961150/article/details/123499276">https://blog.csdn.net/qq_42961150/article/details/123499276</a></p>

<h4>2. 创建文件夹</h4>

<p>在自己电脑任何地方创建一个空的文件夹，比如：我在桌面上创建了一个test文件夹。</p>

<h4>3. 打开浏览器开发者工具</h4>

<p>f12可打开浏览器开发者工具，找到Sources=>Overrides=>+Select folder for overrides选择文件，找到创建的test文件夹，记住不要双击进文件夹，直接单击选择，然后下面窗口下面的选择文件夹即可。</p>

<p><img src="/images/lang/20240731-21.png" alt="" /></p>

<p>注意： 选择了文件夹后，浏览器上方会有个提示，点击允许。点击允许后，选择的文件夹就会显示在浏览器里面。</p>

<p><img src="/images/lang/20240731-22.png" alt="" /></p>

<h4>4. 打开线上源码</h4>

<p>找到线上需要调试的代码，一般都是在network里面找到需要修改的文件，然后选中文件，在右边可以显示出读取的源码，然后鼠标右击选择菜单中的Open in Sources panel，就会自动转到刚刚选择文件夹的界面。</p>

<p><img src="/images/lang/20240731-23.png" alt="" /></p>

<h4>5. 编辑代码</h4>

<p>编辑源码，比如我在源码中增加了一行代码，然后ctrl+s直接保存，就可以看到左侧test文件夹中就多了一个文件夹，里面就是保存的就是web.html到本地。</p>

<p><img src="/images/lang/20240731-24.png" alt="" /></p>

<h4>6. 刷新页面，看效果</h4>

<p>刷新，就可以看到console控制台中多了一行打印，说明已经实现了该功能。</p>

<p><img src="/images/lang/20240731-25.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fetch使用介绍, chrome如何重新提交请求并且更改参数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-web-fetch/"/>
    <updated>2024-07-31T14:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-web-fetch</id>
    <content type="html"><![CDATA[<p><a href="http://www.3scard.com/index.php?m=blog&amp;f=view&amp;id=260">http://www.3scard.com/index.php?m=blog&amp;f=view&amp;id=260</a></p>

<p>fetch函数用于发起异步http请求；</p>

<p>fetch相比XMLHttpRequest更容易使用；</p>

<p>promise是异步对象，fetch使用promise实现异步操作；</p>

<h4>发起get请求</h4>

<pre><code>    fetch('http://localhost:8080/springmvc/test_get.do?name=who', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
    }).then((resp)=&gt;{return resp.text()}).then((data)=&gt;{console.log(data)});
</code></pre>

<h4>发起post请求</h4>

<pre><code>    fetch('http://localhost:8080/springmvc/test_post.do', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'name=who'
    }).then((resp)=&gt;{return resp.text()}).then((data)=&gt;{console.log(data)});
</code></pre>

<p><a href="https://blog.csdn.net/daban2008/article/details/127180303">https://blog.csdn.net/daban2008/article/details/127180303</a></p>

<h2>chrome如何重新提交post请求，并且更改请求参数</h2>

<h4>1、直接在当前页copy as fetch</h4>

<p><img src="/images/lang/20240731-11.png" alt="" /></p>

<h4>2、直接粘贴到当前的console中</h4>

<p><img src="/images/lang/20240731-12.png" alt="" /></p>

<h4>3、回车</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[95598停电公告信息抓取]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lang-web-95598/"/>
    <updated>2024-07-31T14:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lang-web-95598</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_44492045/article/details/131921632">https://blog.csdn.net/weixin_44492045/article/details/131921632</a></p>

<p>抓取网站：95598智能互动网站 <a href="https://www.95598.cn/osgweb/blackoutNotice">https://www.95598.cn/osgweb/blackoutNotice</a></p>

<p>首先找到准确的url，可以看到请求参数是加密的，返回的数据也是加密的。</p>

<p><img src="/images/lang/20240731-1.png" alt="" /></p>

<p>对于这类需要逆向加解密的网站，先通过请求栈来看一下，注意框起来的地方，可以很清楚的看到这里用到的是axios，所以加解密的过程中一定会运用到拦截器。</p>

<p><img src="/images/lang/20240731-2.png" alt="" /></p>

<p>直接在全局搜索interceptor，可以看到能搜到对应的js，进入js就能找到对应的加密入口。</p>

<p><img src="/images/lang/20240731-3.png" alt="" /></p>

<p>要想完成这个网站的逆向，还需要对加密算法有一定了解，比如sm国密算法，在进行加密之前还会先请求keycode和publickey，调整好流程，通过两次请求和加解密过程就能得到想要的数据。</p>

<p><img src="/images/lang/20240731-4.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript的三种弹出提示框(alert、confirm、prompt)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/15/lang-web-box/"/>
    <updated>2024-07-15T11:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/15/lang-web-box</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43883917/article/details/109585430">https://blog.csdn.net/weixin_43883917/article/details/109585430</a></p>

<p>三种提示框</p>

<p>  alert ()</p>

<p>  confirm()</p>

<p>  prompt ()</p>

<h4>alert ()</h4>

<p>alert()方法是显示一条弹出提示消息和确认按钮的警告框。</p>

<p>需要注意的是 ：alert()是一个阻塞的函数，如果我们不点确认按钮，后面的内容就不会加载出来。</p>

<pre><code>    alert("想要提示的文本内容")
</code></pre>

<h4>confirm()</h4>

<p>confirm()方法是显示一个含有指定消息和确认和取消按钮的确认框。</p>

<p>如果点击"确定"返回true，否则返回false。</p>

<pre><code>    var x; 
    var r = confirm("请按下按钮!");
    if (r == true) {
        x = "你按下的是\"确定\"按钮。";
    } else {
        x = "你按下的是\"取消\"按钮。";
    }
    document.write(x)
</code></pre>

<h4>prompt ()</h4>

<p>prompt()方法是显示提示用户进行输入的对话框。</p>

<p>这个方法返回的是用户输入的字符串。</p>

<pre><code>    var x; 
    var name = prompt("请输入你的名字","Keafmd"); 
    if (name != null &amp;&amp; person != ""){ 
        x = "你好! " + name + "。";
        document.write(x)
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript复制内容到剪切板]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/15/lang-web-copy/"/>
    <updated>2024-07-15T11:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/15/lang-web-copy</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/qigege/p/17461710.html">https://www.cnblogs.com/qigege/p/17461710.html</a></p>

<p>复制内容到剪切板分两种情况:</p>

<p>一种是从页面已有的可选元素中选中内容进行复制</p>

<p>一种是将Javascript代码中的字符串直接复制到剪切板。</p>

<h4>复制页面元素选中内容</h4>

<pre><code>    &lt;input type="textarea" id="txt" /&gt;
    &lt;button onclick="copy()"&gt;复制&lt;/button&gt;


    function copy() {
        var element = document.getElementById("txt");
        element.select();
        element.setSelectionRange(0, element.value.length);
        document.execCommand('copy');
        alert("已复制到剪切板");
       }
</code></pre>

<h4>复制字符串到剪切板</h4>

<p>复制字符串采用临时添加一个元素，模拟选中内容进行选中的方式进行复制，复制后移除临时添加的元素即可。</p>

<pre><code>    //复制文本
    function copyText(text) {
        var element = createElement(text);
        element.select();
        element.setSelectionRange(0, element.value.length);
        document.execCommand('copy');
        element.remove();
        alert("已复制到剪切板");
    }

    //创建临时的输入框元素
    function createElement(text) {
        var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
        var element = document.createElement('textarea');
        // 防止在ios中产生缩放效果
        element.style.fontSize = '12pt';
        // 重置盒模型
        element.style.border = '0';
        element.style.padding = '0';
        element.style.margin = '0';
        // 将元素移到屏幕外
        element.style.position = 'absolute';
        element.style[isRTL ? 'right' : 'left'] = '-9999px';
        // 移动元素到页面底部
        let yPosition = window.pageYOffset || document.documentElement.scrollTop;
        element.style.top = `${yPosition}px`;
        //设置元素只读
        element.setAttribute('readonly', '');
        element.value = text;
        document.body.appendChild(element);
        return element;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
