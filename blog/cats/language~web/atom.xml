<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~web | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~web/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用html+css+js实现一个无限级树形控件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/20/lang-html-tree/"/>
    <updated>2022-11-20T19:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/20/lang-html-tree</id>
    <content type="html"><![CDATA[<p><a href="http://t.zoukankan.com/rxbook-p-10975673.html">http://t.zoukankan.com/rxbook-p-10975673.html</a></p>

<h4>gg.html</h4>

<pre><code>    &lt;!DOCTYPE html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
        &lt;title&gt;树形菜单示例&lt;/title&gt;

        &lt;style type="text/css"&gt;
        ul&gt;li {
            list-style: none;
        }

        /* 可展开*/
        .switch-open {
            margin-left:-12px;
            border:6px solid transparent;
            display:inline-block;
            height:0px;
            border-top-color: black;
        }

        /* 展开完毕*/
        .switch-close {
            margin-left:-12px;
            border:6px solid transparent;
            display:inline-block;
            height:0px;
            border-left-color: black;
            margin-bottom: 2px;

        }
        /* 改变CheckBox样式*/
        input[type='checkbox'] {
            height: 20px;

            -webkit-appearance:none;
            -moz-appearance: none;
            border: 1px solid #c9c9c9;
            border-radius: 3px;
            outline: none;
            color:white;
            text-align: center;
        }
        input[type='checkbox']:before {
            content: '√ ';
            color:transparent;
        }
        input[type=checkbox]:checked {
            background-color: #30add6;
        }
        input[type=checkbox]:checked:before {
            content: '√';
            color:white;
            font-weight: bold;
        }

        &lt;/style&gt;
    &lt;/head&gt;

    &lt;body&gt;

    &lt;div class="warp"&gt;
        &lt;ul id="container"&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript"&gt;

        //结构
        var json = {
            '0-0': {
                '0-0-0': {},
                '0-0-1': {
                    '0-0-1-0': {},
                    '0-0-1-1': {},
                    '0-0-1-2': {}
                },
                '0-0-2': {}
            },
            '0-1': {
                '0-1-0': {},
                '0-1-1': {}
            },
            '0-2': {}
        };

        //这里生成DOM
        function generate(json, par)
        {
            for (var attr in json) {
                var ele = document.createElement('li');
                if (json[attr].length &gt; 0) {
                    ele.innerHTML = ' &lt;input type="checkbox"&gt;&lt;/input&gt;'+attr;
                } else {
                    ele.innerHTML = '&lt;span&gt;&lt;span class="switch-open" onclick="toggle(this)"&gt;&lt;/span&gt;&lt;input type="checkbox" onclick="checkChange(this)"&gt;&lt;/input&gt;'+attr+'&lt;/span&gt;';
                    var nextpar = document.createElement('ul');
                    ele.appendChild(nextpar);
                    generate(json[attr], nextpar);
                }
                par.appendChild(ele);
            }
        }

        generate(json, document.getElementById('container'));


        //处理展开和收起
        function toggle(eve)
        {
            var par = eve.parentNode.nextElementSibling;
            if (par.style.display == 'none') {
                par.style.display = 'block';
                eve.className = 'switch-open';
            } else {
                par.style.display = 'none';
                eve.className = 'switch-close';
            }
        }

        //处理全部勾选和全部不选
        function checkChange(eve)
        {
            var oul = eve.parentNode.nextElementSibling;
            if (eve.checked) {
                for (var i = 0; i &lt; oul.querySelectorAll('input').length; i++) {
                    oul.querySelectorAll('input')[i].checked = true;
                }
            } else {
                for (var i = 0; i &lt; oul.querySelectorAll('input').length; i++) {
                    oul.querySelectorAll('input')[i].checked = false;
                }
            }
        }

    &lt;/script&gt;

    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个 table 实现固定列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/20/lang-table-sticky2/"/>
    <updated>2022-11-20T19:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/20/lang-table-sticky2</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/psp0001060/article/details/49705247">https://blog.csdn.net/psp0001060/article/details/49705247</a></p>

<pre><code>    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
    &lt;html&gt;
     &lt;head&gt; 
      &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; 
      &lt;title&gt;固定列头&lt;/title&gt; 
      &lt;script src="http://abcdxyzk.github.io/rs/js/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
      &lt;style type="text/css"&gt;

        .ui-table {
            border-collapse: collapse;
            width:100%;
            white-space: nowrap;
        }
        .ui-table th {
            border: 1px solid #ffffff;
            padding: 1px;
            text-align: center;
            height: 28px;
        }
        .ui-table td {
            border: 1px solid #ffffff;
            background-color: #eeeeee;
            padding: 3px;
            height: 28px;
        }
        div.x_auto_box {
            position: absolute;
            z-index: 1;
        }

        div.lock_box {
            float: left;
            position: sticky;
            left: 0;
            z-index: 5;

        }
        &lt;/style&gt; 
     &lt;/head&gt; 
     &lt;body&gt; 
      &lt;!-- 左侧DIV --&gt; 
      &lt;div id="list" &gt; 
       &lt;div class="lock_box" style='display: inline-block'&gt; 
        &lt;table class="ui-table"&gt; 
         &lt;thead&gt;
          &lt;tr&gt; 
           &lt;td&gt;No号&lt;/td&gt; 
           &lt;td&gt;员工号&lt;/td&gt; 
           &lt;td&gt;部门&lt;/td&gt; 
          &lt;/tr&gt; 
         &lt;/thead&gt;
         &lt;tbody&gt;
    &lt;?php
        for ($i = 0; $i &lt; 30; $i ++) {
            echo "&lt;tr&gt;";
            echo "&lt;td&gt;$i&lt;/td&gt;";
            echo "&lt;td&gt;DHL130023&lt;/td&gt;";
            echo "&lt;td&gt;动画联盟&lt;/td&gt;";
            echo "&lt;/tr&gt;";
        }
    ?&gt;
         &lt;/tbody&gt;
        &lt;/table&gt; 
       &lt;/div&gt; 

       &lt;!-- 右侧 --&gt; 
       &lt;div class="x_auto_box" id="showDiv" style='display: inline-block'&gt; 
    &lt;?php
        for ($i = 0; $i &lt; 30; $i ++) {
            echo '&lt;input type="hidden" name="dto.position" value="1" /&gt;';
        }
    ?&gt;
        &lt;table id="tableRight" class="ui-table"&gt; 
         &lt;thead&gt;
          &lt;tr&gt; 
           &lt;td&gt;性别&lt;/td&gt; 
           &lt;td&gt;出生日期&lt;/td&gt; 
           &lt;td&gt;民族&lt;/td&gt; 
           &lt;td&gt;籍贯&lt;/td&gt; 
           &lt;td&gt;婚姻状况&lt;/td&gt; 
           &lt;td&gt;学历&lt;/td&gt; 
           &lt;td&gt;职位&lt;/td&gt; 
           &lt;td&gt;毕业院校&lt;/td&gt; 
           &lt;td&gt;专业&lt;/td&gt; 
           &lt;td&gt;院校类别&lt;/td&gt; 
           &lt;td&gt;毕业日期&lt;/td&gt; 
           &lt;td&gt;年龄&lt;/td&gt; 
           &lt;td&gt;户籍地址&lt;/td&gt; 
           &lt;td&gt;入职时间&lt;/td&gt; 
           &lt;td&gt;转正日期&lt;/td&gt; 
           &lt;td&gt;本单位工龄&lt;/td&gt; 
           &lt;td&gt;合同签订&lt;/td&gt; 
           &lt;td&gt;合同年限&lt;/td&gt; 
           &lt;td&gt;日语等级&lt;/td&gt; 
           &lt;td&gt;社保账号&lt;/td&gt; 
           &lt;td&gt;公积金帐号&lt;/td&gt; 
           &lt;td&gt;身份证号&lt;/td&gt; 
           &lt;td&gt;毕业证书&lt;/td&gt; 
           &lt;td&gt;离职时间&lt;/td&gt; 
           &lt;td&gt;离职原因&lt;/td&gt; 
           &lt;td&gt;户口性质&lt;/td&gt; 
           &lt;td&gt;政治面貌&lt;/td&gt; 
           &lt;td&gt;参加工作&lt;/td&gt; 
           &lt;td&gt;联系电话&lt;/td&gt; 
           &lt;td&gt;邮箱&lt;/td&gt; 
           &lt;td&gt;家庭住址&lt;/td&gt; 
           &lt;td&gt;办公电话&lt;/td&gt; 
           &lt;td&gt;备注&lt;/td&gt; 
          &lt;/tr&gt;
         &lt;/thead&gt;
         &lt;tbody&gt;
    &lt;?php
    $h = &lt;&lt;&lt;here
          &lt;tr οnclick="javascript:window.location.href='/HRMS2/pages/personManageInfo.jsp?userid=SX00001'"&gt; 
           &lt;td&gt;男&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;未婚&lt;/td&gt; 
           &lt;td&gt;小学&lt;/td&gt; 
           &lt;td&gt;普通员工&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;专升本&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;0&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;0.0&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;0&lt;/td&gt; 
           &lt;td&gt;四级&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;非农业户口&lt;/td&gt; 
           &lt;td&gt;民主党派&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
           &lt;td&gt;&lt;/td&gt; 
          &lt;/tr&gt; 
    here;
        for ($i = 0; $i &lt; 30; $i ++) {
            echo $h;
        }
    ?&gt;
         &lt;/tbody&gt;
        &lt;/table&gt; 
       &lt;/div&gt; 
      &lt;/div&gt;  
     &lt;/body&gt;
    &lt;/html&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个 table 实现固定行、列]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/20/lang-table-sticky/"/>
    <updated>2022-11-20T19:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/20/lang-table-sticky</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/tiandi/p/13883306.html">https://www.cnblogs.com/tiandi/p/13883306.html</a></p>

<p><a href="https://www.cnblogs.com/acmilan/p/4217121.html">https://www.cnblogs.com/acmilan/p/4217121.html</a></p>

<p><a href="https://blog.csdn.net/m0_54281425/article/details/124478023">https://blog.csdn.net/m0_54281425/article/details/124478023</a></p>

<h4>all.css</h4>

<pre><code>    body {
            font-family: Tahoma, Times New Roman, Times, serif;
            font-size: 13px;
            background-color: #E8E8E8;
    }
    table {
            border: 0px;
            font-size: 12.99px;
            border-collapse:collapse;
            margin-bottom: 10px;
            margin-top: 10px;
    }
    th {
            padding-left: 1px;
            padding-right: 1px;
            border: 1px solid #B9B9B9;
            height: 28px;
            min-width: 55px;
    }
    td {
            padding-left: 3px;
            padding-right: 5px;
            white-space: nowrap;
            border: 1px solid #B9B9B9;
            height: 28px;
            min-width: 10px;
    }
</code></pre>

<h4>child2.css</h4>

<pre><code>    thead, thead tr th {
            position: sticky;
            z-index: 2;
            top: 0;
            background-clip: padding-box;
            background-color: #E8E8E8;
            outline-color: #B9B9B9;
            outline-style: solid;
            outline-width: thin;
    }

    @-moz-document url-prefix(){
    thead, thead tr th {
            border: none;
    }
    }

    th:nth-child(2) {
            position: sticky;
            z-index: 3;
            left: 0;
            background-clip: padding-box;
            background-color: #E8E8E8;
    }
    td:nth-child(2) {
            position: sticky;
            z-index: 1;
            left: 0;
            background-clip: padding-box;
            background-color: #E8E8E8;
    }
</code></pre>

<h4>table</h4>

<pre><code>    &lt;table &gt;
    &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;

    &lt;tr&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
</code></pre>

<h4>需要用到的2个属性</h4>

<pre><code>    table-layout : fixed  
    position : sticky
</code></pre>

<h4>table-layout</h4>

<p>table-layout属性有两种特定值：</p>

<p> auto（预设值）-表格的总宽度决定每一个储存格（cell）的最大值</p>

<p> fixed - 表格的总宽度决定于表格width的定义,以及各栏位（column）width的定义</p>

<p>为了让表格呈现滚动效果，必须设定table-layout:fixed 并且给与表格宽度。</p>

<pre><code>    table {
        table-layout: fixed;
        width: 100%;
    }
</code></pre>

<h4>Position</h4>

<p>大家对position 的作用应该不陌生，而固定表格则需要使用到 position : sticky 的设定</p>

<p>sticky 的表现类似于relative 和fixed 的合体，在目标区域中可见时，他的行为就像relative 不会有任何变化，而当页面滚动超出目标区域时，他的表现改为fixed会固定于目标位置</p>

<p>要注意的是当position : sticky应用于table，只能作用于<th>和<td>，并且一定要定义目标位置 left / right / top / bottom 才会出现固定效果！</p>

<pre><code>    thead tr th {
        position:sticky;
        top:0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alert函数执行顺序问题]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/20/lang-js-alert/"/>
    <updated>2022-11-20T19:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/20/lang-js-alert</id>
    <content type="html"><![CDATA[<p><a href="https://www.jb51.net/article/213413.htm">https://www.jb51.net/article/213413.htm</a></p>

<p>后续尝试了 alert() 和 prompt() 这两个跟 confirm 类似的弹对话框函数，情况都与此相同，它们都会跳过页面渲染先被执行。</p>

<p>还有更诡异的情况，我们给某一个 div 里赋值后，立刻 alert 此 div 里的内容，会发现 alert 显示正确的内容，而 div 里的内容却没有更新，并且会一直阻塞到我们点击确定。</p>

<p>alert、prompt、confirm 三个函数都类似，接下来我们就用最简单的 alert 来说。</p>

<h4>JavaScript 的线程模型</h4>

<p>JavaScript 引擎是单线程运行的，浏览器无论在什么时候都只且只有一个线程在运行 JavaScript 程序，初衷是为了减少 DOM 等共享资源的冲突。可是单线程永远会面临着一个问题，那就是某一段代码阻塞会导致后续所有的任务都延迟。又由于 JavaScript 经常需要操作页面 DOM 和发送 HTTP 请求，这些 I/O 操作耗时一般都比较长，一旦阻塞，就会给用户非常差的使用体验。</p>

<p>于是便有了事件循环（event loop）的产生，JavaScript 将一些异步操作或 有I/O 阻塞的操作全都放到一个事件队列，先顺序执行同步 CPU代码，等到 JavaScript 引擎没有同步代码，CPU 空闲下来再读取事件队列的异步事件来依次执行。</p>

<p>这些事件包括：</p>

<p>  setTimeout() 设置的异步延迟事件；</p>

<p>  DOM 操作相关如布局和绘制事件；</p>

<p>  网络 I/O 如 AJAX 请求事件；</p>

<p>  用户操作事件，如鼠标点击、键盘敲击。</p>

<h4>解决</h4>

<p>明白了原理， 再解决这个问题就有了方向，我们来分析这个问题：</p>

<p>1.由于页面渲染是 DOM 操作，会被 JavaScript 引擎放入事件队列；</p>

<p>2.alert() 是 window 的内置函数，被认为是同步 CPU代码；</p>

<p>3.JavaScript 引擎会优先执行同步代码，alert 弹窗先出现；</p>

<p>4.alert 有特殊的阻塞性质，JavaScript 引擎的执行被阻塞住；</p>

<p>5.点击 alert 的“确定”，JavaScript 没有了阻塞，执行完同步代码后，又读取事件队列里的 DOM 操作，页面渲染完成。</p>

<p>由上述原因，导致了诡异的 “alert执行顺序问题”。 我们无法将页面渲染变成同步操作，那么只好把 alert() 变为异步代码，从而才能在页面渲染之后执行。</p>

<p>对于这个解决方向，我们有两种方法可以使用：</p>

<h4>setTimeOut函数</h4>

<p>setTimeout() 这个函数可以延迟执行某些代码。而对于延迟执行的代码，JavaScript 引擎总是把这些代码放到事件队列里去，再去检查是否已经到了执行时间，再适时执行。代码进入事件队列，就意味着代码变成和页面渲染事件一样异步了。由于事件队列是有序的，我们如果用 setTimeout 延时执行，就可以实现在页面渲染之后执行 alert 的功能了。</p>

<p>setTimeout 的函数原型为 setTimeout(code, msec)，code 是要变为异步的代码或函数，msec 是要延时的时间，单位为毫秒。这里我们不需要它延时，只需要它变为异步就行了，所以可以将 msec 设置为 0；</p>

<p>同样，alert 之后的代码我们也需要处理，将它们跟 alert 一块放到 setTimeout 里异步执行。这样，代码就变为 setTimeout(&ldquo;alert(&lsquo;msg&rsquo;);doSomething();&rdquo;, 0);，如果觉得代码不够美观或字符串不好处理的话，可以将后续代码封装成一个函数放到 doSomething() 里即可。</p>

<h4>替换 Alert() 函数</h4>

<p>首先我们考虑替换掉 alert 函数的功能。其实大多数情况下我们替换掉 alert 并不是它不符合我们期待的执行顺序，而是因为它实在是太丑了，而且也不支持各种美化，可以想像在一个某一特定主题的网站上忽然弹出来一个灰色单调的对话框是多么不和谐。</p>

<p>这个我们可以考虑 Bootstrap 的 modal 模块，Bootstrap 在绝大多数网站上都在应用，而多引入一个 modal 模块也不会有多大影响。我们使用 modal 构造一个弹出对话框的样子，使用 modal 的 modal(&lsquo;toggle&rsquo;)/modal(&lsquo;show&rsquo;)/modal(&lsquo;hide&rsquo;) 方法可以很方便地控制 modal 的显隐。</p>

<p>替换掉对话框后，我们还需要解决后续代码执行的问题。使用 alert 函数时，我们点击确定后代码还会继续执行，而使用我们自定义的对话框可没有这种功能了，需要考虑把后续代码绑定在对话框的点击按钮上，这就需要使用 DOM 的 onclick 属性了，我们将后续函数内容抽出一个新的函数，在弹出对话框后将这个函数绑定在按钮的 onclick 事件上即可。</p>

<p>这里还需要注意，新函数内应该包括关闭 modal 对话框的内容。</p>

<p>当然，我们还可以再优化一下，抽象出来一个用来弹出对话框的函数替代 alert 函数，示例如下：</p>

<pre><code>    window.alert = function (message, callbackFunc) {
        $('#alertContent').html(message);
        $('#modal').show();
        $('#confirmButton').onclick(function () {
            $('#modal').hide();
            callbackFunc();
        });
    };
</code></pre>

<p>如此，我们在需要弹出框时调用新的 alert 函数，并传入 callbackFunc ，在里面做后续的事情就可以了。</p>

<h4>小结</h4>

<p>在上面的两个解决方案中，都利用了 JavaScript 的回调函数，前者将函数所为 alert 的参数并绑定到 DOM 的 onclick 事件，后者使用 setTimeout 将函数转为异步执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 图片弹窗]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/28/lang-web-img/"/>
    <updated>2022-08-28T20:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/28/lang-web-img</id>
    <content type="html"><![CDATA[<p><a href="https://c.runoob.com/codedemo/2266/">https://c.runoob.com/codedemo/2266/</a></p>

<h3>html</h3>

<pre><code>    &lt;!DOCTYPE html&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;meta charset="utf-8"&gt;
            &lt;title&gt;图片弹窗&lt;/title&gt;
        &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- 触发弹窗 - 图片改为你的图片地址 --&gt;
        &lt;img id="myImg" src="https://static.runoob.com/images/mix/69599048-B5F4-4F07-80F4-F73EC45C0054.png" alt="beautiful" width="300" height="200"&gt;

        &lt;!-- 弹窗 --&gt;
        &lt;div id="myModal" class="modal"&gt;

        &lt;!-- 关闭按钮 --&gt;
        &lt;span class="close" onclick="document.getElementById('myModal').style.display='none'"&gt;&amp;times;&lt;/span&gt;

        &lt;!-- 弹窗内容 --&gt;
        &lt;img class="modal-content" id="img01"&gt;

        &lt;!-- 文本描述 --&gt;
        &lt;div id="caption"&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<h3>js</h3>

<pre><code>    // 获取弹窗
    var modal = document.getElementById('myModal');
    //获取图片插入到弹窗
    var img = document.getElementById('myImg');
    var modalImg = document.getElementById('img01');
    var captionText = document.getElementById("caption");

    //获取&lt;span&gt;元素，设置关闭按钮
    var span = document.getElementsByClassName("close")[0];
    //当点击(x)，关闭弹窗
    span.onclick=function(){
        modal.style.display="none";
        modalImg.src="";
    }

    img.onclick=function(){
        modal.style.display="block";
        modalImg.src=this.src;
        captionText.innerHTML=this.alt;
    }

    modal.style.display="block";
    modalImg.src=img.src;
    captionText.innerHTML=img.alt;
</code></pre>

<h3>css</h3>

<pre><code>    /* 触发弹窗图片的样式*/
    #myImg {
        border-radius:5px;
        cursor:pointer;
        transition:0.3x;
    }
    #myImg:hover{
        opacity:0.7;
    }
    /*弹窗背景*/
    .modal{
        display:none;
        position:fixed;
        z-index:1;
        padding-top:100px;
        left:0;
        top:0;
        //width:90%;
        //height:90%;
        overflow:auto;
        background-color:rgb(0,0,0);
        background-color:rgba(0,0,0,0.9);
    }
    /*图片*/
    .modal-content{
        margin:auto;
        display:block;
        width:90%;
        max-width:900px;
    }
    /*文本内容*/
    #caption{
        margin:auto;
        display:block;
        width:90%;
        max-width:900px;
        text-align:center;
        color:#ccc;
        padding:10px 0;
        height:30px;
    }
    /*添加动画*/
    .modal-content, #caption{
        -webkit-animation-name:zoom;
        -webkit-animation-duration:0.2s;
        animation-name:zoom;
        animation-duration:0.2s;
    }
    @-webkit-keyframes zoom{
        from{-webkit-transform:scale(0)}
        to{-webkit-transform:scale(1)}
    }
    @keyframes zoom{
        from{transform:scale(0)}
        to{transform:scale(1)}
    }
    /*关闭按钮*/
    .close{
        position:absolute;
        top:1px;
        right:35px;
        color:#f1f1f1;
        font-size:50px;
        font-weight:bold;
        transition:0.3s;
    }
    .close:hover,
    .close:focus{
        color:#bbb;
        text-decoration:none;
        cursor:pointer;
    }
    /*小屏幕中图片宽度为100%*/
    @media only screen and (max-width:700px){
        .modal-content{
            width:100%;
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
