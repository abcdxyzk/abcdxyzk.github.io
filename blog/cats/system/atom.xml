<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-07-31T15:24:28+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LVM 输出更多信息]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lvm-attr/"/>
    <updated>2024-07-31T15:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lvm-attr</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/useradd/p/10005211.html">https://www.cnblogs.com/useradd/p/10005211.html</a></p>

<p>显示LVM信息常用 pvs,lvs,vgs 命令，如果想显示详细信息可以使用 pvdisplay ,vgdisplay ,lvdisplay，其中前面命令仅用于简单输出 lvm 对象相关信息，可以格式化输出；第二种命令会详细显示 lvm 对像信息，但不易于格式化输出。</p>

<pre><code>    pvs # 显示物理卷(pv)信息
    vgs # 显示逻辑卷组(vg)信息
    lvs # 显示逻辑卷(lv)信息
</code></pre>

<h4>显示额外信息</h4>

<pre><code>    pvs -v
    vgs -v
    lvs -v
</code></pre>

<h4>只显示 pv_name,dev_size 字段</h4>

<pre><code>    [root@redhat6 lvm]# pvs -o pv_name,dev_size
      PV         DevSize
      /dev/sda2   14.51g
      /dev/sdb     4.00g
</code></pre>

<p>增加 -o 参数，指定需要输出的字段。</p>

<h4>在pvs 默认输出上，增加字段</h4>

<pre><code>    [root@redhat6 lvm]# pvs -o +pv_uuid
      PV         VG         Fmt  Attr PSize  PFree PV UUID                              
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0  dpTW84-DHRy-PIA9-u1tY-YUH4-XQKw-8Hy2Zm
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 2.81g YKIQwX-zc6H-TZ65-P3qr-sRfk-LX0p-T18vdG
</code></pre>

<p>如果想在默认输出的前提下增加字段，可以使用 -o + 字段名。</p>

<h4>vgs 显示卷组成员</h4>

<pre><code>    [root@redhat6 lvm]# vgs -o +lv_name
      VG         #PV #LV #SN Attr   VSize  VFree LV
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_root
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_swap
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_pgdata_01
</code></pre>

<h2>字段排序</h2>

<h4>根据 lv_size 字段排序</h4>

<pre><code>    [root@redhat6 lvm]# lvs -O lv_size
      LV           VG         Attr   LSize   Origin Snap%  Move Log Copy%  Convert
      lv_pgdata_01 vg_redhat6 -wi-ao 700.00m
      lv_swap      vg_redhat6 -wi-ao   1.91g
      lv_root      vg_redhat6 -wi-ao  13.10g
</code></pre>

<p>如果想根据输出字段排序，可以使用 -O 字段名 选项。</p>

<h2>附 lvs,vgs,pvs 字段</h2>

<h4>4.1 lvs 字段</h4>

<pre><code>    lv_all               - All fields in this section.
    lv_uuid              - Unique identifier.
    lv_name              - Name.  LVs created for internal use are enclosed in brackets.
    lv_path              - Full pathname for LV.
    lv_attr              - Various attributes - see man page.
    lv_major             - Persistent major number or -1 if not persistent.
    lv_minor             - Persistent minor number or -1 if not persistent.
    lv_read_ahead        - Read ahead setting in current units.
    lv_kernel_major      - Currently assigned major number or -1 if LV is not active.
    lv_kernel_minor      - Currently assigned minor number or -1 if LV is not active.
    lv_kernel_read_ahead - Currently-in-use read ahead setting in current units.
    lv_size              - Size of LV in current units.
    seg_count            - Number of segments in LV.
    origin               - For snapshots, the origin device of this LV.
    origin_size          - For snapshots, the size of the origin device of this LV.
    snap_percent         - For snapshots, the percentage full if LV is active.
    copy_percent         - For mirrors and pvmove, current percentage in-sync.
    move_pv              - For pvmove, Source PV of temporary LV created by pvmove.
    convert_lv           - For lvconvert, Name of temporary LV created by lvconvert.
    lv_tags              - Tags, if any.
    mirror_log           - For mirrors, the LV holding the synchronisation log.
    modules              - Kernel device-mapper modules required for this LV.
</code></pre>

<h4>4.2 pvs 字段</h4>

<pre><code>    pv_all               - All fields in this section.
    pe_start             - Offset to the start of data on the underlying device.
    pv_size              - Size of PV in current units.
    pv_free              - Total amount of unallocated space in current units.
    pv_used              - Total amount of allocated space in current units.
    pv_attr              - Various attributes - see man page.
    pv_pe_count          - Total number of Physical Extents.
    pv_pe_alloc_count    - Total number of allocated Physical Extents.
    pv_tags              - Tags, if any.
    pv_mda_count         - Number of metadata areas on this device.
    pv_mda_used_count    - Number of metadata areas in use on this device.
</code></pre>

<h4>4.3 vgs 字段</h4>

<pre><code>    vg_all               - All fields in this section.
    vg_fmt               - Type of metadata.
    vg_uuid              - Unique identifier.
    vg_name              - Name.
    vg_attr              - Various attributes - see man page.
    vg_size              - Total size of VG in current units.
    vg_free              - Total amount of free space in current units.
    vg_sysid             - System ID indicating when and where it was created.
    vg_extent_size       - Size of Physical Extents in current units.
    vg_extent_count      - Total number of Physical Extents.
    vg_free_count        - Total number of unallocated Physical Extents.
    max_lv               - Maximum number of LVs allowed in VG or 0 if unlimited.
    max_pv               - Maximum number of PVs allowed in VG or 0 if unlimited.
    pv_count             - Number of PVs.
    lv_count             - Number of LVs.
    snap_count           - Number of snapshots.
    vg_seqno             - Revision number of internal metadata.  Incremented whenever it changes.
    vg_tags              - Tags, if any.
    vg_mda_count         - Number of metadata areas on this VG.
    vg_mda_used_count    - Number of metadata areas in use on this VG.
    vg_mda_free          - Free metadata area space for this VG in current units.
    vg_mda_size          - Size of smallest metadata area for this VG in current units.
    vg_mda_copies        - Target number of in use metadata areas in the VG.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVM 缩减 VG 大小 ( pvmove )]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/31/lvm-pvmove/"/>
    <updated>2024-07-31T15:09:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/31/lvm-pvmove</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/useradd/p/10005212.html">https://www.cnblogs.com/useradd/p/10005212.html</a></p>

<p>pvmove 命令用来将一块盘上的数据移到另一块盘，可以移动整块盘的数据，也可以移动指定 extent 范围的数据， 接下来演示 pvmove 的一个例子，下面这个例子的 VG 由三个 PV 组成，我们想将其中一个 PV 的数据移动其它 PV中，空闲的PV 可以用来创建新的 VG。</p>

<h4>1 显示 pv 使用信息</h4>

<pre><code>     [root@redhat6 ~]# pvs -o+pv_used
      PV         VG         Fmt  Attr PSize  PFree Used  
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0   14.51g
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 2.62g   1.38g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 5.60g 404.00m
</code></pre>

<p>从上面看出，有三块 pv</p>

<h4>2 移动 /dev/sdb 数据到 /dev/sdc 盘上</h4>

<pre><code>    [root@redhat6 ~]# pvmove /dev/sdb /dev/sdc
      /dev/sdb: Moved: 0.8%
      /dev/sdb: Moved: 28.3%
      /dev/sdb: Moved: 42.5%
      /dev/sdb: Moved: 57.2%
      /dev/sdb: Moved: 72.8%
      /dev/sdb: Moved: 92.6%
      /dev/sdb: Moved: 100.0%
</code></pre>

<p>上述命令将 /dev/sdb 文件移动 /dev/sdc 上。</p>

<h4>3 再次查看 pv 信息</h4>

<pre><code>    [root@redhat6 ~]# pvs -o+pv_used
      PV         VG         Fmt  Attr PSize  PFree Used 
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0  14.51g
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 4.00g     0
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g  1.77g
</code></pre>

<p>从上面看出 /dev/sdb 盘使用空间为 0，说明空间被腾出。</p>

<h4>4 将 /dev/sdb 从 VG vg_redhat6 中移出</h4>

<pre><code>    [root@redhat6 ~]# vgreduce /dev/vg_redhat6 /dev/sdb 
      Removed "/dev/sdb" from volume group "vg_redhat6" 

    [root@redhat6 ~]# pvs
      PV         VG         Fmt  Attr PSize  PFree
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0
      /dev/sdb              lvm2 a--   4.00g 4.00g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g 
</code></pre>

<p>根据pvs 信息， /dev/sdb 已经不是 VG  vg_redhat6 的成员了。 那么 /dev/sdb 盘可以移除，或者它用。</p>

<h4>5 在 /dev/sdb 上创建新的 VG</h4>

<pre><code>    [root@redhat6 ~]# vgcreate vg_pgroot  /dev/sdb
      Volume group "vg_pgroot" successfully created
    [root@redhat6 ~]# vgs
      VG         #PV #LV #SN Attr   VSize  VFree
      vg_pgroot    1   0   0 wz--n-  4.00g 4.00g
      vg_redhat6   2   4   0 wz--n- 20.50g 4.22g
</code></pre>

<h4>6 再次查看 PV  /dev/sdb 信息</h4>

<pre><code>    [root@redhat6 ~]# pvs
      PV         VG         Fmt  Attr PSize  PFree
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0
      /dev/sdb   vg_pgroot  lvm2 a--   4.00g 4.00g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g
</code></pre>

<p>/dev/sdb 已经是 VG vg_pgroot 的成员了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UPS电池的放电时间计算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/17/ups-bat/"/>
    <updated>2024-07-17T13:56:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/17/ups-bat</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/TXNMG/article/details/127646930">https://blog.csdn.net/TXNMG/article/details/127646930</a></p>

<p><a href="https://zhidao.baidu.com/question/1521553747325286300.html">https://zhidao.baidu.com/question/1521553747325286300.html</a></p>

<h4>UPS系统蓄电池放电时间的估算</h4>

<p>因电池放电时间与放电电流、环境温度、负载类型、放电速率、电池容量等多因素相关，故实际放电时间无法直接用公式推导出。</p>

<p>我们可以先通过以下公式估算出UPS系统蓄电池平均放电电流：</p>

<p>蓄电池平均放电电流I≈UPS负载功率P÷（Ev×η）</p>

<p>其中蓄电池组平均放电电压Ev可取蓄电池组标称电压与放电终止电压的中间值(标称12V的单块蓄电池平均放电电压取11.25V)，UPS效率η一般取0.8。</p>

<p>求出电池平均放电电流后，再算出放电倍率（放电倍率＝放电电流÷蓄电池标称容量）,即可从电池在各温度下放电曲线图上查出相应的放电时间。如果没有蓄电池放电曲线图,可依据以下规律估算放电时间(蓄电池放电时间＝蓄电池放电容量÷蓄电池平均放电电流):</p>

<p>放电倍率为0.05C时,蓄电池放电容量≥标称容量（环境温度25℃）</p>

<p>放电倍率为0.1C时,蓄电池放电容量≈0.95倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.2C时,蓄电池放电容量≈0.85倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.3C时,蓄电池放电容量≈0.8倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.4C时,蓄电池放电容量≈0.75倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.5C时,蓄电池放电容量≈0.7倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.6C时,蓄电池放电容量≈0.65倍标称容量（环境温度25℃）</p>

<p>放电倍率为0.8C时,蓄电池放电容量≈0.55倍标称容量（环境温度25℃）</p>

<p>放电倍率为1C时,蓄电池放电容量≈0.4倍标称容量（环境温度25℃）</p>

<p>放电倍率为2C时,蓄电池放电容量≈0.3倍标称容量（环境温度25℃）</p>

<p>例：UPS负载功率1400W，蓄电池组平均放电电压Ev=90V（8块标称12V100AH的蓄电池串联，平均放电电压11.25×8＝90V）。</p>

<p>蓄电池平均放电电流I≈1400÷（90×0.8）≈19.4A</p>

<p>放电倍率＝19.4÷100≈0.2C, 此放电倍率下,蓄电池组放电容量≈0.85倍标称容量。</p>

<p>UPS系统蓄电池放电时间≈（0.85×100）÷19.4≈4.38小时。</p>

<h4>UPS用的12V电池一般终止电压为10.5V。</h4>

<p>铅酘蓄电池的放电截止电压是随放电电流不同而不同的。其值并不是固定的。</p>

<p>假设铅酸电池的标准容量放电电流为C（如容量60AH的电池，C=60A)。</p>

<p>当放电流I=&lt;0.05C时，单体电池截止电压为 1.9V，12V电池放电截止电压为11.4V。 <code>1.9 * 6 = 11.4</code></p>

<p>当放电流I=0.1-0.3C时，单体电池截止电压为 1.8V，12V电池放电截止电压为10.8V。   <code>1.8 * 6 = 10.8</code></p>

<p>当放电流I=0.4-0.5C时，单体电池截止电压为 1.75V，12V电池放电截止电压为10.5V。  <code>1.75 * 6 = 10.5</code></p>

<p>当放电流I=0.6-3C时，单体电池截止电压为 1.6V，12V电池放电截止电压为9.6V。  <code>1.6 * 6 = 9.6</code></p>

<h4>查表</h4>

<p>首先要明确一个概念，就是蓄电池的放电电流与放电时间不是线性的，有人认为20A放电5小时就要用100AH的，这样就错了。蓄电池的容量一般都是20HR（小时率）的，也就是说只有以5A放电20小时才是配100AH的，因为100AH的电池在5A可以放电20小时，在10A时只有9小时左右，20A时只有4小时左右。但在2A时确可以放60小时以上。这就是蓄电池放电时间与电流的非线性关系。正因为非线性关系就有了下面这个表。</p>

<p><img src="/images/system/20240717-1.jpeg" alt="" /></p>

<p><img src="/images/system/20240717-2.jpeg" alt="" /></p>

<h4>如果知道负载功率，如何来配置蓄电池组的数量来达到预定的时间？</h4>

<p>如负载的的功率为2000W，需要延时2小时。怎样配UPS及蓄电池呢？
首先算出蓄电池的放电电流，能量守恒，UPS的放电电量与蓄电池的放电电量是基本相等的。所以可以直接按2000W的功率来算出电池的放电电流。如果我们配的UPS是山特3KVA的，12V电池个数是8只，终止电压是<code>10.5*8＝84V</code>，放电时的计算电流是2000W/84V＝23.8A，如逆变器的效率按95％来算，则实际电流为23.8/0.95＝25A。</p>

<p>再对照上面的表，看有哪个电池的规格能在终止电压为10.5V、放电电流25A时可以达到2小时，很明显，MF12-65（12V-65AH）的这款可以达到。所以电池的配置就选12V-65AH 8只。这样就可以满足要求了。</p>

<p>其它规格也都是这样计算的，又比如，12V-100AH的电池在27.2A时可以放电3小时，如果电流在55A时需要放电3小时，就需要选12V-100AH的电池2组并联使用才可以达到相应的时间。</p>

<h4>如果知道蓄电池的容量，如何知道能放电多长时间？</h4>

<p>比如现有一台6KVA的UPS，配了一组MF12-26（12V-26AH）的蓄电池，想知道能放电多长时间。6KVA的UPS功率因素是0.7，最大有功功率是4.2KW，首先要确定UPS后面接设备的实际功率是多大，可以估计一下，也可以用钳流表来测一下电流。</p>

<p>如果半载即2KW左右的话能延时多久呢？6KVA的直流电压是240V，放电终止电压是210V，逆变器效率是95％，这样电池的放电电流是：2000W/210V/0.95＝10A，再对比上面的恒流参数表，MF12-26的电池在9.96时可以放电2小时，因此，如果设备功率为2KW时，这样一组电池的放电时间约为2小时。</p>

<p>如果按满载，即设备的功率为4200W时，这样一组12V-26AH的电池能放电多久呢？和上面一样，电池的放电电流是4200W/210V/0.95＝21A。再对比上面的恒流参数表，MF12-26的电池在21.7A6时可以放电45分钟，因此，如果设备功率为4.2KW时，这样一组电池的放电时间约为45分钟。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux查看电池损耗]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/15/bat/"/>
    <updated>2024-07-15T11:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/15/bat</id>
    <content type="html"><![CDATA[<p><a href="https://www.dbs724.com/435077.html">https://www.dbs724.com/435077.html</a></p>

<p>查看当前电池的容量</p>

<pre><code>    cat /sys/class/power_supply/BAT0/capacity
</code></pre>

<p>查询电池的状态</p>

<pre><code>    cat /sys/class/power_supply/BAT0/status
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS7 yum]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/12/centos7-yum/"/>
    <updated>2024-07-12T17:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/12/centos7-yum</id>
    <content type="html"><![CDATA[<h4>centos7 阿里云 yum</h4>

<p>备份原有的YUM仓库配置文件</p>

<pre><code>    sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
</code></pre>

<p>下载阿里云的CentOS仓库配置文件</p>

<pre><code>    sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</code></pre>

<p>清理缓存并生成新的仓库缓存</p>

<pre><code>    sudo yum clean all
    sudo yum makecache
</code></pre>
]]></content>
  </entry>
  
</feed>
