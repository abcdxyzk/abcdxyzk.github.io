<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[邮件MIME格式分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/23/mail-mine/"/>
    <updated>2023-01-23T16:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/23/mail-mine</id>
    <content type="html"><![CDATA[<h3>base64 解码</h3>

<pre><code>    From: "=?gb2312?B?26zQocHB?=" &lt;gaoxl@legendsec.com&gt;

    26zQocHB 是 base64 编码, 解码方法：

    echo 26zQocHB | base64 -d &gt; /tmp/dd

    iconv -fgbk -tutf8 /tmp/dd
</code></pre>

<hr />

<p><a href="https://www.cnblogs.com/crystalray/atricles/3302427.html">https://www.cnblogs.com/crystalray/atricles/3302427.html</a></p>

<p>总体来说，MIME消息由消息头和消息体两大部分组成。这里，分别称为为邮件头、邮件体。</p>

<h2>邮件头</h2>

<p>邮件头包含了发件人、收件人、主题、时 间、MIME版本、邮件内容的类型等重要信息。每条信息称为一个域，由域名后加“: ”和信息内容构成，可以是一行，较长的也可以占用多行。域的首行必须“顶头”写，即左边不能有空白字符（空格和制表符）；续行则必须以空白字符打头，且第 一个空白字符不是信息本身固有的，解码时要过滤掉。</p>

<p>邮件头中不允许出现空行。有一些邮件不能被邮件客户端软件识别，显示的是原始码，就是因为首行是空行。</p>

<p>例如：</p>

<pre><code>    Date: Mon, 29 Jun 2009 18:39:03 +0800
    From: "=?gb2312?B?26zQocHB?=" &lt;gaoxl@legendsec.com&gt;
    To: "moreorless" &lt;moreorless@live.cn&gt;
    Cc: "gxl0620" &lt;gxl0620@163.com&gt;
    BCC: "=?gb2312?B?26zQocHB?=" &lt;venus.oso@gmail.com&gt;
    Subject: attach
    Message-ID: &lt;200906291839032504254@legendsec.com&gt;
    X-mailer: Foxmail 6, 15, 201, 21 [cn]
    Mime-Version: 1.0
</code></pre>

<p><img src="/images/system/20230123-1.jpg" alt="" /></p>

<h2>邮件体</h2>

<p>在邮件体中，大致有如下一些域:</p>

<p><img src="/images/system/20230123-2.jpg" alt="" /></p>

<p>有的域除了值之外，还带有参数。值与参数、参数与参数之间以“;”分隔。参数名与参数值之间以“=”分隔。</p>

<p>邮件体包含邮件的内容，它的类型由邮件头的“Content-Type”域指出。常见的简单类型有text/plain(纯文本)和text/html(超文本)。</p>

<p>multipart类型，是MIME邮件的精髓。邮件体被分为多个段，每个段又包含段头和段体两部分，这两部分之间也以空行分隔。常见的multipart类型有三种：multipart/mixed, multipart/related和multipart/alternative。从它们的名称，不难推知这些类型各自的含义和用处。它们之间的层次关系可归纳为下图所示：</p>

<p><img src="/images/system/20230123-3.jpg" alt="" /></p>

<p>可以看出，如果在邮件中要添加附件，必须定义multipart/mixed段；如果存在内嵌资源，至少要定义multipart/related段；如果纯文本与超文本共存，至少要定义multipart/alternative段。</p>

<p>示例：</p>

<p><img src="/images/system/20230123-4.jpg" alt="" />
 </p>

<h3>MIME编码</h3>

<p>参考rfc2047，MIME Part Three:Message Header Extensions for Non-ASCII Text</p>

<p><a href="http://tools.ietf.org/html/rfc2047">http://tools.ietf.org/html/rfc2047</a></p>

<p>MIME编码的两种方法：</p>

<p>  对邮件进行编码最初的原因是因为Internet上的很多网关不能正确传输8bit内码的字符，比如汉字等。编码的原理就是把8bit的内容转换成7bit的形式以能正确传输，在接收方收到之后，再将其还原成8bit的内容。   </p>

<p>  MIME是“多用途网际邮件扩充协议”的缩写，在MIME协议之前，邮件的编码曾经有过UUENCODE等编码方式，但是由于MIME协议算法简单，并且易于扩展，现在已经成为邮件编码方式的主流，不仅是用来传输8 bit的字符，也可以用来传送二进制的文件，如邮件附件中的图像、音频等信息，而且扩展了很多基于MIME的应用。</p>

<p>从编码方式来说，MIME 定义了两种编码方法Base64与QP(Quote-Printable)：</p>

<h4>Base64</h4>

<p>  Base64是一种通用的方法，其原理很简单，就是把三个Byte的数据用4个Byte表示，这样，这四个Byte中，实际用到的都只有前面6 bit，这样就不存在只能传输7bit的字符的问题了。Base64的缩写一般是“B”。</p>

<p>Base64将输入的字符串或一段数据编码成只含有{&lsquo;A&rsquo;-&lsquo;Z&rsquo;, &lsquo;a&rsquo;-&lsquo;z&rsquo;, &lsquo;0&rsquo;-&lsquo;9&rsquo;, &lsquo;+&rsquo;, &lsquo;/&rsquo;}这64个字符的串，'=&lsquo;用于填充。其编码的方法是，将输入数据流每次取6bit，用此6bit的值(0-63)作为索引去查表，输出相应字符。这样，每3个字节将编码为4个字符(3×8 → 4×6)；不满4个字符的以&rsquo;=&lsquo;填充。 Base64的算法很简单，它将字符流顺序放入一个24位的缓冲区，缺字符的地方补零。
然后将缓冲区截断成为4个部分，高位在先，每个部分6位，用64个字符重新表示。如果输入只有一个或两个字节，那么输出将用等号“=”补足。这可以隔断附加的信息造成编码的混乱。</p>

<h4>QP</h4>

<p>另一种方法是QP(Quote-Printable)方法，通常缩写为“Q”方法，其原理是把一个8 bit   的字符用两个16进制数值表示，然后在前面加“=”。所以我们看到经过QP编码后的文件通常是这个样子：=B3=C2=BF=A1=C7=E5=A3=AC=C4=FA=BA=C3=A3=A1。</p>

<p>QP编码要求编码后每行不能超过76个字符。当超过这个限制时，将使用软换行，用”=”表示编码行的断行，后接CRLF。（76的限制包括”=”）。</p>

<p>“=” 等号被编码为”=3D”。</p>

<p>tab和空格出现在行尾时，需要被编码为”=09”（tab）  “=20”(space)</p>

<p>编码格式：encoded-word = &ldquo;=?&rdquo; charset &ldquo;?&rdquo; encoding &ldquo;?&rdquo; encoded-text &ldquo;?=&rdquo;</p>

<p>编码信息有"=?&ldquo;和&rdquo;?=&ldquo;括起来，&rdquo;=?&ldquo;后是字符集名称，再一个&rdquo;?&ldquo;后是编码方式，再一个&rdquo;?&ldquo;后是编码后的字符串。字符集和编码方式都不区分大小写。</p>

<p>字符集可以是任意系统支持的字符集（iso-8859-1、utf-8、gb2312、gbk、gb18030&hellip;.）</p>

<p><img src="/images/system/20230123-5.jpg" alt="" /></p>

<p>编码方式有两种："B"或"b"代表base64编码；"Q"或"q"代表QP编码。</p>

<p>Generally, an &ldquo;encoded-word&rdquo; is a sequence of printable ASCII characters that begins with &ldquo;=?&rdquo;, ends with &ldquo;?=&rdquo;, and has two &ldquo;?"s in between. It specifies a character set and an encoding method, and also includes the original text encoded as graphic ASCII characters, according to the rules for that encoding method.</p>

<p> </p>

<h3>SMTP与MIME的关系</h3>

<p><img src="/images/system/20230123-6.jpg" alt="" /></p>

<p>从上图可以看出发件人、收件人地址都出现了两次，一次在smtp命令中（SMTP email address），一次在邮件正文中（MIME email address）。需要注意的是：</p>

<p>  邮件正文中可以包含发件人、收件人的别名，smtp命令中不可以</p>

<p>  密送人的地址不一定会出现在邮件正文中。不同客户端实现不同。</p>

<h4>参考：</h4>

<p>rfc4021，Registration of Mail and MIME Header Fields,</p>

<p><a href="http://www.apps.ietf.org/rfc/rfc4021.html,">http://www.apps.ietf.org/rfc/rfc4021.html,</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVM 扩容]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/01/lvm-extend/"/>
    <updated>2023-01-01T16:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/01/lvm-extend</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yy9knsg/p/16552494.html">https://www.cnblogs.com/yy9knsg/p/16552494.html</a></p>

<p><a href="https://tool.4xseo.com/article/200995.html">https://tool.4xseo.com/article/200995.html</a></p>

<pre><code>    pvdisplay

    vgdisplay

    lvdisplay
</code></pre>

<h4>初始化分区</h4>

<pre><code>    pvcreate /dev/vdx333
</code></pre>

<h4>将分区加入到虚拟卷组名</h4>

<pre><code>    # vgextend 虚拟卷组名 新增的分区

    vgextend centos /dev/sda3
</code></pre>

<h4>再次查看卷组情况</h4>

<pre><code>    vgdisplay
</code></pre>

<h4>查看当前磁盘情况</h4>

<pre><code>    df -h
    记下需要扩展的文件系统名，例如 /dev/mapper/centos-root

    lvdisplay
    记下需要扩展的文件系统名，例如 /dev/centos/root
</code></pre>

<p>两个是一样的</p>

<pre><code>    ls /dev/centos/root -l
    lrwxrwxrwx. 1 root root 7 Dec 20 20:11 /dev/centos/root -&gt; ../dm-0

    ls -l /dev/mapper/centos-root 
    lrwxrwxrwx. 1 root root 7 Dec 20 20:11 /dev/mapper/centos-root -&gt; ../dm-0
</code></pre>

<h4>扩容已有的卷组容量</h4>

<pre><code>    lvextend -L +需要扩展的容量 需要扩展的文件系统名 

    lvextend -L +29G /dev/mapper/centos-root
</code></pre>

<h4>以上只是卷的扩容，然后我们需要将文件系统扩容</h4>

<pre><code>    cat /etc/fstab | grep centos-root

    /dev/mapper/centos-root /                       xfs     defaults        0 0
</code></pre>

<p>这里可以看到，文件系统是xfs，所以需要xfs的命令来扩展磁盘空间</p>

<pre><code>    xfs_growfs 文件系统名

    xfs_growfs /dev/mapper/centos-root
</code></pre>

<p>df -h 可以看到，现在已经扩容成功了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OBS虚拟摄像头，实现合并多摄像头到腾讯会议等]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/12/30/base-obs/"/>
    <updated>2022-12-30T16:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/12/30/base-obs</id>
    <content type="html"><![CDATA[<p>OBS-Studio-25.0.8-Full-Installer-x64.exe</p>

<p>obs-virtualcam-2.0.5-Windows-installer.exe</p>

<h4>1 obs添加两个视频捕获源</h4>

<p><img src="/images/system/20221230-1.png" alt="" /></p>

<h4>2 obs -> 工具 -> 虚拟摄像头</h4>

<p>需要设置水平翻转</p>

<p><img src="/images/system/20221230-2.png" alt="" /></p>

<h4>3 腾讯视屏选择OBS-Camera</h4>

<p><img src="/images/system/20221230-3.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 7 搭建邮件服务器搭建(postfix+dovecot)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/12/29/base-postfix/"/>
    <updated>2022-12-29T16:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/12/29/base-postfix</id>
    <content type="html"><![CDATA[<h4>设置发件人、服务器</h4>

<p>vim /etc/mail.rc</p>

<pre><code>    set from=secure@41.cc smtp=192.168.100.41
</code></pre>

<pre><code>    mail -s "tttt" 1@qq.com&lt;/tmp/jkl

    tail -f  /var/log/maillog
</code></pre>

<h4>mail 发送邮件</h4>

<pre><code>    1)  无邮件正文
    mail -s "主题"  收件地址

    2) 有邮件正文
    mail -s "主题"  收件地址&lt; 文件(邮件正文.txt)
    echo "邮件正文" | mail -s 邮件主题  收件地址
    cat 邮件正文.txt | mail -s 邮件主题  收件地址

    3)  带附件
    mail -s "主题"  收件地址  -a 附件 &lt; 文件(邮件正文.txt)
    mail -s "邮件主题" 1968089885@foxmail.com -a /data/findyou.tar.gz &lt; /data/findyou.txt
</code></pre>

<h4>认证？</h4>

<pre><code>    set from=secure@41.cc smtp=192.168.100.41
    set smtp-auth-user=secure@41.cc smtp-auth-password=123456 smtp-auth=login
</code></pre>

<h4>配置邮件路径与存储路径</h4>

<p>vim /etc/dovecot/conf.d/10-mail.conf</p>

<p>mail_location = mail_location = maildir:~/Maildir   //取消该行注释即可。</p>

<p>因为我们修改了postfix的主配置文件 home_mailbox = Maildir/，</p>

<p>即用户的新邮件会放到/home/user/Maildir目录下，所以dovecot也得修改mail_location目录</p>

<hr />

<p><a href="https://blog.csdn.net/qq_51235445/article/details/125429006">https://blog.csdn.net/qq_51235445/article/details/125429006</a></p>

<p><a href="https://blog.csdn.net/dingguanyi/article/details/82432294">https://blog.csdn.net/dingguanyi/article/details/82432294</a></p>

<p><a href="http://t.zoukankan.com/rusking-p-7597617.html">http://t.zoukankan.com/rusking-p-7597617.html</a></p>

<p><a href="https://blog.csdn.net/shiyuan0/article/details/44101169">https://blog.csdn.net/shiyuan0/article/details/44101169</a></p>

<h3>实验环境：</h3>

<p>CentOS 7（邮件服务器） ip 192.168.80.128，同网段的一台Windows7（客户端测试）</p>

<h4>1、配置服务器主机名称，服务器主机名称与发信域名要一致</h4>

<pre><code>    [root@lie ~]# vim /etc/hostname
    mail.lie.com
    [root@lie ~]# hostname
    mail.lie.com
</code></pre>

<h4>2、配置Postfix服务程序</h4>

<p>yum安装一下, 直接修改配置文件（6处修改位置）</p>

<pre><code>    [root@lie ~]# vim /etc/postfix/main.cf

    # 设置主机名 在76行左右
    myhostname = mail.lie.com

    # 设置域名 在86行左右
    mydomain = lie.com

    # 定义发出邮件的域 在99行左右
    myorigin = $mydomain

    # 定义网卡监听地址（all代表所有） 在116行左右
    inet_interfaces = all

    # 定义可接收邮件的主机名或域名列表 在164行左右
    mydestination = $myhostname , $mydomain

    # 信任的客户端 在268行左右
    mynetworks = 192.168.80.0/24, 127.0.0.0/8

    ## 如果需要将每份邮件独立存储则, dovecot 也要相应配置 mail_location = maildir:~/Maildir . mkdir /home/user/Maildir
    home_mailbox = Maildir/

    至此postfix设置完成重启服务并配置开机自启

    [root@lie~]# systemctl restart postfix
    [root@lie~]# systemctl enable postfix
</code></pre>

<pre><code>    diff /tmp/main.cf.orig /etc/postfix/main.cf
    76a77
    &gt; myhostname = npcable.cn
    83a85
    &gt; mydomain = npcable.cn
    99a102
    &gt; myorigin = $mydomain
    113c116
    &lt; #inet_interfaces = all
    ---
    &gt; inet_interfaces = all
    116c119
    &lt; inet_interfaces = localhost
    ---
    &gt; #inet_interfaces = localhost
    263a267
    &gt; mynetworks = 192.168.0.0/16, 127.0.0.0/8
</code></pre>

<h4>3、配置Dovecot服务程序</h4>

<pre><code>    # 安装dovecot （默认安装就可以）
    [root@lie~]# yum install dovecot

    # 安装完成修改配置文件
    [root@lie~]# vim /etc/dovecot/dovecot.conf

    # 去到24行左右注释
    protocols = imap pop3 lmtp

    # 设置允许登录的网段地址 在50行左右
    login_trusted_networks = 0.0.0.0/0  # 必须设置

    # 配置邮件格式与存储路径（去掉24行注释）
    [root@lie~]# vim /etc/dovecot/conf.d/10-mail.conf
    mail_location = mbox:~/mail:INBOX=/var/mail/%u

    ## 如果需要将每份邮件独立存储则, postfix 也要相应配置 home_mailbox = Maildir/  . mkdir /home/user/Maildir
    mail_location = maildir:~/Maildir

    # 重启dovecot服务并开机启动
    [root@lie~]# systemctl restart dovecot
    [root@lie~]# systemctl enable dovecot
</code></pre>

<p>若未设置login_trusted_networks参数值，使用telnet登录110端口，将会出现如下错误，</p>

<pre><code>    telnet 192.168.50.24 110
    Plain text authentication disallowed on non-secure (SSL/TLS) connections.

    # tail -f /var/log/maillog
    Dec 21 16:51:00 rhel6 dovecot: pop3-login: Aborted login (tried to use disabled plaintext auth): rip=192.168.50.211, lip=192.168.50.24, mpid=0
</code></pre>

<pre><code>    diff /tmp/dovecot.conf.orig /etc/dovecot/dovecot.conf
    24c24
    &lt; #protocols = imap pop3 lmtp
    ---
    &gt; protocols = imap pop3 lmtp
    48a49
    &gt; login_trusted_networks = 0.0.0.0/0
</code></pre>

<pre><code>    diff /tmp/10-mail.conf.orig /etc/dovecot/conf.d/10-mail.conf
    25c25
    &lt; #   mail_location = mbox:~/mail:INBOX=/var/mail/%u
    ---
    &gt;    mail_location = mbox:~/mail:INBOX=/var/mail/%u
</code></pre>

<h4>4、创建电子邮件系统的登录账户</h4>

<p>本地系统的账户和密码，因此在本地系统创建常规账户即可</p>

<pre><code>    [root@lie~]# useradd test
    [root@lie~]# passwd test
    #创建立用于保存邮件的目录（开始没创建此目录windows客户端配置账户死活是配置不上）
    [root@lie~]# mkdir -p mail/.imap/INBOX
</code></pre>

<p>至此搭建完成！！！</p>

<p>可以用 thunderbird 或 Foxmail 连接</p>

<p>Windows 7客户端安装Foxmail配置test邮箱账户正常收发邮件</p>

<p><img src="/images/system/20221229-1.png" alt="" /></p>

<p><img src="/images/system/20221229-2.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libvirtd 虚拟网卡 virbr0 192.168.122.1]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/22/base-virbr0/"/>
    <updated>2022-10-22T11:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/22/base-virbr0</id>
    <content type="html"><![CDATA[<h4>dnsmasq不会自动停</h4>

<pre><code>    service libvirtd stop
    systemctl stop libvirtd.service

    service libvirtd status
</code></pre>

<p>还是有dnsmasq进程，手动kill</p>

<hr />

<p><a href="https://blog.csdn.net/cqszpx/article/details/126730428">https://blog.csdn.net/cqszpx/article/details/126730428</a></p>

<p>在CentOS 7的安装过程中如果有选择相关虚拟化的的服务安装系统后，启动网卡时会发现有一个以网桥连接的私网地址的virbr0网卡，这个是因为在虚拟化中有使用到libvirtd服务生成的，如果不需要可以关闭后去掉：</p>

<h4>一、查看IP及网桥设备</h4>

<pre><code>    [root@etc ~]# ifconfig //查看IP地址

    [root@etc ~]# brctl show //查看网桥
    bridge name bridge id STP enabled interfaces
    virbr0 8321.5254115cdv00 yes virbr0-nic

    [root@etc ~]#
</code></pre>

<h4>二、删除网桥</h4>

<pre><code>    [root@etc ~]# ifconfig virbr0 down
    [root@etc ~]# brctl delbr virbr0 //删除网桥
</code></pre>

<h4>三、禁用开机服务</h4>

<pre><code>    [root@etc ~]# systemctl disable libvirtd.service //禁用libvirtd服务开机自启动
    Removed symlink /etc/systemd/system/multi-user.target.wants/libvirtd.service.
    Removed symlink /etc/systemd/system/sockets.target.wants/virtlockd.socket.
    Removed symlink /etc/systemd/system/sockets.target.wants/virtlogd.socket.

    [root@etc ~]# systemctl mask libvirtd.service
    Created symlink from /etc/systemd/system/libvirtd.service to /dev/null.
</code></pre>

<p>再次使用ifconfig查看，即可发现virbr0不在了</p>

<h4>当然也可直接将libvirtd服务卸载</h4>

<p>这样也就不会生成虚拟网卡，更是一劳永逸，待需要使用时，再安装该服务即可。操作命令如下：</p>

<pre><code>    yum remove libvirt-libs.x86_64
</code></pre>

<h4>systemctl mask 和 systemctl disable</h4>

<p>disable是禁用的开机自启，但是其他服务仍可以调用开启disable的服务</p>

<p>而mask是屏蔽服务，mask了的服务，不可以被调用</p>

<p>enable和disable相对应的</p>

<p>unmask和mask相对应的</p>
]]></content>
  </entry>
  
</feed>
