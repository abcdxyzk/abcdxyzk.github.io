<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~docker | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~docker/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[docker 设置固定IP]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/07/docker-ip/"/>
    <updated>2020-11-07T16:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/07/docker-ip</id>
    <content type="html"><![CDATA[<h3>1 设置固定IP</h3>

<p>使用默认的网络是不支持指派固定IP的</p>

<pre><code>    # 创建自定义网络
    docker network create --subnet=192.168.3.0/24 --gateway=192.168.3.1 nett
    docker network ls

    #
    docker run -i -t --net nett --ip 192.168.3.2 49f7960eb7e4 /bin/bash
</code></pre>

<h3>2 修改bridge</h3>

<pre><code>    brctl addbr br1
    brctl show

    vim /etc/sysconfig/docker
    ifconfig br1 100.64.0.1 netmask 255.255.255.0

    vim /etc/sysconfig/docker-network
    DOCKER_NETWORK_OPTIONS="-b=br1"

    service docker restart
</code></pre>

<p><a href="https://blog.csdn.net/yelllowcong/article/details/76405191">或者配置docker</a></p>

<h3>3 pipework配置docker网络</h3>

<p><a href="/download/system/pipework-master.zip">pipework-master.zip</a></p>

<pre><code>    git clone https://github.com/jpetazzo/pipework.git
    sudo cp pipework/pipework /usr/local/bin/

    docker run -itd --name d1 --net=none centos2 /bin/bash
    pipework br1 d1 100.64.0.100/24@100.64.0.1
    docker exec -it d1 /bin/bash
</code></pre>

<h3>4 修改本机为bridge, docker分配同本机网段</h3>

<p>vim /etc/sysconfig/network-scripts/ifcfg-enp0s3
<code>
    增加 BRIDGE="br0"
</code></p>

<p>vim /etc/sysconfig/network-scripts/ifcfg-br0
<code>
    DEVICE="br0"
    ONBOOT="yes"
    TYPE="Bridge"
    BOOTPROTO=dhcp
</code></p>

<p>service network restart</p>

<pre><code>    echo 1 &gt; /proc/sys/net/ipv4/ip_forward
    echo 1 &gt; /proc/sys/net/ipv4/conf/enp0s3/proxy_arp

    docker run -itd --name d2 --net=none centos2 /bin/bash
    pipework br0 d2 192.168.43.189/24@192.168.43.1
    brctl show

    docker exec -it d2 /bin/bash
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker的四种网络模式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/07/docker-net/"/>
    <updated>2020-11-07T14:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/07/docker-net</id>
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/270125484301">https://www.jianshu.com/p/270125484301</a></p>

<h4>1. host模式</h4>

<p>使用<code>--net=host</code>指定。</p>

<p>  众所周知，Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</p>

<p>  例如，我们在10.10.101.105/24的机器上用host模式启动一个含有web应用的Docker容器，监听tcp80端口。当我们在容器中执行任何类似ifconfig命令查看网络环境时，看到的都是宿主机上的信息。而外界访问容器中的应用，则直接使用10.10.101.105:80即可，不用任何NAT转换，就如直接跑在宿主机中一样。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>

<h4>2. container模式</h4>

<p>使用<code>--net=container:NAME_or_ID</code>指定。</p>

<p>在理解了host模式后，这个模式也就好理解了。这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p>

<h4>3. none模式</h4>

<p>使用<code>--net=none</code>指定。</p>

<p>这个模式和前两个不同。在这种模式下，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>

<h4>4. bridge模式</h4>

<p>使用<code>--net=bridge</code>指定，默认设置。</p>

<p>bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。</p>

<p>当Docker server启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。接下来就要为容器分配IP了，Docker会从RFC1918所定义的私有IP网段中，选择一个和宿主机不同的IP地址和子网分配给docker0，连接到docker0的容器就从这个子网中选择一个未占用的IP使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker 容器里使用systemctl命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/06/docker-systemctl/"/>
    <updated>2020-11-06T17:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/06/docker-systemctl</id>
    <content type="html"><![CDATA[<h4>error 1</h4>

<p>bash: service: command not found</p>

<pre><code>    yum install initscripts -y
</code></pre>

<h4>error 2</h4>

<p>System has not been booted with systemd as init system (PID 1). Can&rsquo;t operate.</p>

<p>容器的命令：
<code>
    docker run -d --name centos_1 -it  centos:latest /bin/bash
</code>
需要修改为
<code>
    docker run -tid --name centos_1 --privileged=true centos:latest /sbin/init
</code>
也就是加&ndash;privileged=true，修改/binbash  为/sbin/init</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker容器进入的4种方式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/06/docker-attach/"/>
    <updated>2020-11-06T17:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/06/docker-attach</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xhyan/p/6593075.html">https://www.cnblogs.com/xhyan/p/6593075.html</a></p>

<p>创建一个守护态的Docker容器
<code>
    $ sudo docker run -itd ubuntu:14.04 /bin/bash  
</code></p>

<p>进入Docker容器比较常见的几种做法如下：</p>

<h3>一、使用docker exec进入Docker容器</h3>

<pre><code>    $ sudo docker ps  
    $ sudo docker exec -it 775c7c9ee1e1 /bin/bash
</code></pre>

<h3>二、使用docker attach进入Docker容器</h3>

<pre><code>    $ sudo docker attach 44fc0f0582d9  
</code></pre>

<p>  使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</p>

<p>  因为这个原因，所以docker attach命令不太适合于生产环境，平时自己开发应用时可以使用该命令。</p>

<h3>三、使用SSH进入Docker容器</h3>

<p>略</p>

<h3>四、使用nsenter进入Docker容器</h3>

<p>略</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker proxy]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/06/docker-proxy/"/>
    <updated>2020-11-06T16:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/06/docker-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/b26fad1534d9">https://www.jianshu.com/p/b26fad1534d9</a></p>

<p>该方法适用于Debian/Ubuntu，RedHat/CentOS系统。修改配置后，会持续生效，其中的设置将覆盖docker.service中的选项</p>

<h4>创建目录</h4>

<pre><code>    mkdir -p /etc/systemd/system/docker.service.d
</code></pre>

<h4>添加网络代理配置文件</h4>

<pre><code>    vim /etc/systemd/system/docker.service.d/http-proxy.conf
</code></pre>

<p>加入如下配置</p>

<p>proxy-addr为代理IP或域名；proxy-port为代理端口；NO_PROXY后面接不需要代理的仓库的域名或者IP，以英文逗号结尾</p>

<pre><code>    [Service]
    Environment="HTTP_PROXY=http://proxy-addr:proxy-port" "HTTPS_PROXY=http://proxy-addr:proxy-port" "NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com"
</code></pre>

<h4>重载配置并重启dockers服务</h4>

<pre><code>    systemctl daemon-reload
    systemctl restart docker
</code></pre>
]]></content>
  </entry>
  
</feed>
