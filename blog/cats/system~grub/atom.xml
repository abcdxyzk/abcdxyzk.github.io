<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~grub | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~grub/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-12T15:09:44+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux启动之grub详解，故障排除]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/07/20/centos-grub/"/>
    <updated>2021-07-20T16:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/07/20/centos-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.178linux.com/45876">http://www.178linux.com/45876</a></p>

<p><a href="http://www.178linux.com/44783">http://www.178linux.com/44783</a></p>

<h2>概述</h2>

<p>上篇我们以CentOS6为例介绍了一下系统启动流程，本篇将承接上篇，详细的介绍一下系统启动流程中的grub，以及系统启动过程中的各种故障的排除，以及利用现有内核自己构建一个能够正常启动的简单Linux系统。具体分为一下几个部分：</p>

<pre><code>    1、grub相关概念详解
    2、系统启动故障排除
        2.1  grub配置文件错误无法进入系统
        2.2  grub的stage1故障修复
        2.3  grub的stage1.5故障修复
        2.4  grub的stage2故障修复(删除/boot/grub目录和内核vmlinuz文件，initramfs文件)
        2.5  破坏grub的stage1、stage1.5、删除boot目录的故障恢复
        2.6  破坏grub的stage1、stage1.5、删除boot目录，删除/etc/fstab文件的故障恢复
        2.7  当系统安装在lvm逻辑卷上时， 破坏grub的stage1、stage1.5、删除boot目录，删除/etc/fstab文件的故障恢复
        2.8  系统上init程序被破坏后的恢复，inittab文件被破坏后的恢复
</code></pre>

<h2>第一章    grub相关概念详解</h2>

<h4>1、linux上bootloader之grub详解：</h4>

<p>grub 0.X: centos5、6上用的，也称之为grub legacy</p>

<p>grub 1.X: centos7上用的，也称之为grub2</p>

<h4>2、grub legacy：分为几个阶段</h4>

<p>stage1：安装在MBR中前446字节中</p>

<p>stage1_5:MBR之后的扇区，主要是让stage1中的bootloader能识别stage2所在的分区上的文件系统，否则无法加载stage2阶段</p>

<p>stage2：存放在磁盘分区上，一般在/boot/grub/目录下，这才是真正实现开机时显示的菜单和相关功能的程序所在位置，改程序也有其配置文件，配置文件时/boot/grub/grub.conf，其有个软链接文件是/etc/grub.conf</p>

<p>stage2及内核等，通常放置于一个基本磁盘分区，而不应该是放在lvm、软raid分区等复杂分区上，因为grub不能驱动lvm、软raid分区，另外lvm、软raid的识别是系统初始化脚本/etc/rc.d/rc.sysinit的功能，该功能在内核启动之后，init接管的时候才实现。</p>

<h4>3、grub的功能：</h4>

<p><1>提供菜单，并提供交互式接口<br/>
  e：编辑模式，用于编辑菜单<br/>
  c：命令模式，交互式接口<br/>
  等等</p>

<p><2>加载用户选择的内核或操作系统<br/>
  并允许用户传递参数给内核<br/>
  也支持隐藏菜单</p>

<p><3>为菜单提供了保护机制<br/>
  为编辑菜单进行认证<br/>
  为启用内核或操作系统进行认证</p>

<h4>4、grub中是如何识别设备</h4>

<p>无论是什么接口的硬盘，都识别为hd. 且用（hd数字1，数字2）表示第数字1的磁盘上的数字2的分区，都从0开始编号. 故（hd0,0） 表示第1个磁盘上的第1个分区</p>

<h4>5、grub的命令行接口：</h4>

<p>help：获取帮助列表<br/>
  help 关键字   可获取某个关键字的详细帮助信息</p>

<p>find (hd数字1，数字2)/FILENAME   可在指定磁盘设备上找指定的文件，判断文件的存在性<br/>
  如：find (hd0,0)/vmlinuz</p>

<p>root (hd数字1，数字2)  表示将那个磁盘设备设置为grub的根设备，注意，这里的根并不是文件系统的根<br/>
  如：root (hd0,0)<br/>
  如果指定了根，在find时就可以不必指定设备，而直接从grub的根开始找对应的文件</p>

<p>kernel /PATH/TO/KERNEL_FILE   设定本次启动时用到的内核文件，一般都需要用root指定grub根之后才指定kernel，额外还可以添加许多内核支持使用的命令行参数，如：<br/>
  init=/PATH/TO/INIT  指定init程序<br/>
  selinux=0   表示禁用内核中的selinux功能</p>

<p>root=/DEVICE   表示指定真正根文件系统所在的设备</p>

<p>max_loop=#   表示指定最大的loop设备的个数<br/>
  initrd /PATH/TO/INITRAMFS_FILE   为选定的内核提供额外文件的ramdisk文件，ramdisk文件必须与内核版本号必须完全匹配<br/>
  boot   引导启动选定的内核</p>

<h4>6、grub的配置文件 /boot/grub/grub.conf或/etc/grub.conf</h4>

<p>定义了启动时进入grub后哪个显示出来的可供用户选择的菜单，如果没有该定义，就要通过grub的命令行界面进行手工引导启动
配置文件内容为：</p>

<pre><code>    default=0  设定默认启动的菜单项，菜单项(title)编号从0开始
    timeout=5  指定菜单项等待选项选择的超时时长
    splashimage=(hd0,0)/grub/splash.xpm.gz  指明菜单背景图片文件路径
    hiddenmenu   是否隐藏菜单
    password [–md5]  STRING  表示设定菜单编辑认证，也就是启用grub时，用e键编辑时，需要进行认证的密码，加上–md5 就表示利用md5进行加密
    title CentOS 6 (2.6.32-642.el6.x86_64)   定义菜单项的标题，并用tab缩进定义该菜单项下的各个属性信息，可出现多次，用来引导多个不同的内核或操作系统
        root (hd0,0)    本菜单项的查找statge2及kernel文件所在的设备分区，为grub的根，不是文件系统的根
        kernel /vmlinuz-2.6.32-642.el6.x86_64 ro root=UUID=20a69d3d-34c6-436d-b7fc-fb110f65649f rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_MD crashkernel=auto.UTF-8 rd_NO_LVM rd_NO_DM rhgb quiet     指明启动的内核及相关内核参数  
        initrd /initramfs-2.6.32-642.el6.x86_64.img     内核匹配的ramdisk文件
        password [–md5] STRING   启动选定的内核或操作系统时进行认证

    grub-md5-crypt命令可以生成grub里面认证密码的md5码
</code></pre>

<h4>7、grub-install命令</h4>

<p>grub-install命令可以实现对grub的安装修复，能够修复grub的stage1，stage1.5，stage2的相关内容，但是其不能修复stage2中grub的配置文件</p>

<p>用法为：grub-install /磁盘设备号  –root-directory=/PATH</p>

<p>指明为哪个磁盘安装grub，以及该磁盘上的文件系统的根所在的路径，如果是命令本身所在的shell的文件系统根，则–root-directory可以省略</p>

<h2>第二章    系统启动故障排除</h2>

<h4>1、grub配置文件写错，无法进入系统</h4>

<p>方法一：进入启动菜单项后，修改菜单项为正确的内容，然后启动</p>

<p>方法二：进入启动菜单后，进入grub交互式界面，手动引导启动</p>

<h4>2、grub的stage1故障修复</h4>

<p><1>破坏grub的stage1，如果未重启，则直接利用grub-install命令进行修复，如果重启，则继续</p>

<p><2>重启后发现无法进入系统，此时可以利用光盘进入紧急救援模式，然后进行grub-install安装修复</p>

<h4>3、grub的stage1.5故障修复</h4>

<p><1>破坏grub的1.5阶段，重启系统(如果没重启，可直接用grub-install进行安装)</p>

<p><2>进入紧急救援模式(进入救援模式的步骤省略)，进行grub-install安装修复grub</p>

<h4>4、grub的stage2故障修复(删除/boot/grub目录和内核文件，ramdisk文件)</h4>

<p><1>删除/boot/grub目录和内核文件vmlinuz，ramdisk文件initramfs,然后重启</p>

<p>（如果没重启，可以直接拷贝系统光盘上的vmlinuz文件，然后运行mkinitrd命令生成initramfs文件，然后运行grub-install命令生成修复grub文件，最后编辑grub配置文件即可）</p>

<p><2>进入紧急救援模式(进入过程省略)进行修复</p>

<h4>5、破坏grub的stage1、stage1.5、删除boot目录的故障恢复</h4>

<p><1>破坏stage1、stage1.5，删除boot目录，然后重启</p>

<p>如果没重启，rpm安装kernel包(注意加上–replacepkgs或–force选项，因为kernel安装的文件不仅仅有boot目录下的相关文件，如果不用选项，会报错)，然后grub-install安装修复grub，然后编辑生成一个grub.conf配置文件即可</p>

<p><2>进入紧急救援模式(进入紧急救援模式的过程省略)，修复</p>

<h4>6、破坏grub的stage1、stage1.5、删除boot目录，删除/etc/fstab文件的故障恢复</h4>

<p><1>破坏grub的stage1、stage1.5、删除boot目录，删除/etc/fstab文件，重启系统</p>

<p>如果破坏后，尚未重启系统，只需重新编辑/etc/fstab文件，然后与上个实验一样，安装kernel包(注意加–replacepkgs或–force选项)，grub-install安装grub，然后提供grub的配置文件即可</p>

<p><2>进入紧急救援模式，进行修复</p>

<h4>7、当系统安装在lvm逻辑卷上时， 破坏grub的stage1、stage1.5、删除boot目录，删除/etc/fstab文件的故障恢复</h4>

<p><1>破坏stage1、stage1.5，删除boot目录、删除/etc/fstab文件，并重启</p>

<p><2>进入紧急救援模式修复</p>

<h4>8、系统上init文件、inittab文件破坏后的恢复方案</h4>

<p>步骤： 思路为查询文件是由哪个程序生成，然后在救援模式下进行安装对应的包，进行修复</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub修复]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub/"/>
    <updated>2015-01-30T09:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html">http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html</a></p>

<p>grub全称在为GRand Unified Bootloader,它的核心功能是引导内核，但是如果grub出了问题，内核无法找到，那岂不是万劫不复了，下面就介绍一下常用的修复方式。</p>

<h4>第一种情况:</h4>

<p>是由于grub中的grub.conf文件损坏，开机后直接进入到了grub>命令行模式下。下面将图解此过程</p>

<p><img src="/images/system/grub/2015-01-30-1.jpg" alt="" /></p>

<p>这时可以使用help看一下grub可支持命令有那些，以便供修复时使用。</p>

<p><img src="/images/system/grub/2015-01-30-2.jpg" alt="" /></p>

<p>第二个使用的命令是find (hd0,0)/按tab如果能补全就表示系统在此分区上。</p>

<p><img src="/images/system/grub/2015-01-30-3.jpg" alt="" /></p>

<p>各个参数说明：</p>

<p><img src="/images/system/grub/2015-01-30-4.jpg" alt="" /></p>

<p>这时要注意，当你指定内核后，但未指定内核后面的参数（ro root=(此处未指定的话)）将无法正常启动，报：请给root参数，一般情况下是系统是可以自动探测到，但这个功能并不靠谱，那么只能靠备份或你的记忆将参数补上（所以定期备份/etc/fstab、与grub.conf、是多么重要的事情，原因你懂的。）</p>

<p>如下图：</p>

<p><img src="/images/system/grub/2015-01-30-5.jpg" alt="" /></p>

<p>而这时就看到你平时的习惯了，备份相当重要</p>

<p><img src="/images/system/grub/2015-01-30-6.jpg" alt="" /></p>

<p>当正常登录系统后，将grub.conf文件重新写就可以了。（上图的完整路径是root=/dev/mapper/vg_www-lv_root，写全了就看不到了，所以在此特别说明）</p>

<p><img src="/images/system/grub/2015-01-30-7.jpg" alt="" /></p>

<p>看到title了吧</p>

<p><img src="/images/system/grub/2015-01-30-8.jpg" alt="" /></p>

<p>过了下面这张图就说明系统是可以正常启动了</p>

<p><img src="/images/system/grub/2015-01-30-9.jpg" alt="" /></p>

<p>第一种情况顺利解决!a_c</p>

<h4>第二种情况：</h4>

<p>grub损坏（最明显的提示为：Operating System not found）</p>

<p>如mbr数据损坏（注仅是bootloader损坏，分区表是好的），如果没有重新启动还可能修复，但是如果是重启后发现grub损坏，那么只能挂载光盘进入紧急救援模式。（以下将以挂载光盘说明）</p>

<p><img src="/images/system/grub/2015-01-30-10.jpg" alt="" /></p>

<p>dd执行之后的景象，是不是好惊悚a_c</p>

<p><img src="/images/system/grub/2015-01-30-11.jpg" alt="" /></p>

<p>挂载光盘进入紧急救援模式,在BIOS中将光盘设置为第一引导设备。</p>

<p><img src="/images/system/grub/2015-01-30-12.jpg" alt="" /></p>

<p>在菜单中选择"Rescue installed system"</p>

<p><img src="/images/system/grub/2015-01-30-13.jpg" alt="" /></p>

<p>之后将对：语言&mdash;-》键盘设置</p>

<p><img src="/images/system/grub/2015-01-30-14.jpg" alt="" /></p>

<p>是否启用网络（不需要，则No,如果选择了Yes将要求选择获取IP地址的方式）</p>

<p><img src="/images/system/grub/2015-01-30-15.jpg" alt="" /></p>

<p>正式进入救援模式</p>

<p><img src="/images/system/grub/2015-01-30-16.jpg" alt="" /></p>

<p>原系统己经挂载的位置，如何切换到原系统下</p>

<p><img src="/images/system/grub/2015-01-30-17.jpg" alt="" /></p>

<p>开启一个shell</p>

<p><img src="/images/system/grub/2015-01-30-18.jpg" alt="" /></p>

<p>切换到原系统</p>

<p><img src="/images/system/grub/2015-01-30-19.jpg" alt="" /></p>

<p>这时可以直接输入grub命令进入grub中（这个grub是光盘中的）</p>

<p><img src="/images/system/grub/2015-01-30-20.jpg" alt="" /></p>

<p>直接使用 help  setup会显示setup的使用方法。</p>

<p>设置root(root默认分区)如（hd0,0），此分区一定要root所在的系统分区，之后使用setup安装，命令是setup(hd0)(由于mbr并属于分区，所以将grub安装到hd0设备即可)，如果是成功了会有succeeded提示。quit退出即可</p>

<p><img src="/images/system/grub/2015-01-30-21.jpg" alt="" /></p>

<p>重启系统，取出光盘，有如下信息就表示修复完成</p>

<p><img src="/images/system/grub/2015-01-30-22.jpg" alt="" /></p>

<p>如果grub目录都损坏，无法正常启动。则可以在此模式使用grub-install &ndash;root-directory=/  /dev/sda（设备是什么就写什么）手写配置文件grub.conf即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grubby edit centos grub args]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grubby/"/>
    <updated>2014-10-24T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grubby</id>
    <content type="html"><![CDATA[<p>In Debian/Ubuntu, grub.cfg is fully generated by scripts and any manual changes made to it will be clobbered. In RHEL/CentOS however, grub.cfg is modified by scripts but manual changes are persisted, and is actually the canonical location for certain settings.</p>

<p>The tool which manages grub.cfg is grubby, which is called by /sbin/new-kernel-pkg when kernels are installed or removed. The &ndash;copy-default parameter is passed to grubby when a new kernel is installed, which causes it to copy the kernel parameters from the current default kernel. Setting the default kernel parameters for future-installed kernels is therefore done by editing the entry for the default kernel in grub.cfg.</p>

<p>If you weren&rsquo;t automating this you could simply edit grub.cfg manually and change all the current kernel entries. However, you can use grubby to modify grub.cfg in order to avoid parsing it or writing regular expressions. For example, this will remove the rhgb and quiet parameters from the specified kernel version.</p>

<pre><code>    $ grubby --update-kernel=/boot/vmlinuz-2.6.32-220.13.1.el6.x86_64 --remove-args="rhgb quiet"
</code></pre>

<p>There doesn&rsquo;t seem to be an option to list the currently configured kernels however, so you&rsquo;ll have to discover these another way. One option is to just look for vmlinuz files in /boot/:</p>

<pre><code>    #!/bin/sh
    for KERNEL in /boot/vmlinuz-*; do
        grubby --update-kernel="$KERNEL" --remove-args="rhgb quiet"
    done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grub/"/>
    <updated>2014-10-24T15:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grub</id>
    <content type="html"><![CDATA[<p>在命令行状态，可以根据需要加载或移除相应模块，也可用来启动在菜单没有显现的的系统。
比如，在第一硬盘的第一分区上装有windows xp系统，但在菜单上没显示出来，我们可以命令行状态下输入命令启动：
<code>
    grub&gt;set root=(hd0,1)
    grub&gt;chainloader +1
    grub&gt;boot
</code>
又比如启动第二硬盘第一逻辑分区上的ubuntu系统：
<code>
    grub&gt;set root=(hd1,5)
    grub&gt;linux /boot/vmlinuz-xxx-xxx root=/dev/sdb5
    grub&gt;initrd /boot/initrd.img-xxx-xxx
    grub&gt;boot
</code>
其中内核vmlinuz和initrd.img的版本号可用按Tab键自动查看。</p>
]]></content>
  </entry>
  
</feed>
