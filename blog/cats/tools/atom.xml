<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx配置多个域名, http https共用配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy/"/>
    <updated>2024-03-01T20:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dayq/p/17488471.html">https://www.cnblogs.com/dayq/p/17488471.html</a></p>

<p>vim /usr/local/openresty/nginx/conf/nginx.conf</p>

<p>域名 <code>s1.com</code>  <code>*.s1.com</code> 建议分开写两个?</p>

<p>如果需要多个域名共用端口则复制多个</p>

<p>增加回源地址 Proxy: &ldquo;$proxy_host&rdquo; &ldquo;$upstream_addr&rdquo;</p>

<pre><code>    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"'
                  ' Proxy: $upstream_response_time $proxy_host $upstream_addr $upstream_status $upstream_response_length';
        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        keepalive_timeout   65;
        types_hash_max_size 4096;
        #gzip  on;


        include     mime.types;
        default_type    application/octet-stream;


        server {
            listen  80;
            listen  443 ssl;
            server_name s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }



        server {
            listen  80;
            listen  443 ssl;
            server_name s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim 在处理长字符串时变得非常慢]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off/"/>
    <updated>2024-02-26T20:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off</id>
    <content type="html"><![CDATA[<p><a href="https://www.coder.work/article/6946837">https://www.coder.work/article/6946837</a></p>

<p>语法高亮是通过正则表达式定义的，匹配会消耗大量资源，尤其是在长行和大缓冲区上。</p>

<pre><code>    :syntax off
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump 参数 net-buffer-length]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len/"/>
    <updated>2023-12-10T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yexiaomodemo/article/details/111050882">https://blog.csdn.net/yexiaomodemo/article/details/111050882</a></p>

<h4>用处一：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,那么一旦你使用到还原时，你的数据一次commit提交是默认1m 提交时的10倍速度</p>

<h4>用处二：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,小表估计就是一个insert就完事了，导入时效率会很高。当你备份文件有5G 10G了，那个时候这些参数非常有用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL中case的使用方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/mysql-case/"/>
    <updated>2023-11-19T18:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/mysql-case</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_53222768/article/details/120101414">https://blog.csdn.net/m0_53222768/article/details/120101414</a></p>

<pre><code>    SELECT CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END
    salary_class,  COUNT(*)  FROM    Table_A
    GROUP BY CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql查询表结构更改时间]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/mysql-table-updatetime/"/>
    <updated>2023-11-19T18:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/mysql-table-updatetime</id>
    <content type="html"><![CDATA[<p><a href="https://www.yzktw.com.cn/post/1018962.html">https://www.yzktw.com.cn/post/1018962.html</a></p>

<p>MySQL 是一款常用的关系型数据库管理系统，在数据库开发过程中，经常需要查看表结构更改时间。如果你想要查询 MySQL 表结构的更改时间，可以通过以下 SQL 语句实现。</p>

<pre><code>    SELECT table_name, update_time FROM information_schema.tables WHERE table_schema = 'database_name' ORDER BY update_time DESC;
</code></pre>

<p>这个 SQL 语句使用了 information_schema 数据库中的 tables 表，它维护了 MySQL 数据库中所有表的元数据信息。其中，table_name 列表示表名，update_time 列表示表的最近更改时间。</p>
]]></content>
  </entry>
  
</feed>
