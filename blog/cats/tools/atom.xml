<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-06-20T15:29:35+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[centos 安装 MariaDB]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/04/30/mariadb/"/>
    <updated>2024-04-30T08:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/04/30/mariadb</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39929918/article/details/110599382">https://blog.csdn.net/weixin_39929918/article/details/110599382</a></p>

<h2>centos7</h2>

<h4>在线安装 &ndash; 慢</h4>

<p><img src="/images/tools/20240430-1.png" alt="" /></p>

<h4>离线安装</h4>

<pre><code>    rpm -qa | grep -i mariadb-libs
    rpm -ev --nodeps mariadb-libs-5.5.68-1.el7.x86_64
</code></pre>

<p>点击图中的 baseurl</p>

<p>下载</p>

<pre><code>    rpm -ivh galera-4-26.4.6-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-common-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-compat-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-shared-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-client-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-server-10.5.8-1.el7.centos.x86_64.rpm
</code></pre>

<h2>centos8</h2>

<pre><code>    yum install libpmem
    rpm -ivh galera-4-26.4.16-1.el8.x86_64.rpm
    rpm -ivh MariaDB-common-10.11.7-1.el8.x86_64.rpm MariaDB-shared-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-client-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-client-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-server-10.11.7-1.el8.x86_64.rpm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[squid 日志格式, 时间格式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/04/29/tools-squid-log/"/>
    <updated>2024-04-29T10:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/04/29/tools-squid-log</id>
    <content type="html"><![CDATA[<h4>以下 { % 之间的空格要删掉</h4>

<p><a href="https://bbs.huaweicloud.com/blogs/110098">https://bbs.huaweicloud.com/blogs/110098</a></p>

<pre><code>    %{ %Y-%m-%d %H:%M:%S}tl

    logformat kk %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a
    access_log /var/log/squid/access.log kk
</code></pre>

<h4>ERROR</h4>

<pre><code>    logformat squid    %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a
    logformat combined %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a

    squid -k parse
    ERROR: logformat squid is already defined. Ignoring.
    ERROR: logformat combined is already defined. Ignoring.
</code></pre>

<p><a href="https://www.cnblogs.com/itcomputer/p/5027311.html">https://www.cnblogs.com/itcomputer/p/5027311.html</a></p>

<p><a href="https://www.cnblogs.com/sunsweet/archive/2013/06/05/3118201.html">https://www.cnblogs.com/sunsweet/archive/2013/06/05/3118201.html</a></p>

<p><a href="https://blog.csdn.net/jigang_virgil/article/details/8774395">https://blog.csdn.net/jigang_virgil/article/details/8774395</a></p>

<pre><code>    logformat log_format %&gt;a %ui %un %ts "%rm %ru HTTP/%rv" %Hs %&lt;st "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh %tr #日志格式
    access_log /usr/local/squid2.7/var/logs/access.log log_format

    Field name syntax keys:
    {} modifier or argument. Also used to specify header names
    &gt; request (client) 客户请求
    &lt; reply (server) 服务端回应
    a address 访问用户ip地址
    A address name 访问用户电脑名称
    h all headers 浏览器头信息
    i ident 
    p port 端口
    r request line (no query)
    t time 访问时间
    u user
    l local address/port (where request was accepted)

    %&gt;a
    Client source IP address
    %&gt;A
    Client FQDN
    %&gt;p
    Client source port
    %&lt;a
    Server or peer IP address
    %&lt;p
    Server or peer port number
    %&lt;A
    Server IP address or peer name
    %la
    Local IP address where the request was accepted
    %lp
    Local port where the request was accepted
    %lA
    Local port name where the request was accepted
    %ts
    Date of request, seconds since epoch
    %{format}tl
    Date of request, strftime format (localtime)
    %{format}tg
    Date of request, strftime format (gmt)
    %tu
    Date of request, sub-second component
    %tr
    Time to serve the request, in milliseconds
    %{header}&gt;h
    Request header
    %{header:element}&gt;h
    Named request header field element (list headers)
    %{header:separator element}&gt;h
    Named request header field element, using "separator" as field separator (it can be any non-alphanumeric single character)
    %&gt;h
    All request header
    %{header}&lt;h
    Request headers, as for &lt;..h above
    %un
    Authenticated user name or dash
    %ur
    Authenticated user realm or dash
    %us
    Authenticated user scheme or dash
    %ui
    Ident user name or dash
    %Hs
    HTTP status code (200, 404, 407, etc)
    %Ht
    HTTP status text (Not found, etc)
    %Ss
    Squid status code (TCP_HIT, TCP_MISS etc)
    %Se
    Squid error code (ERR_DENIED, ERR_...)
    %Sh
    Squid hierarchy code (FIRST_UP_PARENT, etc)
    %mt
    MIME type of the request
    %rm
    Request method
    %ru
    Request URL, without the query string
    %rq
    Request query string, including ?
    %rp
    Request protocol (i.e. HTTP/1.1)
    %ps
    Peer selection status (DIRECT, PARENT, CD_PARENT_HIT, etc. including the TIMEDOUT_ variant)
    %&gt;sl
    Size of request line
    %&gt;sh
    Size of request headers, including request line
    %&gt;sH
    Size of request headers, excluding request line
    %&gt;sb
    Size of request body, raw received bytes
    %&gt;sB
    Size of request body, excluding transfer encoding
    %&gt;st
    Total size of request
    %&lt;sl
    Size of reply status line
    %&lt;sh
    Size of reply headers, including status line
    %&lt;sH
    Size of reply headers, excluding status line
    %&lt;sb
    Size of reply body, raw transmitted bytes
    %&lt;sB
    Size of reply body, excluding transfer encoding
    %&lt;st
    Total size of reply
    %%
    A literal %
</code></pre>

<p>quid配置文件中可以根据用户的需求自定义日志格式，自定义日志格式主要是通过占位符实现的。以下简要叙述下一些</p>

<pre><code>    占位符的含义：
    %&gt;a客户端IP
    %&gt;A 客户端全域名(FQDN)
    %&gt;p 客户端端口号
    %la 本机IP(squid服务器IP)
    %lp 本机端口(squid监听端口)
    %oa 对外IP
    %ts 时间戳(秒)
    %tu 时间戳(毫秒)
    %tl 本地时间，默认格式 %d/%b/%Y:%H:%M:%S %z
    %tg GMT时间，默认格式 %d/%b/%Y:%H:%M:%S %z
    %tr 响应时间(毫秒)
    %&gt;h 请求头
    %&lt;h 回复头
    %un user name
    %ui user ident
    %ul user auth
    %us user ssl
    %ue user external
    %Hs http状态码(200 ,302 etc)
    %Ss squid状态码(TCP_HIT,TCP_MISS etc)
    %Sh squid堆叠状态码(即cache集群，姐妹或父状态，DEFAULT_PARENT etc)
    %mt content type
    %rm method
    %ru 请求url
    %rp 请求url路径不包括主机名
    %rv 请求协议版本
    %&lt;st 回复大小包括http头
    %&gt;st 请求大小包括http头
    %st 请求+回复大小包括http头
    %sn 日志每行记录一个行号
    如果打印请求头或回复头中的某个字段，可以这样:%{字段名}&gt;h %{字段名}&lt;h
    如: %{User-agent}&gt;h表示打印请求头中的ua字段
    这样我们可以自定义几种日志格式：
    logformat  log1 %ts.%03tu %6tr %&gt;a %Ss/%03Hs %&lt;st %rm %ru %un %Sh/%&lt;A %mt
    logformat  log2 %&gt;a %ui %un [%tl] "%rm %ru HTTP/%rv" %Hs %&lt;st "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh
    然后在access_log配置用上这几种自定义格式
    access_log  /usr/local/squid/var/logs/log1/access.log  log1
    access_log  /usr/local/squid/var/logs/log2/access.log  log2
    这样就会同时记录两种不同的日志格式了。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos7下httpd服务对tmp目录操作]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/04/26/tools-apache2-tmp/"/>
    <updated>2024-04-26T14:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/04/26/tools-apache2-tmp</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jsbba/article/details/105627202">https://blog.csdn.net/jsbba/article/details/105627202</a></p>

<p>在centos7下操作tmp目录出现各种找到不文件等问题，明白文件就在/tmp目录下，权限也有就是读取不到，原因是使用了private tmp</p>

<pre><code>    cat /usr/lib/systemd/system/httpd.service
</code></pre>

<p>找到以下配置</p>

<pre><code>    PrivateTmp=true
</code></pre>

<p>在默认未true时 这个服务对应的tmp目录会虚拟到/tmp/systemd-private-xxxxx-httpd.service-xxxx/这个里面的/tmp文件夹</p>

<p>可以直接讲true改成false</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 禁用代理缓冲]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/04/26/nginx-proxy-buffer/"/>
    <updated>2024-04-26T14:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/04/26/nginx-proxy-buffer</id>
    <content type="html"><![CDATA[<p><a href="https://www.saoniuhuo.com/question/detail-2752805.html">https://www.saoniuhuo.com/question/detail-2752805.html</a></p>

<p>浏览器中收到这些错误：</p>

<pre><code>    Firefox中的: NS_ERROR_NET_PARTIAL_TRANSFER

    Chrome: net::ERR_HTTP2_PROTOCOL_ERROR 200
</code></pre>

<h4>禁用代理缓冲：</h4>

<pre><code>    location ~ ^/rails/active_storage/disk {
        ...
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_buffering off;
        ...
    }
</code></pre>

<p>这样就解决了问题</p>

<p><a href="https://www.pianshen.com/article/2410401164/">https://www.pianshen.com/article/2410401164/</a></p>

<h4>缓冲控制</h4>

<p>如果禁止缓冲，那么当Nginx一收到后端的反馈就同时传给客户端。</p>

<p>nginx 不会从被代理的服务器读取整个反馈信息。</p>

<p>nginx可从服务器一次接收的最大数据大小由  proxy_buffer_size 控制。
<code>
    proxy_buffering    off;
    proxy_buffer_size  128k;
    proxy_buffers 100  128k;
</code></p>

<p>相关参数</p>

<p>proxy_buffer_size</p>

<p>语法: proxy_buffer_size the_size</p>

<p>默认值: proxy_buffer_size 4k/8k</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx配置多个域名, http https共用配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy/"/>
    <updated>2024-03-01T20:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dayq/p/17488471.html">https://www.cnblogs.com/dayq/p/17488471.html</a></p>

<h4>0. user</h4>

<pre><code>    useradd nginx -G nginx

    chown -R nginx:nginx /var/log/nginx/*
</code></pre>

<h4>1. nginx</h4>

<p>vim /usr/local/openresty/nginx/conf/nginx.conf</p>

<p>域名 <code>s1.com</code>  <code>*.s1.com</code> 建议分开写两个?</p>

<p>如果需要多个域名共用端口则复制多个</p>

<p>增加回源地址 Proxy: &ldquo;$proxy_host&rdquo; &ldquo;$upstream_addr&rdquo;</p>

<pre><code>    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /run/nginx.pid;

    ......

    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"'
                  ' Proxy: $upstream_response_time $proxy_host $upstream_addr $upstream_status $upstream_response_length';
        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        keepalive_timeout   65;
        types_hash_max_size 4096;
        #gzip  on;


        include     mime.types;
        default_type    application/octet-stream;


        server {
            listen  80;
            listen  443 ssl;
            server_name s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }



        server {
            listen  80;
            listen  443 ssl;
            server_name s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }
    }
</code></pre>

<h4>2. log 配置</h4>

<p>vim /etc/logrotate.d/nginx
<code>
    /var/log/nginx/*.log {
        create 0640 nginx root
        weekly
        rotate 100
        missingok
        notifempty
        delaycompress
        sharedscripts
        postrotate
            /bin/kill -USR1 `cat /run/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true
        endscript
    }
</code></p>
]]></content>
  </entry>
  
</feed>
