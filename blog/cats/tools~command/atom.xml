<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~command | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~command/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[shell 获取脚本的绝对路径]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/08/tools-shell/"/>
    <updated>2021-06-08T22:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/08/tools-shell</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/FlyFive/p/3640267.html">https://www.cnblogs.com/FlyFive/p/3640267.html</a></p>

<h4>常见的一种误区，是使用 pwd 命令</h4>

<p>该命令的作用是“print name of current/working directory”，这才是此命令的真实含义，当前的工作目录，这里没有任何意思说明，这个目录就是脚本存放的目录。所以，这是不对的。你可以试试 bash shell/a.sh，a.sh 内容是 pwd，你会发现，显示的是执行命令的路径 /home/june，并不是 a.sh 所在路径：/home/june/shell/a.sh</p>

<h4>另一个误人子弟的答案，是 $0</h4>

<p>这个也是不对的，这个$0是Bash环境下的特殊变量，其真实含义是：</p>

<p> Expands to the name of the shell or shell script. This is set at shell initialization.  If bash is invoked with a file of commands, $0 is set to the name of that file. If bash is started with the -c option, then $0 is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the file name used to invoke bash, as given by argument zero.</p>

<p> 这个$0有可能是好几种值，跟调用的方式有关系：</p>

<p> 使用一个文件调用bash，那$0的值，是那个文件的名字(没说是绝对路径噢)</p>

<p> 使用-c选项启动bash的话，真正执行的命令会从一个字符串中读取，字符串后面如果还有别的参数的话，使用从$0开始的特殊变量引用(跟路径无关了)</p>

<p> 除此以外，$0会被设置成调用bash的那个文件的名字(没说是绝对路径)</p>

<h4>正确：</h4>

<pre><code>    basepath=$(cd `dirname $0`; pwd)
</code></pre>

<p>dirname $0，取得当前执行的脚本文件的父目录</p>

<p>cd <code>dirname $0</code>，进入这个目录(切换当前工作目录)</p>

<p>pwd，显示当前工作目录(cd执行后的)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令行截屏]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/11/command-scrot/"/>
    <updated>2020-12-11T12:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/11/command-scrot</id>
    <content type="html"><![CDATA[<h4>ubuntu</h4>

<pre><code>    sudo apt-get install scrot
</code></pre>

<h4>centos</h4>

<p>scrot0.8 <a href="https://github.com/dreamer/scrot">https://github.com/dreamer/scrot</a></p>

<p><a href="/download/tools/scrot0.8.tar">scrot0.8</a></p>

<p><a href="http://packages.psychotic.ninja/7/base/x86_64/RPMS/giblib-1.2.4-22.el7.psychotic.x86_64.rpm">http://packages.psychotic.ninja/7/base/x86_64/RPMS/giblib-1.2.4-22.el7.psychotic.x86_64.rpm</a></p>

<p><a href="http://packages.psychotic.ninja/7/base/x86_64/RPMS/giblib-devel-1.2.4-22.el7.psychotic.x86_64.rpm">http://packages.psychotic.ninja/7/base/x86_64/RPMS/giblib-devel-1.2.4-22.el7.psychotic.x86_64.rpm</a></p>

<p><a href="/download/tools/giblib-1.2.4-22.el7.psychotic.x86_64.rpm">giblib-1.2.4-22.el7.psychotic.x86_64.rpm</a></p>

<p><a href="/download/tools/giblib-devel-1.2.4-22.el7.psychotic.x86_64.rpm">giblib-devel-1.2.4-22.el7.psychotic.x86_64.rpm</a></p>

<pre><code>    yum install imlib2
    yum install imlib2-devel

    rpm -ivh giblib-1.2.4-22.el7.psychotic.x86_64.rpm
    rpm -ivh giblib-devel-1.2.4-22.el7.psychotic.x86_64.rpm

    $ ./configure
    $ make
    # make install
</code></pre>

<p>scrot <a href="https://github.com/resurrecting-open-source-projects/scrot">https://github.com/resurrecting-open-source-projects/scrot</a></p>

<p><a href="/download/tools/scrot.tar">scrot</a></p>

<pre><code>    yum install automake
    yum install autoconf
    yum install autoconf-archive.noarch 
    yum install libXtst-devel
    yum install libXcomposite-devel

    $ ./autogen.sh
    $ ./configure
    $ make
    # make install
</code></pre>

<h4>用Scrot截屏</h4>

<p>1.截取整个桌面十分简单。只需运行Scrot命令，不需要任何参数，然后它会保存一张整个桌面的截屏，以(日期标记).png的文件形式保存在当前文件目录下。</p>

<pre><code>    $ scrot
</code></pre>

<p>你也可以指定保存目标文件夹和截图文件名。</p>

<pre><code>    $ scrot ~/Pictures/my_desktop.png
</code></pre>

<p>2.截取特定窗口或矩形区域</p>

<p>Scrot允许你在桌面选择一个特定的窗口或定义一个矩形区域来截图。使用下列命令来实现：</p>

<pre><code>    $ scrot -s
</code></pre>

<p>运行这个命令后，继续用你的鼠标单击任意窗口或画出一个矩形，它能够触发对选定窗口/区域的屏幕截取。（LCTT译注，还要使用鼠标，伐快乐）</p>

<p>有时候你选定的区域或窗口可能会被桌面的其它窗口部分遮挡。在这种情况下，你在截屏前需要一点时间来清理那个部分。那正是延迟截屏能够帮到你的，就像下面所描述的那样。</p>

<p>3.延迟截屏</p>

<p>延迟截取在各种情况下都很实用。就在截图前，你可能想要移动一下窗口，激活一下菜单，或是触发特定时间（如通知）等等。 使用“-d N”参数，我们可以将截屏进程延迟N秒。</p>

<pre><code>    $ scrot -s -d 5
</code></pre>

<p>4.调整截屏质量</p>

<p>你可以在1到100的范围内调整截取的图像质量（数字越大质量越高）。默认质量设置为75。</p>

<pre><code>    $ scrot -q 50
</code></pre>

<p>5.调整截屏尺寸</p>

<p>你可以在1到100的范围内调整截取的图像尺寸（数字越大尺寸越大）。减小截屏的尺寸到原图的10％：</p>

<pre><code>    $ scrot -t 10
</code></pre>

<p>6.将截取的截屏传递给其它命令</p>

<p>Scrot允许你发送保存的截屏图像给任意一个命令作为它们的输入。这个选项在你想对截屏图像做任意后期处理的时候十分实用。截屏的文件名/路径跟随于“$f”字符串之后。</p>

<pre><code>    $ scrot -e 'mv $f ~/screenshots'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nethogs 监控Linux的每个进程流量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/12/05/command-nethogs/"/>
    <updated>2020-12-05T22:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/12/05/command-nethogs</id>
    <content type="html"><![CDATA[<pre><code>    sudo apt-get install libncurses5-dev
    sudo apt-get install libpcap0.8-dev

    yum install ncurses libpcap
    yum install ncurses-devel libpcap-devel
</code></pre>

<p><a href="/download/tools/nethogs-0.8.1-kk.tar">adjust &amp; fix bug nethogs-0.8.1-kk.tar</a></p>

<p>orig: <a href="https://packages.ubuntu.com/source/xenial/nethogs">https://packages.ubuntu.com/source/xenial/nethogs</a></p>

<pre><code>    Nethogs命令介绍

    nethogs -help
    usage: nethogs [-V] [-h] [-b] [-d seconds] [-v mode] [-c count] [-t] [-p] [-s] [device [device [device ...]]]
    -V : prints version.
    -h : prints this help.
    -b : bughunt mode - implies tracemode.
    -d : delay for update refresh rate in seconds. default is 1.
    -v : view mode (0 = KB/s, 1 = total KB, 2 = total B, 3 = total MB). default is 0.
    -c : number of updates. default is 0 (unlimited).
    -t : tracemode.
    -p : sniff in promiscious mode (not recommended).
    -s : sort output by sent column.
    -a : monitor all devices, even loopback/stopped ones.
    device : device(s) to monitor. default is all interfaces up and running excluding loopback

    When nethogs is running, press:
    q: quit
    s: sort by SENT traffic
    r: sort by RECEIVE traffic
    m: switch between total (KB, B, MB) and KB/s mode


    参数介绍：
        -V : 显示版本信息，注意是大写字母V.
        -v：切换显示单位，默认是默认是KB/s（0表示 KB/s，1表示KB，2表示B，3表示MB）
        -c：检测次数（后面直接跟数字）
        -a：检测所有的设备
        -d : 延迟更新刷新速率，以秒为单位。默认值为 1.
        -t : 跟踪模式.
        -b : bug 狩猎模式 — — 意味着跟踪模式.
        -p : 混合模式（不推荐）.
        device: 要监视的设备名称. 默认为 eth0

    以下是NetHogs的一些交互命令(键盘快捷键)
        m : 修改单位
        r : 按流量排序
        s : 按发送流量排序
        q : 退出命令提示符
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lsof]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/command-lsof/"/>
    <updated>2020-10-12T15:48:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/command-lsof</id>
    <content type="html"><![CDATA[<h3>lsof查看端口被哪些程序在使用</h3>

<pre><code>    lsof -i TCP:port -n
    lsof -i UDP:port -n
    lsof -i :port -n
    lsof -i tcp:1521 -n
</code></pre>

<h3>查看连接创建时间</h3>

<pre><code>    netstat -npt | grep port
    tcp        0      0 ::ffff:192.168.251.43:51520 ::ffff:192.168.110.231:8998 ESTABLISHED 32439/java  

    lsof -p pid | grep port
    java    32439 root  118u  IPv6          165707367      0t0       TCP SC-HOST-43:51518-&gt;192.168.110.231:8998 (ESTABLISHED) 
    java    32439 root  126u  IPv6          165707404      0t0       TCP SC-HOST-43:51520-&gt;192.168.110.231:8998 (ESTABLISHED)

    注意到118u和126u是这两个连接的文件名，然后去ll /proc/pid/fd/118，就可以看到这个连接的建立时间了。
</code></pre>

<h3>查看进程启动路径</h3>

<pre><code>    ls -l /proc/pid/xx
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[indent 代码格式化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/10/12/command-indent/"/>
    <updated>2020-10-12T13:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/10/12/command-indent</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/sky-heaven/p/9012508.html">https://www.cnblogs.com/sky-heaven/p/9012508.html</a></p>

<pre><code>    常用的设置：
        indent -npro -kr -i8 -ts8 -sob -l80 -ss -bl  -bli 0

    参数说明：
    -npro或--ignore-profile 　不要读取indent的配置文件.indent.pro。
    -kr 　指定使用Kernighan&amp;Ritchie的格式。
    -i8 　--indent-level 设置缩排的格数为8。
    -ts8 设置tab的长度
    -sob或--swallow-optional-blank-lines 　删除多余的空白行。
    -l80 代码超过80换行
    -ss或--space-special-semicolon 　若for区段只有一行时，在分号前加上空格。
    -ncs或--no-space-after-casts 　不要在cast之后空一格。
    -bl {分行显示
    -bli 0 括号缩进为0
    功能说明：调整C原始代码文件的格式。
    语　　法：indent [参数][源文件] 或 indent [参数][源文件][-o 目标文件]
    补充说明：indent可辨识C的原始代码文件，并加以格式化，以方便程序设计师阅读。
    参　　数：
    　-bad或--blank-lines-after-declarations 　在声明区段或加上空白行。
    　-bap或--blank-lines-after-procedures 　在程序或加上空白行。
    　-bbb或--blank-lines-after-block-comments 　在注释区段后加上空白行。
    　-bc或--blank-lines-after-commas 　在声明区段中，若出现逗号即换行。
    　-bl或--braces-after-if-line 　if(或是else,for等等)与后面执行区段的"{"不同行，且"}"自成一行。
    　-bli&lt;缩排格数&gt;或--brace-indent&lt;缩排格数&gt; 　设置{ }缩排的格数。
    　-br或--braces-on-if-line 　if(或是else,for等等)与后面执行跛段的"{"不同行，且"}"自成一行。
    　-bs或--blank-before-sizeof 　在sizeof之后空一格。
    　-c&lt;栏数&gt;或--comment-indentation&lt;栏数&gt; 　将注释置于程序码右侧指定的栏位。
    　-cd&lt;栏数&gt;或--declaration-comment-column&lt;栏数&gt; 　将注释置于声明右侧指定的栏位。
    　-cdb或--comment-delimiters-on-blank-lines 　注释符号自成一行。
    　-ce或--cuddle-else 　将else置于"}"(if执行区段的结尾)之后。
    　-ci&lt;缩排格数&gt;或--continuation-indentation&lt;缩排格数&gt; 　叙述过长而换行时，指定换行后缩排的格数。
    　-cli&lt;缩排格数&gt;或--case-indentation-&lt;缩排格数&gt; 　使用case时，switch缩排的格数。
    　-cp&lt;栏数&gt;或-else-endif-column&lt;栏数&gt; 　将注释置于else与elseif叙述右侧定的栏位。
    　-cs或--space-after-cast 　在cast之后空一格。
    　-d&lt;缩排格数&gt;或-line-comments-indentation&lt;缩排格数&gt; 　针对不是放在程序码右侧的注释，设置其缩排格数。
    　-di&lt;栏数&gt;或--declaration-indentation&lt;栏数&gt; 　将声明区段的变量置于指定的栏位。
    　-fc1或--format-first-column-comments 　针对放在每行最前端的注释，设置其格式。
    　-fca或--format-all-comments 　设置所有注释的格式。
    　-gnu或--gnu-style. 　指定使用GNU的格式，此为预设值。
    　-i&lt;格数&gt;或--indent-level&lt;格数&gt; 　设置缩排的格数。
    　-ip&lt;格数&gt;或--parameter-indentation&lt;格数&gt; 　设置参数的缩排格数。
    　-kr或--k-and-r-style. 　指定使用Kernighan&amp;Ritchie的格式。
    　-lp或--continue-at-parentheses 　叙述过长而换行，且叙述中包含了括弧时，将括弧中的每行起始栏位内容垂直对其排列。
    　-nbad或--no-blank-lines-after-declarations 　在声明区段后不要加上空白行。
    　-nbap或--no-blank-lines-after-procedures 　在程序后不要加上空白行。
    　-nbbb或--no-blank-lines-after-block-comments 　在注释区段后不要加上空白行。
    　-nbc或--no-blank-lines-after-commas 　在声明区段中，即使出现逗号，仍旧不要换行。
    　-ncdb或--no-comment-delimiters-on-blank-lines 　注释符号不要自成一行。
    　-nce或--dont-cuddle-else 　不要将else置于"}"之后。
    　-ncs或--no-space-after-casts 　不要在cast之后空一格。
    　-nfc1或--dont-format-first-column-comments 　不要格式化放在每行最前端的注释。
    　-nfca或--dont-format-comments 　不要格式化任何的注释。
    　-nip或--no-parameter-indentation 　参数不要缩排。
    　-nlp或--dont-line-up-parentheses 　叙述过长而换行，且叙述中包含了括弧时，不用将括弧中的每行起始栏位垂直对其排列。
    　-npcs或--no-space-after-function-call-names 　在调用的函数名称之后，不要加上空格。
    　-npro或--ignore-profile 　不要读取indent的配置文件.indent.pro。
    　-npsl或--dont-break-procedure-type 　程序类型与程序名称放在同一行。
    　-nsc或--dont-star-comments 　注解左侧不要加上星号(*)。
    　-nsob或--leave-optional-semicolon 　不用处理多余的空白行。
    　-nss或--dont-space-special-semicolon 　若for或while区段仅有一行时，在分号前不加上空格。
    　-nv或--no-verbosity 　不显示详细的信息。
    　-orig或--original 　使用Berkeley的格式。
    　-pcs或--space-after-procedure-calls 　在调用的函数名称与"{"之间加上空格。
    　-psl或--procnames-start-lines 　程序类型置于程序名称的前一行。
    　-sc或--start-left-side-of-comments 　在每行注释左侧加上星号(*)。
    　-sob或--swallow-optional-blank-lines 　删除多余的空白行。
    　-ss或--space-special-semicolon 　若for或swile区段今有一行时，在分号前加上空格。
    　-st或--standard-output 　将结果显示在标准输出设备。
    　-T 　数据类型名称缩排。
    　-ts&lt;格数&gt;或--tab-size&lt;格数&gt; 　设置tab的长度。
    　-v或--verbose 　执行时显示详细的信息。
    　-version 　显示版本信息。
</code></pre>

<p>如果你不想在参数上花太多时间来研究，你也可以在你的linux下的源代码里面，也就是/usr/src/linux/scripts/Lindent,找到Lindent脚本，这个是linux内核源代码格式，你可以直接拿过来用。比如</p>

<p>cp /usr/src/linux/scripts/Lindent /usr/bin  $Lindent test.c</p>

<h3>Lindent脚本</h3>

<pre><code>    #!/bin/sh
    PARAM="-npro -kr -i8 -ts8 -sob -l80 -ss -ncs -cp1"
    RES=`indent --version`
    V1=`echo $RES | cut -d' ' -f3 | cut -d'.' -f1`
    V2=`echo $RES | cut -d' ' -f3 | cut -d'.' -f2`
    V3=`echo $RES | cut -d' ' -f3 | cut -d'.' -f3`
    if [ $V1 -gt 2 ]; then
      PARAM="$PARAM -il0"
    elif [ $V1 -eq 2 ]; then
      if [ $V2 -gt 2 ]; then
        PARAM="$PARAM -il0";
      elif [ $V2 -eq 2 ]; then
        if [ $V3 -ge 10 ]; then
          PARAM="$PARAM -il0"
        fi
      fi
    fi
    indent $PARAM "$@"
</code></pre>
]]></content>
  </entry>
  
</feed>
