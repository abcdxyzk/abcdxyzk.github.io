<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~command | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~command/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-26T19:20:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux rsync 备份静态文件脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/09/28/rsync_php/"/>
    <updated>2023-09-28T15:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/09/28/rsync_php</id>
    <content type="html"><![CDATA[<h4>mysqlbak.sh</h4>

<pre><code>    php rsync.php u8 2023-01-01

    php rsync.php aps 2023-01-01
</code></pre>

<h4>rsync.php</h4>

<pre><code>    &lt;?php

    function sDir(&amp;$fpa, &amp;$dones, $logs, $ptime, $dir, $pre = 0)
    {
        if (!is_dir($dir))
            return;

        // 类型 大小 时间 是否gzip 文件名或目录名
        $path = $dir;
        if (!isset($dones[$path])) {

            $tp = is_link($path) ? 'dir_link' : 'dir';
            $s = filesize($path);
            $t = filectime($path);
            $gz = 'no';

            echo "同步 {$tp}: {$path}\n";
            exec("echo 同步 {$tp}: {$path} &gt;&gt; {$logs}");

            exec("rsync -avd --max-size 0 {$path}/. root@192.168.1.2:/home/bak/rsync_178/{$path} &gt;&gt; {$logs} 2&gt;&amp;1");
            fputcsv($fpa, array(date('Y-m-d_H:i:s'), $tp, $s, $t, $gz, $path), "\t");
            $dones[$path] = array('', $tp, $s, $t, $gz, $path);
        }
        if (is_link($path))
            return;

        $handle = opendir($dir);
        while ($file = readdir($handle)) {
            if ($file == '.' || $file == '..')
                continue;

            $path = $dir . '/' . $file;

            $tp = '';
            $s = filesize($path);
            $t = filemtime($path);
            $gz = 'no';

            if (is_dir($path)) {

                sDir($fpa, $dones, $logs, $ptime, $path, $pre + 8);

            } elseif (isset($dones[$path])) {

                if ($s &gt;= 100 and $t &lt; $ptime and $dones[$path][1] == 'file') {
                    $suf = substr($path, -3);
                    $retval1 = $retval2 = '';
                    if ($suf != '.gz') {

                        $spath = str_replace(' ', '\\ ', str_replace(')', '\\)', str_replace('(', '\\(', $path)));

                        exec("gzip {$spath}", $output, $retval1);
                        $tp = 'gz';
                        $gz = 'yes' . $retval1 . $retval2;
                        fputcsv($fpa, array(date('Y-m-d_H:i:s'), $tp, $s, $t, $gz, $path), "\t");

                        echo "{$dones[$path][0]} 已经同步, gzip压缩: {$path}\n";
                    }
                }

            //  if ($tp == '')
            //      echo "{$dones[$path][0]} 已经同步: {$path}\n";

            } elseif (is_link($path)) {

                $tp = 'link';
                echo "同步 {$tp}: {$path}\n";
                exec("echo 同步 {$tp}: {$path} &gt;&gt; {$logs}");

                exec("rsync -akv {$path} root@192.168.1.2:/home/bak/rsync_178/{$path} &gt;&gt; {$logs} 2&gt;&amp;1");
                fputcsv($fpa, array(date('Y-m-d_H:i:s'), $tp, $s, $t, $gz, $path), "\t");
                $dones[$path] = array('', $tp, $s, $t, $gz, $path);
            } else {

                $spath = str_replace(' ', '\\ ', str_replace(')', '\\)', str_replace('(', '\\(', $path)));

                $tp = 'file';
                echo "同步 {$tp}: {$path}\n";
                exec("echo 同步 {$tp}: {$spath} &gt;&gt; {$logs}");

                $suf = substr($path, -3);
                $addsuf = ($suf != '.gz') ? '.gz' : '';
                $retval1 = $retval2 = '';

                if ($s &lt; 100) {
                    exec("rsync -av {$spath} root@192.168.1.2:'/home/bak/rsync_178/{$spath}' &gt;&gt; {$logs} 2&gt;&amp;1");
                } elseif ($t &lt; $ptime) {
                    $gz = 'yes';
                    if ($suf != '.gz')
                        exec("gzip {$spath}", $output, $retval1);
                    exec("rsync -av {$spath}{$addsuf} root@192.168.1.2:'/home/bak/rsync_178/{$spath}{$addsuf}' &gt;&gt; {$logs} 2&gt;&amp;1");
                } else {
                    $gz = 'yes';
                    if ($suf != '.gz')
                        exec("gzip {$spath}", $output, $retval1);
                    exec("rsync -av {$spath}{$addsuf} root@192.168.1.2:'/home/bak/rsync_178/{$spath}{$addsuf}' &gt;&gt; {$logs} 2&gt;&amp;1");
                    if ($suf != '.gz')
                        exec("gunzip {$spath}{$addsuf}", $output, $retval2);
                }
                $gz .= $retval1 . $retval2;
                fputcsv($fpa, array(date('Y-m-d_H:i:s'), $tp, $s, $t, $gz, $path), "\t");
                $dones[$path] = array('', $tp, $s, $t, $gz, $path);
            }
        }
        closedir($handle);
    }

    if ($argc != 3) {
        echo "run: {$argv[0]} dir 2023-01-01\n";
        exit(-1);
    }

    $dir = $argv[1];
    $ptime = strtotime($argv[2]);


    $files = "rsync_{$dir}.files";
    $logs = "rsync_{$dir}.log";


    // 读取已经同步的列表
    $dones = array();
    if (file_exists($files)) {
        $fp = fopen($files, 'r');
        while ($line = fgetcsv($fp, 0, "\t")) {
            if ($line[1] == 'gz')
                continue;
            $file = $line[5];
            $dones[$file] = $line;
            $dones[$file . '.gz'] = $line;
        }
        fclose($fp);
    }


    $fpa = fopen($files, 'a');
    sDir($fpa, $dones, $logs, $ptime, $dir);
    fclose($fpa);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux rsync命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/09/28/rsync/"/>
    <updated>2023-09-28T14:45:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/09/28/rsync</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/Dontla/article/details/130371692">https://blog.csdn.net/Dontla/article/details/130371692</a></p>

<h4>1. rsync 简介</h4>

<p>rsync 就是远程同步的意思remote sync.</p>

<p>rsync 被用在UNIX / Linux执行备份操作操作.</p>

<p>rsync 工具包被用来从一个位置到另一个位置高效地同步文件和文件夹. rsync可以实现在同一台机器的不同文件直接备份,也可以跨服务器备份.</p>

<h4>2. rsync的重要特性</h4>

<p>速度快: 初次同步时, rsync会全量拷贝从源文件或目录到目标位置. 第二次往后同步时, rsync 仅仅会拷贝变化的数据块或字节到目标位置这将使得文件传输非常迅速.</p>

<p>安全: rsync 可以使用ssh协议加密传输.</p>

<p>占用带宽少: rsync 在发送时会压缩数据块, 接收后再解压缩数据块. 所以和其他文件传输协议比起来, rsync在跨主机传输文件时会占用较小的带宽.</p>

<p>不需要特殊权限: 安装和运行rsync 不需要特殊权限.</p>

<h4>3. 用法</h4>

<p>从语法结构我们可以看出, 源和目标即可以在本地也可以在远端. 如果是远端的话,需要指明登录用户名, 远端服务器名, 和远端文件或目录. 同时源可以是多个, 目标位置只能是一个.</p>

<p>3.1 Rsync参数解释</p>

<pre><code>    一般同步传输目录都使用azv选项. 

    -v, --verbose 详细模式输出 

    -q, --quiet 精简输出模式 

    -c, --checksum 打开校验开关，强制对文件传输进行校验 

    -a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD 

    -r, --recursive 对子目录以递归模式处理 

    -R, --relative 使用相对路径信息 

    -b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。 

    --backup-dir 将备份文件(如~filename)存放在在目录下。 

    -suffix=SUFFIX 定义备份文件前缀 

    -u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件) 

    -l, --links 保留软链结 

    -L, --copy-links 想对待常规文件一样处理软链结 

    --copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结 

    --safe-links 忽略指向SRC路径目录树以外的链结 

    -H, --hard-links 保留硬链结 

    -p, --perms 保持文件权限 

    -o, --owner 保持文件属主信息 

    -g, --group 保持文件属组信息 

    -D, --devices 保持设备文件信息 

    -t, --times 保持文件时间信息 

    -S, --sparse 对稀疏文件进行特殊处理以节省DST的空间 

    -n, --dry-run现实哪些文件将被传输 

    -W, --whole-file 拷贝文件，不进行增量检测 

    -x, --one-file-system 不要跨越文件系统边界 

    -B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节 

    -e, --rsh=COMMAND 指定使用rsh、ssh方式进行数据同步 

    --rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息 

    -C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件 

    --existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件 

    --delete 删除那些DST中SRC没有的文件 

    --delete-excluded 同样删除接收端那些被该选项指定排除的文件 

    --delete-after 传输结束以后再删除 

    --ignore-errors 及时出现IO错误也进行删除 

    --max-delete=NUM 最多删除NUM个文件 

    --partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输 

    --force 强制删除目录，即使不为空 

    --numeric-ids 不将数字的用户和组ID匹配为用户名和组名 

    --timeout=TIME IP超时时间，单位为秒 

    -I, --ignore-times 不跳过那些有同样的时间和长度的文件 

    --size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间 

    --modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0 

    -T --temp-dir=DIR 在DIR中创建临时文件 

    --compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份 

    -P 等同于 --partial 

    --progress 显示备份过程 

    -z, --compress 对备份的文件在传输时进行压缩处理 

    --exclude=PATTERN 指定排除不需要传输的文件模式 

    --include=PATTERN 指定不排除而需要传输的文件模式 

    --exclude-from=FILE 排除FILE中指定模式的文件 

    --include-from=FILE 不排除FILE指定模式匹配的文件 

    --version 打印版本信息 

    --address 绑定到特定的地址 

    --config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件 

    --port=PORT 指定其他的rsync服务端口 

    --blocking-io 对远程shell使用阻塞IO 

    -stats 给出某些文件的传输状态 

    --progress 在传输时现实传输过程 

    --log-format=formAT 指定日志文件格式 

    --password-file=FILE 从FILE中得到密码 

    --bwlimit=KBPS 限制I/O带宽，KBytes per second 

    -h, --help 显示帮助信息
</code></pre>

<h4>4. 示例</h4>

<h5>4.1. 示例 1. 同步同一台机上的两个目录</h5>

<pre><code>    rsync -zvr /var/opt/installation/inventory/ /root/temp
</code></pre>

<p>说明:</p>

<p>  -z: &ndash;compress 使用压缩机制</p>

<p>  -v: &ndash;verbose 打印详细信息</p>

<p>  -r: &ndash;recursive 以递归模式同步子目录</p>

<p>注意: 同步完成后, 我们会发现文件的时间戳timestamps发生了改变.</p>

<h5>4.2. 示例 2: 保留文件的时间戳</h5>

<p>有时我们希望拷贝或同步时, 时间戳不要发生变化, 源文件是什么时间戳,目标文件就是什么时间戳, 这时我们需要使用 -a &ndash;archive 归档模式选项. -a 选项相当于7个选项的组合 -rlptgoD</p>

<pre><code>    -r, --recursive: 递归模式Recursive mode
    -l, --links: 将符号链接当作符号链接文件拷贝, 不拷贝符合链接指向的文件内容.
    -p, --perms: 保留文件权限
    -t, --times: 保留修改时间戳
    -g, --group: 保留用户组信息
    -o, --owner: 保留用户信息(需要超级用户权限)
    -D, 相当于 --devices --specials 的组合, 保留设备文件, 保留特殊文件.
</code></pre>

<pre><code>    rsync -azv /var/opt/installation/inventory/ /root/temp/
</code></pre>

<p>同步完成后, 我们再来看文件属性, 时间戳信息得到了保留, 不仅如此文件的所有者 和所在组也得到保留.</p>

<h5>4.3. 示例 3: 拷贝单个文件</h5>

<pre><code>    rsync -v /var/lib/rpm/Pubkeys /root/temp/Pubkeys
</code></pre>

<p>说明: Pubkeys 是一个普通文件</p>

<h5>4.4. 示例 4. 从本地拷贝多个文件到远端</h5>

<pre><code>    rsync -avz /root/temp/ thegeekstuff@192.168.200.10:/home/thegeekstuff/temp/
</code></pre>

<p>使用rsync, 也可以从本地拷贝多个文件或目录到远端, 以下即为示例:</p>

<p>注意:</p>

<p>与本地文件拷贝不同的地方在于, 当拷贝文件到远程服务器时, 我们指定远程主机上的用户名, 服务器地址, 路径等信息, 类是于使用scp命令拷贝, 如果没有设置ssh免密码登录我们还需要提供远程用户的密码等信息.有时你不想频繁输入密码, 或者rsync运行在一个无人执守的脚本里面, 这是需要预先设置ssh免密登录, 或者使用结合expect命令,自动输入密码, 但是出于安全考虑, 密码需要加密. 所以在条件许可的情况下, 还是推荐设置ssh免密登录.</p>

<h5>4.5. 示例 5. 从远程服务器拷贝文件到本地</h5>

<pre><code>    rsync -avz thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp
</code></pre>

<p>与示例 4 稍有不同, 这时远端目录或文件作为源位置, 本地目录或文件作为目标位置, 示例如下:</p>

<h5>4.6. 示例 6. Remote shell for Synchronization</h5>

<p>rsync 允许指定远程主机上运行shell命令.
这时需要使用 -e 选项:
-e, &ndash;rsh=COMMAND 指定远端使用的shell命令</p>

<pre><code>    rsync -avz -e ssh thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp
</code></pre>

<h5>4.7. 示例 7. 拷贝时不覆盖目标位置已修改过的文件</h5>

<p>在一下特殊的使用场景中, 我们不希望拷贝文件时, 我们不希望拷贝过程覆盖掉目标位置中用户做出的修改. 这时我们需要使用 -u 选项明确的告诉rsync命令保留用户在目标文件中作出的修改. 在下面的例子中, 文件Basenames是用户基于上次的拷贝, 修改过的文件, 当我们使用了-u 选项后, 该文件中的修改将不会被覆盖掉.</p>

<pre><code>    rsync -avzu thegeekstuff@192.168.200.10:/var/lib/rpm /root/temp
</code></pre>

<h4>4.8. 示例 8. 仅拷贝目录结构, 不拷贝文件</h4>

<p>在某些特殊场景中, 我们只需要远程服务器上的目录结构, 而不希望花大量时间, 带宽拷贝文件内容, 这时我们可以使用 -d, &ndash;dirs选项来达到目的.</p>

<pre><code>    rsync -v -d thegeekstuff@192.168.200.10:/var/lib/ .
</code></pre>

<h5>4.9. 示例 9. 文件传输时显示进度</h5>

<p>有时我们希望拷贝文件时, 能实时的显示拷贝进度, 以及传输速率等信息. 尤其是拷贝大文件时, 程序不输出信息, 用户往往无法区分程序是在响应中, 还是已经挂起, 在这种情况下如果使用 –progress 就会非常有帮助.
rsync –progress option displays detailed progress of rsync execution as shown below.</p>

<pre><code>    rsync -avz --progress thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/
</code></pre>

<p>你也可以使用rsnapshot工具 (rsnapshot会调用rsync)来备份本地linux服务器, 或者备份远程linux服务器.</p>

<h5>4.10. 示例 10. 同步时删除目标位置多余的文件或目录</h5>

<p>有时我们希望目标文件和源文件保持严格一致, 不要多文件也不要少文件, 这是我们可能需要使用 -delete 选项来达到目的. 如果使用 -delete 选项, rsync将删除目标位置多余的文件或文件夹. 此选项还可以结合–delete-excluded 选项一起使用, 添加一些例外的文件.</p>

<pre><code>    # 现在Source and target 文件是一致的. 现在让我们在目标位置创建一个新文件.
    $ touch new-file.txt

    $ rsync -avz --delete thegeekstuff@192.168.200.10:/var/lib/rpm/ .
</code></pre>

<p>上述示例中, new-file.txt 是源文件中没有的文件, 其将会在拷贝时被删除掉.</p>

<h5>4.11. 示例 11. Do not Create New File at the Target</h5>

<p>在某些特殊的场景下, 我们只想更新, 目标位置已经存在的文件或目录, 而不关心源位置的新文件, 这时我们可以使用-existing 选项仅仅更新已经存在的文件.
让我们来验证一下这个选项的功能, 首先在源端添加一个新文件 new-file.txt.</p>

<pre><code>    [/var/lib/rpm ]$ &gt; new-file.txt
    Next, execute the rsync from the target.

    $ rsync -avz --existing root@192.168.1.2:/var/lib/rpm/ .
</code></pre>

<p>从上面的例子可以看到, 由于加了–existing选项新文件new-file.txt没有被拷贝到目标位置</p>

<h5>4.12. 示例 12. 查看目标位置和源位置之间的差异</h5>

<p>选项-i, &ndash;itemize-changes 非常有用, 当我们想了解目标位置和源位置的文件差异时.</p>

<p>在源端:
<code>
    $ ls -l /var/lib/rpm
    -rw-r--r-- 1 root root  5357568 2010-06-24 08:57 Basenames
    -rw-r--r-- 1 root root    12288 2008-05-28 22:03 Conflictname
    -rw-r--r-- 1 root root  1179648 2010-06-24 08:57 Dirnames
</code></p>

<p>在目标端:
<code>
    $ ls -l /root/temp
    -rw-r--r-- 1 root root    12288 May 28  2008 Conflictname
    -rw-r--r-- 1 bin  bin   1179648 Jun 24 05:27 Dirnames
    -rw-r--r-- 1 root root        0 Sep  3 06:39 Basenames
</code></p>

<p>注意: 在上面的例子中, 源位置和目标位置有两处差异. 第一, 源文件Basenames的所有者和组 与 目标文件不同, 第一Dirnames文件大小也不一样.
现在让我们来看看rsync会怎样显示这些差异</p>

<pre><code>    rsync -avzi thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/
</code></pre>

<p>输出信息只在相应文件前面显示了9个字母来标识改变, 这些字母具体是什么意思呢? 请参考以下详细说明
<code>
    &gt; 表示文件已经被拷贝到了本地
    f 代表该项目是一个文件.
    s 代表文件大小发生了变化.
    t 代表时间戳有差异.
    o 所有者有差异
    g 所属组有差异.
</code></p>

<h5>4.13. 示例 13. 使用通配符过滤文件</h5>

<p>rsync 可以使用–include 和 &ndash;exclude 选项结合通配符进行文件或文件夹过滤</p>

<pre><code>    $ rsync -avz --include 'P*' --exclude '*' thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/
</code></pre>

<p>在上面的示例中, 仅仅以P打头的文件和文件夹被包含了进来, 其他的文件都被过滤在拷贝的过程中被排除在外了.</p>

<h5>4.14. 示例 14. 不拷贝大文件</h5>

<pre><code>    $ rsync -avz --max-size='100K' thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp/
</code></pre>

<p>可以使用–max-size 告诉rsync 不要拷贝大小超过某个值的文件, 可以使用K, M, G指定文件大小, M for megabytes and G for gigabytes.</p>

<h5>4.15. 示例 15. 拷贝整个文件</h5>

<p>rsync 有个重要优点就是, 可以做到在拷贝的过程中, 只拷贝发生变化了的部分, 而不是发送整个文件.
但是在某些场景中, 比如文件较少, 文件size较小时, 我们的带宽又足够大, cpu资源相对又贫乏, 我们不希望它这样做, 因为毕竟计算源端和目标端的checksum, 并做对比, 也需要额外cpu开销. 这时我们可以使用 -W, &ndash;whole-file 选项, 让rsync不用计算那么多, 一上来就直接开始传送文件. 我们可以像下面这么做.</p>

<pre><code>    rsync -avzW  thegeekstuff@192.168.200.10:/var/lib/rpm/ /root/temp
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nc 命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/tools-nc/"/>
    <updated>2023-07-09T18:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/tools-nc</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wang7dao/article/details/7684998">https://blog.csdn.net/wang7dao/article/details/7684998</a></p>

<p>NetCat，在网络工具中有“瑞士军刀”美誉，其有Windows和Linux的版本。因为它短小精悍（1.84版本也不过25k，旧版本或缩减版甚至更小）、功能实用，被设计为一个简单、可靠的网络工具，可通过TCP或UDP协议传输读写数据。同时，它还是一个网络应用Debug分析器，因为它可以根据需要创建各种不同类型的网络连接。</p>

<h4>1、远程拷贝文件</h4>

<p>从server1拷贝文件到server2上。需要先在server2上，用nc激活监听，server2上运行：
<code>
    [root@hatest2 tmp]# nc -lp 1234 &gt; install.log
</code></p>

<p>server1上运行：
<code>
    [root@hatest1 ~]# ll install.log
    -rw-r--r--   1 root root 39693 12月 20   2007 install.log
    [root@hatest1 ~]# nc -w 1 192.168.228.222 1234 &lt; install.log
</code></p>

<h4>2、克隆硬盘或分区</h4>

<p>操作与上面的拷贝是雷同的，只需要由dd获得硬盘或分区的数据，然后传输即可。</p>

<p>克隆硬盘或分区的操作，不应在已经mount的的系统上进行。所以，需要使用安装光盘引导后，进入拯救模式（或使用Knoppix工具光盘）启动系统后，在server2上进行类似的监听动作：</p>

<pre><code>    # nc -l -p 1234 | dd of=/dev/sda
</code></pre>

<p>server1上执行传输，即可完成从server1克隆sda硬盘到server2的任务：
<code>
    # dd if=/dev/sda | nc 192.168.228.222 1234
</code></p>

<p>※ 完成上述工作的前提，是需要落实光盘的拯救模式支持服务器上的网卡，并正确配置IP。</p>

<h4>3、端口扫描</h4>

<p>可以执行：</p>

<pre><code>    # nc -v -w 1 192.168.228.222 -z 1-1000
    hatest2 [192.168.228.222] 22 (ssh) open
</code></pre>

<h4>4、保存Web页面</h4>

<pre><code>    # while true; do nc -l -p 80 -q 1 &lt; somepage.html; done
</code></pre>

<h4>5、模拟HTTP Headers</h4>

<pre><code>    [root@hatest1 ~]# nc www.linuxfly.org 80
    GET / HTTP/1.1
    Host: ispconfig.org
    Referrer: mypage.com
    User-Agent: my-browser

    HTTP/1.1 200 OK
    Date: Tue, 16 Dec 2008 07:23:24 GMT
    Server: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8
    Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/
    Expires: 0
    Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
    Pragma: no-cache
    Cache-Control: private, post-check=0, pre-check=0, max-age=0
    Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/
    Vary: Accept-Encoding
    Transfer-Encoding: chunked
    Content-Type: text/html
    [......]
</code></pre>

<p>在nc命令后，输入红色部分的内容，然后按两次回车，即可从对方获得HTTP Headers内容。</p>

<h3>6、聊天</h3>

<p>nc还可以作为简单的字符下聊天工具使用，同样的，server2上需要启动监听：
<code>
    [root@hatest2 tmp]# nc -lp 1234
</code></p>

<p>server1上传输：
<code>
    [root@hatest1 ~]# nc 192.168.228.222 1234
</code></p>

<p>这样，双方就可以相互交流了。使用Ctrl+D正常退出。</p>

<h4>7、传输目录</h4>

<p>从server1拷贝nginx-0.6.34目录内容到server2上。需要先在server2上，用nc激活监听，server2上运行：</p>

<pre><code>    [root@hatest2 tmp]# nc -l 1234 |tar xzvf -
</code></pre>

<p>server1上运行：</p>

<pre><code>    [root@hatest1 ~]# ll -d nginx-0.6.34
    drwxr-xr-x 8 1000 1000 4096 12-23 17:25 nginx-0.6.34
    [root@hatest1 ~]# tar czvf - nginx-0.6.34|nc 192.168.228.222 1234
</code></pre>

<h4>8、参数简介</h4>

<p>这仅是一个1.10版本的简单说明，详细的参数使用还是需要看man：</p>

<p>引用想要连接到某处: nc [-options] hostname port[s] [ports] &hellip;</p>

<p>绑定端口等待连接: nc -l -p port [-options] [hostname] [port]</p>

<p>参数:</p>

<pre><code>    -g gateway source-routing hop point[s], up to 8
    -G num source-routing pointer: 4, 8, 12, ...
    -h 帮助信息
    -i secs 延时的间隔
    -l 监听模式，用于入站连接
    -n 指定数字的IP地址，不能用hostname
    -o file 记录16进制的传输
    -p port 本地端口号
    -r 任意指定本地及远程端口
    -s addr 本地源地址
    -u UDP模式
    -v 详细输出——用两个-v可得到更详细的内容
    -w secs timeout的时间

    -z 将输入输出关掉——用于扫描时，其中端口号可以指定一个或者用lo-hi式的指定范围。 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep如何匹配制表符]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/24/tools-grep/"/>
    <updated>2023-06-24T19:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/24/tools-grep</id>
    <content type="html"><![CDATA[<p><a href="https://www.iteye.com/blog/xulu010-2412401">https://www.iteye.com/blog/xulu010-2412401</a></p>

<pre><code>    cat 1 | grep '1\t2'
</code></pre>

<p>因为，‘\t’里的\会被认为是转义字符，只能匹配到‘1t2’这样的字符串</p>

<p>那要怎样匹配呢，两个方案</p>

<h4>1.手动把制表符打出来</h4>

<pre><code>    cat 1 | grep '1 2'  
</code></pre>

<p>制表符的打法是ctrl-v + tab</p>

<h4>2.使用$符号展开\t</h4>

<pre><code>    cat 1 | grep '1'$'\t''2'  
</code></pre>

<p>$符号在shell中是引用变量的意思，所以 $&lsquo;\t&rsquo; 就是返回了一个展开的制表符</p>

<p>如果要匹配多个制表符，使用+号匹配即可</p>

<pre><code>    cat 1 | grep '3'$'\t''\+4'  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab不再发出告警邮件]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/06/24/tools-crontab/"/>
    <updated>2023-06-24T19:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/06/24/tools-crontab</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-405749-id-2949218.html">http://blog.chinaunix.net/uid-405749-id-2949218.html</a></p>

<p>在默认情况下，cron程序会向用户的本地信箱中发送邮件，则产生的邮件数量将会很巨大，那么如何禁用邮件报警功能呢，解决方法有如下一些：</p>

<p>不装邮件时 保存到 /var/spool/mail/root</p>

<p>装邮件时 保存到 /root/Maildir/new/</p>

<h4>1.将执行命令的信息重定向到</h4>

<pre><code>    cron_command &gt;/dev/null 2&gt;&amp;1
</code></pre>

<h4>2.将执行命令的信息重定向到</h4>

<pre><code>    cron_command &amp;&gt;/dev/null
</code></pre>

<h4>3.在crontab设置文件中指定发送到空</h4>

<pre><code>    MAILTO=""
    cron_command
</code></pre>

<h2>在crontab设置文件中指定发送到邮件</h2>

<pre><code>    MAILTO="1@qq.com"
    cron_command
</code></pre>
]]></content>
  </entry>
  
</feed>
