<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~dns | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~dns/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-12T15:09:44+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DNSSEC学习笔记]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/25/dns-sec-2/"/>
    <updated>2023-01-25T16:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/25/dns-sec-2</id>
    <content type="html"><![CDATA[<pre><code>    dig @192.58.128.30 +dnssec . A
    dig @192.58.128.30 +dnssec . NS

    dig @192.58.128.30 +dnssec . DNSKEY
</code></pre>

<hr />

<p><a href="https://blog.csdn.net/huangzx3/article/details/86526068">https://blog.csdn.net/huangzx3/article/details/86526068</a></p>

<h3>1 、什么是DNSSEC</h3>

<p>DNSSEC（DNS Security Extension）&mdash;-DNS安全扩展，主要是为了解决DNS欺骗和缓存污染问题而设计的一种安全机制。</p>

<h4>1.1 DNS欺骗&amp;缓存污染</h4>

<p>客户端(pc)发起域名（例如:www.baidu.com）请求的时候，如果在本地缓存没有的情况下，会往递归服务器发送域名查询请求（我们也称之为localdns），递归服务器再一层层递归从.到com.再到baidu.com.（即到.的权威服务器&ndash;>com.的权威服务器&ndash;>baidu.com.的权威服务器)，最终取到www.baidu.com.对应的解析A记录返回给客户端。在整个查询过程中，攻击者可以假冒任何一个应答方：递归服务器&ndash;>.的权威服务器&ndash;>com.的权威服务器&ndash;>baidu.com.的权威服务器，给请求方发送一个伪造的响应（UDP包极其容易伪造），其中响应的解析记录给了一个错误的IP地址或者其他类型的解析记录（比如NXDomain、ServFail或者cname到错误的域名地址去等）。客户端或者是解析服务器在没有经过数据来源正确性校验的情况下接受了伪造的应答，直接将导致客户端无法正常访问网站或者其他资源或者客户端请求重定向到了伪造的网站上去。另外由于DNS当中存在着缓存，这种错误的记录将随着攻击者设定的TTL进行存活缓存，如果是递归服务器受到DNS欺骗那将会导致自身以及大面积的客户端缓存了错误的解析记录（可以通过清除缓存解决）。</p>

<h3>2、DNSSEC原理</h3>

<p>DNSSEC依靠数字签名来保证DNS应答报文的真实性和完整性。简单来说，权威服务器使用私钥对资源记录进行签名，递归服务器利用权威服务器的公钥对应答报文进行验证。如果验证失败，则说明这一报文可能是有问题的。</p>

<h3>例子：</h3>

<p>一台支持dnssec的递归服务器向支持dnssec的权威服务器发起paypal.com.的A记录请求，它除了得到A记录以外还得到了同名的RRSIG记录，其中包含了paypal.com.这个ZONE的权威数字签名，它使用paypal.com.的私钥来签名。为了验证这一签名是否正确，递归服务器再次向paypal.com.权威查询其公钥，即请求paypal.com.的dnskey类型的记录。递归服务器就可以使用公钥来验证收到的A记录是否是真实且完整的。但是注意：这种状态下，这台权威服务器可能是假冒的，递归服务器请求这台假冒的权威服务器，那么对于解析结果的正确性和完整性的验证上认为是正确的，但其实这个解析结果是假冒的，怎么发现？DNSSEC需要一条信任链，即必须要有一个或者多个相信的公钥，这些公钥被称为信任锚。理想情况下，假设dnssec已经实现了全部署，那每个递归服务器只需要保留根域名服务器的dnskey。</p>

<p>如下：</p>

<p><img src="/images/tools/20230125-1.png" alt="" /></p>

<h3>3、DNSSEC的资源记录</h3>

<p>为了实现资源记录的签名和验证，DNSSEC增加了四种类型的资源记录:RRSIG（Resource Record Signature）、DNSKEY(DNS Public Key)、DS(Delegation Signer)、NSEC(Next Secure)</p>

<h4>3.1 RRSIG记录</h4>

<p>RRSIG资源记录存储的是对资源记录集合（RRSets）的数字签名。如下：</p>

<p><img src="/images/tools/20230125-2.png" alt="" /></p>

<h4>3.2 DNSKEY记录</h4>

<p>DNSKEY资源记录存储的是公开密钥，下面是一个DNSKEY的资源记录的例子：</p>

<p><img src="/images/tools/20230125-3.png" alt="" /></p>

<p>在实践中，权威域的管理员通常用两个密钥配合完成对区数据的签名。一个是Zone-Signing Key(ZSK)，另一个是Key-Signing Key(KSK)。ZSK用于签名区数据，而KSK用于对ZSK进行签名。这样做的好处有二：</p>

<p>（1）用KSK密钥签名的数据量很少，被破解（即找出对应的私钥）概率很小，因此可以设置很长的生存期。这个密钥的散列值作为DS记录存储在上一级域名服务器中而且需要上级的数字签名，较长的生命周期可以减少密钥更新的工作量。</p>

<p>（2）ZSK签名的数据量比较大，因而破解的概率较大，生存期应该小一些。因为有了KSK的存在，ZSK可以不必放到上一级的域名服务中，更新ZSK不会带来太大的管理开销（不涉及和上级域名服务器打交道）。</p>

<p>如下：</p>

<p><img src="/images/tools/20230125-4.png" alt="" /></p>

<h4>3.3 DS记录</h4>

<p>DS（Delegation Signer）记录存储DNSKEY的散列值，用于验证DNSKEY的真实性，从而建立一个信任链。DNSKEY存储在资源记录所有者所在的权威域的区文件中，但是DS记录存储在上级权威域名服务器中，比如paypal.com的DS RR存储在.com的区中。如下：</p>

<p><img src="/images/tools/20230125-5.png" alt="" /></p>

<h4>3.4  NSEC记录</h4>

<p>NSEC记录是为了响应那些不存在的资源记录而设计的。为了保证私有密钥的安全性和服务器的性能，所有的签名记录都是事先生成的。服务器显然不能为所有不存在的记录事先生成一个公共的“不存在”的签名记录，因为这一记录可以被重放（Replay）；更不可能为每一个不存在的记录生成独立的签名，因为它不知道用户将会请求怎样的记录。</p>

<h3>4、DNSSEC请求过程</h3>

<p>下面是针对paypal.com.的一个解析过程，抓包过程有丢包，但是不影响对于dnssec解析过程的大致理解</p>

<p>解析过程中关于DNSSEC的请求过程大致如下：</p>

<p>过程图如下所示：</p>

<p><img src="/images/tools/20230125-6.png" alt="" /></p>

<h3>5、DNSSEC中的DLV</h3>

<p>DLV&ndash;DNSSECLookasideValidation</p>

<p>1、localdns在其上层zone权威服务器查找被验证ZONE的DS记录</p>

<p>2、如果不存在，向DLV注册机构发出一个对DLV记录的请求</p>

<p>3、如果成功，DLV资源记录被当做这个ZONE的DS记录</p>

<p>4、localdns进行真实性可完整性验证</p>

<p>DLV是一个DNS服务器,提供DNSSEC签名认证的信任链一个解决方案，递归服务器配置的信任锚点是DLV，就可以认证域，进而认证权威域授权的信任的权威域。</p>

<p>递归服务器的配置：当设置了dnssec-lookaside,它为验证器提供另外一个能在网络区域的顶层验证DNSKEY的方法</p>

<pre><code>    dnssec-lookaside "." trust-anchor dlv.cnnic.cn
    trusted-keys {
        dlv.cnnic.cn 256 3 5 "qWmA7OpfdqvqMtLCzZTm982aTaeC6tTRiPUOFDVMXEkIuM14T8Tw6jg2qmX7JUtriYHAGwIQ+9jzYyRziSFdijaO2elgh90NMW0jIcjZ+3cHehpETCEUar813SHN38biRu4UL0EQ/X5C5LJyh1djaw8eZFXxaLyT8fcJedBZtYE=";
    }
</code></pre>

<h3>6、DNSSEC的一些设想</h3>

<h4>6.1 DNSSEC与防域名劫持</h4>

<p>dnssec并没有办法在域名劫持上起到很好的作用，如果发生域名劫持则无法得到真正的解析结果，因为数字签名校验是没有校验通过的。实际上较多localdns在各个yys手上，各个yys可以对localdns进行相应的改造，则域名劫持会依然存在。</p>

<h4>6.2 DNSSEC可能导致解析失败</h4>

<p>响应中也有RRSIG记录，会直接导致UDP包的大小超过512字节，那么可能造成部分localdns解析失败，因为根据之前对于线上的观察，部分localdns并不支持超过512字节大小的UDP包，从而可能直接导致响应失败。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RRSIG、DNSKEY、信任炼和NSEC]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/25/dns-sec-1/"/>
    <updated>2023-01-25T16:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/25/dns-sec-1</id>
    <content type="html"><![CDATA[<pre><code>    dig @192.58.128.30 +dnssec . A
    dig @192.58.128.30 +dnssec . NS

    dig @192.58.128.30 +dnssec . DNSKEY
</code></pre>

<hr />

<p><a href="https://www.dazhuanlan.com/xwuxin/topics/1848106">https://www.dazhuanlan.com/xwuxin/topics/1848106</a></p>

<h3>DNSSEC 验证流程</h3>

<h4>第一步：RRSIG</h4>

<p>前述提到，DNSSEC 的状况下，每一个纪录都应该要经过数字签章做签署的动作。所以 DNSSEC 里面有提到一种 DNS 纪录，这个纪录叫做 RRSIG，会附在 DNS 请求的回复当中。</p>

<p>内容大概像这样：</p>

<pre><code>       网域名称       TTL  类型   内容
       a.z.w.example. 3600 IN MX  1 ai.example.
       a.z.w.example. 3600 RRSIG  MX 5 2 3600 20040509183619 (
                                  20040409183619 38519 example.
                                  OMK8rAZlepfzLWW75Dxd63jy2wswESzxDKG2
                                  f9AMN1CytCd10cYISAxfAdvXSZ7xujKAtPbc
                                  tvOQ2ofO7AZJ+d01EeeQTVBPq4/6KCWhqe2X
                                  TjnkVLNvvhnc0u28aoSsG0+4InvkkOHknKxw
                                  4kX18MMR34i8lC36SR5xBni8vHI= )
</code></pre>

<p>第一行是 ai.example 这个网域的 MX 纪录。</p>

<p>第二行是给第一笔记录使用的 RRSIG 纪录。</p>

<p>RRSIG 的格式是这样的：</p>

<pre><code>    [对应格式] [算法编号] [涵盖数量]  [有效时间长短] [签章期限] 
    |            |         |              |           |
    |   ---------/         |              |           |
    |  /  -----------------/              |           |
    |  | /  /-----------------------------/           |
    |  | |  |   /-------------------------------------/
    |  | |  |   |
    |  | |  |   |
    MX 5 2 3600 20040509183619 ( 20040409183619 38519 example. OM.....HI= ) 
                                 |               |     |         |
      /--------------------------/               |     |         |
      |          /-------------------------------/     |         |
      |          |      /------------------------------/         |
      |          |      |            /---------------------------/
    [签署日期] [Tag] [签署者名称] [内容，base64]
</code></pre>

<h3>DNSKEY</h3>

<p>随着 RRSIG 的出现，我们拿到凭证的内容了。不过我们需要验证这个签章是不是伪造的，然后是谁签的。这个信息，会在 DNSKEY 纪录当中。</p>

<pre><code>       example.com. 86400 IN DNSKEY 256 3 5 ( AQPSKmynfzW4kyBv015MUG2DeIQ3
                                              Cbl+BBZH4b/0PY1kxkmvHjcZc8no
                                              kfzj31GajIQKY+5CptLr3buXA10h
                                              WqTkF7H6RfoRqXQeogmMHfpftf6z
                                              Mv1LyBUgia7za6ZEzOJBOztyvhjL
                                              742iU/TpPSEDhm2SNKLijfUppn1U
                                              aNvv4w==  )
</code></pre>

<p>DNSKEY 里面会包含拿去签署 RRSIG 的公钥。</p>

<p>不过，即使我们能够确认「这个 RRSIG 和 DNSKEY 对得起来」，也还不能够确认「这个 DNSKEY 真的属于这个网域」。</p>

<p>所以我们会需要一个能够信任方式，来验证这个 DNSKEY。</p>

<p>就像前面提到的 HTTPS 凭证信任链的状况，我们可能有几种做法，可以验证这个东西：</p>

<ol>
<li><p>用其他的方式去获得「这个网域真正的公钥」，例如 PGP、中华邮政寄 U 盘、用纸抄、用 scp 先下载一份</p></li>
<li><p>叫别人证明你是合法的（参考 HTTPS 中介凭证机制）</p></li>
</ol>


<h3>信任链机制</h3>

<p>前述提到，只拿到 DNSKEY 没什么用。然后若要将上述第一种取得真正公钥的方式，放到 DNS 这种许多人用的协定之上，是不可行的。想像一下，你要联网之前，必须要插 U 盘。这是一个多荒诞的事情？</p>

<p>所以，我们可以依赖上一级网域的 DNS 纪录，把上一级凭证的公钥放在那边。在 DNSSEC 中，这个叫做 DS (Delegation Signer) 纪录。由于你可以指定非常多的子网域，所以 DS 纪录中，只会记载「这个凭证的指纹 (hash)」。</p>

<p>真的很短，他长得像这样：</p>

<pre><code>     dskey.example.com. 86400 IN DS 60485 5 1 ( 2BB183AF5F22588179A53B0A
                                                98631FAD1A292118 )
</code></pre>

<p>然后假设一笔 DNSKEY 是被上一级签署过的话，他会看起来像这样：</p>

<pre><code>    dskey.example.com. 86400 IN DNSKEY 256 3 5 ( AQOeiiR0GOMYkDshWoSKz9Xz
                                             fwJr1AYtsmx3TGkJaNXVbfi/
                                             2pHm822aJ5iI9BMzNXxeYCmZ
                                             DRD99WYwYqUSdjMmmAphXdvx
                                             egXd/M5+X7OrzKBaMbCVdFLU
                                             Uh6DhweJBjEVv5f2wwjM9Xzc
                                             nOf+EPbtG9DMBmADjFDc2w/r
                                             ljwvFw==
                                             ) ;  key id = 60485
</code></pre>

<p>其中，我们会发现 key id 和上面的 DS 纪录是一样的。另外，是可以通过 DNSKEY 去计算出 DS 的数值，所以我们可以通过证明这两个之间的关系，来保证 DNSKEY 纪录的可靠性。
特殊状况: 找不到纪录怎么办？ (NSEC)</p>

<p>在 DNS 的状况下，基本上，若找不到东西，只要回复 NXDOMAIN 就好了。不过在 DNSSEC 的状况下，由于回复的数据内容内也要证明这消息不是伪造的，但这东西根本查不到，所以我们要想办法告诉对方「我真的找不到」。</p>

<p>DNSSEC 想到了这个问题，所以又有一种纪录叫做 NSEC (Next Secure)。这个纪录里面会记载说「下一笔纪录是什么」。</p>

<p>所以，假设今天有 A、B、D。有人问了 C，你找不到，但是你可以用 NSEC 和他说：「下一笔真的是 D，我知道他还有 A、RRSIG 和 NSEC，你可以看看 D 是不是真的有这些东西」来确保你没有说谎。</p>

<p>由于 DNS 纪录是以字母来做排序的，所以你可以确定「真的没有那笔东西」。</p>

<p>另外，若某一个网域的纪录是存在的，只是问错类别（例如你有 A 但对方问 MX）的话，这时候的回复里面<em>会告诉对方这个网域所有的纪录</em>。</p>

<p>不过，不管是不是这个状况，NSEC 都有可能引起安全疑虑，之后会提到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS dig使用详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/08/dns-dig/"/>
    <updated>2022-10-08T21:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/08/dns-dig</id>
    <content type="html"><![CDATA[<p><a href="https://www.codenong.com/cs106328924/">https://www.codenong.com/cs106328924/</a></p>

<pre><code>    dig @192.58.128.30 +dnssec . A
    dig @192.58.128.30 +dnssec . NS

    dig @192.58.128.30 +dnssec . DNSKEY
</code></pre>

<h2>一、使用dig发送不同DNS类型请求</h2>

<h4>1、A记录</h4>

<pre><code>    dig www.baidu.com
    dig a www.baidu.com +short
</code></pre>

<p>可以使用 +short 展示精简结果</p>

<h4>2、CNAME记录</h4>

<pre><code>    dig cname www.baidu.com
</code></pre>

<h4>3、AAAA记录</h4>

<p>指定域名服务器发送AAAA请求</p>

<pre><code>    dig @8.8.8.8 www.google.com AAAA
</code></pre>

<h4>4、PTR记录, 地址反查</h4>

<p>通过@指定域名服务器，注意：地址要反着写，而且需要加上.in-addr.arpa</p>

<pre><code>    dig @8.8.8.8 3.108.252.173.in-addr.arpa PTR
</code></pre>

<p>或者使用dig -x参数也可以</p>

<pre><code>    dig @8.8.8.8 -x 173.252.108.3
</code></pre>

<h4>5、NS记录</h4>

<p>注意：查询NS时，去掉最末尾的域名,不能写完整域名，比如dig www.baidu.com NS，这样是不可以的。应该是dig baidu.com NS，我们要查询的是能解析baidu.com的授权服务器是哪个。这里就要理解下域名迭代查询的含义了。</p>

<pre><code>    dig @8.8.8.8 google.com NS

    或者

    dig google.com NS
</code></pre>

<h4>6、 SOA记录</h4>

<p>上述的NS查询里，展示了很多个可以解析sohu.com下子域名的服务器，ns12/ns11等等。通过SOA可以查询哪个是授权机构的主服务器。如下抓包可以看出，ns11.sohu.com是主服务器</p>

<pre><code>    dig sohu.com SOA
</code></pre>

<h4>7、MX记录</h4>

<pre><code>    dig @8.8.8.8 wuxj.com MX
</code></pre>

<h4>8、AXFR记录-</h4>

<pre><code>    dig @8.8.8.8 wuxj.com AXFR
</code></pre>

<h4>9、ANY-就是查询所有的参数记录</h4>

<pre><code>    dig @8.8.8.8 wuxj.com ANY
</code></pre>

<h2>二、dig选项设置</h2>

<h4>1）-b address 指定源 IP 地址，主机有多个地址时可以指定访问的源ip</h4>

<pre><code>    dig @8.8.8.8 -b 10.16.191.143 m.linuxidc.com A
</code></pre>

<h4>2) @address 指定dns服务器地址，配置了多个nameserver时可以使用</h4>

<pre><code>    dig @8.8.8.8 -b 10.16.191.143 m.linuxidc.com A
</code></pre>

<h4>3）-f filename 执行文档里的所有dig请求，一行一个</h4>

<pre><code class="">    dig -f test
</code></pre>

<h4>4）-p port 指定访问的dns服务器端口号，如指定一个非标准端口，需要先之前搭好的DNS服务器监听端口改为非标准端口</h4>

<pre><code class="">    dig @8.8.8.8 -p 54 www.wuxj.com A
</code></pre>

<h4>5）+[no]tcp 使用tcp发送dns请求，出AXFR 或 IXFR 请求，其他请求默认使用的是udp</h4>

<pre><code class="">    dig m.linuxidc.com +tcp
</code></pre>

<h4>6）+[no]short 提供简要答复</h4>

<pre><code class="">    dig m.linuxidc.com +short
</code></pre>

<h4>7、+trace 跟踪域名解析过程</h4>

<pre><code class="">    dig m.linuxidc.com +trace
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS的报文格式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/07/dns-protocol/"/>
    <updated>2022-10-07T19:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/07/dns-protocol</id>
    <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/u_14398214/5071045">https://blog.51cto.com/u_14398214/5071045</a></p>

<p><a href="http://events.jianshu.io/p/1cdefa50f58d">http://events.jianshu.io/p/1cdefa50f58d</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/143360037">https://zhuanlan.zhihu.com/p/143360037</a></p>

<h4>14.3 DNS的报文格式</h4>

<p>DNS 定义了一个用于查询和响应的报文格式。图 14-3 显示这个报文的总体格式。</p>

<p><img src="/images/tools/20221007-1.png" alt="" /></p>

<p>这个报文由 12 字节长的首部和 4个长度可变的字段组成。标识字段由客户程序设置并由服务器返回结果。客户程序通过它来确定响应与查询是否匹配。</p>

<p>16 bit的标志字段被划分为若干子字段，如图 14-4 所示。</p>

<p><img src="/images/tools/20221007-2.png" alt="" /></p>

<p>我们从最左位开始依次介绍各子字段：</p>

<p>• QR 是 1 bit 字段：0表示查询报文，1表示响应报文。</p>

<p>• opcode 是一个 4 bit 字段：通常值为0（标准查询），其他值为1（反向查询）和2（服务器状态请求）。</p>

<p>• AA 是1 bit标志，表示“授权回答 (authoritative answer)”。该名字服务器是授权于该域的。</p>

<p>• TC 是1 bit字段，表示“可截断的 (truncated)”。使用U D P时，它表示当应答的总长度超过 512 字节时，只返回前 512 个字节。</p>

<p>• RD 是1 bit字段表示“期望递归（ recursion desired）”。该比特能在一个查询中设置，并在响应中返回。这个标志告诉名字服务器必须处理这个查询，也称为一个递归查询。如果该位为0，且被请求的名字服务器没有一个授权回答，它就返回一个能解答该查询的其他名字服务器列表，这称为迭代查询。在后面的例子中，我们将看到这两种类型查询的例子。</p>

<p>• RA 是 1 bit 字段，表示“可用递归”。如果名字服务器支持递归查询，则在响应中将该比特设置为1。在后面的例子中可看到大多数名字服务器都提供递归查询，除了某些根服务器。</p>

<p>• 随后的 3 bit 字段必须为0。</p>

<p>• rcode 是一个 4 bit 的返回码字段。通常的值为 0（没有差错）和3（名字差错）。名字差错只有从一个授权名字服务器上返回，它表示在查询中制定的域名不存在。</p>

<p>随后的 4 个 16 bit 字段说明最后 4个变长字段中包含的条目数。对于查询报文，问题(question)数通常是1，而其他3项则均为0。类似地，对于应答报文，回答数至少是 1，剩下的两项可以是0或非0。</p>

<h4>14.3.1 DNS查询报文中的问题部分</h4>

<p>问题部分中每个问题的格式如图 14-5 所示，通常只有一个问题。</p>

<p><img src="/images/tools/20221007-3.png" alt="" /></p>

<p>查询名是要查找的名字，它是一个或多个标识符的序列。每个标识符以首字节的计数值来说明随后标识符的字节长度，每个名字以最后字节为 0结束，长度为0的标识符是根标识符。计数字节的值必须是 0 ~ 63 的数，因为标识符的最大长度仅为 63（在本节的后面我们将看到计数字节的最高两比特为1，即值 192 ~ 255，将用于压缩格式）。不像我们已经看到的许多其他报文格式，该字段无需以整 32 bit 边界结束，即无需填充字节。</p>

<p>图 14-6 显示了如何存储域名 gemini.tuc.noao.edu。</p>

<p><img src="/images/tools/20221007-4.png" alt="" /></p>

<p>每个问题有一个查询类型，而每个响应（也称一个资源记录，我们下面将谈到）也有一个类型。大约有 20 个不同的类型值，其中的一些目前已经过时。图 14-7 显示了其中的一些值。查询类型是类型的一个超集 (superset)：图中显示的类型值中只有两个能用于查询类型。</p>

<p><img src="/images/tools/20221007-5.png" alt="" /></p>

<p>最常用的查询类型是 A类型，表示期望获得查询名的 IP 地址。一个 PTR 查询则请求获得一个 IP 地址对应的域名。这是一个指针查询，我们将在 14.5 节介绍。其他的查询类型将在 14.6 节介绍。</p>

<p>查询类通常是1，指互联网地址（某些站点也支持其他非 IP地址）</p>

<h4>14.3.2 DNS响应报文中的资源记录部分</h4>

<p>DNS报文中最后的三个字段，回答字段、授权字段和附加信息字段，均采用一种称为资源记录R R（Resource Record）的相同格式。图14-8显示了资源记录的格式。</p>

<p><img src="/images/tools/20221007-6.png" alt="" /></p>

<p>域名是记录中资源数据对应的名字。它的格式和前面介绍的查询名字段格式（图 14-6）相同。</p>

<p>类型说明 RR的类型码。它的值和前面介绍的查询类型值是一样的。类通常为 1，指Internet数据。</p>

<p>生存时间字段是客户程序保留该资源记录的秒数。资源记录通常的生存时间值为 2天。资源数据长度说明资源数据的数量。该数据的格式依赖于类型字段的值。对于类型 1（A记录）资源数据是4字节的IP地址。</p>

<p><br><br></p>

<h3>应答部分（Answer、Authority、Additional）</h3>


<table>
<thead>
<tr>
<th>报文</th>
<th>中文</th>
<th>长度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NAME</td>
<td></td>
<td>0x00结束</td>
<td></td>
</tr>
<tr>
<td>TYPE</td>
<td>查询类型</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>CLASS</td>
<td>查询类</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>TimeToLive</td>
<td>生存时间</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>DaTaLength</td>
<td>资源数据长度</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>DaTa</td>
<td>资源数据</td>
<td>DaTaLength</td>
<td></td>
</tr>
</tbody>
</table>


<p><br><br></p>

<h3>1.2.1、QTYPE说明</h3>


<table>
<thead>
<tr>
<th>类型</th>
<th>助记符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>A</td>
<td>由域名获得IPv4地址</td>
</tr>
<tr>
<td>2</td>
<td>NS</td>
<td>查询域名服务器</td>
</tr>
<tr>
<td>3</td>
<td>MD</td>
<td>过期类型</td>
</tr>
<tr>
<td>4</td>
<td>MF</td>
<td>过期类型</td>
</tr>
<tr>
<td>5</td>
<td>CNAME</td>
<td>查询规范名称</td>
</tr>
<tr>
<td>6</td>
<td>SOA</td>
<td>开始授权</td>
</tr>
<tr>
<td>7</td>
<td>MB</td>
<td>指定邮箱域名</td>
</tr>
<tr>
<td>8</td>
<td>MG</td>
<td>指定邮件组成员</td>
</tr>
<tr>
<td>9</td>
<td>MR</td>
<td>指定邮件重命名域名</td>
</tr>
<tr>
<td>A</td>
<td>NULL</td>
<td>指定空的资源记录</td>
</tr>
<tr>
<td>B</td>
<td>WKS</td>
<td>熟知服务</td>
</tr>
<tr>
<td>C</td>
<td>PTR</td>
<td>把IP地址转换成域名</td>
</tr>
<tr>
<td>D</td>
<td>HINFO</td>
<td>主机信息</td>
</tr>
<tr>
<td>E</td>
<td>MINFO</td>
<td>指定邮箱或列表信息</td>
</tr>
<tr>
<td>F</td>
<td>MX</td>
<td>邮件交换</td>
</tr>
<tr>
<td>10</td>
<td>TXT</td>
<td>文本信息</td>
</tr>
<tr>
<td>28</td>
<td>AAAA</td>
<td>由域名获得IPv6地址</td>
</tr>
<tr>
<td>252</td>
<td>AXFR</td>
<td>传送整个区的请求</td>
</tr>
<tr>
<td>255</td>
<td>ANY</td>
<td>对所有记录的请求</td>
</tr>
</tbody>
</table>


<p><br><br></p>

<h3>1.2.2、QCLASS说明</h3>


<table>
<thead>
<tr>
<th>数值</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>IN</td>
<td>Internet类别</td>
</tr>
<tr>
<td>02</td>
<td>CSNET</td>
<td>过期类型</td>
</tr>
<tr>
<td>03</td>
<td>Chaos</td>
<td></td>
</tr>
<tr>
<td>04</td>
<td>MIT Athena Hesiod</td>
<td></td>
</tr>
</tbody>
</table>


<p><br><br></p>

<h3>DNS查询报文实例</h3>


<p><img src="/images/tools/20221007-8.png" alt="" /></p>

<p><img src="/images/tools/20221007-9.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中使用Dnsmasq部署DNS服务]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/21/dnsmasq/"/>
    <updated>2022-08-21T22:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/21/dnsmasq</id>
    <content type="html"><![CDATA[<p>是所有域名解析到同一地址</p>

<pre><code>    address=/#/192.168.2.1
</code></pre>

<pre><code>    address=/com/192.168.2.1
    address=/net/192.168.2.1
    address=/cn/192.168.2.1
</code></pre>

<hr />

<p>libvirtd 服务会占用 53端口，需要限停用:</p>

<p><a href="/blog/2022/10/22/base-virbr0/">虚拟网卡virbr0</a></p>

<hr />

<p><a href="https://ywnz.com/linuxyffq/2267.html">https://ywnz.com/linuxyffq/2267.html</a></p>

<p> Dnsmasq提供了DNS缓存、DHCP服务与Tftp服务功能。本文将用它在Linux中部署DNS服务，作为域名解析服务器(DNS)，Dnsmasq可以通过缓存DNS请求来提高对访问过的网址的连接速度。作为DHCP服务器，Dnsmasq可以为局域网电脑提供内网ip地址和路由。DNS和DHCP两个功能可以同时或分别单独实现。Dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个PXE服务器。</p>

<h2>Dnsmasq工作原理</h2>

<p>当接受到一个DNS请求时，Dnsmasq首先会查找/etc/hosts这个文件，然后查找/etc/resolv.conf中定义的外部DNS。所以说Dnsmasq是一个很不错的外部DNS中继。</p>

<p>配置Dnsmasq为DNS缓存服务器，同时在/etc/hosts文件中加入本地内网解析，这样一来每当内网机器查询时就会优先查询hosts文件，这就等于将/etc/hosts共享给全内网机器使用，从而解决内网机器互相识别的问题。相比逐台机器编辑hosts文件或者添加Bind DNS记录，仅编辑一个hosts文件，这简直太容易了。</p>

<h2>安装Dnsmasq</h2>

<pre><code>    $ apt-get install dnsmasq
    $ yum install dnsmasq
</code></pre>

<h2>配置Dnsmasq</h2>

<p>Dnsmasq处理DNS设置与BIND等其他DNS服务有所不同。所有的配置都在一个文件中完成/etc/dnsmasq.conf。默认情况下dnsmasq.conf中只开启了最后include项，可以在/etc/dnsmasq.d中自己写任意名字的配置文件。</p>

<h2>配置文件说明</h2>

<p>Dnsmasq配置文件是/etc/dnsmasq.conf，下面对Dnsmasq中和DNS相关的配置项进行说明。</p>

<h4>port=53</h4>

<p>用指定的端口代替默认的DNS 53端口，如果设置为0，则完全禁止DNS功能，只使用dhcp服务</p>

<h4>以下两个参数告诉Dnsmasq过滤一些查询：</h4>

<p>domain-needed   从不转发格式错误的域名</p>

<p>bogus-priv  从不转发不在路由地址中的域名</p>

<h4>resolv-file</h4>

<p>配置Dnsmasq额外的向流的DNS服务器，如果不开启就使用linux主机默认的/etc/resolv.conf里的nameserver，通过下面的选项指定其他文件。
<code>
    resolv-file=/etc/dnsmasq.d/upstream_dns.conf
</code></p>

<h4>strict-order</h4>

<p>默认情况下Dnsmasq会发送查询到它的任何上游DNS服务器上，如果取消注释，则Dnsmasq则会严格按照/etc/resolv.conf中的DNS Server顺序进行查询。</p>

<h4>上游服务器</h4>

<p>以下两个参数控制是否通过/etc/resolv.conf确定上游服务器，是否检测/etc/resolv.conf的变化，则取消注释。</p>

<p>no-resolv   如果你不想Dnsmasq读取/etc/resolv.conf文件或者其他文件，获得它的servers</p>

<p>no-poll 如果你不允许Dnsmasq通过轮询/etc/resolv.conf或者其他文件来获取配置的改变，则取消注释。</p>

<h4>增加一个name server，一般用于内网域名</h4>

<pre><code>    server=/localnet/192.168.0.1
</code></pre>

<h4>设置一个反向解析，所有192.168.3.0/24的地址都到10.1.2.3去解析</h4>

<pre><code>    server=/3.168.192.in-addr.arpa/10.1.2.3
</code></pre>

<p>增加一个本地域名，会在/etc/hosts中进行查询</p>

<pre><code>    local=/localnet/
</code></pre>

<p>增加一个域名，强制解析到你指定的地址上</p>

<pre><code>    address=/double-click.net/127.0.0.1
</code></pre>

<p>同上，还支持ipv6</p>

<pre><code>    address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83
</code></pre>

<p>增加查询yahoo google和它们的子域名到vpn、search查找</p>

<pre><code>    ipset=/yahoo.com/google.com/vpn,search
</code></pre>

<p>你还可以控制Dnsmasq和Server之间的查询从哪个网卡出去</p>

<pre><code>    server=10.1.2.3@eth1
</code></pre>

<p>指定源地址携带10.1.2.3地址和192.168.1.1的55端口进行通讯</p>

<pre><code>    server=10.1.2.3@192.168.1.1#55
</code></pre>

<p>改变Dnsmasq默认的uid和gid</p>

<pre><code>    user=
    group=
</code></pre>

<p>如果你想Dnsmasq监听某个端口为dhcp、dns提供服务</p>

<pre><code>    interface=
</code></pre>

<p>你还可以指定哪个端口你不想监听</p>

<pre><code>    except-interface=
</code></pre>

<p>设置想监听的地址，如果你本机要使用写上127.0.0.1。</p>

<pre><code>    listen-address=
</code></pre>

<p>如果你想在某个端口只提供dns服务，则可以进行配置禁止dhcp服务</p>

<pre><code>    no-dhcp-interface=
</code></pre>

<p>On systems which support it, dnsmasq binds the wildcard address,
even when it is listening on only some interfaces. It then discards
requests that it shouldn&rsquo;t reply to. This has the advantage of
working even when interfaces come and go and change address. If you
want dnsmasq to really bind only the interfaces it is listening on,
uncomment this option. About the only time you may need this is when
running another nameserver on the same machine.</p>

<pre><code>    bind-interfaces
</code></pre>

<p>如果你不想使用/etc/hosts，则取消下面的注释</p>

<pre><code>    no-hosts
</code></pre>

<p>如果你项读取其他类似/etc/hosts文件，则进行配置</p>

<pre><code>    addn-hosts=/etc/banner_add_hosts
</code></pre>

<p>自动的给hosts中的name增加一个域名</p>

<pre><code>    expand-hosts
</code></pre>

<p>给dhcp服务赋予一个域名</p>

<pre><code>    domain=thekelleys.org.uk
</code></pre>

<p>给dhcp的一个子域赋予一个不同的域名
<code>
    domain=wireless.thekelleys.org.uk,192.168.2.0/24
</code></p>

<p>同上，不过子域是一个范围</p>

<pre><code>    domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200
</code></pre>

<p>dhcp分发ip的范围，以及每个ip的租约时间</p>

<pre><code>    dhcp-range=192.168.0.50,192.168.0.150,12h
</code></pre>

<p>同上，不过给出了掩码</p>

<pre><code>    dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h
</code></pre>

<p>自动加载conf-dir目录下的配置文件</p>

<pre><code>    conf-dir=/etc/dnsmasq.d
</code></pre>

<p>设置dns缓存大小,默认为150条</p>

<pre><code>    cache-size=150
</code></pre>

<h2>配置实例</h2>

<h4>配置上游服务器地址</h4>

<p>resolv-file配置Dnsmasq额外的上游的DNS服务器，如果不开启就使用Linux主机默认的/etc/resolv.conf里的nameserver。</p>

<p>1.通过下面的选项指定其他文件来管理上游的DNS服务器</p>

<pre><code>    $ vi /etc/dnsmasq.conf
    resolv-file=/etc/resolv.dnsmasq.conf
</code></pre>

<p>2.在指定文件中增加转发DNS的地址</p>

<pre><code>    $ vi /etc/resolv.dnsmasq.conf
    nameserver 8.8.8.8
    nameserver 8.8.4.4
</code></pre>

<p>本地启用Dnsmasq解析
<code>
    $ vi /etc/resolv.conf
    nameserver 127.0.0.1
</code></p>

<h4>添加解析记录</h4>

<p>1.使用系统默认hosts</p>

<p>编辑hosts文件,简单列举一下格式</p>

<pre><code>    $ vi /etc/hosts

    127.0.0.1  localhost
    192.168.101.107   web01.mike.com web01
    192.168.101.107   web02.mike.com web02
</code></pre>

<p>2.使用自定义hosts文件</p>

<p>修改配置，增加自定义hosts文件位置。</p>

<pre><code>    $ vi /etc/dnsmasq.conf
    addn-hosts=/etc/dnsmasq.hosts
</code></pre>

<p>在/etc/dnsmasq.hosts文件中添加DNS记录</p>

<pre><code>    $ vi /etc/dnsmasq.hosts
    192.168.101.107   web01.mike.comweb01
    192.168.101.107   web02.mike.comweb02
</code></pre>

<p>3.使用自定义conf</p>

<pre><code>    $ vi /etc/dnsmasq.d/address.conf

    # 指定dnsmasq默认查询的上游服务器，此处以Google Public DNS为例。
    server=8.8.8.8
    server=8.8.4.4

    # 把所有.cn的域名全部通过114.114.114.114这台国内DNS服务器来解析
    server=/cn/114.114.114.114

    # 给*.apple.com和taobao.com使用专用的DNS
    server=/taobao.com/223.5.5.5
    server=/.apple.com/223.5.5.5

    # 把ywnz.com的二级域名（比如前面加www）解析到特定的IP
    address=/ywnz.com的二级域名（比如前面加www）/192.168.101.107

    在这里ywnz.com相当于*.mike.com泛解析
    address=/ywnz.com/192.168.101.107
</code></pre>

<p>注：也可以直接添加到/etc/dnsmasq.conf中,不过<code>/etc/dnsmasq.d/*.conf</code>的优先级大于/etc/dnsmasq.conf。</p>

<h4>修改iptables配置</h4>

<p>1.允许本机的53端口可对外访问
<code>
    $ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT
    $ iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT
</code></p>

<p>2.转发DNS请求</p>

<pre><code>    $ echo '1' &gt; /proc/sys/net/ipv4/ip_forward
    $ echo '1' &gt; /proc/sys/net/ipv6/ip_forward   # IPv6 用户选用
</code></pre>

<p>添加流量转发规则，将外部到53的端口的请求映射到Dnsmasq服务器的53端口</p>

<pre><code>    $ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53
    $ iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53
</code></pre>

<p>如果要限制只允许内网的请求，方法如下
<code>
    $ iptables -t nat -A PREROUTING -i eth1 -p upd --dport 53 -j REDIRECT --to-port 53
</code></p>

<p>3.保存规则并重启</p>

<pre><code>    $ service iptables save
    $ service iptables restart
</code></pre>

<h4>测试Dnsmasq</h4>

<p>1.启动Dnsmasq</p>

<pre><code>    $ service dnsmasq start
</code></pre>

<p>2.测试Dnsmasq</p>

<p>将其他机器的DNS换成dnsmasq所在的IP即可，就这么容易。</p>

<pre><code>    $ dig @192.168.101.104 ywnz.com
</code></pre>

<h2>一些Dnsmasq技巧</h2>

<h4>Dnsmasq性能优化</h4>

<p>我们都知道Bind不配合数据库的情况下，经常需要重新载入并读取配置文件，这是造成性能低下的原因。根据这点教训，我们可以考虑不读取/etc/hosts文件。而是另外指定一个在共享内存里的文件，比如/dev/shm/dnsrecord.txt ，这样就不费劲了，又由于内存的非持久性，重启就消失，可以定期同步硬盘上的某个内容到内存文件中。</p>

<p>具体实现步骤：</p>

<p>1.配置dnsmasq</p>

<pre><code>    $ vim /etc/dnsmasq.conf

    no-hosts
    addn-hosts=/dev/shm/dnsrecord.txt
</code></pre>

<p>2.解决同步问题</p>

<p> 开机启动
<code>
    $ echo "cat /etc/hosts &gt; /dev/shm/dnsrecord.txt" &gt;&gt;/etc/rc.local
</code></p>

<p> 定时同步内容
```
    $ crontab -e</p>

<pre><code>*/10 * * * * cat /etc/hosts &gt; /dev/shm/dnsrecord.txt
</code></pre>

<pre><code>
#### Dnsmasq选择最快的上游DNS服务器

经常会有这样的情景，Dnsmasq服务器配了一堆上游服务器，转发本地的dns请求，缺省是Dnsmasq事实上是只挑了一个上游dns服务器来查询并转发结果，这样如果选错服务器的话会导致DNS响应变慢。
</code></pre>

<pre><code>$ vi /etc/dnsmasq.conf

all-servers

server=8.8.8.8
server=219.141.136.10
</code></pre>

<p>```</p>

<p>all-servers表示对以下设置的所有server发起查询，选择回应最快的一条作为查询结果返回。</p>

<p>上面我们设置了两个dns server，8.8.8.8(谷歌dns)和219.141.136.10(移动的dns)，会同时查询这两个服务器，询问dns地址谁返回快就采用谁的结果。</p>
]]></content>
  </entry>
  
</feed>
