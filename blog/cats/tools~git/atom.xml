<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~git | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~git/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git ssh带端口]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/25/git-ssh/"/>
    <updated>2022-08-25T21:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/25/git-ssh</id>
    <content type="html"><![CDATA[<p>git ssh url port</p>

<pre><code>    [core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
    [remote "origin"]
        url = ssh://root@1.2.3.4:22/home/kk/sqlbak
        fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
        remote = origin
        merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git submodule管理项目子模块]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/08/tools-git-submodule/"/>
    <updated>2021-06-08T15:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/08/tools-git-submodule</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nicksheng/p/6201711.html">https://www.cnblogs.com/nicksheng/p/6201711.html</a></p>

<h3>使用场景</h3>

<p>当项目越来越庞大之后，不可避免的要拆分成多个子模块，我们希望各个子模块有独立的版本管理，并且由专门的人去维护，这时候我们就要用到git的submodule功能。</p>

<h3>常用命令</h3>

<pre><code>    git clone &lt;repository&gt; --recursive 递归的方式克隆整个项目
    git submodule add &lt;repository&gt; &lt;path&gt; 添加子模块
    git submodule init 初始化子模块
    git submodule update 更新子模块
    git submodule foreach git pull 拉取所有子模块
</code></pre>

<h3>如何使用</h3>

<h4>1. 创建带子模块的版本库</h4>

<p>例如我们要创建如下结构的项目</p>

<pre><code>    project
      |--moduleA
      |--readme.txt
</code></pre>

<p>创建project版本库，并提交readme.txt文件</p>

<pre><code>    git init --bare project.git
    git clone project.git project1
    cd project1
    echo "This is a project." &gt; readme.txt
    git add .
    git commit -m "add readme.txt"
    git push origin master
    cd ..
</code></pre>

<p>创建moduleA版本库，并提交a.txt文件</p>

<pre><code>    git init --bare moduleA.git
    git clone moduleA.git moduleA1
    cd moduleA1
    echo "This is a submodule." &gt; a.txt
    git add .
    git commit -m "add a.txt"
    git push origin master
    cd ..
</code></pre>

<p>在project项目中引入子模块moduleA，并提交子模块信息</p>

<pre><code>    cd project1
    git submodule add ../moduleA.git moduleA
    git status
    git diff
    git add .
    git commit -m "add submodule"
    git push origin master
    cd ..
</code></pre>

<p>使用git status可以看到多了两个需要提交的文件，其中.gitmodules指定submodule的主要信息，包括子模块的路径和地址信息，moduleA指定了子模块的commit id，使用git diff可以看到这两项的内容。这里需要指出父项目的git并不会记录submodule的文件变动，它是按照commit id指定submodule的git header，所以.gitmodules和moduleA这两项是需要提交到父项目的远程仓库的。</p>

<pre><code>    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD &lt;file&gt;..." to unstage)
        new file:   .gitmodules
        new file:   moduleA
</code></pre>

<h4>2. 克隆带子模块的版本库</h4>

<p>方法一，先clone父项目，再初始化submodule，最后更新submodule，初始化只需要做一次，之后每次只需要直接update就可以了，需要注意submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。</p>

<pre><code>    git clone project.git project2
    cd project2
    git submodule init
    git submodule update
    cd ..
</code></pre>

<p>方法二，采用递归参数&ndash;recursive，需要注意同样submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。</p>

<pre><code>    git clone project.git project3 --recursive
</code></pre>

<h4>3. 修改子模块</h4>

<p>修改子模块之后只对子模块的版本库产生影响，对父项目的版本库不会产生任何影响，如果父项目需要用到最新的子模块代码，我们需要更新父项目中submodule commit id，默认的我们使用git status就可以看到父项目中submodule commit id已经改变了，我们只需要再次提交就可以了。</p>

<pre><code>    cd project1/moduleA
    git branch
    echo "This is a submodule." &gt; b.txt
    git add .
    git commit -m "add b.txt"
    git push origin master
    cd ..
    git status
    git diff
    git add .
    git commit -m "update submodule add b.txt"
    git push origin master
    cd ..
</code></pre>

<h4>4. 更新子模块</h4>

<p>更新子模块的时候要注意子模块的分支默认不是master。</p>

<p>方法一，先pull父项目，然后执行git submodule update，注意moduleA的分支始终不是master。</p>

<pre><code>    cd project2
    git pull
    git submodule update
    cd ..
</code></pre>

<p>方法二，先进入子模块，然后切换到需要的分支，这里是master分支，然后对子模块pull，这种方法会改变子模块的分支。</p>

<pre><code>    cd project3/moduleA
    git checkout master
    cd ..
    git submodule foreach git pull
    cd ..
</code></pre>

<h4>5. 删除子模块</h4>

<p>网上有好多用的是下面这种方法</p>

<pre><code>    git rm --cached moduleA
    rm -rf moduleA
    rm .gitmodules
    vim .git/config
</code></pre>

<p>删除submodule相关的内容，例如下面的内容</p>

<pre><code>    [submodule "moduleA"]
        url = /Users/nick/dev/nick-doc/testGitSubmodule/moduleA.git
</code></pre>

<p>然后提交到远程服务器</p>

<pre><code>    git add .
    git commit -m "remove submodule"
</code></pre>

<p>但是我自己本地实验的时候，发现用下面的方式也可以，服务器记录的是.gitmodules和moduleA，本地只要用git的删除命令删除moduleA，再用git status查看状态就会发现.gitmodules和moduleA这两项都已经改变了，至于.git/config，仍会记录submodule信息，但是本地使用也没发现有什么影响，如果重新从服务器克隆则.git/config中不会有submodule信息。</p>

<pre><code>    git rm moduleA
    git status
    git commit -m "remove submodule"
    git push origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git修改commit]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/01/git-rebase/"/>
    <updated>2021-06-01T14:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/01/git-rebase</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-15007890-id-3220876.html">http://blog.chinaunix.net/uid-15007890-id-3220876.html</a></p>

<h2>一、修改最后一次 commit</h2>

<pre><code>    git commit --amend
</code></pre>

<h2>二、修改再之前 commit</h2>

<h4>1. 查看之前commit</h4>

<pre><code>    git rebase -i master~5 //最后五次
</code></pre>

<h4>2. 显示结果如下，把准备修改的commit前面的 pick 改为 edit ，并 :wq 保存退出</h4>

<pre><code>    pick 92b4951 2009-08-08: ×××××××
    pick 92b4952 2009-08-07: ×××××××
    pick 92b4953 2009-08-06: ×××××××
    pick 92b4954 2009-08-05: ×××××××
    pick 92b4955 2009-08-04: ×××××××

    # Rebase 9ef2b1f..92b495b onto 9ef2b1f
    #
    # Commands:
    #  pick = use commit
    #  edit = use commit, but stop for amending //改上面的 pick 为 edit
    #  squash = use commit, but meld into previous commit
    #
    # If you remove a line here THAT COMMIT WILL BE LOST.
    # However, if you remove everything, the rebase will be aborted.
    #
</code></pre>

<h4>3. 进行修改</h4>

<pre><code>    git commit --amend  # 进行修改，完成后 :wq 退出
    git rebase --continue   # 完成操作
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitignore 排除包含]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/05/19/tools-gitignore/"/>
    <updated>2020-05-19T11:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/05/19/tools-gitignore</id>
    <content type="html"><![CDATA[<p>想忽略某个文件夹，但又不想忽略这个文件夹下的某个子目录或文件</p>

<pre><code>    application/*
    !application/language/
    !application/README
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git tag常用操作]]></title>
    <link href="http://abcdxyzk.github.io/blog/2018/04/19/git-tag/"/>
    <updated>2018-04-19T01:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2018/04/19/git-tag</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/albertsh/article/details/63253614">https://blog.csdn.net/albertsh/article/details/63253614</a></p>

<h4>用途</h4>

<p>标签可以针对某一时间点的版本做标记，常用于版本发布，这恰恰是我所需要的功能，将本地标签推送到Github上即发布了一个Release版本，下载和查看非常方便。</p>

<h4>标签分类</h4>

<p>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象，建议使用附注标签，日后还可以查看标签信息。</p>

<h4>创建标签</h4>

<p>创建轻量标签</p>

<pre><code>    $ git tag v0.2.0 -light
</code></pre>

<p>解释：创建轻量标签不需要传递参数，直接指定标签名称即可。</p>

<p>创建附注标签</p>

<pre><code>    $ git tag -a v0.1.0 -m "release 0.1.0 version"
</code></pre>

<p>解释：创建附注标签时，参数-a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>

<h4>查看标签</h4>

<p>列出当前仓库的所有标签
<code>
    $ git tag
</code></p>

<p>列出符合模式的标签
<code>
    $ git tag -l 'v0.1.*'
</code></p>

<p>查看标签版本信息
<code>
    $ git show v0.1.0
</code></p>

<h4>切换标签</h4>

<p>切换标签与切换分支命令相同
<code>
    $ git checkout [tagname]
</code>
解释：切换标签后处于一个空的分支上，即”You are in ‘detached HEAD’ state.”</p>

<h4>删除标签</h4>

<p>误打或需要修改标签时，需要先将标签删除，再打新标签
<code>
    $ git tag -d v0.1.2
</code>
解释：参数-d即delete的缩写，意为删除其后指定的标签。</p>

<h4>补打标签</h4>

<p>给指定的commit打标签</p>

<pre><code>    $ git tag -a v0.1.0 49e0cd22f6bd9510fe65084e023d9c4316b446a6
</code></pre>

<p>解释：打标签不必要在HEAD之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和，通过git log命令获取。</p>

<h4>发布标签</h4>

<p>将v0.1.0标签提交到git服务器</p>

<pre><code>    $ git push origin v0.1.0
</code></pre>

<p>解释：通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作。</p>

<p>将本地所有标签一次性提交到git服务器
<code>
    $ git push origin –tags
</code></p>
]]></content>
  </entry>
  
</feed>
