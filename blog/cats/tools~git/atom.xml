<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~git | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~git/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-10-27T09:30:41+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git pull 跳过压缩 remote compression]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/09/28/git-pull-compression/"/>
    <updated>2023-09-28T14:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/09/28/git-pull-compression</id>
    <content type="html"><![CDATA[<p><a href="https://www.itguest.com/post/bbbdgg1a2.html">https://www.itguest.com/post/bbbdgg1a2.html</a></p>

<h4>git pull</h4>

<pre><code>    remote: Compressing objects: 24%
</code></pre>

<h4>来自 git 文档:</h4>

<pre><code>    core.bigFileThreshold   

        Files larger than this size are stored deflated, without 
        attempting delta compression.  Storing large files without 
        delta compression avoids excessive memory usage, at the 
        slight expense of increased disk usage. 

    Default is 512 MiB on all platforms. 
    This should be reasonable for most projects as source code and other  
    text files can still be delta compressed,  
    but larger binary media files won't be. 

    Common unit suffixes of 'k', 'm', or 'g' are supported
</code></pre>

<p>可以使用
<code>
    git config --add core.bigFileThreshold 1
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下设置 git ssh 代理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/git-ssh-proxy/"/>
    <updated>2023-07-09T18:01:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/git-ssh-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/chuoleibizhiz6357/article/details/101061719">https://blog.csdn.net/chuoleibizhiz6357/article/details/101061719</a></p>

<h4>安装connect-proxy，也可以使用linux自带nc命令</h4>

<p>rpm文件下载</p>

<pre><code>    http://rpm.pbone.net/index.php3?stat=3&amp;search=connect-proxy&amp;srodzaj=3

    $ sudo rpm -ivh connect-proxy-1.93-2.el6.i686.rpm
</code></pre>

<h4>添加~/.ssh/config</h4>

<pre><code>    $ vim ~/.ssh/config (没有则新建文件),添加

    Host git.oschina.net *.oschina.net

    ProxyCommand connect-proxy -H 192.168.60.34:18608 %h %p 或

    #ProxyCommand /usr/bin/nc -X connect -x 192.168.60.34:18608 %h %p

    IdentityFile ~/.ssh/id_rsa

    User caiwang213@qq.com
</code></pre>

<p>说明：ProxyCommand可以用linux自带/usr/bin/nc命令，参考man 5 ssh_config</p>

<pre><code>    ProxyCommand /usr/bin/nc -X connect -x 192.168.60.34:18608 %h %p # Redhat7.3不可行

    $ chmod 600 /home/caiwang213/.ssh/config，不然会提示：

    [caiwang213@caiwang213 ~]$ ssh -v -T git@git.oschina.net 

    OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013

    Bad owner or permissions on /home/caiwang213/.ssh/config
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git无法提交branch is currently checked out]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/25/git-branch/"/>
    <updated>2023-01-25T18:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/25/git-branch</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/azureology/p/12346292.html">https://www.cnblogs.com/azureology/p/12346292.html</a></p>

<h4>报错</h4>

<p>git无法提交，提示
<code>
    ! [remote rejected] master -&gt; master (branch is currently checked out)
</code></p>

<h4>原因</h4>

<p>初始化没有用
<code>
    git--bare init
</code></p>

<h4>补救</h4>

<p>在服务器上运行
<code>
    git config receive.denyCurrentBranch ignore
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git ssh带端口]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/25/git-ssh/"/>
    <updated>2022-08-25T21:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/25/git-ssh</id>
    <content type="html"><![CDATA[<p>git ssh url port</p>

<pre><code>    [core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
    [remote "origin"]
        url = ssh://root@1.2.3.4:22/home/kk/sqlbak
        fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
        remote = origin
        merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git submodule管理项目子模块]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/08/tools-git-submodule/"/>
    <updated>2021-06-08T15:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/08/tools-git-submodule</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nicksheng/p/6201711.html">https://www.cnblogs.com/nicksheng/p/6201711.html</a></p>

<h3>使用场景</h3>

<p>当项目越来越庞大之后，不可避免的要拆分成多个子模块，我们希望各个子模块有独立的版本管理，并且由专门的人去维护，这时候我们就要用到git的submodule功能。</p>

<h3>常用命令</h3>

<pre><code>    git clone &lt;repository&gt; --recursive 递归的方式克隆整个项目
    git submodule add &lt;repository&gt; &lt;path&gt; 添加子模块
    git submodule init 初始化子模块
    git submodule update 更新子模块
    git submodule foreach git pull 拉取所有子模块
</code></pre>

<h3>如何使用</h3>

<h4>1. 创建带子模块的版本库</h4>

<p>例如我们要创建如下结构的项目</p>

<pre><code>    project
      |--moduleA
      |--readme.txt
</code></pre>

<p>创建project版本库，并提交readme.txt文件</p>

<pre><code>    git init --bare project.git
    git clone project.git project1
    cd project1
    echo "This is a project." &gt; readme.txt
    git add .
    git commit -m "add readme.txt"
    git push origin master
    cd ..
</code></pre>

<p>创建moduleA版本库，并提交a.txt文件</p>

<pre><code>    git init --bare moduleA.git
    git clone moduleA.git moduleA1
    cd moduleA1
    echo "This is a submodule." &gt; a.txt
    git add .
    git commit -m "add a.txt"
    git push origin master
    cd ..
</code></pre>

<p>在project项目中引入子模块moduleA，并提交子模块信息</p>

<pre><code>    cd project1
    git submodule add ../moduleA.git moduleA
    git status
    git diff
    git add .
    git commit -m "add submodule"
    git push origin master
    cd ..
</code></pre>

<p>使用git status可以看到多了两个需要提交的文件，其中.gitmodules指定submodule的主要信息，包括子模块的路径和地址信息，moduleA指定了子模块的commit id，使用git diff可以看到这两项的内容。这里需要指出父项目的git并不会记录submodule的文件变动，它是按照commit id指定submodule的git header，所以.gitmodules和moduleA这两项是需要提交到父项目的远程仓库的。</p>

<pre><code>    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD &lt;file&gt;..." to unstage)
        new file:   .gitmodules
        new file:   moduleA
</code></pre>

<h4>2. 克隆带子模块的版本库</h4>

<p>方法一，先clone父项目，再初始化submodule，最后更新submodule，初始化只需要做一次，之后每次只需要直接update就可以了，需要注意submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。</p>

<pre><code>    git clone project.git project2
    cd project2
    git submodule init
    git submodule update
    cd ..
</code></pre>

<p>方法二，采用递归参数&ndash;recursive，需要注意同样submodule默认是不在任何分支上的，它指向父项目存储的submodule commit id。</p>

<pre><code>    git clone project.git project3 --recursive
</code></pre>

<h4>3. 修改子模块</h4>

<p>修改子模块之后只对子模块的版本库产生影响，对父项目的版本库不会产生任何影响，如果父项目需要用到最新的子模块代码，我们需要更新父项目中submodule commit id，默认的我们使用git status就可以看到父项目中submodule commit id已经改变了，我们只需要再次提交就可以了。</p>

<pre><code>    cd project1/moduleA
    git branch
    echo "This is a submodule." &gt; b.txt
    git add .
    git commit -m "add b.txt"
    git push origin master
    cd ..
    git status
    git diff
    git add .
    git commit -m "update submodule add b.txt"
    git push origin master
    cd ..
</code></pre>

<h4>4. 更新子模块</h4>

<p>更新子模块的时候要注意子模块的分支默认不是master。</p>

<p>方法一，先pull父项目，然后执行git submodule update，注意moduleA的分支始终不是master。</p>

<pre><code>    cd project2
    git pull
    git submodule update
    cd ..
</code></pre>

<p>方法二，先进入子模块，然后切换到需要的分支，这里是master分支，然后对子模块pull，这种方法会改变子模块的分支。</p>

<pre><code>    cd project3/moduleA
    git checkout master
    cd ..
    git submodule foreach git pull
    cd ..
</code></pre>

<h4>5. 删除子模块</h4>

<p>网上有好多用的是下面这种方法</p>

<pre><code>    git rm --cached moduleA
    rm -rf moduleA
    rm .gitmodules
    vim .git/config
</code></pre>

<p>删除submodule相关的内容，例如下面的内容</p>

<pre><code>    [submodule "moduleA"]
        url = /Users/nick/dev/nick-doc/testGitSubmodule/moduleA.git
</code></pre>

<p>然后提交到远程服务器</p>

<pre><code>    git add .
    git commit -m "remove submodule"
</code></pre>

<p>但是我自己本地实验的时候，发现用下面的方式也可以，服务器记录的是.gitmodules和moduleA，本地只要用git的删除命令删除moduleA，再用git status查看状态就会发现.gitmodules和moduleA这两项都已经改变了，至于.git/config，仍会记录submodule信息，但是本地使用也没发现有什么影响，如果重新从服务器克隆则.git/config中不会有submodule信息。</p>

<pre><code>    git rm moduleA
    git status
    git commit -m "remove submodule"
    git push origin master
</code></pre>
]]></content>
  </entry>
  
</feed>
