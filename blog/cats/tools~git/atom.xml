<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~git | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~git/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2025-07-21T17:22:06+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git clone --depth=1]]></title>
    <link href="http://abcdxyzk.github.io/blog/2025/07/21/git-pull-depth/"/>
    <updated>2025-07-21T15:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2025/07/21/git-pull-depth</id>
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7415914023277379623">https://juejin.cn/post/7415914023277379623</a></p>

<p>git clone: 将远程 Git 仓库克隆到本地。</p>

<pre><code>    --branch &lt;branch_name&gt;: 指定要克隆的分支名称，例如 dev。可以更改为其他分支（如 main、feature-x 等）。

    --depth=&lt;depth_value&gt;: 设定浅克隆的深度，1 表示只克隆最新的一次提交。该值可以根据需要调整，depth=5 表示克隆最近 5 次提交。
</code></pre>

<p>使用 <code>--depth=1</code> 进行浅克隆有利有弊：</p>

<h4>优点：</h4>

<p>克隆速度更快: 由于只下载了最新的一次提交，克隆过程更快，占用更少的磁盘空间。</p>

<p>占用更少的存储: 浅克隆不包含项目的完整历史，因此占用的存储空间更小。</p>

<h4>缺点：</h4>

<p>无法访问完整的提交历史: 你将无法查看项目的完整提交历史，无法查看旧的更改、运行 git log，或分析项目随时间的演变。</p>

<p>某些 Git 命令受限: 像 git blame（查看代码修改责任人）和 git bisect（用于调试不同提交之间的代码）等命令依赖完整的提交历史，可能无法按预期工作。</p>

<p>合并与变基受限: 如果需要执行复杂的 Git 操作，如变基或拣选旧的提交，将需要完整的历史，而浅克隆无法满足此需求。</p>

<h4>如何后续获取完整历史：</h4>

<p>如果后来需要完整的提交历史，可以运行以下命令：
<code>
    git fetch --unshallow
</code>
这将下载完整的提交历史，将浅克隆转换为完整克隆。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git pull 跳过压缩 remote compression]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/09/28/git-pull-compression/"/>
    <updated>2023-09-28T14:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/09/28/git-pull-compression</id>
    <content type="html"><![CDATA[<p><a href="https://www.itguest.com/post/bbbdgg1a2.html">https://www.itguest.com/post/bbbdgg1a2.html</a></p>

<h4>git pull</h4>

<pre><code>    remote: Compressing objects: 24%
</code></pre>

<h4>来自 git 文档:</h4>

<pre><code>    core.bigFileThreshold   

        Files larger than this size are stored deflated, without 
        attempting delta compression.  Storing large files without 
        delta compression avoids excessive memory usage, at the 
        slight expense of increased disk usage. 

    Default is 512 MiB on all platforms. 
    This should be reasonable for most projects as source code and other  
    text files can still be delta compressed,  
    but larger binary media files won't be. 

    Common unit suffixes of 'k', 'm', or 'g' are supported
</code></pre>

<p>可以使用
<code>
    git config --add core.bigFileThreshold 1
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下设置 git ssh 代理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/07/09/git-ssh-proxy/"/>
    <updated>2023-07-09T18:01:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/07/09/git-ssh-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/chuoleibizhiz6357/article/details/101061719">https://blog.csdn.net/chuoleibizhiz6357/article/details/101061719</a></p>

<h4>安装connect-proxy，也可以使用linux自带nc命令</h4>

<p>rpm文件下载</p>

<pre><code>    http://rpm.pbone.net/index.php3?stat=3&amp;search=connect-proxy&amp;srodzaj=3

    $ sudo rpm -ivh connect-proxy-1.93-2.el6.i686.rpm
</code></pre>

<h4>添加~/.ssh/config</h4>

<pre><code>    $ vim ~/.ssh/config (没有则新建文件),添加

    Host git.oschina.net *.oschina.net

    ProxyCommand connect-proxy -H 192.168.60.34:18608 %h %p 或

    #ProxyCommand /usr/bin/nc -X connect -x 192.168.60.34:18608 %h %p

    IdentityFile ~/.ssh/id_rsa

    User caiwang213@qq.com
</code></pre>

<p>说明：ProxyCommand可以用linux自带/usr/bin/nc命令，参考man 5 ssh_config</p>

<pre><code>    ProxyCommand /usr/bin/nc -X connect -x 192.168.60.34:18608 %h %p # Redhat7.3不可行

    $ chmod 600 /home/caiwang213/.ssh/config，不然会提示：

    [caiwang213@caiwang213 ~]$ ssh -v -T git@git.oschina.net 

    OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013

    Bad owner or permissions on /home/caiwang213/.ssh/config
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git无法提交branch is currently checked out]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/25/git-branch/"/>
    <updated>2023-01-25T18:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/25/git-branch</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/azureology/p/12346292.html">https://www.cnblogs.com/azureology/p/12346292.html</a></p>

<h4>报错</h4>

<p>git无法提交，提示
<code>
    ! [remote rejected] master -&gt; master (branch is currently checked out)
</code></p>

<h4>原因</h4>

<p>初始化没有用
<code>
    git--bare init
</code></p>

<h4>补救</h4>

<p>在服务器上运行
<code>
    git config receive.denyCurrentBranch ignore
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git ssh带端口]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/25/git-ssh/"/>
    <updated>2022-08-25T21:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/25/git-ssh</id>
    <content type="html"><![CDATA[<p>git ssh url port</p>

<pre><code>    [core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
    [remote "origin"]
        url = ssh://root@1.2.3.4:22/home/kk/sqlbak
        fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
        remote = origin
        merge = refs/heads/master
</code></pre>
]]></content>
  </entry>
  
</feed>
