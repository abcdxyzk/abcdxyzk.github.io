<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~mysql | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~mysql/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T16:15:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[删除MySQL下的bin]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/12/12/tools-mysql-bin/"/>
    <updated>2024-12-12T14:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/12/12/tools-mysql-bin</id>
    <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/u_16213365/7328759">https://blog.51cto.com/u_16213365/7328759</a></p>

<pre><code>    ll -h /var/lib/mysql/

    ll -h /data/middleware/mysql/data/
</code></pre>

<h4>使用命令删除bin文件</h4>

<pre><code>    # 命令用于删除指定文件之前的所有bin文件，
    PURGE BINARY LOGS TO 'mysql-bin.000003'

    # 命令用于删除指定日期之前的所有bin文件。
    PURGE BINARY LOGS BEFORE '2024-12-01'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL下的socket文件作用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/07/15/tools-mysql-socket/"/>
    <updated>2024-07-15T13:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/07/15/tools-mysql-socket</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/1584779745qq/p/6381128.html">https://www.cnblogs.com/1584779745qq/p/6381128.html</a></p>

<p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket</p>

<p>一般在配置部署mysql环境时都会在mysql的my.cnf文件中[mysqld]栈下添加上socket文件的路径，</p>

<p>而这样做的好处是如果启用了多实例mysql时，可以通过socket文件来快速的登录mysql对应不同端口下的实例，</p>

<p>如在一台有部署2个实例的mysql服务一个是用3306，一个是用3307端口，那么就可以通过2个不同的socket文件快速的登录</p>

<pre><code>    mysql -uroot -p --socket=/tmp/mysql3307.sock --port=3307
</code></pre>

<p>当然这里不指定端口也是可以的</p>

<p>当然平时在很多的监控软件中如zabbix很多都有要求指定socket文件，当然socket文件还在一般情况下通过socket文件是可以免密码登录的，所以以上的登录也可以这样直接登录</p>

<pre><code>    mysql -S /tmp/mysql3307.sock
</code></pre>

<p>&ldquo;S"的选项和&rdquo;&ndash;socket=&ldquo;是一样的</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos 安装 MariaDB]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/04/30/mariadb/"/>
    <updated>2024-04-30T08:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/04/30/mariadb</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39929918/article/details/110599382">https://blog.csdn.net/weixin_39929918/article/details/110599382</a></p>

<h2>centos7</h2>

<h4>在线安装 &ndash; 慢</h4>

<p><img src="/images/tools/20240430-1.png" alt="" /></p>

<h4>离线安装</h4>

<pre><code>    rpm -qa | grep -i mariadb-libs
    rpm -ev --nodeps mariadb-libs-5.5.68-1.el7.x86_64
</code></pre>

<p>点击图中的 baseurl</p>

<p>下载</p>

<pre><code>    rpm -ivh galera-4-26.4.6-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-common-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-compat-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-shared-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-client-10.5.8-1.el7.centos.x86_64.rpm
    rpm -ivh MariaDB-server-10.5.8-1.el7.centos.x86_64.rpm
</code></pre>

<h2>centos8</h2>

<pre><code>    yum install libpmem
    rpm -ivh galera-4-26.4.16-1.el8.x86_64.rpm
    rpm -ivh MariaDB-common-10.11.7-1.el8.x86_64.rpm MariaDB-shared-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-client-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-client-10.11.7-1.el8.x86_64.rpm
    rpm -ivh MariaDB-server-10.11.7-1.el8.x86_64.rpm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump 参数 net-buffer-length]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len/"/>
    <updated>2023-12-10T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/12/10/mysqldump-len</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yexiaomodemo/article/details/111050882">https://blog.csdn.net/yexiaomodemo/article/details/111050882</a></p>

<h4>用处一：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,那么一旦你使用到还原时，你的数据一次commit提交是默认1m 提交时的10倍速度</p>

<h4>用处二：</h4>

<p>比如设置成 &ndash;net-buffer-length=10m ,小表估计就是一个insert就完事了，导入时效率会很高。当你备份文件有5G 10G了，那个时候这些参数非常有用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL中case的使用方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/11/19/mysql-case/"/>
    <updated>2023-11-19T18:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/11/19/mysql-case</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_53222768/article/details/120101414">https://blog.csdn.net/m0_53222768/article/details/120101414</a></p>

<pre><code>    SELECT CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END
    salary_class,  COUNT(*)  FROM    Table_A
    GROUP BY CASE WHEN salary &lt;= 500 THEN '1'
        WHEN salary &gt; 500 AND salary &lt;= 600  THEN '2'
        WHEN salary &gt; 600 AND salary &lt;= 800  THEN '3'
        WHEN salary &gt; 800 AND salary &lt;= 1000 THEN '4'
    ELSE NULL END;
</code></pre>
]]></content>
  </entry>
  
</feed>
