<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~nginx | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~nginx/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nignx log_format 日志时间格式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/23/nginx-log-time/"/>
    <updated>2022-11-23T13:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/23/nginx-log-time</id>
    <content type="html"><![CDATA[<p><a href="https://bnxb.com/nginx/27544.html">https://bnxb.com/nginx/27544.html</a></p>

<p>Nginx的默认访问日志的时间格式是：[08/Mar/2018:10:30:58 +0800]，由日志参数中的$time_local变量表示。</p>

<p>改成常用格式：2018-06-08 10:11:23</p>

<p>有两种方法，一种是修改源码，然后编译，一种是外挂lua来实现</p>

<h4>一、lua 方法</h4>

<p>不修改 nginx 源代码的，具体如下：</p>

<pre><code>    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$http_x_forwarded_for" - $remote_user';

        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }
        ...
    }
</code></pre>

<p>代码的解释如下：</p>

<p>首先我们自定义一个nginx 变量 $fmt_localtime , 因为在http context不能够使用 set $variable。</p>

<p>所以我们采用map的方式如下</p>

<pre><code>    map $host $fmt_localtime {
        default '';
    }
</code></pre>

<p>2） 然后我们用 log_by_lua_block 设置 ngx.fmt_localtime 的时间</p>

<p>3) 设置日志格式 log_format使用 $fmt_localtime 作为时间参数</p>

<h4>二、修改nginx源代码</h4>

<p>需要修改的文件</p>

<p>src/core/nginx_times.c</p>

<p>src/http/modules/ngx_http_log_module.c</p>

<p>首先修改ngx_http_log_module.c文件：</p>

<pre><code>    ngx_string("time_iso8601"), sizeof("1970-09-28T12:00:00+06:00") - 1,
</code></pre>

<p>更改后</p>

<pre><code>    ngx_string("time_iso8601"), sizeof("1970-09-28 12:00:00") - 1,
</code></pre>

<p>然后修改nginx_times.c文件：</p>

<pre><code>    [sizeof("1970-09-28T12:00:00+06:00")];
</code></pre>

<p>更改后</p>

<pre><code>    [sizeof("1970-09-28 12:00:00")];
</code></pre>

<pre><code>    ngx_cached_http_log_iso8601.len = sizeof("1970-09-28T12:00:00+06:00") - 1;
</code></pre>

<p>更改为
<code>
    ngx_cached_http_log_iso8601.len = sizeof("1970-09-28 12:00:00") - 1;
</code></p>

<pre><code>    (void) ngx_sprintf(p3, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",
            tm.ngx_tm_year, tm.ngx_tm_mon,
            tm.ngx_tm_mday, tm.ngx_tm_hour,
            tm.ngx_tm_min, tm.ngx_tm_sec,
            tp-&gt;gmtoff &lt; 0 ? '-' : '+',
            ngx_abs(tp-&gt;gmtoff / 60), ngx_abs(tp-&gt;gmtoff % 60));
</code></pre>

<p>更改为</p>

<pre><code>    (void) ngx_sprintf(p3, "%4d-%02d-%02d %02d:%02d:%02d",
            tm.ngx_tm_year, tm.ngx_tm_mon,
            tm.ngx_tm_mday, tm.ngx_tm_hour,
            tm.ngx_tm_min, tm.ngx_tm_sec);
</code></pre>

<p>最后重新编译，并使用新的时间变量</p>

<p>将 nginx 配置文件中的 $time_local 改为 $time_iso8601 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nignx log_format 日志常用参数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/10/nginx-log/"/>
    <updated>2022-11-10T10:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/10/nginx-log</id>
    <content type="html"><![CDATA[<p>原始
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
<span class='line-number'>1146</span>
<span class='line-number'>1147</span>
<span class='line-number'>1148</span>
<span class='line-number'>1149</span>
<span class='line-number'>1150</span>
<span class='line-number'>1151</span>
<span class='line-number'>1152</span>
<span class='line-number'>1153</span>
<span class='line-number'>1154</span>
<span class='line-number'>1155</span>
<span class='line-number'>1156</span>
<span class='line-number'>1157</span>
<span class='line-number'>1158</span>
<span class='line-number'>1159</span>
<span class='line-number'>1160</span>
<span class='line-number'>1161</span>
<span class='line-number'>1162</span>
<span class='line-number'>1163</span>
<span class='line-number'>1164</span>
<span class='line-number'>1165</span>
<span class='line-number'>1166</span>
<span class='line-number'>1167</span>
<span class='line-number'>1168</span>
<span class='line-number'>1169</span>
<span class='line-number'>1170</span>
<span class='line-number'>1171</span>
<span class='line-number'>1172</span>
<span class='line-number'>1173</span>
<span class='line-number'>1174</span>
<span class='line-number'>1175</span>
<span class='line-number'>1176</span>
<span class='line-number'>1177</span>
<span class='line-number'>1178</span>
<span class='line-number'>1179</span>
<span class='line-number'>1180</span>
<span class='line-number'>1181</span>
<span class='line-number'>1182</span>
<span class='line-number'>1183</span>
<span class='line-number'>1184</span>
<span class='line-number'>1185</span>
<span class='line-number'>1186</span>
<span class='line-number'>1187</span>
<span class='line-number'>1188</span>
<span class='line-number'>1189</span>
<span class='line-number'>1190</span>
<span class='line-number'>1191</span>
<span class='line-number'>1192</span>
<span class='line-number'>1193</span>
<span class='line-number'>1194</span>
<span class='line-number'>1195</span>
<span class='line-number'>1196</span>
<span class='line-number'>1197</span>
<span class='line-number'>1198</span>
<span class='line-number'>1199</span>
<span class='line-number'>1200</span>
<span class='line-number'>1201</span>
<span class='line-number'>1202</span>
<span class='line-number'>1203</span>
<span class='line-number'>1204</span>
<span class='line-number'>1205</span>
<span class='line-number'>1206</span>
<span class='line-number'>1207</span>
<span class='line-number'>1208</span>
<span class='line-number'>1209</span>
<span class='line-number'>1210</span>
<span class='line-number'>1211</span>
<span class='line-number'>1212</span>
<span class='line-number'>1213</span>
<span class='line-number'>1214</span>
<span class='line-number'>1215</span>
<span class='line-number'>1216</span>
<span class='line-number'>1217</span>
<span class='line-number'>1218</span>
<span class='line-number'>1219</span>
<span class='line-number'>1220</span>
<span class='line-number'>1221</span>
<span class='line-number'>1222</span>
<span class='line-number'>1223</span>
<span class='line-number'>1224</span>
<span class='line-number'>1225</span>
<span class='line-number'>1226</span>
<span class='line-number'>1227</span>
<span class='line-number'>1228</span>
<span class='line-number'>1229</span>
<span class='line-number'>1230</span>
<span class='line-number'>1231</span>
<span class='line-number'>1232</span>
<span class='line-number'>1233</span>
<span class='line-number'>1234</span>
<span class='line-number'>1235</span>
<span class='line-number'>1236</span>
<span class='line-number'>1237</span>
<span class='line-number'>1238</span>
<span class='line-number'>1239</span>
<span class='line-number'>1240</span>
<span class='line-number'>1241</span>
<span class='line-number'>1242</span>
<span class='line-number'>1243</span>
<span class='line-number'>1244</span>
<span class='line-number'>1245</span>
<span class='line-number'>1246</span>
<span class='line-number'>1247</span>
<span class='line-number'>1248</span>
<span class='line-number'>1249</span>
<span class='line-number'>1250</span>
<span class='line-number'>1251</span>
<span class='line-number'>1252</span>
<span class='line-number'>1253</span>
<span class='line-number'>1254</span>
<span class='line-number'>1255</span>
<span class='line-number'>1256</span>
<span class='line-number'>1257</span>
<span class='line-number'>1258</span>
<span class='line-number'>1259</span>
<span class='line-number'>1260</span>
<span class='line-number'>1261</span>
<span class='line-number'>1262</span>
<span class='line-number'>1263</span>
<span class='line-number'>1264</span>
<span class='line-number'>1265</span>
<span class='line-number'>1266</span>
<span class='line-number'>1267</span>
<span class='line-number'>1268</span>
<span class='line-number'>1269</span>
<span class='line-number'>1270</span>
<span class='line-number'>1271</span>
<span class='line-number'>1272</span>
<span class='line-number'>1273</span>
<span class='line-number'>1274</span>
<span class='line-number'>1275</span>
<span class='line-number'>1276</span>
<span class='line-number'>1277</span>
<span class='line-number'>1278</span>
<span class='line-number'>1279</span>
<span class='line-number'>1280</span>
<span class='line-number'>1281</span>
<span class='line-number'>1282</span>
<span class='line-number'>1283</span>
<span class='line-number'>1284</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>log_format  main  &lsquo;$remote_addr - $remote_user [$time_local] &ldquo;$request&rdquo; &rsquo;
</span><span class='line'>          &lsquo;$status $body_bytes_sent &ldquo;$http_referer&rdquo; &rsquo;
</span><span class='line'>          &lsquo;&ldquo;$http_user_agent&rdquo; &ldquo;$http_x_forwarded_for&rdquo;&rsquo;;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;167.94.146.58 - - [09/Nov/2022:05:05:14 +0800] "GET /images/splash/splash-icon.png HTTP/1.1" 404 1163 "-" "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)" "-"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>改后
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;log_format  main  '$time_local $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent - $remote_user '
</span><span class='line'>      '"$host" "$request" "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
</span><span class='line'>
</span><span class='line'>10/Nov/2022:10:32:58 +0800 192.168.100.41 49090 192.168.120.177 65123 404 1163 - - "192.168.100.41" "GET /images/splash/splash-icon.png HTTP/1.1" "-" "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0" "-"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>再改后
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;log_format  main  '$time_local $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
</span><span class='line'>      ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$http_x_forwarded_for" - $remote_user';
</span><span class='line'>
</span><span class='line'>20/Nov/2022:13:19:17 +0800 0.001 192.168.100.41 49090 183.136.225.45 58722 404 1163 GET HTTP/1.1 "np.cn" "/favicon.ico" "-" "-" "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE" "-" - -
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>再改时间格式、ssl
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
</span><span class='line'>      ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"';
</span><span class='line'>
</span><span class='line'>access_log  /var/log/nginx/access.log  main;
</span><span class='line'>
</span><span class='line'>map $host $fmt_localtime {
</span><span class='line'>default '';
</span><span class='line'>}
</span><span class='line'>log_by_lua_block {
</span><span class='line'>ngx.var.fmt_localtime = ngx.localtime();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>2022-11-25 17:15:07 0.046 192.168.100.141 17883 223.104.49.27 12492 200 3371 GET HTTP/1.1 "www.np.cn" "/login" "-" "-" "Mozilla/5.0 (Android 7.0; Mobile; rv:104.0) Gecko/104.0 Firefox/104.0" "TLSv1.2" "ECDHE-RSA-AES128-GCM-SHA256" "-" "-" "-"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>------------------
</span><span class='line'>
</span><span class='line'>https://www.cnblogs.com/funcquery/p/16026830.html
</span><span class='line'>
</span><span class='line'>https://www.88ksk.cn/blog/145.html
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$remote_addr:记录访问网站的客户端地址
</span><span class='line'>$remote_user:远程客户端用户名称
</span><span class='line'>$time_local:记录访问时间与时区
</span><span class='line'>$request:表示request请求头的行
</span><span class='line'>$status:http状态码，记录请求返回的状态，例如：200、404、301等
</span><span class='line'>$body_bytes_sent:服务器发送给客户端的响应body字节数
</span><span class='line'>$http_referer:记录此次请求是从哪个链接访问过来的，可以根据refer进行防盗链设置
</span><span class='line'>$http_user_agent:记录客户端访问信息，例如：浏览器，手机客户端等
</span><span class='line'>$http_x_forwarded_for:当前端有代理服务器时，设置Web节点记录客户端地址的配置，此参数生效的前提是代理服务器上也进行了相关的http_x_forwarded_for设置
</span><span class='line'>$ssl_protocol:SSL协议版本
</span><span class='line'>$ssl_cipher:交换数据中的算法
</span><span class='line'>$upstream_status:upstream状态
</span><span class='line'>$upstream_addr:当ngnix做负载均衡时，可以查看后台提供真实服务的设备
</span><span class='line'>$upstream_response_time:请求过程中，upstream响应时间
</span><span class='line'>$request_time:整个请求的总时间
</span><span class='line'>$args:这个变量等于请求行中的参数，同$query_string
</span><span class='line'>$content_length:请求头中的Content-length字段。
</span><span class='line'>$content_type:请求头中的Content-Type字段。
</span><span class='line'>$document_root:当前请求在root指令中指定的值。
</span><span class='line'>$host:请求主机头字段，否则为服务器名称。
</span><span class='line'>$http_user_agent:客户端agent信息
</span><span class='line'>$http_cookie:客户端cookie信息
</span><span class='line'>$limit_rate:这个变量可以限制连接速率。
</span><span class='line'>$request_method:客户端请求的动作，通常为GET或POST。
</span><span class='line'>$remote_addr:客户端的IP地址。
</span><span class='line'>$remote_port:客户端的端口。
</span><span class='line'>$remote_user:已经经过Auth Basic Module验证的用户名。
</span><span class='line'>$request_filename:当前请求的文件路径，由root或alias指令与URI请求生成。
</span><span class='line'>$scheme:HTTP方法（如http，https）。
</span><span class='line'>$server_protocol:请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
</span><span class='line'>$server_addr:服务器地址，在完成一次系统调用后可以确定这个值。
</span><span class='line'>$server_name:服务器名称。
</span><span class='line'>$server_port:请求到达服务器的端口号。
</span><span class='line'>$request_uri:包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。
</span><span class='line'>$uri:不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。
</span><span class='line'>$document_uri:与$uri相同。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[nginx解决sql注入]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2022/10/30/nginx-sqlmap/"/&gt;
</span><span class='line'>&lt;updated&gt;2022-10-30T18:46:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2022/10/30/nginx-sqlmap&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://blog.csdn.net/A_Apprentice/article/details/125861741"&gt;https://blog.csdn.net/A_Apprentice/article/details/125861741&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;get请求好处理&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;post请求 由于需要拿到请求体，需要安装lua插件支持&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;errlog&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.log(ngx.ERR, "error: ", body)
</span><span class='line'>
</span><span class='line'>tail -f /var/log/nginx/error.log
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;当前方案 ：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;get在server级别处理&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;post在lication级别处理&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        # 文件上传的限制
</span><span class='line'>    client_max_body_size 100m;
</span><span class='line'>
</span><span class='line'>    if ($query_string ~* ".*('|--|union|insert|drop|truncate|update|(%20)from|grant|(%20)where|(%20)select|(%20)and|(%20)chr|(%20)mid|like|(%20)iframe|(%20)script|alert|webscan|dbappsecurity|style|WAITFOR|confirm|innerhtml|innertext|class).*") { return 403; }
</span><span class='line'>        #if ($uri ~* (.*)(insert|select|delete|update|count|master|truncate|declare|\*|%|\')(.*)$ ) { return 403; }
</span><span class='line'>        if ($http_user_agent ~ ApacheBench|WebBench|Jmeter|JoeDog|Havij|GetRight|TurnitinBot|GrabNet|masscan|mail2000|github|wget|curl) { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Go-Ahead-Got-It") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "GetWeb!") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Go!Zilla") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Download Demon") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Indy Library") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "libwww-perl") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Nmap Scripting Engine") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "Load Impact") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "~17ce.com") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "WebBench*") { return 444; }
</span><span class='line'>        if ($http_referer ~* 17ce.com) { return 444; }
</span><span class='line'>        if ($http_user_agent ~* qiyunce) { return 444; }
</span><span class='line'>        if ($http_user_agent ~* YunGuanCe) { return 403; }
</span><span class='line'>        if ($http_referer ~* WebBench*") { return 444; }
</span><span class='line'>        if ($http_user_agent ~ "BLEXBot") { return 403; }
</span><span class='line'>        if ($http_user_agent ~ "MJ12bot") { return 403; }
</span><span class='line'>        if ($http_user_agent ~ "semalt.com") { return 403; }
</span><span class='line'>        if ($http_user_agent ~ "sqlmap") { return 403; }
</span><span class='line'>
</span><span class='line'>        #自动防护
</span><span class='line'>    if ($request_uri ~* \.(htm|do)\?(.*)$) {
</span><span class='line'>            set $req $2;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "(cost\()|(concat\()") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "union[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "and[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "select[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        #溢出过滤
</span><span class='line'>        if ($query_string ~ "(&lt;|%3C).*script.*(&gt;|%3E)") { return 403; }
</span><span class='line'>        if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") { return 403; }
</span><span class='line'>        if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") { return 403; }
</span><span class='line'>        if ($query_string ~ "proc/self/environ") { return 403; }
</span><span class='line'>        if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") { return 403; }
</span><span class='line'>        if ($query_string ~ "base64_(en|de)code\(.*\)") { return 403; }
</span><span class='line'>
</span><span class='line'>        #文件注入禁止
</span><span class='line'>        if ($query_string ~ "[a-zA-Z0-9_]=http://") { return 403; }
</span><span class='line'>        if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") { return 403; }
</span><span class='line'>        if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") { return 403; }
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>
</span><span class='line'>            lua_need_request_body on;
</span><span class='line'>            access_by_lua_block {
</span><span class='line'>                local body = ngx.var.request_body
</span><span class='line'>                if ngx.var.request_method == "POST" and body ~= nil then
</span><span class='line'>                    local regex0 = "(.*?((sqlwhere)|(c0-param0)).*?){1,}"
</span><span class='line'>                    local m0 = ngx.re.match(body, regex0, "i")
</span><span class='line'>                    local regex1 = "(.*?((insert)|(drop)|(truncate)|(update)|(grant)|(chr)|(webscan)|(dbappsecurity)|(WAITFOR)).*?){1,}"
</span><span class='line'>                    local m1 = ngx.re.match(body, regex1, "i")
</span><span class='line'>                    local regex2 = "(.*?((union)|(insert)|(drop)|(truncate)|(grant)|(chr)|(iframe)|(alert)|(webscan)|(dbappsecurity)|(style)|(WAITFOR)|(confirm)|(innerhtml)|(innertext)|(class)).*?){1,}"
</span><span class='line'>                    local m2 = ngx.re.match(body, regex2, "i")
</span><span class='line'>                    if (m0 and m1) or (not m0 and m2) then
</span><span class='line'>                        ngx.log(ngx.ERR, "error: ", body)
</span><span class='line'>                        ngx.status = 403
</span><span class='line'>                        ngx.say('{"code": 403, "msg": "非法参数","ok": false,"runningTime": "0ms"}')
</span><span class='line'>                    end
</span><span class='line'>                end
</span><span class='line'>
</span><span class='line'>                ngx.req.read_body()
</span><span class='line'>                local args, err = ngx.req.get_post_args()
</span><span class='line'>                if args then
</span><span class='line'>                    for k, v in pairs(args) do
</span><span class='line'>                       if k == "j_username" or k == "j_password" then
</span><span class='line'>                           local regex = "(.*?((union)|(insert)|(drop)|(truncate)|(update)|(from)|(grant)|(where)|(select)|(chr)|(mid)|(like)|(iframe)|(script)|(alert)|(webscan)|(dbappsecurity)|(style)|(WAITFOR)|(confirm)|(innerhtml)|(innertext)|(class)).*?){1,}"
</span><span class='line'>                           local m = ngx.re.match(v, regex, "i")
</span><span class='line'>                           if m then
</span><span class='line'>                              ngx.log(ngx.ERR, "error: ", v)
</span><span class='line'>                              ngx.status = 403
</span><span class='line'>                              ngx.say('{"code": 403, "msg": "非法参数","ok": false,"runningTime": "0ms"}')
</span><span class='line'>                           end
</span><span class='line'>                       end
</span><span class='line'>                   end
</span><span class='line'>                end
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            proxy_http_version 1.1;
</span><span class='line'>            proxy_set_header Connection "";
</span><span class='line'>
</span><span class='line'>            proxy_next_upstream http_502 error timeout invalid_header;
</span><span class='line'>            proxy_pass http://192.168.100.199:8888;
</span><span class='line'>            proxy_set_header Host $http_host;
</span><span class='line'>
</span><span class='line'>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;            #自动防护
</span><span class='line'>    if ($request_uri ~* \.(htm|do)\?(.*)$) {
</span><span class='line'>            set $req $2;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "(cost\()|(concat\()") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "union[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "and[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>        if ($req ~* "select[+|(%20)]") {
</span><span class='line'>            return 503;
</span><span class='line'>        }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 1、这里之所以使用$request_uri而未使用$query_string变量，因为通过$request_uri进行rewrite分割更精准。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 2、%20代表的是空格，同上文不的是，我这里把上面的空格匹配进行了取消。这样像www.361way.com/aaa.do?select * from test之样的也可以进行匹配。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 3、上面的htm是伪静态，实际上同.do一样，也是动态文件。为了便于和静态文件进行区分，这里选择了htm而不是html。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 4、注意，最上面的url里面的\? ，这个也分重要。如果没有的话，www.361way.com/aaa.htm select * from test不会被过滤，而www.361way.com/aaa.htm?select * from test会被过滤。如果想将前面的也过滤，只需要把\? 取消即可。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://blog.csdn.net/remotesupport/article/details/11967851"&gt;https://blog.csdn.net/remotesupport/article/details/11967851&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://blog.csdn.net/qq_34777982/article/details/125390989"&gt;https://blog.csdn.net/qq_34777982/article/details/125390989&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://www.3qphp.com/linux/centos/2581.html"&gt;http://www.3qphp.com/linux/centos/2581.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[lua-nginx-module的所有指令以及所有方法]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2022/10/30/nginx-lua-cmd2/"/&gt;
</span><span class='line'>&lt;updated&gt;2022-10-30T17:13:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2022/10/30/nginx-lua-cmd2&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.04007.cn/article/430.html"&gt;http://www.04007.cn/article/430.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在使用lua时，也许我们很多时候都只用了它几个基础的方法：比如&lt;a href="http://www.04007.cn/article/129.html"&gt;http://www.04007.cn/article/129.html&lt;/a&gt; 这里面的content_by_lua，或者content_by_lua_file方法。在nginx+lua的脚本中，我们常用的ngx.say,以及ngx.log等，但实际ngx.还有很多好用的方法。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;lua_nginx_module中可使用的指令列表：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;table style="margin:0px;padding:0px;border-spacing:0px;border:1px solid silver;word-break:break-word;color:#000000;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:12px;line-height:21.6px;background-color:#FFFFFF;" class="ke-zeroborder" cellspacing="0" cellpadding="0" border="0"&gt;&lt;colgroup style="margin:0px;padding:0px;"&gt;&lt;col style="margin:0px;padding:0px;" width="404"&gt;&lt;col style="margin:0px;padding:0px;" width="615"&gt;&lt;/colgroup&gt;&lt;tbody style="margin:0px;padding:0px;"&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl63" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="404" height="18"&gt;指令名称&lt;/td&gt;&lt;td class="xl63" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="615"&gt;说明&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_use_default_type&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;是否使用default_type指令定义的Content-Type默认值&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_code_cache&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;*_by_lua_file文件是否cache&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_regex_cache_max_entries&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_regex_match_limit&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_package_path&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;用Lua写的lua外部库路径（.lua文件）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_package_cpath&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;用C写的lua外部库路径（.so文件）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;init_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;master进程启动时挂载的lua代码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;init_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;init_worker_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;worker进程启动时挂载的lua代码，常用来执行一些定时器任务&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;init_worker_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;set_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;设置变量&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;set_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;content_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;handler模块&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;content_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;rewrite_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;rewrite_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;access_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;access_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;header_filter_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;header filter模块&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;header_filter_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;body_filter_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;body filter模块，ngx.arg[1]代表输入的chunk，ngx.arg[2]代表当前chunk是否为last&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;body_filter_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;log_by_lua&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;log_by_lua_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_need_request_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;是否读请求体，跟ngx.req.read_body()函数作用类似&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl64" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_shared_dict&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;创建全局共享的table（多个worker进程共享）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_connect_timeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;TCP/unix 域socket对象connect方法的超时时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_send_timeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;TCP/unix 域socket对象send方法的超时时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_send_lowat&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;设置cosocket send buffer的low water值&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_read_timeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;TCP/unix 域socket对象receive方法的超时时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_buffer_size&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;cosocket读buffer大小&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_pool_size&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;cosocket连接池大小&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_keepalive_timeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;cosocket长连接超时时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_socket_log_errors&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;是否打开cosocket错误日志&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl65" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_ssl_ciphers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl65" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_ssl_crl&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl65" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_ssl_protocols&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl65" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_ssl_trusted_certificate&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl65" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_ssl_verify_depth&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_http10_buffering&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;rewrite_by_lua_no_postpone&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_transform_underscores_in_response_headers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_check_client_abort&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;是否监视client提前关闭请求的事件，如果打开监视，会调用ngx.on_abort()注册的回调&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_max_pending_timers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;lua_max_running_timers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;在lua程序脚本中可使用的操作方法及可取得的变量和常量列表&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;table style="margin:0px;padding:0px;border-spacing:0px;border:1px solid silver;word-break:break-word;color:#000000;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:12px;line-height:21.6px;background-color:#FFFFFF;" class="ke-zeroborder" cellspacing="0" cellpadding="0" border="0"&gt;&lt;colgroup style="margin:0px;padding:0px;"&gt;&lt;col style="margin:0px;padding:0px;" width="262"&gt;&lt;col style="margin:0px;padding:0px;" width="389"&gt;&lt;/colgroup&gt;&lt;tbody style="margin:0px;padding:0px;"&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl72" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="262" height="18"&gt;操作指令&lt;/td&gt;&lt;td class="xl72" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="389"&gt;说明&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl74" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.arg&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;指令参数，如跟在content_by_lua_file后面的参数&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl74" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.var&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;变量，ngx.var.VARIABLE引用某个变量&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl74" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.ctx&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求的lua上下文&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.header&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;响应头，ngx.header.HEADER引用某个头&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.status&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;响应码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl72" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;API&lt;/td&gt;&lt;td class="xl72" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;说明&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl75" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.log&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;输出到error.log&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;print&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;等价于 ngx.log(ngx.NOTICE, ...)&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.send_headers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;发送响应头&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.headers_sent&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;响应头是否已发送&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.resp.get_headers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;获取响应头&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl77" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.timer.at&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;注册定时器事件&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.is_subrequest&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;当前请求是否是子请求&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl75" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.location.capture&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;发布一个子请求&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl75" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.location.capture_multi&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;发布多个子请求&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.exec&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.redirect&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl77" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.print&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;输出响应&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl75" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.say&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;输出响应，自动添加'\n'&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.flush&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;刷新响应&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl75" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.exit&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;结束请求&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.eof&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.sleep&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;无阻塞的休眠（使用定时器实现）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.get_phase&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.on_abort&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;注册client断开请求时的回调函数&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl76" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ndk.set_var.DIRECTIVE&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.start_time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求的开始时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.http_version&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求的HTTP版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.raw_header&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求头（包括请求行）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_method&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求方法&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_method&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求方法重载&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_uri&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;请求URL重写&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_uri_args&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl71" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_uri_args&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;获取请求参数&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl71" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_post_args&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;获取请求表单&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_headers&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;获取请求头&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_header&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.clear_header&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.read_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;读取请求体&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.discard_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;扔掉请求体&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_body_data&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.get_body_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_body_data&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.set_body_file&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.init_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.append_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.finish_body&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.req.socket&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.escape_uri&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的url编码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.unescape_uri&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串url解码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.encode_args&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;将table编码为一个参数字符串&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.decode_args&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;将参数字符串编码为一个table&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.encode_base64&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的base64编码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.decode_base64&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的base64解码&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.crc32_short&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的crs32_short哈希&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.crc32_long&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的crs32_long哈希&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.hmac_sha1&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;字符串的hmac_sha1哈希&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.md5&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回16进制MD5&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.md5_bin&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回2进制MD5&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.sha1_bin&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回2进制sha1哈希值&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.quote_sql_str&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;SQL语句转义&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.today&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回当前日期&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回UNIX时间戳&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.now&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回当前时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.update_time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;刷新时间后再返回&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.localtime&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.utctime&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.cookie_time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回的时间可用于cookie值&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.http_time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回的时间可用于HTTP头&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.parse_http_time&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;解析HTTP头的时间&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.re.match&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.re.find&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.re.gmatch&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.re.sub&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.re.gsub&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.get&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.get_stale&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.set&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.safe_set&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.add&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.safe_add&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.replace&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.delete&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.incr&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.flush_all&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.flush_expired&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.shared.DICT.get_keys&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.socket.udp&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;udpsock:setpeername&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;udpsock:send&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;udpsock:receive&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;udpsock:close&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl70" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;udpsock:settimeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.socket.tcp&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:connect&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:sslhandshake&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:send&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:receive&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:receiveuntil&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:close&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:settimeout&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:setoption&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:setkeepalive&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;tcpsock:getreusedtimes&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl69" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.socket.connect&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.thread.spawn&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.thread.wait&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.thread.kill&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.create&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.resume&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.yield&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.wrap&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.running&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl67" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;coroutine.status&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.config.debug&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;编译时是否有 --with-debug选项&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.config.prefix&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;编译时的 --prefix选项&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.config.nginx_version&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回nginx版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.config.nginx_configure&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回编译时 ./configure的命令行选项&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.config.ngx_lua_version&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回ngx_lua模块版本号&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.worker.exiting&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;当前worker进程是否正在关闭（如reload、shutdown期间）&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl68" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;ngx.worker.pid&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;返回当前worker进程的pid&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;&nbsp;&lt;/td&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td class="xl73" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="18"&gt;常量&lt;/td&gt;&lt;td class="xl72" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;"&gt;说明&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="108"&gt;Core constants&lt;/td&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="389"&gt;ngx.OK (0)&lt;br style="margin:0px;padding:0px;"&gt;ngx.ERROR (-1)&lt;br style="margin:0px;padding:0px;"&gt;ngx.AGAIN (-2)&lt;br style="margin:0px;padding:0px;"&gt;ngx.DONE (-4)&lt;br style="margin:0px;padding:0px;"&gt;ngx.DECLINED (-5)&lt;br style="margin:0px;padding:0px;"&gt;ngx.nil&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="270"&gt;HTTP method constants&lt;/td&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="389"&gt;ngx.HTTP_GET&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_HEAD&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_PUT&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_POST&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_DELETE&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_OPTIONS&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_MKCOL&nbsp;&nbsp;&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_COPY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_MOVE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_PROPFIND&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_PROPPATCH&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_LOCK&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_UNLOCK&nbsp;&nbsp;&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_PATCH&nbsp;&nbsp;&nbsp;&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_TRACE&nbsp;&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="306"&gt;HTTP status constants&lt;/td&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="389"&gt;ngx.HTTP_OK (200)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_CREATED (201)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_SPECIAL_RESPONSE (300)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_MOVED_PERMANENTLY (301)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_MOVED_TEMPORARILY (302)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_SEE_OTHER (303)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_NOT_MODIFIED (304)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_BAD_REQUEST (400)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_UNAUTHORIZED (401)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_FORBIDDEN (403)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_NOT_FOUND (404)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_NOT_ALLOWED (405)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_GONE (410)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_INTERNAL_SERVER_ERROR (500)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_METHOD_NOT_IMPLEMENTED (501)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_SERVICE_UNAVAILABLE (503)&lt;br style="margin:0px;padding:0px;"&gt;ngx.HTTP_GATEWAY_TIMEOUT (504)&nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="margin:0px;padding:0px;"&gt;&lt;td style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" height="162"&gt;Nginx log level constants&lt;/td&gt;&lt;td class="xl66" style="margin:0px;padding:3px;border:1px solid silver;border-collapse:collapse;" width="389"&gt;ngx.STDERR&lt;br style="margin:0px;padding:0px;"&gt;ngx.EMERG&lt;br style="margin:0px;padding:0px;"&gt;ngx.ALERT&lt;br style="margin:0px;padding:0px;"&gt;ngx.CRIT&lt;br style="margin:0px;padding:0px;"&gt;ngx.ERR&lt;br style="margin:0px;padding:0px;"&gt;ngx.WARN&lt;br style="margin:0px;padding:0px;"&gt;ngx.NOTICE&lt;br style="margin:0px;padding:0px;"&gt;ngx.INFO&lt;br style="margin:0px;padding:0px;"&gt;ngx.DEBUG&lt;br style="margin:0px;padding:0px;"&gt;&lt;br style="margin:0px;padding:0px;"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Lua-Nginx-Module常用指令]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2022/10/30/nginx-lua-cmd/"/&gt;
</span><span class='line'>&lt;updated&gt;2022-10-30T16:14:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2022/10/30/nginx-lua-cmd&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://blog.51cto.com/xikder/2331336"&gt;https://blog.51cto.com/xikder/2331336&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://blog.51cto.com/xikder/2331368"&gt;https://blog.51cto.com/xikder/2331368&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="https://blog.51cto.com/xikder/2331504"&gt;https://blog.51cto.com/xikder/2331504&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本章将会讲解基于LuaJIT的Lua-Nginx-Module，它作为Nginx的第三方开源软件，拥有十分丰富的功能，可以轻松完成高并发的业务需求。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  注意：本书使用的Lua-Nginx-Module版本是0.10.13。Nginx API for Lua将被简称为Lua API，而Lua-Nginx-Module则被简称为Ngx_lua。后面章节中涉及到的Lua API大部分是包含参数的，如果参数以?结尾，代表这个参数是可选的，如在指令ngx.req.get_headers (max_headers?, raw?)中，max_headers和raw是可选的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;一、Nginx和OpenResty&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先，来认识一下OpenResty，它是一个基于Nginx和Lua开发的高性能的Web平台，包含大量成熟的第三方库，可快速搭建出高性能的Web服务器，支持常用的反向代理、网关系统、Web应用等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果在Nginx上使用Ngx_lua，需要先进行编译；而OpenResty已经包含此模块，不需要再进行编译了。读者可以自由选择使用Nginx或OpenResty来搭建服务，如果无法抉择，可参考如下场景。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  使用Nginx编译Ngx_Lua的场景&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;HTTP代理服务器：复杂度较小，只需部分组件即可，且代理服务器一般由运维人员进行维护。使用Nginx的稳定版进行编译，在性能方面会更有保障，而OpenResty是Nginx的主线版，可能会不定期更新。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;OpenResty的使用场景&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  API服务：业务需求多，需要大量组件。&lt;br/&gt;
</span><span class='line'>  网关系统：需要大量组件和指令来实现动态组件功能。&lt;br/&gt;
</span><span class='line'>  Web应用服务器：业务服务、页面服务等，如详情页业务的开发。&lt;br/&gt;
</span><span class='line'>  使用Nginx编写的Lua代码都可以直接迁移到OpenResty上；反之却不一定可行，毕竟OpenResty的组件更多。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;二、安装Ngx_lua&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;请先安装LuaJIT 2.1.0-beta3（详见第6.2节）并需要编译ngx_devel_kit模块。
</span><span class='line'>下面是在Nginx上的安装方式（OpenResty自带此模块，不必安装编译）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # wget 'http://nginx.org/download/nginx-1.12.2.tar.gz'
</span><span class='line'># git clone https://github.com/simplresty/ngx_devel_kit.git
</span><span class='line'># git clone https://github.com/openresty/lua-nginx-module.git
</span><span class='line'># tar -xzvf nginx-1.12.2.tar.gz
</span><span class='line'># cd nginx-1.12.2/
</span><span class='line'># ./configure --prefix=/usr/local/nginx_1.12.2 \
</span><span class='line'>     --add-module=../ngx_devel_kit \
</span><span class='line'>     --add-module=../lua-nginx-module
</span><span class='line'>     --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB"
</span><span class='line'>
</span><span class='line'># make &amp;&amp; make install
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;并不是每个Nginx版本都支持最新的Ngx_lua，目前已知支持最新Ngx_lua的Nginx版本如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    1.13.x (last tested: 1.13.6)
</span><span class='line'>1.12.x
</span><span class='line'>1.11.x (last tested: 1.11.2)
</span><span class='line'>1.10.x
</span><span class='line'>1.9.x (last tested: 1.9.15)
</span><span class='line'>1.8.x
</span><span class='line'>1.7.x (last tested: 1.7.10)
</span><span class='line'>1.6.x
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如需获取最新版本的支持动态，请参考&lt;a href="https://github.com/openresty/lua-nginx-module#"&gt;https://github.com/openresty/lua-nginx-module#&lt;/a&gt; nginx-compatibility。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;三、牢记context标识&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Ngx_lua API指令和Nginx的指令一样，都存在配置环境的约束问题，因此在使用过程中要确保指令的环境符合预期，例如：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.var.VARIABLE
</span><span class='line'>语法：ngx.var.VAR_NAME
</span><span class='line'>context(配置环境)：set_by_lua*，rewrite_by_lua*，access_by_lua*，content_by_lua*，header_ filter_by_lua*，body_filter_by_lua*，log_by_lua*
</span><span class='line'>context即配置环境，第一次接触Ngx_lua的读者看到这样的配置环境可能会觉得难以理解，因为这还涉及到Ngx_Lua的执行阶段（后面会有介绍）。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;四、Hello world&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先，还是来一条经典语句“Hello, world”，在Nginx配置中加入一个server：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>    charset koi8-r;
</span><span class='line'>    location = /test {
</span><span class='line'>     #设置文件使用的默认MIME-type,将会增加一个Content-Type:text/plain的响应头
</span><span class='line'>     default_type 'text/plain';    
</span><span class='line'>     -- content_by_lua_block执行阶段
</span><span class='line'>     content_by_lua_block {    
</span><span class='line'>         ngx.say('Hello,world!')
</span><span class='line'>     }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;访问这个server，输出如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #  curl -I http://testnginx.com/test
</span><span class='line'>Hello,world!    
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.say将数据作为响应体输出，返回给客户端，并在末尾加上一个回车符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;代码中用到了content_by_lua_block这个指令块，它的主要作用是在HTTP的内容处理阶段生成数据，详见第8.6节。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;五、避免I/O阻塞&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当Nginx和Lua进行读取磁盘操作时会对Nginx的事件循环造成阻塞，所以在请求中应尽量避免操作磁盘，特别是当文件较大时。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果Lua使用网络I/O，为了避免出现阻塞的情况，请使用基于Lua API开发的指令，并使用子请求（将在7.13节介绍）来发送网络I/O和磁盘I/O。如果需要频繁读取磁盘，请分离磁盘I/O的任务和网络I/O的任务，避免它们相互影响。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;六、定义模块搜索路径&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在开发过程中，常常需要编写自定义的模块，或者引入第三方的Lua或C模块，通过下面的配置可以定义相关模块的路径以方便快速查找。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;6.1　定义Lua模块的搜索路径&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lua_package_path用来设置默认的Lua模块的搜索路径，并配置在http阶段。它支持配置相对路径和绝对路径，其中相对路径是在Nginx启动时由-p PATH 决定的，如果在启动Nginx时没有配置-p PATH，就会使用编译时–prefix的值，此值一般存放在Nginx的prefix（也可以用prefix（也可以用prefix（也可以用{prefix}来表示）变量中。使用lua_package_path设置Lua模块搜索路径的示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    http {
</span><span class='line'>    -- lua_package_path在配置中只能出现一次，使用下面的任何一个方法都可以
</span><span class='line'>    lua_package_path "/usr/local/nginx_1.12.2/conf/lua_modules/?.lua;;";
</span><span class='line'>    lua_package_path "conf/lua_modules/?.lua;;";
</span><span class='line'>    lua_package_path "${prefix}conf/lua_modules/?.lua;;";
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;上述配置中的3种配置方式都指向同一个位置：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第1个是绝对路径；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第2个是相对路径，Nginx编译时用 &ndash;prefix=/usr/local/nginx_1.12.2；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第3个也是相对路径，Nginx编译时用 &ndash;prefix=/usr/local/nginx_1.12.2 或-p PATH 指定的位置。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第1个配置方式的缺点在于写出了具体文件搜索路径，迁移代码时会比较麻烦。第2个配置方式的缺点在于无法和-p PATH一起使用，如果-p换了位置就会导致这个配置无效。对于第3个配置方式，如果-p的位置换了，${prefix}的值会跟着变换，使用起来比较灵活。所以建议使用第3种配置方式来配置。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lua_package_path可以支持设置多个搜索路径，多个搜索路径之间使用分号分隔就可以了，如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    lua_package_path "${prefix}conf/lua_modules/?.lua;/opt/lua/?.lua;;";
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  注意：上述配置中搜索路径的最后出现了;;两个半角分号，代表的是LuaJIT安装时的原始搜索路径，如果在前面的搜索路径里面无法搜索到需要的模块，就会依次搜索后面的路径。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;6.2　定义C模块的搜索路径&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lua_package_cpath：用来设置C模块的搜索路径，并配置在http阶段。使用方式和lua_package_path一样，如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    lua_package_cpath "${prefix}conf/c_md/?.so;/opt/c/?.so;;";
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;七、读写Nginx的内置变量&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果需要读取Nginx的内置变量可以使用ngx.var.VARIABLE。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ngx.var.VAR_NAME
</span><span class='line'>
</span><span class='line'>配置环境：set_by_lua*，rewrite_by_lua*，access_by_lua*，content_by_lua*，header_filter_ by_lua*，body_filter_by_lua*，og_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：读写Nginx的变量值。例如HTTP请求头、Nginx set的变量、URL参数，甚至Nginx通过正则表达式捕获的$1、$2等值（获取方式是ngx.var[1]、ngx.var[2]，依此类推）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>    location ~ ^/([a-z]+)/var.html {
</span><span class='line'>        set $a '';
</span><span class='line'>        set $b '';
</span><span class='line'>        set $c '';
</span><span class='line'>        set $d '';
</span><span class='line'>        rewrite_by_lua_block {
</span><span class='line'>           local ngx = require "ngx"
</span><span class='line'>           --将1赋值给变量a
</span><span class='line'>           ngx.var.a = '1'
</span><span class='line'>           --获取HTTP请求头中user_agent的值并赋值给变量b
</span><span class='line'>           ngx.var.b = ngx.var.http_user_agent
</span><span class='line'>           --获取参数test的值赋值给变量c
</span><span class='line'>           ngx.var.c = ngx.var.arg_test
</span><span class='line'>           --获取location中正则表达式捕获的$1的值并赋值给变量d
</span><span class='line'>           ngx.var.d = ngx.var[1]
</span><span class='line'>        }
</span><span class='line'>        echo $a;
</span><span class='line'>        echo $b;
</span><span class='line'>        echo $c;
</span><span class='line'>        echo $d;
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/nginx/var.html?test=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Thu, 07 Jun 2018 07:22:32 GMT
</span><span class='line'>Content-Type: text/html
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>1
</span><span class='line'>curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>12132
</span><span class='line'>nginx
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果是未定义的Nginx变量，是无法直接在Lua中进行读取的。而且有些变量只能读取，无法进行修改，如querystring、query_string、querys​tring、arg_PARAMETER和$http_NAME。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;八、控制请求头&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在4.1节中讲了Nginx中控制请求头的指令，在Lua API中也有类似的指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;8.1　添加请求头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    指令：ngx.req.set_header
</span><span class='line'>
</span><span class='line'>语法：ngx.req.set_header(header_name, header_value)
</span><span class='line'>
</span><span class='line'>配置环境：set_by_lua*，rewrite_by_lua*，access_by_lua*，content_by_lua*，header_filter_ by_lua*，body_filter_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：添加或修改当前HTTP的请求头，如果请求头已经存在，则会被替换成新的值。通过此方式设置的请求头会被继承到子请求中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：设置一个名为Test_Ngx_Ver，值为1.12.2的请求头：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.req.set_header("Test_Ngx_Ver", "1.12.2")
</span><span class='line'>ngx.req.set_header支持给同一个请求头设置多个值，用数组的方式添加：
</span><span class='line'>ngx.req.set_header("Test", {"1", "2"})
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;多个值的输出结果：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    Test: 1
</span><span class='line'>Test: 2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;8.2　清除请求头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    指令：ngx.req.clear_header
</span><span class='line'>
</span><span class='line'>语法：ngx.req.clear_header(header_name)
</span><span class='line'>
</span><span class='line'>配置环境：set_by_lua*，rewrite_by_lua*，access_by_lua*，content_by_lua*，header_filter_ by_lua*，body_filter_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：清除当前请求中指定的请求头。清除后，如果存在未执行的子请求，则子请求会继承清除后的请求头。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.req.clear_header(“Test_Ngx_Ver”)
</span><span class='line'>
</span><span class='line'>还有一种清除请求头的方式：
</span><span class='line'>
</span><span class='line'>ngx.req.set_header(“Test_Ngx_Ver”, nil)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;8.3　获取请求头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    指令：ngx.req.get_headers
</span><span class='line'>
</span><span class='line'>语法：headers = ngx.req.get_headers(max_headers?, raw?)
</span><span class='line'>
</span><span class='line'>配置环境：set_by_lua*，rewrite_by_lua*，access_by_lua*，content_by_lua*，header_filter_ by_lua*，body_filter_by_lua*，log_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：获取当前请求的全部请求头，并返回一个Lua的table类型的数据：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>
</span><span class='line'>     location  / {
</span><span class='line'>
</span><span class='line'>        content_by_lua_block {
</span><span class='line'>           local ngx = require "ngx";
</span><span class='line'>           local h = ngx.req.get_headers()
</span><span class='line'>           for k, v in pairs(h) do
</span><span class='line'>               ngx.say('Header name: ',k, ' value:',v)
</span><span class='line'>           end
</span><span class='line'>           --因为是table，所以可以使用下面的方式读取单个响应头的值
</span><span class='line'>           ngx.say(h["host"])
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;输出结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/test?=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Fri, 08 Jun 2018 07:46:38 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>Header name:host value: testnginx.com
</span><span class='line'>Header name:accept value: */*
</span><span class='line'>Header name:user-agent value: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.2
</span><span class='line'>testnginx.com
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;九、控制响应头&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;HTTP响应头需要配置很多重要的信息，例如添加CDN缓存时间、操作set-cookie、标记业务数据类型等。利用Lua的API可以轻松完成这些配置，并且它有丰富的模块可供选择。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;9.1　获取响应头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    **ngx.resp.get_headers
</span><span class='line'>**
</span><span class='line'>语法：headers = ngx.resp.get_headers(max_headers?, raw?)
</span><span class='line'>配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，balancer_by_lua
</span><span class='line'>
</span><span class='line'>**含义：**读取当前请求的响应头，并返回一个Lua的table类型的数据。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>     location  / {              
</span><span class='line'>        content_by_lua_block { 
</span><span class='line'>           local ngx = require "ngx";
</span><span class='line'>           local h = ngx.resp.get_headers()
</span><span class='line'>           for k, v in pairs(h) do
</span><span class='line'>               ngx.say('Header name: ',k, ' value: ',v)
</span><span class='line'>           end    
</span><span class='line'>           --因为是table，所以可以使用下面的方式读取单个响应头的值
</span><span class='line'>           ngx.say(h["content-type"])   
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'ttp://testnginx.com/test?=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Fri, 08 Jun 2018 07:36:35 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>Header name:content-type value: application/octet-stream
</span><span class='line'>Header name:connection value: keep-alive
</span><span class='line'>application/octet-stream
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;9.2　修改响应头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.header.HEADER&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ngx.header.HEADER = VALUE
</span><span class='line'>
</span><span class='line'>语法：value = ngx.header.HEADER
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua，header_filter_by_lua，body_filter_by_lua*，log_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：对响应头进行修改、清除、添加等操作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;此API在输出响应头时，默认会将下划线替换成中横线，示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        content_by_lua_block {
</span><span class='line'>            local ngx = require "ngx"
</span><span class='line'>            ngx.header.content_type = 'text/plain';
</span><span class='line'>            --在代码里面是下划线，输出时就变成中横线了
</span><span class='line'>            ngx.header.Test_Nginx = 'Lua';
</span><span class='line'>            --下面的代码等同于ngx.header.A_Ver = 'aaa' 
</span><span class='line'>            ngx.header["A_Ver"] = 'aaa';
</span><span class='line'>            --读取响应头，并赋值给变量a
</span><span class='line'>            local a = ngx.header.Test_Nginx;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行代码，下划线都被替换成了中横线，如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/?test=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Fri, 08 Jun 2018 03:18:16 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>test-type: ttt
</span><span class='line'>Test-Nginx: Lua
</span><span class='line'>A-Ver: aaa
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有时需要在一个响应头中存放多个值，例如，当访问/test 路径时，需要为set-cookie设置两个Cookie：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location = /test {
</span><span class='line'>    content_by_lua_block {
</span><span class='line'>       local ngx = require "ngx"
</span><span class='line'>       --以逗号分隔两个Cookie
</span><span class='line'>       ngx.header['Set-Cookie'] = {'test1=1; path=/test', 'test2=2; path=/test'}
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;输出结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/test?=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Fri, 08 Jun 2018 03:21:59 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Set-Cookie: test1=1; path=/test
</span><span class='line'>Set-Cookie: test2=2; path=/test
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;9.3　清除响应头&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果需要清除一个响应头，将它赋值为nil即可，如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.header["X-Test"] = nil;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;十、读取请求体&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$request_body 表示请求体被读取到内存中的数据，一般由proxy_pass、fastcgi_pass、uwsgi_pass和scgi_pass等指令进行处理。由于Nginx默认不读取请求体的数据，所以当Lua通过ngx.var.request_body的方式获取请求体时会发现数据为空。那么，该如何获得请求体的数据呢？下面将介绍几种可行的方式。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;10.1　强制获取请求体&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lua_need_request_body&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：lua_need_request_body &lt;on|off&gt;
</span><span class='line'>
</span><span class='line'>默认：off
</span><span class='line'>
</span><span class='line'>配置环境：http，server，location，location if
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：默认为off，即不读取请求体。如果设置为on，则表示强制读取请求体，此时，可以通过ngx.var.request_body来获取请求体的数据。但需要注意一种情况，requestbody存在于内存中，如果它的字节大小超过Nginx配置的clientbodybuffersize的值，Nginx就会把请求体存放到临时文件中，此时数据就不在内存中了，这会导致request_body存在于内存中，如果它的字节大小超过Nginx配置的client_body_buffer_size的值，Nginx就会把请求体存放到临时文件中，此时数据就不在内存中了，这会导致requestbody存在于内存中，如果它的字节大小超过Nginx配置的clientbodybuffersize的值，Nginx就会把请求体存放到临时文件中，此时数据就不在内存中了，这会导致request_body为空，所以需要设置client_body_buffer_size和client_max_body_size的值相同，避免出现这种情况。
</span><span class='line'>这种配置方式不够灵活，Ngx_lua官网也不推荐使用此方法。下面将介绍一种更合适的方式去获取请求体的数据。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;10.2　用同步非阻塞方式获取请求体&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.req.read_body&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ngx.req.read_body()
</span><span class='line'>
</span><span class='line'>环境：rewrite_by_lua，access_by_lua，content_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：同步读取客户端请求体，且不会阻塞Nginx的事件循环。使用此指令后，就可以通过ngx.req.get_body_data来获取请求体的数据了。但如果是使用临时文件来存放请求体的话，就需要先使用函数ngx.req.get_body_file来获取临时文件名，再去读取临时文件中的请求体数据了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.req.get_body_data
</span><span class='line'>
</span><span class='line'>语法：data = ngx.req.get_body_data()
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua，log_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：执行ngx.req.read_body指令后，可以使用本指令在内存中获取请求体数据，结果会返回一个Lua的字符串类型的数据。如果要获取Lua 的table类型的数据，则需要使用ngx.req.get_post_args。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.req.get_post_args
</span><span class='line'>
</span><span class='line'>语法： args, err = ngx.req.get_post_args(max_args?)
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua，header_filter_by_lua，body_filter_by_lua*，log_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：在执行ngx.req.read_body指令后，可以使用本指令读取包含当前请求在内的所有POST请求的查询参数，返回一个Lua的table类型。max_args参数的作用是限制参数的数量，为了服务的安全，最多支持使用100个参数（包括重复的参数），超过限制的参数会被忽略。如果max_args为0，则表示关闭此限制，但为了避免被无穷多的参数，不要设置max_args为0。如果最多支持使用10个参数，则应配置为ngx.req.get_post_args(10)。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.req.get_body_file
</span><span class='line'>
</span><span class='line'>语法：file_name = ngx.req.get_body_file()
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：在执行ngx.req.read_body指令后，可以使用本指令获取存放请求体的临时文件名（绝对路径），如果请求体被存放在内存中，获取的值就是nil。通过本指令获取的文件是只读的，不可以被修改，且会在被Nginx读取后被删除掉。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;10.3　使用场景示例&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面将对这些指令的使用方式和使用场景进行展示。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;获取string类型的请求体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;要获取string类型的请求体，可以使用如下配置：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;        
</span><span class='line'>    location / {
</span><span class='line'>      client_max_body_size 10k;
</span><span class='line'>      client_body_buffer_size 1k;
</span><span class='line'>
</span><span class='line'>      content_by_lua_block { 
</span><span class='line'>       local ngx = require "ngx"
</span><span class='line'>         --开启读取请求体模式
</span><span class='line'>         ngx.req.read_body()
</span><span class='line'>         --获取内存中的请求体
</span><span class='line'>         local data = ngx.req.get_body_data()
</span><span class='line'>         if data then
</span><span class='line'>             ngx.print('ngx.req.get_body_data: ',data, ' ---- type is ', type(data))
</span><span class='line'>             return
</span><span class='line'>         else
</span><span class='line'>         --如果没有获取到内存中的请求体数据，则去临时文件中读取
</span><span class='line'>             local file = ngx.req.get_body_file()
</span><span class='line'>             if file then
</span><span class='line'>                 ngx.say("body is in file ", file)
</span><span class='line'>             else
</span><span class='line'>                 ngx.say("no body found")
</span><span class='line'>             end
</span><span class='line'>         end
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;配置好后，重载Nginx配置（重载是指使用HUP信号或reload命令来重新加载配置），先用一个小于1KB的请求体（在Nginx配置中设置client_body_buffer_size为1k）执行请求，输出的是string字符串类型，如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i http://testnginx.com/ -d 'test=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Wed, 06 Jun 2018 11:03:35 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>ngx.req.get_body_data: test=12132&amp;a=2&amp;b=c&amp;dd ---- type is string
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;获取table类型的请求体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;要获取table类型的请求体，可以使用如下配置：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>      client_max_body_size 10k;
</span><span class='line'>      client_body_buffer_size 1k;
</span><span class='line'>
</span><span class='line'>      content_by_lua_block {
</span><span class='line'>         --开启读取请求体模式
</span><span class='line'>         ngx.req.read_body()
</span><span class='line'>         -- 获取内存中的请求体，返回的结果是Lua的table类型的数据
</span><span class='line'>         local args, err = ngx.req.get_post_args()
</span><span class='line'>         if args then
</span><span class='line'>            for k, v in pairs(args) do
</span><span class='line'>                if type(v) == "table" then
</span><span class='line'>                    --如果存在相同的参数名，就会将相同的参数并列在一起，以逗号分隔
</span><span class='line'>                    ngx.say(k, ": ", table.concat(v, ", "))
</span><span class='line'>                else
</span><span class='line'>                    ngx.say(k, ": ", v)
</span><span class='line'>                end
</span><span class='line'>             end
</span><span class='line'>         else
</span><span class='line'>             --如果没有获取到内存中的请求体数据，则去临时文件中读取
</span><span class='line'>             local file = ngx.req.get_body_file()
</span><span class='line'>             if file then
</span><span class='line'>                 ngx.say("body is in file ", file)
</span><span class='line'>             else
</span><span class='line'>                 ngx.say("no body found")
</span><span class='line'>             end
</span><span class='line'>         end
</span><span class='line'>     }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;发送测试请求，其中a参数有2个，c参数值为空，d参数连等号都没有。执行结果如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #  curl -i http://testnginx.com/ -d 'test=12132&amp;a=2&amp;b=c&amp;dd=1&amp;a=354&amp;c=&amp;d'
</span><span class='line'>
</span><span class='line'>b: c
</span><span class='line'>dd: 1
</span><span class='line'>d: true
</span><span class='line'>c: 
</span><span class='line'>test: 12132
</span><span class='line'>a: 2, 354
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以看到参数a的两个值并列显示，并以逗号分隔，参数c显示为空，参数d的结果为布尔值true。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;获取临时文件中的请求体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果使用一个大小在1KB~10KB之间的请求体，会发生什么呢？测试执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i http://testnginx.com/ -d 'test=12132&amp;a=2&amp;b=kls204120312saldkk12 easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2je204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2je204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2je204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jesk20312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2je204120312saldkk12easjdiasasd3ej12i3j12io3jeioq2jeskls204120312saldkk12easjdiasasd3ej11'
</span><span class='line'>HTTP/1.1 100 Continue
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Wed, 06 Jun 2018 10:14:32 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>body is in file /usr/local/nginx_1.12.2/client_body_temp/0000000051
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;因为请求体数据的大小大于client_body_buffer_size的值，所以使用了临时文件存储请求体的数据。因此，需要先获取存放数据的临时文件名，再去读取请求体数据。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  注意：读取临时文件中的请求体数据是不被推荐的，因此本书不对相关操作进行，有兴趣的读者可以使用io.open完成读取。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;10.4　使用建议&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在实际应用中，关于读取请求体，有如下几条建议。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1．尽量不要使用lua_need_request_body去获取请求体。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2．获取请求体前，必须执行ngx.req.read_body()。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3．获取请求体数据时尽量不要使用硬盘上的临时文件，否则会对性能有很大影响；务必要确认请求体数字字节大小的范围，并确保client_body_buffer_size和client_max_body_size的值一致，这样只需到内存中去读取数据就可以了。它既提高了Nginx自身的吞吐能力，也提升了Lua的读取性能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4．如果请求体存放在临时文件中，Nginx会在处理完请求后自动清理临时文件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;5．对ngx.req.get_post_args参数的限制可以灵活控制，但不能关闭限制，以避免被恶意&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;十一、输出响应体&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在Lua中，响应体的输出可以使用ngx.print 和 ngx.say 这两个指令完成。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;11.1　异步发送响应体&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ngx.print&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ok, err = ngx.print(…)
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：用来输出内容，输出的内容会和其他的输出合并，然后再发送给客户端。如果响应头还未发送的话，发送前会优先将响应头发送出去。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location  / {
</span><span class='line'>
</span><span class='line'>    content_by_lua_block { 
</span><span class='line'>        local ngx = require "ngx";
</span><span class='line'>        local h = ngx.req.get_headers()
</span><span class='line'>        for k, v in pairs(h) do
</span><span class='line'>            ngx.print('Header name: ',k, ' value: ',v)
</span><span class='line'>        end
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下（所有的数据会合并到一起进行发送）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/test?=12132&amp;a=2&amp;b=c&amp;dd'
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: nginx/1.12.2
</span><span class='line'>Date: Fri, 08 Jun 2018 08:11:40 GMT
</span><span class='line'>Content-Type: application/octet-stream
</span><span class='line'>Transfer-Encoding: chunked
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>Header name:host value: testnginx.comHeader name:accept value: */*Header name:user-agent value: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.19.1 Basic ECC zlib/1.2.3 libidn/1.18 libssh2/1.4.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ngx.say&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ok, err = ngx.say(…)
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：功能和ngx.print一样，只是输出结果多了1个回车符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;11.2　同步发送响应体&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.print和ngx.say为异步调用，执行后并不会立即输出响应体，可以通过执行ngx.flush(true)来实现同步输出响应体的功能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ngx.flush&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：ok, err = ngx.flush(wait?)
</span><span class='line'>
</span><span class='line'>配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：在默认情况下会发起一个异步调用，即不等后续的数据到达缓冲区就会直接将内容输出到客户端。如果将wait的参数值设置为true，表示同步执行，即会等内容全部输出到缓冲区后再输出到客户端。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  testnginx.com;
</span><span class='line'>    default_type 'text/plain';
</span><span class='line'>    location /test1 {
</span><span class='line'>        content_by_lua_block {
</span><span class='line'>           ngx.say("test ")
</span><span class='line'>           ngx.say("nginx ")
</span><span class='line'>           ngx.sleep(3)
</span><span class='line'>           ngx.say("ok!")
</span><span class='line'>           ngx.say("666!")
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location /test2 {
</span><span class='line'>        content_by_lua_block {
</span><span class='line'>           ngx.say("test ")
</span><span class='line'>           ngx.say("nginx ")
</span><span class='line'>           ngx.flush(true)
</span><span class='line'>           ngx.sleep(3)
</span><span class='line'>           ngx.say("ok!")
</span><span class='line'>           ngx.say("666!")
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;访问/test1 和 /test2后，从执行结果可以看出，带有ngx.flush(true) 指令的内容会先输出test nginx，然后，等待大约3秒后再输出ok! 666!。如果没有配置ngx.flush(true)指令，请求会在等待3秒后输出完整的一句话。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意：指令ngx.flush不支持HTTP1.0，可以使用如下方式进行测试：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl -i 'http://testnginx.com/test2' --http1.0
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;十二、正则表达式&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;虽然Lua支持正则匹配且功能齐全，但在Nginx上推荐使用Lua-lua提供的指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;12.1　单一捕获&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ngx.re.match&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：captures, err = ngx.re.match(subject, regex, options?, ctx?, res_table?)
</span><span class='line'>
</span><span class='line'>配置环境：init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_ by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua*，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：使用Perl兼容的正则表达式来匹配subject参数，只返回匹配到的第一个结果。如果匹配失败，则返回nil；如果有异常，则返回nil和一个描述错误信息的err。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location / {
</span><span class='line'>    content_by_lua_block {
</span><span class='line'>        local ngx = require "ngx";
</span><span class='line'>        --匹配多个数字+aaa的正则表达式
</span><span class='line'>    local m, err = ngx.re.match(ngx.var.uri, "([0-9]+)(aaa)");
</span><span class='line'>        if m then
</span><span class='line'>           --匹配成功后输出的信息
</span><span class='line'>           ngx.say(ngx.var.uri, '---match success---', 'its type: ',type(m))
</span><span class='line'>           ngx.say(ngx.var.uri, '---m[0]--- ', m[0])
</span><span class='line'>           ngx.say(ngx.var.uri, '---m[1]--- ', m[1])
</span><span class='line'>           ngx.say(ngx.var.uri, '---m[2]--- ', m[2])
</span><span class='line'>        else
</span><span class='line'>           if err then
</span><span class='line'>               ngx.log(ngx.ERR, "error: ", err)
</span><span class='line'>               return
</span><span class='line'>           end
</span><span class='line'>           ngx.say("match not found")
</span><span class='line'>        end
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;errlog:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ngx.log(ngx.ERR, "error: ", body)
</span><span class='line'>
</span><span class='line'>tail -f /var/log/nginx/error.log
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl  'http://testnginx.com/test/a123aaa/b456aaa/c'
</span><span class='line'>/test/a123aaa/b456aaa/c---match success---its type: table
</span><span class='line'>/test/a123aaa/b456aaa/c---m[0]---123aaa
</span><span class='line'>/test/a123aaa/b456aaa/c---m[1]---123
</span><span class='line'>/test/a123aaa/b456aaa/c---m[2]---aaa
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从执行结果可以看出：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1．ngx.re.match只返回匹配到的第一个结果，所以后面的456aaa并没有被输出。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2．ngx.re.match返回的结果是table类型的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3．ngx.re.match匹配成功后，m[0] 的值是匹配到的完整数据，而m[1]、m[2] 是被包含在括号内的单个匹配结果。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;12.2　全部捕获&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.match只返回第一次匹配成功的数据，如果想获取所有符合正则表达式的数据，可以使用ngx.re.gmatch。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.gmatch&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：iterator, err = ngx.re.gmatch(subject, regex, options?)
</span><span class='line'>
</span><span class='line'>配置环境：init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_ by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua*，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：和ngx.re.match功能相似，但返回的是一个Lua迭代器，可以通过迭代的方式获取匹配到的全部数据。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location / {
</span><span class='line'>   content_by_lua_block {
</span><span class='line'>      local ngx = require "ngx";
</span><span class='line'>      --参数i表示忽略大小写
</span><span class='line'>      local m_table, err = ngx.re.gmatch(ngx.var.uri, "([0-9]+)(aaa)", "i");
</span><span class='line'>      if not m_table then
</span><span class='line'>          ngx.log(ngx.ERR,  err)
</span><span class='line'>          return
</span><span class='line'>      end
</span><span class='line'>      while true do
</span><span class='line'>         local m, err = m_table()
</span><span class='line'>         if err then
</span><span class='line'>            ngx.log(ngx.ERR,  err)
</span><span class='line'>            return
</span><span class='line'>         end
</span><span class='line'>         if not m then
</span><span class='line'>              break
</span><span class='line'>         end
</span><span class='line'>         ngx.say(m[0])
</span><span class='line'>         ngx.say(m[1])
</span><span class='line'>      end
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl  'http://testnginx.com/test/a123aaa/b456AAA/c'
</span><span class='line'>123aaa
</span><span class='line'>123
</span><span class='line'>456AAA
</span><span class='line'>456
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.match和ngx.re.gmatch都有一个options参数，用来控制匹配的执行方式，options常用参数说明见表7-1。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表7-1　options常用参数说明&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/tools/20221030-31.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;12.3　更高效的匹配和捕获&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.match和ngx.re.gmatch在使用过程中都会生成Lua table，如果只需确认正则表达式是否可以匹配成功，推荐使用如下指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ngx.re.find&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：from, to, err = ngx.re.find(subject, regex, options?, ctx?, nth?)
</span><span class='line'>
</span><span class='line'>配置环境：init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_ by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua*，ssl_session_fetch_by _lua*，ssl_session_store_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：与ngx.re.match类似，但只返回匹配结果的开始位置索引和结束位置索引。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;因为ngx.re.find不会创建table来存储数据，所以性能上比ngx.re.match和ngx.re.gmatch要好很多。此时，如果需要捕获匹配到的数据，可以使用Lua的函数string.sub。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location / {
</span><span class='line'>   content_by_lua_block {
</span><span class='line'>      local ngx = require "ngx";
</span><span class='line'>      local uri = ngx.var.uri
</span><span class='line'>      --使用o、j两个参数进行匹配，以提升性能
</span><span class='line'>      local find_begin,find_end,err = ngx.re.find(uri, "([0-9]+)(aaa)","oj");
</span><span class='line'>      if find_begin then
</span><span class='line'>          ngx.say('begin: ',find_begin)
</span><span class='line'>          ngx.say('end: ',find_end)
</span><span class='line'>       --利用Lua的string.sub函数来获取数据
</span><span class='line'>          ngx.say('find it: ' ,string.sub(uri, find_begin,find_end))
</span><span class='line'>          return
</span><span class='line'>      end
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl  'http://testnginx.com/test/a123aaa/b456AAAa/c'
</span><span class='line'>begin:8
</span><span class='line'>end:13
</span><span class='line'>find it: 123aaa
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.match、ngx.re.gmatch和 ngx.re.find 都支持ctx参数，有关ctx参数的说明如下。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1．ctx是Lua table类型的，是可选的第4个参数，但若用到第5个参数nth，那么，此位置需要用nil作为占位符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2．当ctx有值（键是pos，如pos=1）时，ngx.re.find将从pos位置开始进行匹配（位置的下标从1开始）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3．无论ctx表中是否有值，ngx.re.find都会在正则表达式匹配成功后，将ctx值设置为所匹配字符串之后的位置；若匹配失败，ctx表将保持原有的状态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nth是ngx.re.find的第5个参数，是在Lua-Nginx-Module 0.9.3版本之后新增加的参数，它的作用和ngx.re.match中的m[1]、m[2]类似。当nth等于1时，获取的结果等同于ngx.re.match中的m[1]，示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location / {
</span><span class='line'>   content_by_lua_block {
</span><span class='line'>      local ngx = require "ngx";
</span><span class='line'>      local uri = ngx.var.uri
</span><span class='line'>
</span><span class='line'>      --从uri位置为10的地方开始进行匹配，下标默认从1开始，只匹配nth是1的数据，即([0-9]+)的值
</span><span class='line'>      local ctx = { pos = 10 }
</span><span class='line'>      local find_begin,find_end,err = ngx.re.find(uri, "([0-9]+)(aaa)","oji",ctx,1);
</span><span class='line'>      if find_begin then
</span><span class='line'>          ngx.say('begin: ',find_begin)
</span><span class='line'>          ngx.say('end: ',find_end)
</span><span class='line'>          ngx.say('find it: ' ,string.sub(uri, find_begin,find_end))
</span><span class='line'>          return
</span><span class='line'>      end
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl  'http://testnginx.com/test/a123aaa/b456AAAa/c'
</span><span class='line'>begin:10
</span><span class='line'>end:10
</span><span class='line'>find it: 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;因为ctx的位置是10，所以uri前面的“/test/a12”这9个字符被忽略了，匹配到的就只有3aaa，又因为nth为1，所以捕获到的值是3。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;12.4　替换数据&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Lua API也支持匹配对应数据并对其进行替换的指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.re.sub&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    语法：newstr, n, err = ngx.re.sub(subject, regex, replace, options?)
</span><span class='line'>
</span><span class='line'>配置环境：init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_ by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua*，ssl_session_fetch_by_ lua*，ssl_session_store_by_lua*
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;含义：若subject中含有参数regex的值，则将之替换为参数replace的值。options为可选参数。替换后的内容将赋值给newstr，n表示匹配到的次数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;示例：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    location / {
</span><span class='line'>    content_by_lua_block {
</span><span class='line'>        local ngx = require "ngx";
</span><span class='line'>        local uri = ngx.var.uri
</span><span class='line'>        local n_str, n, err = ngx.re.sub(uri,"([0-9]+)", 'zzzz')
</span><span class='line'>        if n_str then
</span><span class='line'>            ngx.say(uri)
</span><span class='line'>            ngx.say(n_str)
</span><span class='line'>            ngx.say(n)
</span><span class='line'>        else
</span><span class='line'>            ngx.log(ngx.ERR, "error: ", err)
</span><span class='line'>            return
</span><span class='line'>        end
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;执行结果如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl   'http://testnginx.com/test188/x2/1231'
</span><span class='line'>/test188/x2/1231
</span><span class='line'>/testzzzz/x2/1231
</span><span class='line'>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从结果可以看出，只在第一次匹配成功时进行了替换操作，并且只替换了1次，所以n的结果是1。如果要替换匹配到的全部结果可以使用ngx.re.gsub，示例如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    local n_str, n, err = ngx.re.gsub(uri,"([0-9]+)", 'zzzz')
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从执行结果可知，替换了3次：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # curl   'http://testnginx.com/test188/x2/1231'
</span><span class='line'>/test188/x2/1231
</span><span class='line'>/testzzzz/xzzzz/zzzz
</span><span class='line'>3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;12.5　转义符号&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;正则表达式包括\d、\s、\w 等匹配方式，但在Ngx_Lua中使用时，反斜线 \ 会被Lua处理掉，从而导致匹配异常。所以需要对带有 \ 的字符进行转义，转义方式和其他语言有些区别，转义后的格式为\d、\s、\w，因为反斜线会被Nginx和Lua各处理一次，所以\会先变成\，再变成\。
</span><span class='line'>还可以通过[[]]的方式将正则表达式直接传入匹配指令中，以避免被转义，如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    local find_regex = [[\d+]]
</span><span class='line'>local m = ngx.re.match("xxx,43", find_regex)
</span><span class='line'>ngx.say(m[0])   --输出 43
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;通常建议使用[[]]的方式。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;十三、子请求&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Nginx一般分两种请求类型，一种是主请求；一种是子请求，即subrequest。主请求从Nginx的外部进行访问，而子请求则在Nginx内部进行访问。子请求不是HTTP请求，不会增加网络开销。它的主要作用是将一个主请求分解为多个子请求，用子请求去访问指定的location服务，最后汇总到一起完成主请求的任务。
</span><span class='line'>Nginx的请求方法有很多种，如GET、POST、 PUT 、DELETE等，同样，子请求也支持这些请求方法。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;13.1　请求方法&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Lua API中提供了多个指令来实现子请求，Lua API常见的请求方法说明见表7-2。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表7-2　Lua API常见的请求方法说明&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/tools/20221030-32.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;13.2　单一子请求&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ngx.location.capture</span></code></pre></td></tr></table></div></figure>
    语法：res = ngx.location.capture(uri, options?)</p>

<pre><code>配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</code></pre>

<pre><code>
含义：发出同步但不阻塞Nginx的子请求。可以用来访问指定的location，但不支持访问命名location（如@abc 就是命名location）。location中可以有静态文件，如ngx_proxy、ngx_fastcgi、ngx_memc、ngx_postgres、ngx_drizzle，甚至是Ngx_Lua和Nginx的c模块。

子请求总是会把整个请求体缓存到内存中，如果要处理一个较大的子请求，使用cosockets是最好的选择（cosockets是与ngx.socket.tcp有关的API）。

子请求一般在内部进行访问，建议在被子请求访问的location上配置internal，即只允许内部访问。

子请求返回的结果res，它是一个table类型的数据，包含4个元素：res.status、res.header、res.body和res.truncated，res的元素名及其用途见表7-3。

表7-3　res的元素名及其用途

![](/images/tools/20221030-33.png)

ngx.location.capture的第2个参数options是可选参数，也可以包含多个参数，示例如下：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';

    location = /main {
        set $m 'hello';
        content_by_lua_block {
            local ngx = require "ngx";
            --发起子请求，访问/test，请求方式是GET，请求体是test nginx，子请求的URL参数是a=1&amp;b=2，并使用copy_all_vars将主请求的Nginx变量（$m）全部复制到子请求中
              local res = ngx.location.capture(
              '/test',  { method = ngx.HTTP_GET , body = 'test nginx',
               args = { a = 1, b = 2 },copy_all_vars = true }
            )
            ngx.say(res.status)
            ngx.say(res.body)
            ngx.say(type(res.header))
            ngx.say(type(res.truncated))
        }
    }
    location = /test
{
    #只能在Nginx内部进行访问 
        internal;
        content_by_lua_block {
            local ngx = require "ngx";
            --获取请求体，在这里是获取主请求的请求体
            ngx.req.read_body()
            local body_args = ngx.req.get_body_data() 
            --输出请求的参数，获取主请求的m变量的值，并与world进行字符串拼接
            ngx.print('request_body: ' ,body_args, ' capture_args: ', ngx.var.args, '---  copy_all_vars : ', ngx.var.m .. 'world! ')
        }
    }
}
</code></pre>

<pre><code>
执行结果如下：
</code></pre>

<pre><code># curl   'http://testnginx.com/main'
200
request_body:test nginx capture_args:a=1&amp;b=2---  copy_all_vars : helloworld!
table
boolean
</code></pre>

<pre><code>
从示例中可以看出：

1．ngx.location.capture的第2个参数options可以包含多个table类型的参数。

2．子请求的请求方法由参数method进行配置，示例中的请求方法为GET。

3．子请求通过参数body可以定义新的请求体。

4．子请求通过参数args可以配置新的URL的args，args是table类型的。

5．copy_all_vars = true的作用是将主请求的全部变量传递给子请求，如果没有此配置就不会传递过去。

6．从子请求的返回结果可以获取状态码、响应体、响应头、结果是否被截断。

根据上面的介绍可知，下面两种方式是等价的：

local res = ngx.location.capture(‘/test?a=1&amp;b=2’)

local res = ngx.location.capture(‘/test , args = { a = 1, b = ‘2’ }’)

ngx.location.capture 还支持更丰富的参数操作，具体如下。

1．vars参数，table类型，可以设置子请求中的变量值，前提是该变量在Nginx中被声明过。如果配置copy_all_vars = true，且vars里有和主请求相同的变量，则会使用vars中变量的值；如果vars里是新变量，就会和主请求的变量一起传递过去。

2．share_all_vars参数，用来共享主请求和子请求的变量，如果在子请求中修改了共享变量的值，主请求的变量值也会被改变。不推荐使用此参数，因为可能会导致很多意外问题的出现。

3．always_forward_body参数，默认值为false，此时，如果不设置body参数，且请求方法是PUT或POST，则主请求的请求体可以传给子请求。如果把always_forward_body设置为 true，且不设置body参数，无论请求方法是什么，主请求的请求体都会传给子请求。

4．ctx参数，指定一个table作为子请求的ngx.ctx表，它可以使主请求和子请求共享请求头的上下文环境。

关于参数vars的使用方式，示例如下：
</code></pre>

<pre><code>location = /main {
    set $m 'hello';
    set $mm '';
    content_by_lua_block {
        local ngx = require "ngx";
        local res = ngx.location.capture(
            '/test',
            { method = ngx.HTTP_POST ,
            vars = {mm = 'MMMMM',m = 'hhhh'}}
        )
        ngx.say(res.body)
    }
}
location = /test {
    content_by_lua_block {
        local ngx = require "ngx";
        ngx.print(ngx.var.m .. ngx.var.mm )
    }
}
</code></pre>

<pre><code>
执行结果如下：
</code></pre>

<pre><code># curl   'http://testnginx.com/main'
hhhhMMMMM
</code></pre>

<pre><code>
主请求的变量在子请求中被修改了，并传给了子请求指定的/test：

注意：使用ngx.location.capture发送子请求时，默认会将主请求的请求头全部传入子请求中，这可能会带来一些不必要的麻烦。例如，如果浏览器发送的压缩头Accept-Encoding:gzip被传入子请求中，且子请求是ngx_proxy的标准模块，则请求的结果会被压缩后再返回，导致Lua无法读取子请求返回的数据。因此应将子请求的 proxy_pass_request_headers设置为off，避免把请求头传递给后端服务器。

#### 13.3　并发子请求

有时需要发送多条子请求去获取信息，这时，就要用到并发操作了。

ngx.location.capture_multi
</code></pre>

<pre><code>语法：res1, res2, … = ngx.location.capture_multi({ {uri, options?}, {uri, options?}, … })

配置环境：rewrite_by_lua*，access_by_lua*，content_by_lua*
</code></pre>

<pre><code>
含义：与ngx.location.capture相似，但可以支持多个子请求并行访问，并按配置顺序返回数据。返回的数据也是多个结果集。

示例：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location = /main {
        set $m 'hello';
        set $mm '';
        content_by_lua_block {
            local ngx = require "ngx";
            --发送两个子请求，会返回两个结果集
            local res1, res2 = ngx.location.capture_multi{
                { "/test1?a=1&amp;b=2" },
                { "/test2",{ method = ngx.HTTP_POST},body = "test nginx" },
            }
            --返回的body的方式和ngx.location.capture一样
            if res1.status == ngx.HTTP_OK then
                ngx.say(res1.body)
            end

            if res2.status == ngx.HTTP_OK then
                ngx.say(res2.body)
            end
        }
    }
    location = /test1 {
         echo 'test1';
    }
    location = /test2 {
         echo 'test2';
    }

}
</code></pre>

<pre><code>
执行结果如下：
</code></pre>

<pre><code># curl   'http://testnginx.com/main'
test1
test2
</code></pre>

<pre><code>
主请求需要等到所有的子请求都返回后才会结束子请求的执行，最慢的子请求的执行时间就是整体的消耗时间，所以在实际业务中需要对子请求的超时时间做好限制。

注意：Nginx对子请求有并发数量限制，目前Nginx 1.1以上的版本限制子请求并发数量为200个，老版本是50个。

## 十四、获取Nginx的环境变量

通过Lua API可以获取Nginx的环境变量，用来提升某些业务处理流程，比如有些定时任务只需要在一个worker进程上执行，不需要执行多次，因此可以获取环境变量中worker的ID，在指定的ID上执行任务即可；或者获取Nginx的worker进程是否正在shutdown，以决定是否对数据进行备份操作。

#### 14.1　获取环境所在的模块

ngx.config.subsystem
</code></pre>

<pre><code>语法：subsystem = ngx.config.subsystem

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：获取当前请求的Nginx子环境（http或stream）。如果在http模块下，就返回字符串http；如果在stream模块下，则返回字符串stream。

#### 14.2　确认调试模式
ngx.config.debug
</code></pre>

<pre><code>语法：debug = ngx.config.debug

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：判断请求是否在Debug模式下执行。例如，当需要在Debug模式下，打印某些数据或是执行某些代码时，可以通过这个判断，区分线下测试环境和线上环境。

#### 14.3　获取prefix路径

ngx.config.prefix
</code></pre>

<pre><code>语法：prefix = ngx.config.prefix()

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：获取编译Nginx时–prefix=的路径，如果启动Nginx时使用了参数-p，就以参数-p的值为准。

#### 14.4　获取Nginx的版本号
ngx.config.nginx_version
</code></pre>

<pre><code>语法：ver = ngx.config.nginx_version

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：获取Nginx的版本号，如本书使用的Nginx版本号是1.12.2。

#### 14.5　获取configure信息

ngx.config.nginx_configure
</code></pre>

<pre><code>语法：str = ngx.config.nginx_configure()

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua
</code></pre>

<pre><code>
含义：获取编译Nginx时./configure命令的信息，返回的是一个字符串。

#### 14.6　获取Ngx_Lua的版本号
ngx.config.ngx_lua_version
</code></pre>

<pre><code>语法：ver = ngx.config.ngx_lua_version

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua
</code></pre>

<pre><code>
含义：获取Ngx_Lua模块的版本号。可以用来检查Ngx_Lua的版本。例如，当开发某个功能需要使用指定的版本时，可以在代码中进行判断，如果不是指定的版本，可以输出警告信息。

#### 14.7　判断worker进程是否退出
ngx.worker.exiting
</code></pre>

<pre><code>语法：exiting = ngx.worker.exiting()

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：判断Nginx的worker进程是否退出。

#### 14.8　获取worker进程的ID

ngx.worker.id
</code></pre>

<pre><code>语法：count = ngx.worker.id()

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua
</code></pre>

<pre><code>
含义：获取当前执行的worker进程的ID。worker进程的ID从0开始，依次递增，最大值是worker总数的值减1。

#### 14.9　获取worker进程数量

ngx.worker.count
</code></pre>

<pre><code>语法：count = ngx.worker.count()

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，init_by_lua，init_worker_by_lua
</code></pre>

<pre><code>
含义：获取当前Nginx worker进程的数量，即Nginx配置中worker_processes的值。

## 十五、定时任务

可以使用Nginx执行定时任务，例如，定期获取MySQL数据库中的数据并存放到共享内存中，定时监听某个配置是否发生改变（如果发生改变就重载Nginx），定时将日志远程传输到集中存储上等。
在Lua-0.10.9版本之前，常使用ngx.timer.at来启动定时任务。Ngx_Lua 0.10.9新增了ngx.timer.every，启动定时任务更加方便了。本章中的定时任务都使用ngx.timer.every来创建，后续介绍也会以此命令为主。

#### 15.1　创建定时任务

ngx.timer.every
</code></pre>

<pre><code>语法：hdl, err = ngx.timer.every(delay, callback, user_arg1, user_arg2, …)

配置环境：init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_ by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua*，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</code></pre>

<pre><code>
含义：创建一个定时任务，delay指的是延迟时间，表示每隔多少秒执行一次，支持配置0.001s，不支持配置0s；callback是需要执行的Lua函数，在Nginx退出时，定时任务会被关闭。
</code></pre>

<pre><code>init_worker_by_lua_block {
    local delay = 3;
    local ngx = require "ngx";
    local check
    check = function(premature)
        if not premature then
         --输出当前worker进程的PID和ID。
             ngx.log(ngx.ERR, ' ngx.worker.pid: ',ngx.worker.pid(),' ngx.worker.id: ',ngx.worker.id(),"------test nginx !!!")
        end
    end
    --每隔3s执行一次check函数
    local ok, err = ngx.timer.every(delay, check)
    if not ok then
         ngx.log(ngx.ERR, "failed to create timer: ", err)
         return
    end
}
</code></pre>

<pre><code>
重载Nginx配置后，定时任务会在启动worker进程时就被触发执行，请观察图7-1所示的定时任务输出的日志。


图7-1　定时任务输出的日志

从图7-1可以发现如下规则。

1．每个worker进程都在执行输出操作。

2．都是每3s执行一次。

3．如果没有从Nginx外部进行访问的请求，定时任务会继续执行下去。

参数user_arg1、user_arg2用来给定时任务传递参数，示例如下：
</code></pre>

<pre><code>init_worker_by_lua_block {
    local delay = 3;
    local ngx = require "ngx";
    local check
    --新增一个u_arg1参数，是对下面定时任务的'test nginx'进行填充
    check = function(premature,u_arg1)
        if not premature then
            ngx.log(ngx.ERR, ' ngx.worker.pid: ',ngx.worker.pid(),' ngx.worker.id: ',ngx.worker.id(),'------', u_arg1)
        end
    end

    --新增参数'test nginx' 
    local ok, err = ngx.timer.every(delay, check, 'test nginx')
    if not ok then
        ngx.log(ngx.ERR, "failed to create timer: ", err)
        return
    end
}
</code></pre>

<pre><code>
配置7-1

#### 15.2　性能优化

在配置7-1中，Nginx启动了3个worker进程，所以每3s会执行3次worker进程。但有时只需执行一次即可，例如当前共享内存中存放数据时，因为数据是所有worker进程共享的，所以执行一次就足够了。且被启动的worker进程越多，后端的并发就越多，这会增加后端服务器的负载，那么应该怎么减少worker进程重复执行的次数呢？

其实根据输出的日志可以获得每个worker进程的ID，那么，只需利用ID指定一个worker进程来执行定时任务就可以了，示例如下：
</code></pre>

<pre><code>init_worker_by_lua_block {
     local delay = 3;
     local ngx = require "ngx";
     local check
     check = function(premature)
         if not premature then
             ngx.log(ngx.ERR, ' ngx.worker.pid: ',ngx.worker.pid(),' ngx.worker.id: ',ngx.worker.id(),"------test nginx !!!")
         end
     end

   --如果worker进程的ID为0就执行定时任务  
   if 0 == ngx.worker.id() then
         local ok, err = ngx.timer.every(delay, check)
         if not ok then
             ngx.log(ngx.ERR, "failed to create timer: ", err)
             return
         end
    end

}
</code></pre>

<pre><code>
观察日志，会发现每3s worker进程只执行一次。

如果worker进程意外终止，Nginx的master进程会保证在worker进程意外终止后重启新的worker进程，ID保持不变。

如果要求定时任务只在Nginx重载时执行一次，可以使用如下方式：
</code></pre>

<pre><code>local ok, err = ngx.timer.at(0,func)
</code></pre>

<pre><code>
这表示立即执行func函数，且由于没有回调ngx.timer.at的指令，只会执行一次。

注意：关于定时任务，需要在在`init_worker_by_lua*`的执行阶段中执行（详见8.2节）。

定时任务在Nginx后台运行，不直接和客户端请求打交道，因此不会直接影响请求的响应时间，但这并不代表它不会干扰请求的响应时间，如果在同一时间内有大量定时任务执行，也会降低Nginx的整体性能。此时，可以使用如下指令对正在运行的定时任务进行控制。

lua_max_running_timers
</code></pre>

<p>语法：lua_max_running_timers <count></p>

<p>默认值：lua_max_running_timers 256</p>

<p>配置环境：http</p>

<pre><code>含义：设置被允许的running timers（正在执行回调函数的计时器）的最大数量，如果超过这个数量，就会抛出“N lua_max_running_timers are not enough”，其中N是变量，指的是当前正在运行的running timers的最大数量。

lua_max_pending_timers
</code></pre>

<pre><code>语法：lua_max_pending_timers &lt;count&gt;

默认值：lua_max_pending_timers 1024

配置环境：http
</code></pre>

<pre><code>
含义：设置允许使用的pending timers（执行挂起的定时器）的最大数量，如果在定时任务中超过这个限制，则会报“too many pending timers”错误。

#### 15.3　禁用的Lua API

ngx.timer.every支持用户操作共享内存、读取数据库数据、获取系统时间等，但在定时任务中有些API是被明确禁止的，例如：

1．子请求ngx.location.capture。

2．向客户端输出的Lua API（如 ngx.say、ngx.print 和 ngx.flush）。

3．以ngx.req.开头的Lua API。

## 十六、常用指令

Ngx_Lua提供了大量的Lua API指令来实现各种功能，本节会介绍一些常用的指令。

#### 16.1　请求重定向

在Nginx中通过rewrite对请求进行重定向，而在Ngx_Lua里可以使用ngx.redirect、ngx.req.set_uri来完成重定向，并且Ngx_Lua还提供了一个具有强大的扩展能力的ngx.exec指令。

ngx.redirect
</code></pre>

<pre><code>语法：ngx.redirect(uri, status?)

配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</code></pre>

<pre><code>
含义：发出一个 HTTP状态码为301或302的重定向请求到指定的URI。

参数status的可选值有301、302、303、307和308，默认值是302。下面是ngx.redirect重定向和rewrite重定向的对比：
</code></pre>

<pre><code>location / {
    # 等同于 rewrite ^/ http://testnginx.com/test? redirect;
    rewrite_by_lua_block {
        return ngx.redirect("/test")
    }
}
</code></pre>

<pre><code>
上述配置使用了默认的302状态。如果在跳转过程中需要保留请求的参数，可作如下配置：
</code></pre>

<pre><code>location / {
    #  等同于 rewrite ^/ http://testnginx.com/test permanent;
    rewrite_by_lua_block {
        local ngx = require "ngx";
        return ngx.redirect("/test?" ..  ngx.var.args  ,301)
    }
}
</code></pre>

<pre><code>
也可以自定义参数，如下所示：
</code></pre>

<pre><code>return ngx.redirect("/test?test=1&amp;a=2" ,301)
</code></pre>

<pre><code>
支持跳转到其他域名，如http://abc.testnginx.com：
</code></pre>

<pre><code>return ngx.redirect(“ http://abc.testnginx.com”,301)
</code></pre>

<pre><code>
 注意：跳转时都加return指令，其作用是为了强调跳转操作，官方推荐使用这种方式。

ngx.req.set_uri
</code></pre>

<pre><code>语法：ngx.req.set_uri (uri, jump?)

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua
</code></pre>

<pre><code>
含义：用参数uri来重写当前的URL，和Nginx的rewrite内部重定向功能相似。例如，rewrite的指令rewrite ^ /test last; 与ngx.req.set_uri(“/test”, true)功能相似，而rewrite ^ /test break; 与ngx.req.set_uri(“/foo”, false)功能相似。

如果需要在跳转过程中修改参数，可以使用ngx.req.set_uri_args来完成新的参数配置，操作如下：
</code></pre>

<pre><code>ngx.req.set_uri_args("a=1&amp;b=2&amp;c=3")
ngx.req.set_uri("/test", true)
</code></pre>

<pre><code>
ngx.exec
</code></pre>

<pre><code>语法：ngx.exec(uri, args?)

配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</code></pre>

<pre><code>
含义：使用uri、args参数来完成内部重定向，类似于echo-nginx-module 的echo_exec指令。

示例：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
        content_by_lua_block {
            return ngx.exec('/test');
        }
    }
    location /test {
        content_by_lua_block {
            ngx.say(ngx.var.args);
        }        
    }
}
</code></pre>

<pre><code>
下面是ngx_exec指令常用的几种参数设置的示例。

保留之前的参数，如“ngx.exec(‘/test’,ngx.var.args);”。

保留之前的参数，并新增参数，如“ngx.exec(‘/test’ ,ngx.var.args … ‘d=4’);”。

去掉之前的参数，并新增参数，如“ngx.exec(‘/test’ , ‘d=4’);”。

  注意：ngx_exec是一个内部重定向指令，不涉及外部的HTTP请求。在使用中推荐采用return ngx.exec(…)的方式。

#### 16.2　日志记录

在使用Lua进行开发的过程中，需要使用日志来输出异常和调试信息，在Lua API中可以使用ngx.log来记录日志。

ngx.log
</code></pre>

<pre><code>语法：ngx.log(log_level, …)

配置环境：init_by_lua，init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_ lua，content_by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua*，ngx.timer.，balancer_by_lua，ssl_certificate_by_lua*，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</code></pre>

<pre><code>
含义：根据log_level的等级，将内容记录到error.log的日志文件中。

log_level的级别及其说明见表7-6（和Nginx的error.log日志级别是一致的）。

表7-6　log_level的级别及其说明

![](/images/tools/20221030-35.png)

续表

![](/images/tools/20221030-36.png)


示例：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
        content_by_lua_block {
            ngx.say("test ")
            ngx.say("nginx ")
            ngx.log(ngx.ALERT, 'Log Test Nginx')
            ngx.log(ngx.STDERR, 'Log Test Nginx')
            ngx.log(ngx.EMERG, 'Log Test Nginx')
            ngx.log(ngx.ALERT, 'Log Test Nginx')
            ngx.log(ngx.CRIT, 'Log Test Nginx')
            ngx.log(ngx.ERR, 'Log Test Nginx')
            ngx.log(ngx.WARN, 'Log Test Nginx')
            ngx.log(ngx.NOTICE, 'Log Test Nginx')
            ngx.log(ngx.INFO, 'Log Test Nginx')
            ngx.log(ngx.DEBUG, 'Log Test Nginx')
        }
    }

}
</code></pre>

<pre><code>
执行结果如下：
</code></pre>

<pre><code>curl -i 'http://testnginx.com/'
</code></pre>

<pre><code>
查看error.log 日志，默认在logs/error.log文件中，示例如下：
</code></pre>

<pre><code>2018/06/11 11:18:26 [alert] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):4: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
2018/06/11 11:18:26 [] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):5: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
2018/06/11 11:18:26 [emerg] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):6: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
2018/06/11 11:18:26 [alert] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):7: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
2018/06/11 11:18:26 [crit] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):8: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
2018/06/11 11:18:26 [error] 1180#1180: *34 [lua] content_by_lua (nginx.conf:66):9: Log Test Nginx, client: 10.19.48.161, server: testnginx.com, request: "GET / HTTP/1.1", host: "testnginx.com"
</code></pre>

<pre><code>
观察error.log日志可发现，它并没有输出所有级别的日志，这是因为Nginx中error.log的日志级别会影响Lua中日志的级别。如果将error.log的级别修改如下：

error_log /usr/local/nginx_1.12.2/logs/error.log info;

这样Lua的日志就可以打印到INFO级别了，如果需要DEBUG级别的日志，重新编译Nginx并开启DEBUG模式即可。

ngx.log支持多个字符串合并输出，字符串之间以逗号分隔，示例如下：
</code></pre>

<pre><code>ngx.log(ngx.ERR, ‘Log Test Nginx’, ‘a’, ‘b’, ‘c’)
</code></pre>

<pre><code>
ngx.log单条日志可输出的最大字节数受Nginx的限制，默认最多是2048个字节，即2K。

Lua提供了print命令来简化INFO级别的日志的输出。下面两条语句的作用是一样的：
</code></pre>

<pre><code>print("Log Test Nginx ")

ngx.log(ngx.INFO, ‘Log Test Nginx’)
</code></pre>

<pre><code>
注意：ngx.print 和print 是两条命令，不要混淆了。

#### 16.3　请求中断处理

在Lua中，可以对请求进行中断处理，有两种情况，如下：

1．中断整个请求，则请求不再继续执行，直接返回到客户端。

2．中断当前的执行阶段，请求会继续执行下一个阶段，并继续响应请求。

它们都是通过ngx.exit指令完成的。

ngx.exit
</code></pre>

<pre><code>语法：ngx.exit(status)

配置环境：rewrite_by_lua，access_by_lua，content_by_lua，header_filter_by_lua，ngx.timer.，balancer_by_lua，ssl_certificate_by_lua，ssl_session_fetch_by_lua，ssl_session_ store_by_lua
</code></pre>

<pre><code>
含义：参数status的值是HTTP的状态码。当参数status&gt;=200时，请求会被中断，并将status的值作为状态值返回给Nginx。

当参数status==0时，请求会中断当前的执行阶段，继续执行下一个阶段（前提是还有下一个阶段）。

配置环境：init_by_lua，set_by_lua，rewrite_by_lua，access_by_lua，content_by_ lua，header_filter_by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_ lua，ssl_certificate_by_lua，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*

Ngx_Lua HTTP状态码清单见表7-9。

表7-9　Ngx_Lua HTTP状态码清单

![](/images/tools/20221030-37.png)

续表

![](/images/tools/20221030-38.png)

下面是一个HTTP状态码为0的示例：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
        set $a  '0';
        rewrite_by_lua_block {
             ngx.var.a = '1';
             --等价于 ngx.exit(0), 0即HTTP状态码
             ngx.exit(ngx.OK)
        }
        echo $a;  #执行结果等于1 
    }
}
</code></pre>

<pre><code>
ngx.exit(ngx.OK)可以让Nginx退出当前的rewrite_by_lua_block阶段，继续执行下面的阶段，如上面代码中的echo。

如果想中断当前的请求，不再继续后面的执行阶段，可以设置两种退出状态：

设置状态码大于或等于200且小于300，表示成功退出当前请求。

设置状态码大于或等于500，或其他异常的状态，表示失败退出当前请求。

继续使用上面的例子，这次以非0的状态码退出当前请求，如下所示：
</code></pre>

<pre><code>location / {
    set $a  '0';           
    rewrite_by_lua_block {
         ngx.var.a = '1';
         ngx.exit(200)  --也可以换成500，数字代表状态码的值
    }
         echo $a;  #没有执行到这一句
}
</code></pre>

<pre><code>
因为使用了200状态码，所以请求在ngx.exit处被中断后退出了，所以无法执行echo输出的命令。为了强调退出操作，可以在此命令前加上return，如下所示：
</code></pre>

<pre><code>return ngx.exit(ngx.OK)
</code></pre>

<pre><code>
## 十七、提升开发和测试效率

在使用Lua进行开发的过程中，可能需要频繁修改Lua代码，默认情况下都需重启Nginx才能使修改生效。使用lua_code_cache指令可以对其进行重新配置，并以此来提升开发效率。
</code></pre>

<pre><code>语法：lua_code_cache on | off

默认：lua_code_cache on

配置环境：http，server，location，location if
</code></pre>

<pre><code>
含义：打开或关闭_by_lua_file指定的Lua代码及Lua模块的缓存。如果设置为off，则代码缓存会被关闭，在_by_lua_file修改的代码不需要重载 Nginx配置就可以生效。

  注意：此指令只适合用于`*_by_lua_file`中的代码，不适用于 `*_by_lua_block` 和 `*_by_lua`中的代码，因为这两种指令的代码都是内嵌到Nginx配置文件中的，必须通过reload配置文件才可以使修改生效。把lua_code_cache设置为on只适合在开发环境中使用，不适合在线上环境中使用。

#### 17.1　断开客户端连接

对于某些API请求，客户端只管发送并不等待返回结果，例如，触发一个请求通知远程服务端执行某个任务或进行日志推送。此时，可以使用如下指令断开连接。

ngx.eof
</code></pre>

<pre><code>语法：ok, err = ngx.eof()

配置环境：rewrite_by_lua，access_by_lua，content_by_lua
</code></pre>

<pre><code>
含义：显示指定响应的输出结束，会告知客户端主动关闭连接，并在服务器端继续执行剩下的操作。
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
        set $a '0';
        content_by_lua_block {
            ngx.var.a = '1';
            --告知客户端主动断开连接
            ngx.eof()
            ngx.sleep(3);  --让请求休眠3s。
            ngx.log(ngx.ERR, 'Test Nginx---',ngx.var.a)
        }
    }
}
</code></pre>

<pre><code>
执行curl -i ' http://testnginx.com/后，请求会立刻响应一个200状态，表示响应内容已返回，但请求的后续操作仍在服务器端继续执行，3s后会将日志写入error.log。

注意：执行完ngx.eof后，如果下一步是发送子请求的指令，那么，子请求会被意外中止，导致无法完成子请求的响应，这是受Nginx中proxy_ignore_client_abort默认值的影响，将proxy_ignore_client_abort设置为on，就可以在执行ngx.eof后继续响应子请求了。

#### 17.2　请求休眠

ngx.sleep
</code></pre>

<pre><code>语法：ngx.sleep(seconds)

配置环境：rewrite_by_lua，access_by_lua，content_by_lua，ngx.timer.，ssl_certificate_ by_lua，ssl_session_fetch_by_lua
</code></pre>

<pre><code>
含义：通过ngx.sleep命令可以在不阻塞Nginx worker进程的情况下，让当前请求休眠指定时间（seconds），seconds最小值为0.001s。

示例：
</code></pre>

<pre><code>location / {
    content_by_lua_block {
        --5秒后输出ok。
        ngx.sleep(5);
        ngx.say('ok')
    }
}
</code></pre>

<pre><code>
#### 17.3　获取系统时间

在Ngx_lua中获取系统时间，都是从Nginx的时间缓存中读取的，不涉及系统调用（系统调用的Lua命令类似于通过os.time获取系统时间）。相关指令的配置环境都是相同的，都适用于如下执行阶段。
</code></pre>

<pre><code>init_worker_by_lua*, set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer., balancer_by_lua, ssl_certificate_by_lua*, ssl_session_fetch_ by_lua*, ssl_session_store_by_lua*
</code></pre>

<pre><code>
在Ngx_lua中获取系统时间的示例如下：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
       content_by_lua_block {
            ngx.say('ngx.today: ',ngx.today())
            ngx.say('ngx.time: ',ngx.time())
            ngx.say('ngx.now: ',ngx.now())
            ngx.say('ngx.localtime: ',ngx.localtime())
            ngx.say('ngx.utctime: ',ngx.utctime())
            ngx.say('ngx.cookie_time: ',ngx.cookie_time(1528721405))
            ngx.say('ngx.parse_http_time: ',ngx.parse_http_time('Mon, 11-Jun-18 12:50:05 GMT'))
            ngx.say('ngx.update_time: ',ngx.update_time())
       }
    }
}
</code></pre>

<pre><code>
执行结果如下：

ngx.today: 2018-06-11 #返回系统的本地时间，只包含年、月、日

ngx.time: 1528721734 #返回当前时间的Unix时间戳

ngx.now: 1528721734.775 #返回当前时间的Unix时间戳，浮点数类型，小数部分是毫秒级别

ngx.localtime: 2018-06-11 20:55:34 #返回当前时间

ngx.utctime: 2018-06-11 12:55:34 #返回UTC（Coordinated Universal Time，即世界标准世界）时间

ngx.cookie_time: Mon, 11-Jun-18 12:50:05 GMT #返回一个可以让Cookie过期的时间格式，参数是Unix时间戳格式

ngx.http_time: Mon, 11 Jun 2018 12:50:05 GMT #返回一个可以做HTTP头部的时间格式，如expires或last-modified

ngx.parse_http_time: 1528721405 #返回Unix时间戳，和ngx.http_time输出的时间格式不一样

ngx.update_time: #返回空，作用是强行更新Nginx的时间缓存，此操作会增加性能开销，不建议使用

#### 17.4　编码与解码

利用Ngx_Lua的API，可以进行编码和解码的操作。

ngx.escape_uri
</code></pre>

<pre><code>语法：newstr = ngx.escape_uri(str)

配置环境：init_by_lua，init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_ lua，content_by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua*，ngx.timer.，balancer_by_lua，ssl_certificate_by_lua*，ssl_session_fetch_by_lua*，ssl_session_store_by_lua* ngx.quote_sql_str
</code></pre>

<pre><code>
含义：对参数str进行URI编码。

ngx.unescape_uri
</code></pre>

<pre><code>语法：newstr = ngx.unescape_uri(str)

配置环境：init_by_lua，init_worker_by_lua，set_by_lua，rewrite_by_lua，access_by_ lua，content_by_lua，header_filter_by_lua，body_filter_by_lua，log_by_lua*，ngx.timer.，balancer_by_lua，ssl_certificate_by_lua*
</code></pre>

<pre><code>
含义：对参数str进行URI解码。

ngx.encode_args
</code></pre>

<pre><code>语法：str = ngx.encode_args(table)

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_lua，ssl_certificate_ by_lua
</code></pre>

<pre><code>
含义：按照URI编码规则，将Lua提供的table类型数据编码成一个字符串。

ngx.decode_args
</code></pre>

<pre><code>语法：table, err = ngx.decode_args(str, max_args?)

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_lua，ssl_certificate_by_ lua，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</code></pre>

<pre><code>
含义：将URI编码的字符串解码为Lua的table类型的数据。

ngx.md5
</code></pre>

<pre><code>语法：digest = ngx.md5(str)

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_lua，ssl_certificate_by_ lua，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</code></pre>

<pre><code>
含义：对str字符串进行MD5加密，并返回十六进制的数据。

ngx.md5_bin
</code></pre>

<pre><code>语法：digest = ngx.md5_bin(str)

配置环境：set_by_lua，rewrite_by_lua，access_by_lua，content_by_lua，header_filter_ by_lua，body_filter_by_lua，log_by_lua，ngx.timer.，balancer_by_lua，ssl_certificate_by_ lua，ssl_session_fetch_by_lua*，ssl_session_store_by_lua*
</code></pre>

<pre><code>
含义：对str字符串进行MD5加密，并返回二进制的数据。

注意：ngx.escape_uri和ngx.unescape_uri作用相反，ngx.encode_args和ngx.decode_args的作用相反。

关于编码、解码操作的示例如下：
</code></pre>

<pre><code>server {
    listen       80;
    server_name  testnginx.com;
    default_type 'text/plain';
    location / {
       content_by_lua_block {
            local ngx = require "ngx";
            --对URI进行编码
            ngx.say(ngx.var.uri, '---ngx.escape_uri---',ngx.escape_uri(ngx.var.uri))

            --对已经编码过的URI进行解码
            ngx.say('%2Ftest%2Fa%2Fb%2Fc', '---ngx.unescape_uri---',ngx.unescape_uri('%2Ftest%2Fa%2Fb%2Fc'))

            --将Lua的table类型数据编码成字符串
            local args_table_new =  ngx.encode_args({a = 1, b = 2, c = 3 })
            ngx.say('{a = 1, b = 2, c = 3 }', '---ngx.encode_args---' ,args_table_new)

            --对URI编码的字符串进行解码，解码成table类型的数据
            local args = ngx.var.args
            local args_table = ngx.decode_args(args)
            ngx.say(args, '---ngx.decode_args---', 'a=',args_table["a"])  --获取table中的a的值
            --对URI进行MD5编码，返回十六进制数据
            ngx.say(ngx.var.uri, '---ngx.md5---',ngx.md5(ngx.var.uri))
            --对URI进行MD5编码，返回二进制数据   
            ngx.say(ngx.var.uri, '---ngx.md5_bin---',ngx.md5_bin(ngx.var.uri))
       }
    }
}
</code></pre>

<pre><code>
执行结果如下：
</code></pre>

<pre><code># curl  'http://testnginx.com/test/a/b/c?a=1&amp;b=2&amp;c=3'
/test/a/b/c---ngx.escape_uri---%2Ftest%2Fa%2Fb%2Fc
%2Ftest%2Fa%2Fb%2Fc---ngx.unescape_uri---/test/a/b/c
{a = 1, b = 2, c = 3 }---ngx.encode_args---b=2&amp;a=1&amp;c=3
a=1&amp;b=2&amp;c=3---ngx.decode_args---a=1
/test/a/b/c---ngx.md5---dfa371a9a8f52c9aadd016bda535fa43
/test/a/b/c---ngx.md5_bin---ߣq©¨
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
