<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~nginx | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~nginx/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx配置多个域名, http https共用配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy/"/>
    <updated>2024-03-01T20:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/03/01/nginx-proxy</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/dayq/p/17488471.html">https://www.cnblogs.com/dayq/p/17488471.html</a></p>

<p>vim /usr/local/openresty/nginx/conf/nginx.conf</p>

<p>域名 <code>s1.com</code>  <code>*.s1.com</code> 建议分开写两个?</p>

<p>如果需要多个域名共用端口则复制多个</p>

<p>增加回源地址 Proxy: &ldquo;$proxy_host&rdquo; &ldquo;$upstream_addr&rdquo;</p>

<pre><code>    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"'
                  ' Proxy: $upstream_response_time $proxy_host $upstream_addr $upstream_status $upstream_response_length';
        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }

        sendfile        on;
        tcp_nopush      on;
        tcp_nodelay     on;
        keepalive_timeout   65;
        types_hash_max_size 4096;
        #gzip  on;


        include     mime.types;
        default_type    application/octet-stream;


        server {
            listen  80;
            listen  443 ssl;
            server_name s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s1.com;

            ssl_certificate     /var/www/s1.com.pem;
            ssl_certificate_key /var/www/s1.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.1.11:11;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }



        server {
            listen  80;
            listen  443 ssl;
            server_name s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }

        server {
            listen  80;
            listen  443 ssl;
            server_name *.s2.com;

            ssl_certificate     /var/www/s2.com.pem;
            ssl_certificate_key /var/www/s2.com.key;

            client_max_body_size 200m;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            location / {
                proxy_pass https://192.168.2.22:22;
            }

            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   html;
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx中的timeout超时设置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/25/nginx-timeout/"/>
    <updated>2023-01-25T18:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/25/nginx-timeout</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/HD243608836/article/details/111564684">https://blog.csdn.net/HD243608836/article/details/111564684</a></p>

<p>nginx比较强大,可以针对单个域名请求做出单个连接超时的配置. </p>

<p>比如些动态解释和静态解释可以根据业务的需求配置</p>

<pre><code>    proxy_connect_timeout :后端服务器连接的超时时间_发起握手等候响应超时时间

    proxy_read_timeout:连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）

    proxy_send_timeout :后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
</code></pre>

<p>nginx使用proxy模块时，默认的读取超时时间是60s。</p>

<h3>1、请求超时</h3>

<pre><code>    http {
        include       mime.types;
        server_names_hash_bucket_size  512;     
        default_type  application/octet-stream;
        sendfile        on;

        keepalive_timeout  65;  #保持
        tcp_nodelay on;
        client_header_timeout 15;
        client_body_timeout 15;
        send_timeout 25;
        include vhosts/*.conf;
    }
</code></pre>

<h3>2、后端服务器处理请求的时间设置（页面等待服务器响应时间）</h3>

<pre><code>    location / {
        ...
        proxy_read_timeout 150;  # 秒
        ...
    }
</code></pre>

<h3>nginx常用的超时配置说明</h3>

<h4>client_header_timeout</h4>

<p>语法 client_header_timeout time</p>

<p>默认值 60s</p>

<p>上下文 http server</p>

<p>说明 指定等待client发送一个请求头的超时时间（例如：GET / HTTP/1.1）.仅当在一次read中，没有收到请求头，才会算成超时。如果在超时时间内，client没发送任何东西，nginx返回HTTP状态码408(“Request timed out”)</p>

<h4>client_body_timeout </h4>

<p>语法 client_body_timeout time</p>

<p>默认值 60s</p>

<p>上下文 http server location</p>

<p>说明 该指令设置请求体（request body）的读超时时间。仅当在一次readstep中，没有得到请求体，就会设为超时。超时后，nginx返回HTTP状态码408(“Request timed out”)</p>

<h4>keepalive_timeout </h4>

<p>语法 keepalive_timeout timeout [ header_timeout ]</p>

<p>默认值 75s</p>

<p>上下文 http server location</p>

<p>说明 第一个参数指定了与client的keep-alive连接超时时间。服务器将会在这个时间后关闭连接。可选的第二个参数指定了在响应头Keep-Alive: timeout=time中的time值。这个头能够让一些浏览器主动关闭连接，这样服务器就不必要去关闭连接了。没有这个参数，nginx不会发送Keep-Alive响应头（尽管并不是由这个头来决定连接是否“keep-alive”）</p>

<p>两个参数的值可并不相同</p>

<pre><code>        注意不同浏览器怎么处理“keep-alive”头
        MSIE和Opera忽略掉"Keep-Alive: timeout=&lt;N&gt;" header.
        MSIE保持连接大约60-65秒，然后发送TCP RST
        Opera永久保持长连接
        Mozilla keeps the connection alive for N plus about 1-10 seconds.
        Konqueror保持长连接N秒
</code></pre>

<h4>lingering_timeout</h4>

<p>语法 lingering_timeout time</p>

<p>默认值 5s</p>

<p>上下文 http server location</p>

<p>说明 lingering_close生效后，在关闭连接前，会检测是否有用户发送的数据到达服务器，如果超过lingering_timeout时间后还没有数据可读，就直接关闭连接；否则，必须在读取完连接缓冲区上的数据并丢弃掉后才会关闭连接。</p>

<h4>resolver_timeout</h4>

<p>语法 resolver_timeout time </p>

<p>默认值 30s</p>

<p>上下文 http server location</p>

<p>说明 该指令设置DNS解析超时时间</p>

<h4>proxy_connect_timeout</h4>

<p>语法 proxy_connect_timeout time </p>

<p>默认值 60s</p>

<p>上下文 http server location</p>

<p>说明 该指令设置与upstream server的连接超时时间，有必要记住，这个超时不能超过75秒。</p>

<p>这个不是等待后端返回页面的时间，那是由proxy_read_timeout声明的。如果你的upstream服务器起来了，但是hanging住了（例如，没有足够的线程处理请求，所以把你的请求放到请求池里稍后处理），那么这个声明是没有用的，由于与upstream服务器的连接已经建立了。</p>

<h4>proxy_read_timeout</h4>

<p>语法 proxy_read_timeout time </p>

<p>默认值 60s</p>

<p>上下文 http server location</p>

<p>说明 该指令设置与代理服务器的读超时时间。它决定了nginx会等待多长时间来获得请求的响应。这个时间不是获得整个response的时间，而是两次reading操作的时间。</p>

<h4>proxy_send_timeout</h4>

<p>语法 proxy_send_timeout time </p>

<p>默认值 60s</p>

<p>上下文 http server location</p>

<p>说明 这个指定设置了发送请求给upstream服务器的超时时间。超时设置不是为了整个发送期间，而是在两次write操作期间。如果超时后，upstream没有收到新的数据，nginx会关闭连接</p>

<h4>proxy_upstream_fail_timeout（fail_timeout）</h4>

<p>语法 server address [fail_timeout=30s]</p>

<p>默认值 10s</p>

<p>上下文 upstream</p>

<p>说明 Upstream模块下 server指令的参数，设置了某一个upstream后端失败了指定次数（max_fails）后，该后端不可操作的时间，默认为10秒</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nignx log_format 日志时间格式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/23/nginx-log-time/"/>
    <updated>2022-11-23T13:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/23/nginx-log-time</id>
    <content type="html"><![CDATA[<p><a href="https://bnxb.com/nginx/27544.html">https://bnxb.com/nginx/27544.html</a></p>

<p>Nginx的默认访问日志的时间格式是：[08/Mar/2018:10:30:58 +0800]，由日志参数中的$time_local变量表示。</p>

<p>改成常用格式：2018-06-08 10:11:23</p>

<p>有两种方法，一种是修改源码，然后编译，一种是外挂lua来实现</p>

<h4>一、lua 方法</h4>

<p>不修改 nginx 源代码的，具体如下：</p>

<pre><code>    http {
        log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
                  ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$http_x_forwarded_for" - $remote_user';

        access_log  /var/log/nginx/access.log  main;

        map $host $fmt_localtime {
            default '';
        }
        log_by_lua_block {
            ngx.var.fmt_localtime = ngx.localtime();
        }
        ...
    }
</code></pre>

<p>代码的解释如下：</p>

<p>首先我们自定义一个nginx 变量 $fmt_localtime , 因为在http context不能够使用 set $variable。</p>

<p>所以我们采用map的方式如下</p>

<pre><code>    map $host $fmt_localtime {
        default '';
    }
</code></pre>

<p>2） 然后我们用 log_by_lua_block 设置 ngx.fmt_localtime 的时间</p>

<p>3) 设置日志格式 log_format使用 $fmt_localtime 作为时间参数</p>

<h4>二、修改nginx源代码</h4>

<p>需要修改的文件</p>

<p>src/core/nginx_times.c</p>

<p>src/http/modules/ngx_http_log_module.c</p>

<p>首先修改ngx_http_log_module.c文件：</p>

<pre><code>    ngx_string("time_iso8601"), sizeof("1970-09-28T12:00:00+06:00") - 1,
</code></pre>

<p>更改后</p>

<pre><code>    ngx_string("time_iso8601"), sizeof("1970-09-28 12:00:00") - 1,
</code></pre>

<p>然后修改nginx_times.c文件：</p>

<pre><code>    [sizeof("1970-09-28T12:00:00+06:00")];
</code></pre>

<p>更改后</p>

<pre><code>    [sizeof("1970-09-28 12:00:00")];
</code></pre>

<pre><code>    ngx_cached_http_log_iso8601.len = sizeof("1970-09-28T12:00:00+06:00") - 1;
</code></pre>

<p>更改为
<code>
    ngx_cached_http_log_iso8601.len = sizeof("1970-09-28 12:00:00") - 1;
</code></p>

<pre><code>    (void) ngx_sprintf(p3, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",
            tm.ngx_tm_year, tm.ngx_tm_mon,
            tm.ngx_tm_mday, tm.ngx_tm_hour,
            tm.ngx_tm_min, tm.ngx_tm_sec,
            tp-&gt;gmtoff &lt; 0 ? '-' : '+',
            ngx_abs(tp-&gt;gmtoff / 60), ngx_abs(tp-&gt;gmtoff % 60));
</code></pre>

<p>更改为</p>

<pre><code>    (void) ngx_sprintf(p3, "%4d-%02d-%02d %02d:%02d:%02d",
            tm.ngx_tm_year, tm.ngx_tm_mon,
            tm.ngx_tm_mday, tm.ngx_tm_hour,
            tm.ngx_tm_min, tm.ngx_tm_sec);
</code></pre>

<p>最后重新编译，并使用新的时间变量</p>

<p>将 nginx 配置文件中的 $time_local 改为 $time_iso8601 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nignx log_format 日志常用参数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/10/nginx-log/"/>
    <updated>2022-11-10T10:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/10/nginx-log</id>
    <content type="html"><![CDATA[<p>原始
```
    log_format  main  &lsquo;$remote_addr - $remote_user [$time_local] &ldquo;$request&rdquo; &rsquo;
              &lsquo;$status $body_bytes_sent &ldquo;$http_referer&rdquo; &rsquo;
              &lsquo;&ldquo;$http_user_agent&rdquo; &ldquo;$http_x_forwarded_for&rdquo;&rsquo;;</p>

<pre><code>167.94.146.58 - - [09/Nov/2022:05:05:14 +0800] "GET /images/splash/splash-icon.png HTTP/1.1" 404 1163 "-" "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)" "-"
</code></pre>

<pre><code>
改后
</code></pre>

<pre><code>log_format  main  '$time_local $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent - $remote_user '
          '"$host" "$request" "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

10/Nov/2022:10:32:58 +0800 192.168.100.41 49090 192.168.120.177 65123 404 1163 - - "192.168.100.41" "GET /images/splash/splash-icon.png HTTP/1.1" "-" "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0" "-"
</code></pre>

<pre><code>
再改后
</code></pre>

<pre><code>log_format  main  '$time_local $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
          ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$http_x_forwarded_for" - $remote_user';

20/Nov/2022:13:19:17 +0800 0.001 192.168.100.41 49090 183.136.225.45 58722 404 1163 GET HTTP/1.1 "np.cn" "/favicon.ico" "-" "-" "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE" "-" - -
</code></pre>

<pre><code>
再改时间格式、ssl
</code></pre>

<pre><code>log_format  main  '$fmt_localtime $request_time $server_addr $server_port $remote_addr $remote_port $status $body_bytes_sent $request_method $server_protocol'
          ' "$host" "$uri" "$query_string" "$http_referer" "$http_user_agent" "$ssl_protocol" "$ssl_cipher" "-" "$remote_user" "$http_x_forwarded_for"';

access_log  /var/log/nginx/access.log  main;

map $host $fmt_localtime {
    default '';
}
log_by_lua_block {
    ngx.var.fmt_localtime = ngx.localtime();
}

2022-11-25 17:15:07 0.046 192.168.100.141 17883 223.104.49.27 12492 200 3371 GET HTTP/1.1 "www.np.cn" "/login" "-" "-" "Mozilla/5.0 (Android 7.0; Mobile; rv:104.0) Gecko/104.0 Firefox/104.0" "TLSv1.2" "ECDHE-RSA-AES128-GCM-SHA256" "-" "-" "-"
</code></pre>

<pre><code>
------------------

https://www.cnblogs.com/funcquery/p/16026830.html

https://www.88ksk.cn/blog/145.html
</code></pre>

<pre><code>$remote_addr:记录访问网站的客户端地址
$remote_user:远程客户端用户名称
$time_local:记录访问时间与时区
$request:表示request请求头的行
$status:http状态码，记录请求返回的状态，例如：200、404、301等
$body_bytes_sent:服务器发送给客户端的响应body字节数
$http_referer:记录此次请求是从哪个链接访问过来的，可以根据refer进行防盗链设置
$http_user_agent:记录客户端访问信息，例如：浏览器，手机客户端等
$http_x_forwarded_for:当前端有代理服务器时，设置Web节点记录客户端地址的配置，此参数生效的前提是代理服务器上也进行了相关的http_x_forwarded_for设置
$ssl_protocol:SSL协议版本
$ssl_cipher:交换数据中的算法
$upstream_status:upstream状态
$upstream_addr:当ngnix做负载均衡时，可以查看后台提供真实服务的设备
$upstream_response_time:请求过程中，upstream响应时间
$request_time:整个请求的总时间
$args:这个变量等于请求行中的参数，同$query_string
$content_length:请求头中的Content-length字段。
$content_type:请求头中的Content-Type字段。
$document_root:当前请求在root指令中指定的值。
$host:请求主机头字段，否则为服务器名称。
$http_user_agent:客户端agent信息
$http_cookie:客户端cookie信息
$limit_rate:这个变量可以限制连接速率。
$request_method:客户端请求的动作，通常为GET或POST。
$remote_addr:客户端的IP地址。
$remote_port:客户端的端口。
$remote_user:已经经过Auth Basic Module验证的用户名。
$request_filename:当前请求的文件路径，由root或alias指令与URI请求生成。
$scheme:HTTP方法（如http，https）。
$server_protocol:请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
$server_addr:服务器地址，在完成一次系统调用后可以确定这个值。
$server_name:服务器名称。
$server_port:请求到达服务器的端口号。
$request_uri:包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。
$uri:不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。
$document_uri:与$uri相同。
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx解决sql注入]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/30/nginx-sqlmap/"/>
    <updated>2022-10-30T18:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/30/nginx-sqlmap</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/A_Apprentice/article/details/125861741">https://blog.csdn.net/A_Apprentice/article/details/125861741</a></p>

<ol>
<li><p>get请求好处理</p></li>
<li><p>post请求 由于需要拿到请求体，需要安装lua插件支持</p></li>
</ol>


<h4>errlog</h4>

<pre><code>    ngx.log(ngx.ERR, "error: ", body)

    tail -f /var/log/nginx/error.log
</code></pre>

<h4>当前方案 ：</h4>

<p>get在server级别处理</p>

<p>post在lication级别处理</p>

<pre><code>        # 文件上传的限制
        client_max_body_size 100m;

        if ($query_string ~* ".*('|--|union|insert|drop|truncate|update|(%20)from|grant|(%20)where|(%20)select|(%20)and|(%20)chr|(%20)mid|like|(%20)iframe|(%20)script|alert|webscan|dbappsecurity|style|WAITFOR|confirm|innerhtml|innertext|class).*") { return 403; }
            #if ($uri ~* (.*)(insert|select|delete|update|count|master|truncate|declare|\*|%|\')(.*)$ ) { return 403; }
            if ($http_user_agent ~ ApacheBench|WebBench|Jmeter|JoeDog|Havij|GetRight|TurnitinBot|GrabNet|masscan|mail2000|github|wget|curl) { return 444; }
            if ($http_user_agent ~ "Go-Ahead-Got-It") { return 444; }
            if ($http_user_agent ~ "GetWeb!") { return 444; }
            if ($http_user_agent ~ "Go!Zilla") { return 444; }
            if ($http_user_agent ~ "Download Demon") { return 444; }
            if ($http_user_agent ~ "Indy Library") { return 444; }
            if ($http_user_agent ~ "libwww-perl") { return 444; }
            if ($http_user_agent ~ "Nmap Scripting Engine") { return 444; }
            if ($http_user_agent ~ "Load Impact") { return 444; }
            if ($http_user_agent ~ "~17ce.com") { return 444; }
            if ($http_user_agent ~ "WebBench*") { return 444; }
            if ($http_referer ~* 17ce.com) { return 444; }
            if ($http_user_agent ~* qiyunce) { return 444; }
            if ($http_user_agent ~* YunGuanCe) { return 403; }
            if ($http_referer ~* WebBench*") { return 444; }
            if ($http_user_agent ~ "BLEXBot") { return 403; }
            if ($http_user_agent ~ "MJ12bot") { return 403; }
            if ($http_user_agent ~ "semalt.com") { return 403; }
            if ($http_user_agent ~ "sqlmap") { return 403; }

            #自动防护
        if ($request_uri ~* \.(htm|do)\?(.*)$) {
                set $req $2;
            }
            if ($req ~* "(cost\()|(concat\()") {
                return 503;
            }
            if ($req ~* "union[+|(%20)]") {
                return 503;
            }
            if ($req ~* "and[+|(%20)]") {
                return 503;
            }
            if ($req ~* "select[+|(%20)]") {
                return 503;
            }


            #溢出过滤
            if ($query_string ~ "(&lt;|%3C).*script.*(&gt;|%3E)") { return 403; }
            if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") { return 403; }
            if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") { return 403; }
            if ($query_string ~ "proc/self/environ") { return 403; }
            if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") { return 403; }
            if ($query_string ~ "base64_(en|de)code\(.*\)") { return 403; }

            #文件注入禁止
            if ($query_string ~ "[a-zA-Z0-9_]=http://") { return 403; }
            if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") { return 403; }
            if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") { return 403; }

            location / {

                lua_need_request_body on;
                access_by_lua_block {
                    local body = ngx.var.request_body
                    if ngx.var.request_method == "POST" and body ~= nil then
                        local regex0 = "(.*?((sqlwhere)|(c0-param0)).*?){1,}"
                        local m0 = ngx.re.match(body, regex0, "i")
                        local regex1 = "(.*?((insert)|(drop)|(truncate)|(update)|(grant)|(chr)|(webscan)|(dbappsecurity)|(WAITFOR)).*?){1,}"
                        local m1 = ngx.re.match(body, regex1, "i")
                        local regex2 = "(.*?((union)|(insert)|(drop)|(truncate)|(grant)|(chr)|(iframe)|(alert)|(webscan)|(dbappsecurity)|(style)|(WAITFOR)|(confirm)|(innerhtml)|(innertext)|(class)).*?){1,}"
                        local m2 = ngx.re.match(body, regex2, "i")
                        if (m0 and m1) or (not m0 and m2) then
                            ngx.log(ngx.ERR, "error: ", body)
                            ngx.status = 403
                            ngx.say('{"code": 403, "msg": "非法参数","ok": false,"runningTime": "0ms"}')
                        end
                    end

                    ngx.req.read_body()
                    local args, err = ngx.req.get_post_args()
                    if args then
                        for k, v in pairs(args) do
                           if k == "j_username" or k == "j_password" then
                               local regex = "(.*?((union)|(insert)|(drop)|(truncate)|(update)|(from)|(grant)|(where)|(select)|(chr)|(mid)|(like)|(iframe)|(script)|(alert)|(webscan)|(dbappsecurity)|(style)|(WAITFOR)|(confirm)|(innerhtml)|(innertext)|(class)).*?){1,}"
                               local m = ngx.re.match(v, regex, "i")
                               if m then
                                  ngx.log(ngx.ERR, "error: ", v)
                                  ngx.status = 403
                                  ngx.say('{"code": 403, "msg": "非法参数","ok": false,"runningTime": "0ms"}')
                               end
                           end
                       end
                    end
                }


                proxy_http_version 1.1;
                proxy_set_header Connection "";

                proxy_next_upstream http_502 error timeout invalid_header;
                proxy_pass http://192.168.100.199:8888;
                proxy_set_header Host $http_host;

                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
</code></pre>

<pre><code>            #自动防护
        if ($request_uri ~* \.(htm|do)\?(.*)$) {
                set $req $2;
            }
            if ($req ~* "(cost\()|(concat\()") {
                return 503;
            }
            if ($req ~* "union[+|(%20)]") {
                return 503;
            }
            if ($req ~* "and[+|(%20)]") {
                return 503;
            }
            if ($req ~* "select[+|(%20)]") {
                return 503;
            }
</code></pre>

<p> 1、这里之所以使用$request_uri而未使用$query_string变量，因为通过$request_uri进行rewrite分割更精准。</p>

<p> 2、%20代表的是空格，同上文不的是，我这里把上面的空格匹配进行了取消。这样像www.361way.com/aaa.do?select * from test之样的也可以进行匹配。</p>

<p> 3、上面的htm是伪静态，实际上同.do一样，也是动态文件。为了便于和静态文件进行区分，这里选择了htm而不是html。</p>

<p> 4、注意，最上面的url里面的\? ，这个也分重要。如果没有的话，www.361way.com/aaa.htm select * from test不会被过滤，而www.361way.com/aaa.htm?select * from test会被过滤。如果想将前面的也过滤，只需要把\? 取消即可。</p>

<p><a href="https://blog.csdn.net/remotesupport/article/details/11967851">https://blog.csdn.net/remotesupport/article/details/11967851</a></p>

<p><a href="https://blog.csdn.net/qq_34777982/article/details/125390989">https://blog.csdn.net/qq_34777982/article/details/125390989</a></p>

<p><a href="http://www.3qphp.com/linux/centos/2581.html">http://www.3qphp.com/linux/centos/2581.html</a></p>
]]></content>
  </entry>
  
</feed>
