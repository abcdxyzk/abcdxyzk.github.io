<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~smb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~smb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T15:25:29+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux之NFS详解, 文件共享]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/07/tools-nfs/"/>
    <updated>2022-11-07T20:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/07/tools-nfs</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/gengjian/p/15749636.html">https://www.cnblogs.com/gengjian/p/15749636.html</a></p>

<h4>什么是NFS？</h4>

<p>NFS 是 Network File System 的缩写及网络文件系统。 NFS 主要功能是通过局域网络让不同的主机系统之间可以共享文件或目录。</p>

<p>NFS 系统和 Windows 网络共享、网络驱动器类似, 只不过 windows 用于局域网, NFS 用于企业集群架构中, 如果是大型网站, 会用到更复杂的分布式文件系统FastDFS,glusterfs,HDFS</p>

<h4>NFS工作原理</h4>

<p>1.用户进程访问 NFS 客户端，使用不同的函数对数据进行处理</p>

<p>2.NFS 客户端通过 TCP/IP 的方式传递给 NFS 服务端</p>

<p>3.NFS 服务端接收到请求后，会先调用 portmap 进程进行端口映射。</p>

<p>4.nfsd 进程用于判断 NFS 客户端是否拥有权限连接 NFS 服务端。</p>

<p>5.Rpc.mount 进程判断客户端是否有对应的权限进行验证。</p>

<p>6.idmap 进程实现用户映射和压缩</p>

<p>7.最后 NFS 服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件。</p>

<p>注意: rpc 是一个远程过程调用，那么使用 nfs 必须有 rpc 服务</p>

<h4>1.3 前提条件</h4>

<p>1.nfs依赖于RPC服务来传递消息</p>

<p>2.NFS服务启动的端口号是随机的,启动之后会向本地的RCP注册</p>

<p>3.先启动RPC服务,再启动NFS服务</p>

<p>4.NFS和RPC之间的通讯是他们自己内部完成的,对于用户来说无感知</p>

<p>5.NFS客户端和服务端不会直接沟通,必须通过RPC服务传递消息</p>

<p>6.防火墙要开放RPC服务的端口</p>

<h2>二、NFS服务端部署实践</h2>

<h4>2.1 安装nfs</h4>

<pre><code>    yum install nfs-utils -y
</code></pre>

<h4>2.2 配置参数</h4>

<pre><code>    nfs 服务程序的配置文件为/etc/exports，需要严格按照共享目录的路径 允许访问的 NFS 客户端（共享权限参数）格式书写，定义要共享的目录与相应的权限，具体书写方式如下图所示
</code></pre>

<p>配置文件参数解释：</p>

<p>执行 man exports 命令，然后切换到文件结尾，可以快速查看如下样例格式：</p>

<table>
<thead>
<tr>
<th>nfs共享参数</th>
<th>参数作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>rw</td>
<td>读写权限 (常用)</td>
</tr>
<tr>
<td>ro</td>
<td>只读权限 (不常用)</td>
</tr>
<tr>
<td>root_squash</td>
<td>当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户 (不常用)</td>
</tr>
<tr>
<td>no_root_squash</td>
<td>当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员 (不常用)</td>
</tr>
<tr>
<td>all_squash</td>
<td>无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户 (常用)</td>
</tr>
<tr>
<td>no_all_squash</td>
<td>无论NFS客户端使用什么账户访问，都不进行压缩 (不常用)</td>
</tr>
<tr>
<td>sync</td>
<td>同时将数据写入到内存与硬盘中，保证不丢失数据 (常用)</td>
</tr>
<tr>
<td>async</td>
<td>优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据 (不常用)</td>
</tr>
<tr>
<td>anonuid</td>
<td>配置all_squash使用,指定NFS的用户UID,必须存在系统 (常用)</td>
</tr>
<tr>
<td>anongid</td>
<td>配置all_squash使用,指定NFS的用户GID,必须存在系统 (常用)</td>
</tr>
</tbody>
</table>


<h4>2.3 配置NFS服务端</h4>

<p>写入配置文件：注意！IP地址和后面的小括号没有空格</p>

<pre><code>    [root@nfs01 ~]# cat &gt; /etc/exports &lt;&lt;EOF
    /data 172.16.1.0/24(rw,sync,all_squash)
    EOF
</code></pre>

<p>创建数据目录和授权:</p>

<pre><code>    [root@nfs01 ~]# mkdir /data -p
    [root@nfs01 ~]# chown -R nfsnobody:nfsnobody /data/
</code></pre>

<h4>2.4 启动nfs</h4>

<pre><code>    [root@nfs01 ~]# systemctl start nfs-server.service
</code></pre>

<h4>2.5 检查命令</h4>

<pre><code>    [root@nfs01 ~]# showmount -e 172.16.1.31
    Export list for 172.16.1.31:
    /data 172.16.1.0/24
</code></pre>

<h4>2.6 加入开机自启动</h4>

<p>在使用 NFS 服务进行文件共享之前，需要使用 RPC（Remote Procedure Call 远程过程调用服务将 NFS 服务器的IP 地址和端口号信息发送给客户端。因此，在启动 NFS 服务之前，需要先重启并启用 rpcbind 服务程序,同时都加入开机自启动</p>

<pre><code>    [root@nfs01 ~]# systemctl enable rpcbind nfs-server
    [root@nfs01 ~]# systemctl restart rpcbind nfs-server
</code></pre>

<h4>2.7 客户端挂载命令</h4>

<p>客户端安装nfs服务十分简单，只需要安装nfs软件包即可</p>

<pre><code>    [root@backup ~]# yum install nfs-utils rpcbind -y
</code></pre>

<p>安装完成后只需要启动rpcbind，不需要启动nfs</p>

<pre><code>    [root@backup ~]# systemctl restart rpcbind
</code></pre>

<p>使用showmount命令查看nfs共享信息查询 NFS 服务器的远程共享信息，其输出格式为“共享的目录名称 允许使用客户端地址”。</p>

<pre><code>    [root@backup ~]# showmount -e 172.16.1.31
    Export list for 172.16.1.31:
    /data 172.16.1.0/24 
</code></pre>

<p>挂载命令: 创建挂载目录</p>

<p>在 NFS 客户端创建一个挂载目录, 使用 mount 命令并结合-t 参数, 指定要挂载的文件系统的类型, 并在命令后面写上服务器的 IP 地址, 以及服务器上的共享目录, 最后需要写上要挂载到本地系统(客户端)的目录</p>

<pre><code>    [root@backup ~]# mkdir /data -p
    [root@backup ~]# mount -t nfs 172.16.1.31:/data /data
</code></pre>

<p>查看是否挂载成功：</p>

<pre><code>    [root@backup ~]# df -h
    文件系统           容量  已用  可用 已用% 挂载点
    /dev/sda3           18G  1.9G   17G   11% /
    devtmpfs           480M     0  480M    0% /dev
    tmpfs              489M     0  489M    0% /dev/shm
    tmpfs              489M   32M  458M    7% /run
    tmpfs              489M     0  489M    0% /sys/fs/cgroup
    /dev/sda1         1014M  110M  905M   11% /boot
    tmpfs               98M     0   98M    0% /run/user/0
    172.16.1.31:/data   18G  1.9G   17G   11% /data
</code></pre>

<p>测试写入数据是否正常</p>

<pre><code>    [root@backup ~]# echo "111" &gt; /data/111.txt
    [root@backup ~]# cat /data/111.txt 
    oldzhang
</code></pre>

<p>写入开机自动挂载</p>

<pre><code>    [root@backup ~]# vim /etc/fstab 
    [root@backup ~]# tail -1 /etc/fstab       
    172.16.1.31:/data                         /data                   nfs     defaults        0 0
    [root@backup ~]# mount -a
    [root@backup ~]# df -h
    文件系统           容量  已用  可用 已用% 挂载点
    /dev/sda3           18G  1.9G   17G   11% /
    devtmpfs           480M     0  480M    0% /dev
    tmpfs              489M     0  489M    0% /dev/shm
    tmpfs              489M   32M  458M    7% /run
    tmpfs              489M     0  489M    0% /sys/fs/cgroup
    /dev/sda1         1014M  110M  905M   11% /boot
    tmpfs               98M     0   98M    0% /run/user/0
    172.16.1.31:/data   18G  1.9G   17G   11% /data
</code></pre>

<p>卸载命令：注意!卸载的时候如果提示”umount.nfs: /nfsdir: device is busy”先切换到其他目录再卸载</p>

<pre><code>    [root@backup ~]# umount /data/
</code></pre>

<p>强制卸载命令：</p>

<pre><code>    [root@backup ~]# umount -rl /data/
</code></pre>

<h3>2.8 NFS 权限验证</h3>

<h4>2.8.1 验证ro权限</h4>

<p>服务端配置：</p>

<pre><code>    [root@nfs01 ~]# cat /etc/exports
    /data 172.16.1.0/24(ro,sync,all_squash)
    [root@nfs01 ~]# systemctl restart nfs-server.service
    [root@nfs01 ~]# showmount -e 172.16.1.31
    Export list for 172.16.1.31:
    /data 172.16.1.0/24
</code></pre>

<p>客户端挂载：</p>

<pre><code>    [root@backup ~]# mount -t nfs 172.16.1.31:/data /data
    [root@backup ~]# df -h
    文件系统           容量  已用  可用 已用% 挂载点
    /dev/sda3           18G  1.9G   17G   11% /
    devtmpfs           480M     0  480M    0% /dev
    tmpfs              489M     0  489M    0% /dev/shm
    tmpfs              489M   38M  452M    8% /run
    tmpfs              489M     0  489M    0% /sys/fs/cgroup
    /dev/sda1         1014M  110M  905M   11% /boot
    tmpfs               98M     0   98M    0% /run/user/0
    172.16.1.31:/data   18G  1.9G   17G   11% /data
</code></pre>

<p>测试读取：</p>

<pre><code>    [root@backup ~]# cat /data/111.txt 
    111
</code></pre>

<p>写入测试：</p>

<pre><code>    [root@backup ~]# echo "backup" &gt; /data/111.txt 
    -bash: /data/111.txt: 权限不够
</code></pre>

<h4>2.8.2 验证all_squash、 anonuid、 anongid 权限</h4>

<p>服务端配置：</p>

<pre><code>    [root@nfs01 ~]# cat /etc/exports 
    /data 172.16.1.0/24(rw,sync,all_squash,anonuid=666,anongid=666)
</code></pre>

<p>服务端创建用户及授权：</p>

<pre><code>    [root@nfs01 ~]# useradd -s /sbin/nologin -M -u 666 -g 666 www
    [root@nfs01 ~]# id www
    uid=666(www) gid=666(www) 组=666(www)
</code></pre>

<p>重启NFS服务：</p>

<pre><code>    [root@nfs01 ~]# systemctl restart nfs-server.service
</code></pre>

<p>更改目录授权：</p>

<pre><code>    [root@nfs01 ~]# chown -R www:www /data/
    [root@nfs01 ~]# ls -ld /data/
    drwxr-xr-x 2 www www 35 7月  17 19:50 /data/
</code></pre>

<p>客户端操作:</p>

<pre><code>    [root@backup ~]# mount -t nfs 172.16.1.31:/data /data
    [root@backup ~]# ls -ld /data/
    drwxr-xr-x 2 666 666 35 7月  17 19:50 /data/
    [root@backup ~]# ll /data/
    总用量 4
    -rw-r--r-- 1 666 666 0 7月  17 19:50 123
    -rw-r--r-- 1 666 666 9 7月  17 19:46 111.txt
    [root@backup ~]# echo "111" &gt; /data/111.txt 
    [root@backup ~]# cat /data/111.txt                    
    oldzhangy
</code></pre>

<p>我们会发现依然可以写入，但是为了避免这种情况发生，建议客户端也创建相同uid gid的用户</p>

<pre><code>    [root@backup ~]# groupadd -g 666 www
    [root@backup ~]# useradd -s /sbin/nologin -M -u 666 -g 666 www
    [root@backup ~]# id www
    uid=666(www) gid=666(www) 组=666(www)
    [root@backup ~]# ls -ld /data/
    drwxr-xr-x 2 www www 35 7月  17 19:50 /data/
    [root@backup ~]# ll /data/    
    总用量 4
    -rw-r--r-- 1 www www  0 7月  17 19:50 123
    -rw-r--r-- 1 www www 10 7月  17 21:31 111.txt
</code></pre>

<p>查看nfs端口</p>

<pre><code>    [root@nfs01 ~]# rpcinfo -p
       program vers proto   port  service
        100000    4   tcp    111  portmapper
        100000    3   tcp    111  portmapper
        100000    2   tcp    111  portmapper
        100000    4   udp    111  portmapper
        100000    3   udp    111  portmapper
        100000    2   udp    111  portmapper
        100024    1   udp  43177  status
        100024    1   tcp  36750  status
        100003    3   tcp   2049  nfs
        100003    4   tcp   2049  nfs
        100227    3   tcp   2049  nfs_acl
        100003    3   udp   2049  nfs
        100003    4   udp   2049  nfs
        100227    3   udp   2049  nfs_acl
        100021    1   udp  41388  nlockmgr
        100021    3   udp  41388  nlockmgr
        100021    4   udp  41388  nlockmgr
        100021    1   tcp  43678  nlockmgr
        100021    3   tcp  43678  nlockmgr
        100021    4   tcp  43678  nlockmgr```
</code></pre>

<h3>firewall防火墙配置</h3>

<pre><code>    firewall-cmd --add-service=nfs --permanent
    firewall-cmd --add-service=mountd --permanent
    firewall-cmd --add-service=rpc-bind --permanent
    firewall-cmd --reload
</code></pre>

<h3>iptables防火墙配置</h3>

<p>启动NFS会开启如下端口：</p>

<pre><code>    1）portmapper 端口：111 udp/tcp；
    2）nfs/nfs_acl 端口：2049 udp/tcp；
    3）mountd 端口："32768--65535" udp/tcp
    4）nlockmgr 端口："32768--65535" udp/tcp
</code></pre>

<p>系统 RPC服务在 nfs服务启动时默认会给 mountd 和 nlockmgr 动态选取一个随机端口来进行通讯。</p>

<h4>1.查看NFS启动后的端口</h4>

<pre><code>    [root@nfs01 /opt/sersync]# rpcinfo -p
       program vers proto   port  service
        100000    4   tcp    111  portmapper
        100000    3   tcp    111  portmapper
        100000    2   tcp    111  portmapper
        100000    4   udp    111  portmapper
        100000    3   udp    111  portmapper
        100000    2   udp    111  portmapper
        100024    1   udp  43177  status
        100024    1   tcp  36750  status
        100003    3   tcp   2049  nfs
        100003    4   tcp   2049  nfs
        100227    3   tcp   2049  nfs_acl
        100003    3   udp   2049  nfs
        100003    4   udp   2049  nfs
        100227    3   udp   2049  nfs_acl
        100021    1   udp  41388  nlockmgr
        100021    3   udp  41388  nlockmgr
        100021    4   udp  41388  nlockmgr
        100021    1   tcp  43678  nlockmgr
        100021    3   tcp  43678  nlockmgr
        100021    4   tcp  43678  nlockmgr
</code></pre>

<h4>2.将随机的端口号设置固定</h4>

<pre><code>    [root@nfs01 ~]# vim /etc/sysconfig/nfs
    [root@nfs01 ~]# tail -5 /etc/sysconfig/nfs
    RQUOTAD_PORT=4001
    LOCKD_TCPPORT=4002
    LOCKD_UDPPORT=4002
    MOUNTD_PORT=4003
    STATD_PORT=4004
</code></pre>

<h4>3.重启nfs和rpc服务</h4>

<pre><code>    [root@nfs01 ~]# systemctl restart rpcbind.service nfs-server.service
</code></pre>

<h4>4.再次查看端口信息,发现端口号已经固定了</h4>

<pre><code>    [root@nfs01 ~]# rpcinfo -p
       program vers proto   port  service
        100000    4   tcp    111  portmapper
        100000    3   tcp    111  portmapper
        100000    2   tcp    111  portmapper
        100000    4   udp    111  portmapper
        100000    3   udp    111  portmapper
        100000    2   udp    111  portmapper
        100024    1   udp  43177  status
        100024    1   tcp  36750  status
        100005    1   udp   4003  mountd
        100005    1   tcp   4003  mountd
        100005    2   udp   4003  mountd
        100005    2   tcp   4003  mountd
        100005    3   udp   4003  mountd
        100005    3   tcp   4003  mountd
        100003    3   tcp   2049  nfs
        100003    4   tcp   2049  nfs
        100227    3   tcp   2049  nfs_acl
        100003    3   udp   2049  nfs
        100003    4   udp   2049  nfs
        100227    3   udp   2049  nfs_acl
        100021    1   udp   4002  nlockmgr
        100021    3   udp   4002  nlockmgr
        100021    4   udp   4002  nlockmgr
        100021    1   tcp   4002  nlockmgr
        100021    3   tcp   4002  nlockmgr
        100021    4   tcp   4002  nlockmgr
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux搭建samba文件共享服务器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/11/07/tools-smb/"/>
    <updated>2022-11-07T16:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/11/07/tools-smb</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_52270081/article/details/126379020">https://blog.csdn.net/weixin_52270081/article/details/126379020</a></p>

<p><a href="https://blog.51cto.com/chenguang/1606746">https://blog.51cto.com/chenguang/1606746</a></p>

<p><a href="http://www.adintr.com/article/blog/327">http://www.adintr.com/article/blog/327</a></p>

<p><a href="https://www.cnblogs.com/Maker-Liu/p/16591621.html">https://www.cnblogs.com/Maker-Liu/p/16591621.html</a></p>

<hr />

<h2>Samba 配置只能上传下载不能删除修改的方法</h2>

<p>让上传的文件不能修改, 只需要让上传的文件的权限里不包含写权限即可.</p>

<p>要让文件不能删除, 则涉及到文件父目录的写权限问题, 但是不能直接关闭父目录的写权限, 因为这样就不能在该目录下上传文件了.</p>

<p>解决方法是在父目录上设置 t 标志位, 这用用户就不能删除这个目录下不属于自己的文件, 所以还需要设置文件的所有者不能是上传的用户, 将其设置为 root 即可.</p>

<p>综上,</p>

<h4>1</h4>

<p>首先对共享的根目录设置 1777 权限, 所有者为 root, 然后配置文件 /etc/samba/smb.conf 里面的设置:</p>

<h4>2</h4>

<pre><code>    inherit owner = yes           # 上传的文件继承父目录的所有者, 而不是使用登录的账号名, 这样上传的文件的所有者都是 root 了.
    writable = yes                # 允许上传操作
    create mask = 1774            # 上传的文件没有写权限
    directory mask = 1777         # 上传的目录具有所有权限
    force directory mode = 1000   # 上传的目录设置 t 标志 
</code></pre>

<h4>3</h4>

<p>稍作修改, 去掉 inherit owner = yes  即可让用户可以删除自己上传的文件, 不能删除其他用户创建的文件</p>

<hr />

<p>如何做到将每个客户端的连接信息存放在单独的文件呢？在smb.conf文件中:
```
    log file = /var/log/samba/%m.log</p>

<pre><code>max log size = 5000 最大日志容量为 5000KB
</code></pre>

<pre><code>
通过log level参数来调整日志记录级别，级别越高，记录越详细。Samba使用LOG_DAEMON将日志级别分为10级，下表1列出常用的4级。
</code></pre>

<pre><code>类型      级别
LOG_ERR     0
LOG_WARNING 1
LOG_NOTICE  2
LOG_INFO    3
</code></pre>

<pre><code>
------------------

### 配置内核参数
</code></pre>

<pre><code>ulimit -n 16384

vi /etc/security/limits.conf

在最后加入以下内容

* - nofile 16384

tips: 这主要是避免在启动Samba时出现以下警告信息：

rlimit_max: increasing rlimit_max (1024) tominimum Windows limit (16384)
</code></pre>

<pre><code>

-------------------


## 一，samba的基本概念

在早期的网络世界中，文件数据在不同主机之间的传输大多是使用 ftp，但是使用ftp服务传输档案使得我们无法直接修改主机上面的档案数据。NFS服务可以实现在客户端的机器上直接使用服务器上面的文件，但是NFS主要在unix系列操作系统上使用。windows上面也有类似的文件系统，那就是cifs（Common Internet File system，通用internet文件系统），cifs的最简单的用途就是“网上邻居”，但是cifs只能让windows机器沟通。

所以，为了实现windows和unix系列系统之间能够相互沟通，就产生了samba服务。

SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。

Samba服务：是提供基于Linux和Windows的共享文件服务，服务端和客户端都可以是Linux或Windows操作系统。可以基于特定的用户访问，功能比NFS更强大。

### 二，samba的安装
</code></pre>

<pre><code>yum install samba samba-common

apt-get install samba samba-common
</code></pre>

<pre><code>
### 三，samba的基本配置

首先最简单的配置，找到一个文件夹作为共享文件，如：/ubuntu/home/share

1：更改share文件权限，授予所有权限
</code></pre>

<pre><code>chmoe 777 share
</code></pre>

<pre><code>
2：更改配置文件 /etc/samba/smb.conf
最后添加以下内容
</code></pre>

<pre><code>[share]
    comment = var www share
    path = /var/www/share
    public = yes
    writable = yes

    inherit owner = yes
    create mask = 1444
    directory mask = 1777
    force directory mode = 1000   # 上传的目录设置 t 标志
# valid users = smbtest,smbtest2 用户控制
</code></pre>

<pre><code>

保存退出，重启samba服务
</code></pre>

<pre><code>service smb restart
</code></pre>

<pre><code>
### 四，samba的账号权限配置

创建账号及密码
</code></pre>

<pre><code>useradd -d / -s /sbun/nologin smbtest2
</code></pre>

<pre><code>
由于Samba用户要以系统用户为基础，因而需要先创建出系统用户之后，再将其添加为Samba用户。
</code></pre>

<pre><code>smbpasswd -a smbtest2
</code></pre>

<pre><code>
由于不需要这些账号登录服务器权限，所以设置参数 /sbin/nologin。

可以通过执行 pdbedit -L命令列表显示目前系统中已经存在的所有Samba用户。
</code></pre>

<pre><code>pdbedit -L
</code></pre>

<pre><code>

### 一台电脑登录多个账号，会报错，


不允许一个用户使用一个以上用户名与一个服务器或共享资源的多重连接。中断与此服务器或共享资源的所有连接，然后再试一次

如果需要其他账号登录，断开原账号解决方法：

可使用以下命令断掉已有连接（开始 -&gt; cmd） 不要超级管理员
</code></pre>

<pre><code>net use * /del /y
</code></pre>

<p>```</p>

<h3>五，samba目录设置对指定用户可见</h3>

<p>有些情况设定，需要自己账号登录，只可见自己授权的目录，其他目录不可见。</p>

<p>例如：这里 /samba/PM 目录，只对登录pm账号用户可见。</p>

<p>1：global注释掉map to guest = bad user</p>

<p>打开编辑配置文件</p>

<p>在 [global] 下找到 map to guest = bad user，这个参数配置，是实现匿名无须交互输入用户名和密码的，登录IP访问时不需要输入用户名和密码了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看、挂载 window 共享 cifs]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/07/tools-base-smbclient/"/>
    <updated>2022-08-07T19:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/07/tools-base-smbclient</id>
    <content type="html"><![CDATA[<h4>挂载共享文件</h4>

<pre><code>    mount -t cifs -o username="administrator",password="123456" //192.168.100.191/bak 100.191_bak
</code></pre>

<h4>查看共享文件夹</h4>

<pre><code>    smbclient -L //192.168.100.191/ -U administrator%123456
</code></pre>

<h4>以用户身份登录</h4>

<p>以用户身份登录后，能像ftp用户一样，上传和下载文件，用put表示上传，get表示下载</p>

<pre><code>    smbclient //192.168.100.191/ -U administrator%123456
</code></pre>

<p>.smbclient命令说明</p>

<p>?或help 提供帮助</p>

<p>![shell command] 执行所用的shell命令</p>

<p>cd [目录] 切换服务器段指定目录</p>

<p>lcd [目录] 切换到客户端指定目录</p>

<p>dir 或 ls 列出当前目录下的文件</p>

<p>exit 或 quit 退出smbclient</p>

<p>get file1 file2 从服务器上下载文件file1，并以文件名file2保存在本地机上，如果不想改名可以把file2省略</p>

<p>mget file1 file2 file3 filen 从服务器上下载多个文件</p>

<p>md 或 mkdir 在服务器上创建目录</p>

<p>rd 或 rmdir 删除服务器目录</p>

<p>put file1 [file2] 想服务器上传一个文件file1，到服务器上改名为file2 mput file1 file2 filen 向服务器上传多个文件</p>

<hr />

<p><a href="https://blog.csdn.net/wangerge/article/details/1671959">https://blog.csdn.net/wangerge/article/details/1671959</a></p>

<p><a href="https://www.csdn.net/tags/MtzakgxsMzkyNDgtYmxvZwO0O0OO0O0O.html">https://www.csdn.net/tags/MtzakgxsMzkyNDgtYmxvZwO0O0OO0O0O.html</a></p>
]]></content>
  </entry>
  
</feed>
