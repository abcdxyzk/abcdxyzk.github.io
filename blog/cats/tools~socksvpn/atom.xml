<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~socksvpn | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~socksvpn/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-12-31T12:57:39+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu+SS]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-ss-run/"/>
    <updated>2021-06-06T22:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/06/tools-ss-run</id>
    <content type="html"><![CDATA[<h4>Shadows启动报错undefined symbol EVP_CIPHER_CTX_cleanup</h4>

<p>vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</p>

<p>cleanup替换为reset</p>

<h4>测试socks5命令：</h4>

<p>curl &ndash;socks5 192.168.8.107:8388 <a href="http://www.baidu.com/">http://www.baidu.com/</a></p>

<hr />

<p><a href="https://www.codetd.com/article/1418936">https://www.codetd.com/article/1418936</a></p>

<h4>1 安装</h4>

<pre><code>    sudo apt-get install python-pip
    pip install shadowsocks
</code></pre>

<h4>2 配置</h4>

<p>vim config.json
<code>
    {
        "server":"0.0.0.0",
        "port_password": {
            "8388": "your_password1",
            "8389": "your_password2"
        },
        "timeout":600,
        "method":"aes-256-cfb",
        "fast_open": false
    }
</code></p>

<h4>3. 启动</h4>

<pre><code>    ssserver -c config.json start

    ssserver -c config.json -d start
    ssserver -c config.json -d stop
</code></pre>

<h4>4. server</h4>

<p>vim /etc/systemd/system/shadowsocks.service</p>

<pre><code>    [Unit]
    Description=Shadowsocks
    After=network.target

    [Service]
    Type=forking
    PIDFile=/run/shadowsocks/server.pid
    PermissionsStartOnly=true
    ExecStartPre=/bin/mkdir -p /run/shadowsocks
    ExecStartPre=/bin/chown root:root /run/shadowsocks
    ExecStart=/usr/local/bin/ssserver --pid-file /var/run/shadowsocks/server.pid -c /etc/shadowsocks/config.json -d start
    Restart=on-abort
    User=root
    Group=root
    UMask=0027

    [Install]
    WantedBy=multi-user.target
</code></pre>

<p>设置文件权限：
<code>
    chmod 755 /etc/systemd/system/shadowsocks.service
</code></p>

<p>启动服务：
<code>
    systemctl start shadowsocks
    systemctl enable shadowsocks
</code></p>

<h4>5. 客户端</h4>

<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases">https://github.com/shadowsocks/shadowsocks-qt5/releases</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShadowSocks原理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-ss/"/>
    <updated>2021-06-06T22:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/06/tools-ss</id>
    <content type="html"><![CDATA[<p><a href="https://my.oschina.net/moziBlog/blog/3190520">https://my.oschina.net/moziBlog/blog/3190520</a></p>

<h4>ssh tunnel</h4>

<p>1、首先用户和服务器基于 ssh 建立起一条加密的通道</p>

<p>2、用户通过建立起的隧道进行代理，通过 ssh server 向真实的服务发起请求</p>

<p>3、服务通过 ssh server，再通过创建好的隧道返回给用户</p>

<p>ssh 本身就是基于RSA 加密技术，无法获取数据传输的过程中的加密数据内容。但由于ssh本身的特征是明显的，所以通过分析连接的特征能得出是ss。</p>

<h4>shadowsocks</h4>

<p>shadowsocks将原来ssh创建的 Socks5协议拆开成 server 端和 client 端</p>

<p>1、客户端发出的请求基于Socks5协议跟 ss-local 端进行通讯，返个 ss-local 一般是本机或是代理服务器</p>

<p>2、ss-local 和 ss-server两端通过多种可选的加密方法进行通讯，用常规的 TCP包。</p>

<p>3、ss-server 将收到的加密数据进行解密，还原原来的请求，再发送到用户需要访问的服务，获得响应原路返回</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOCKS5 协议]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-socks/"/>
    <updated>2021-06-06T21:44:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/06/tools-socks</id>
    <content type="html"><![CDATA[<p><a href="http://www.moye.me/2017/08/03/analyze-socks5-protocol/">http://www.moye.me/2017/08/03/analyze-socks5-protocol/</a></p>

<p>SOCKS5 协议并不负责代理服务器的数据传输环节，此协议只是在C/S两端真实交互之间，建立起一条从客户端到代理服务器的授信连接。来看看细节：</p>

<h3>协议流程</h3>

<p>从流程上来说，SOCKS5  是一个C/S 交互的协议，交互大概分为这么几步：</p>

<pre><code>    客户端发送认证协商
    代理服务器就认证协商进行回复（如拒绝则本次会话结束）
        如需GSSAPI或用户名/密码认证，客户端发送认证信息
        代理服务器就对应项进行鉴权，并进行回复或拒绝
    客户端发送希望连接的目标信息
    代理服务器就连接信息进行确认或拒绝
    【非协议内容】：代理服务器连接目标并 pipe 到客户端
</code></pre>

<h3>协议细节</h3>

<h4>1. 认证</h4>

<p>认证方法：
<code>
    0x00: NO AUTHENTICATION REQUIRED
    0x01: GSSAPI
    0x02: USERNAME/PASSWORD
    0x03: to X’7F’ IANA ASSIGNED
    0x80: to X’FE’ RESERVED FOR PRIVATE METHODS
    0xFF: NO ACCEPTABLE METHODS
</code></p>

<h4>1.1 客户端 -> 代理服务器，请求认证：</h4>

<table>
<tr><th>版本号(1字节)</th><th>可供选认证方法(1字节)</th><th>选择的方法(1~255字节)</th></tr>
<tr><td>固定为5</td><td>选了多少种</td><td>都有上表中哪些方法</td></tr>
</table>


<h4>1.2 代理服务器  -> 客户端，响应认证：</h4>

<table>
<tr><th>版本号(1字节)</th><th>确认认证的方法</th></tr>
<tr><td>固定为5</td><td>认证方法列表的某项：<br>
0x00，则无需客户端发送进一步认证的信息<br>
0x01，则需要客户端进行进一步认证，细节见 RFC1929<br>
0x01，则需要客户端进行进一步认证，细节见RFC2743<br>
0xFF，则相当于拒绝请求，客户端只能关闭连接<br>
</td></tr>
</table>


<h4>2. 请求信息</h4>

<h4>2.1 客户端 -> 代理服务器，发送目标信息：</h4>

<table>
<tr><th>版本号(1字节)</th><th>命令(1字节)</th><th>保留(1字节)</th><th>请求类型(1字节)</th><th>地址(不定长)</th><th>端口(2字节)</th></tr>
<tr><td>固定为5</td><td>0x01: CONNECT<br>
0x02: BIND<br>
0x03: UDP ASSOCIATE</td>
<td>固定为 0x00</td><td>0x01: IP V4 地址<br>
0x03: 域名<br>
0x04: IP V6 地址<br></td>
<td>如果请求类型是域名，<br>
第个1字节为
域名的长度</td><td></td></tr>
</table>


<p></p>

<p>命令字段说明：
<code>
    CONNECT:  用于客户端请求服务器进行代理
    BIND:  用于客户端向服务器上报自己的反向连接监听地址（应用场景如 FTP 下载，客户端需要接受来自服务器的连接
    UDP ASSOCIATE：用于请求建立到 UDP 数据报中继的连接
</code></p>

<h4>2.2 代理服务器 -> 客户端，确认连接：</h4>

<table>
<tr><th>版本号(1字节)</th><th>确认回应(1字节)</th><th>保留(1字节)</th><th>响应类型(1字节)</th><th>地址(不定长)</th><th>端口(2字节)</th></tr>
<tr><td>固定为5</td><td>0x00: succeeded<br>
0x01: general SOCKS server failure<br>
0x02: connection not allowed by ruleset<br>
0x03: Network unreachable<br>
0x04: Host unreachable<br>
0x05: Connection refused<br>
0x06: TTL expired<br>
0x07: Command not supported<br>
0x08: Address type not supported<br>
0x09: to X’FF’ unassigned</td>
<td>固定为 0x00</td>
<td>仅用于响应客<br>
户端BIND命令：<br>
0x01: IP V4 地址<br>
0x03: 域名<br>
0x04: IP V6 地址</td>
<td>仅用于响应客<br>
户端BIND命令：<br>
如果请求<br>
类型是域名，<br>
第个1字节为<br>
域名的长度<br>
</td>
<td>仅用于响应客<br>
户端BIND命令</td></tr>
</table>


<p>可以看出，在代理服务器确认回应为 0x00 时，此次 SOCKS5 协议协商部分顺利完成，宣告进入到数据传输阶段（也可以说，这之后发生的事已经与SOCKS5协议无关）。</p>
]]></content>
  </entry>
  
</feed>
