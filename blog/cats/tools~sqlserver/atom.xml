<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~sqlserver | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~sqlserver/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2023-01-24T19:27:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP 备份sqlserver]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/20/mssql-asp-dump-sqlserver/"/>
    <updated>2023-01-20T16:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/20/mssql-asp-dump-sqlserver</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yechuan/articles/84208.html">https://www.cnblogs.com/yechuan/articles/84208.html</a></p>

<h3>只有备份</h3>

<pre><code>    &lt;HTML&gt;
    &lt;HEAD&gt;
        &lt;TITLE&gt;SQL Server 数据库的备份&lt;/TITLE&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312"&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;
    &lt;form method="post" name=myform&gt;
    选择操作：&lt;INPUT TYPE="radio" NAME="act" id="act_backup" value="backup"&gt;&lt;label for=act_backup&gt;备份&lt;/label&gt;　
    &lt;input type="submit" value="确定"&gt;
    &lt;/form&gt;

    &lt;%

    dim sqlserver,sqlname,sqlpassword,sqlLoginTimeout,databasename,bak_file,act

    sqlserver = "127.0.0.1"     'sql服务器
    sqlname = "dbname"      '用户名
    sqlpassword = "passwd"      '密码
    sqlLoginTimeout = 15        '登陆超时
    databasename = "dbname"
    bak_file = Server.MapPath(".") &amp; "\np.sql"

    act = lcase(request("act"))
    if databasename = "" then
        response.write "input database name"
    else
        if act = "backup" then
            Set srv=Server.CreateObject("SQLDMO.SQLServer")
            srv.LoginTimeout = sqlLoginTimeout
            srv.Connect sqlserver,sqlname, sqlpassword
            Set bak = Server.CreateObject("SQLDMO.Backup")
            bak.Database=databasename
            bak.Devices=Files
            bak.Files=bak_file
            bak.SQLBackup srv
            if err.number&gt;0 then
                response.write err.number&amp;"&lt;font color=red&gt;&lt;br&gt;"
                response.write err.description&amp;"&lt;/font&gt;"
            end if
            Response.write "&lt;font color=green&gt;备份成功!&lt;/font&gt;"
        else
            Response.write "&lt;font color=red&gt;没有选择操作&lt;/font&gt;"
        end if
    end if
    %&gt;
    &lt;/BODY&gt;
    &lt;/HTML&gt;
</code></pre>

<h3>all</h3>

<pre><code>    &lt;HTML&gt;
    &lt;HEAD&gt;
        &lt;TITLE&gt;SQL Server 数据库的备份与恢复&lt;/TITLE&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312"&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;

    &lt;form method="post" name=myform&gt;
    选择操作：&lt;INPUT TYPE="radio" NAME="act" id="act_backup" value="backup"&gt;&lt;label for=act_backup&gt;备份&lt;/label&gt;　
    &lt;INPUT TYPE="radio" NAME="act" id="act_restore" value="restore"&gt;&lt;label for=act_restore&gt;恢复&lt;/label&gt;
    &lt;br&gt;数据库名：&lt;INPUT TYPE="text" NAME="databasename" value="&lt;%=request("databasename")%&gt;"&gt;
    &lt;br&gt;文件路径：&lt;INPUT TYPE="text" NAME="bak_file" value="c:\$1.bak"&gt;(备份或恢复的文件路径)&lt;br&gt;
    &lt;input type="submit" value="确定"&gt;
    &lt;/form&gt;

    &lt;%

    dim sqlserver,sqlname,sqlpassword,sqlLoginTimeout,databasename,bak_file,act

    sqlserver = "localhost"       'sql服务器
    sqlname = "sa"            '用户名
    sqlpassword = "sa"        '密码
    sqlLoginTimeout = 15      '登陆超时
    databasename = trim(request("databasename"))
    bak_file = trim(request("bak_file"))
    bak_file = replace(bak_file,"$1",databasename)
    act = lcase(request("act"))

    if databasename = "" then
        response.write "input database name"
    else
        if act = "backup" then
            Set srv=Server.CreateObject("SQLDMO.SQLServer")
            srv.LoginTimeout = sqlLoginTimeout
            srv.Connect sqlserver,sqlname, sqlpassword
            Set bak = Server.CreateObject("SQLDMO.Backup")
            bak.Database=databasename
            bak.Devices=Files
            bak.Files=bak_file
            bak.SQLBackup srv
            if err.number&gt;0 then
                response.write err.number&amp;"&lt;font color=red&gt;&lt;br&gt;"
                response.write err.description&amp;"&lt;/font&gt;"
            end if
            Response.write "&lt;font color=green&gt;备份成功!&lt;/font&gt;"
        elseif act = "restore" then
            '恢复时要在没有使用数据库时进行！
            Set srv=Server.CreateObject("SQLDMO.SQLServer")
            srv.LoginTimeout = sqlLoginTimeout
            srv.Connect sqlserver,sqlname, sqlpassword
            Set rest=Server.CreateObject("SQLDMO.Restore")
            rest.Action=0 ' full db restore
            rest.Database=databasename
            rest.Devices=Files
            rest.Files=bak_file
            rest.ReplaceDatabase=True 'Force restore over existing database
            if err.number&gt;0 then
                response.write err.number&amp;"&lt;font color=red&gt;&lt;br&gt;"
                response.write err.description&amp;"&lt;/font&gt;"
            end if
            rest.SQLRestore srv

            Response.write "&lt;font color=green&gt;恢复成功!&lt;/font&gt;"
        else
            Response.write "&lt;font color=red&gt;没有选择操作&lt;/font&gt;"
       end if
    end if

    %&gt;
    &lt;/BODY&gt;
    &lt;/HTML&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASPMyAdmin web管理sqlserver]]></title>
    <link href="http://abcdxyzk.github.io/blog/2023/01/20/mssql-aspmyadmin/"/>
    <updated>2023-01-20T16:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2023/01/20/mssql-aspmyadmin</id>
    <content type="html"><![CDATA[<p><a href="http://www.a1vbcode.com/app-3301.asp">http://www.a1vbcode.com/app-3301.asp</a></p>

<p><a href="/download/tools/ASPMyAdmin.zip">ASPMyAdmin.zip</a></p>

<p>备份数据库似乎会提示error</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将 varchar 转换为 varbinary]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/08/20/sqlserver-varbinary/"/>
    <updated>2022-08-20T16:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/08/20/sqlserver-varbinary</id>
    <content type="html"><![CDATA[<p><a href="https://qa.1r1g.com/sf/ask/1775450351/">https://qa.1r1g.com/sf/ask/1775450351/</a></p>

<pre><code>    SELECT CONVERT(VARBINARY(MAX), '0xFFD8FFE000', 1);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Server 图形化软件 Azure Data Studio]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/11/mssql-azure-studio/"/>
    <updated>2020-11-11T18:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/11/mssql-azure-studio</id>
    <content type="html"><![CDATA[<h4>安装libXScrnSaver</h4>

<pre><code>    yum install libXScrnSaver
</code></pre>

<h4>azuredatastudio 1.23</h4>

<p><a href="https://docs.microsoft.com/zh-cn/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15</a></p>

<pre><code>    wget https://sqlopsbuilds.azureedge.net/stable/d296b6397e0acfddc57e9085e736e084969cdaeb/azuredatastudio-linux-1.23.0.rpm
    rpm -ivh azuredatastudio-linux-1.23.0.rpm

    azuredatastudio
</code></pre>

<h4>azuredatastudio 1.13</h4>

<p><a href="https://blog.csdn.net/qq_38179971/article/details/102996923">https://blog.csdn.net/qq_38179971/article/details/102996923</a></p>

<pre><code>    wget https://azuredatastudiobuilds.blob.core.windows.net/releases/1.13.0/azuredatastudio-linux-1.13.0.tar.gz

    tar xf azuredatastudio-linux-1.13.0.tar.gz
    cd azuredatastudio-linux-x64
    ./azuredatastudio
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos7.4 上使用 SQL Server 2019]]></title>
    <link href="http://abcdxyzk.github.io/blog/2020/11/11/mssql-centos/"/>
    <updated>2020-11-11T18:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2020/11/11/mssql-centos</id>
    <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-red-hat?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-red-hat?view=sql-server-ver15</a></p>

<h2>安装 SQL Server</h2>

<p><a href="https://packages.microsoft.com/rhel/7/mssql-server-2019/">https://packages.microsoft.com/rhel/7/mssql-server-2019/</a></p>

<p><a href="https://packages.microsoft.com/rhel/7/mssql-server-2019/mssql-server-15.0.4073.23-4.x86_64.rpm">https://packages.microsoft.com/rhel/7/mssql-server-2019/mssql-server-15.0.4073.23-4.x86_64.rpm</a></p>

<h4>下载 Microsoft SQL Server 2019 Red Hat 存储库配置文件：</h4>

<pre><code>    sudo curl -o /etc/yum.repos.d/mssql-server.repo https://packages.microsoft.com/config/rhel/7/mssql-server-2019.repo
</code></pre>

<h4>运行以下命令以安装 SQL Server：</h4>

<pre><code>    sudo yum install -y mssql-server
</code></pre>

<h4>包安装完成后，运行 mssql-conf setup，按照提示设置 SA 密码并选择版本。</h4>

<pre><code>    sudo /opt/mssql/bin/mssql-conf setup
</code></pre>

<p>请确保为 SA 帐户指定强密码（最少 8 个字符，包括大写和小写字母、十进制数字和/或非字母数字符号）。</p>

<h4>完成配置后，验证服务是否正在运行：</h4>

<pre><code>    systemctl status mssql-server
</code></pre>

<h2>安装 SQL Server 命令行工具</h2>

<p>若要创建数据库，则需要使用可在 SQL Server 上运行 Transact-SQL 语句的工具进行连接。 以下步骤将安装 SQL Server 命令行工具：sqlcmd 和 bcp。</p>

<h4>下载 Microsoft Red Hat 存储库配置文件。</h4>

<pre><code>    sudo curl -o /etc/yum.repos.d/msprod.repo https://packages.microsoft.com/config/rhel/7/prod.repo
</code></pre>

<h4>如果安装了早期版本的 mssql-tools，请删除所有旧的 unixODBC 包。</h4>

<pre><code>    sudo yum remove unixODBC-utf16 unixODBC-utf16-devel
</code></pre>

<h4>运行以下命令，以使用 unixODBC 开发人员包安装 mssql-tools。 有关详细信息，请参阅安装 Microsoft ODBC Driver for SQL Server (Linux)。</h4>

<pre><code>    sudo yum install -y mssql-tools unixODBC-devel
</code></pre>

<p>为方便起见，向 PATH 环境变量添加 /opt/mssql-tools/bin/。 这样可以在不指定完整路径的情况下运行这些工具。 运行以下命令以修改登录会话和交互式/非登录会话的路径：</p>

<pre><code>    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' &gt;&gt; ~/.bash_profile
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' &gt;&gt; ~/.bashrc
    source ~/.bashrc
</code></pre>

<h2>本地连接</h2>

<p>以下步骤使用 sqlcmd 本地连接到新的 SQL Server 实例。</p>

<h4>使用 SQL Server 名称 (-S)，用户名 (-U) 和密码 (-P) 的参数运行 sqlcmd 。 在本教程中，用户进行本地连接，因此服务器名称为 localhost。 用户名为 SA，密码是在安装过程中为 SA 帐户提供的密码。</h4>

<pre><code>    sqlcmd -S localhost -U SA -P '&lt;YourPassword&gt;'
</code></pre>

<p>可以在命令行上省略密码，以收到密码输入提示。</p>

<p>如果以后决定进行远程连接，请指定 -S 参数的计算机名称或 IP 地址，并确保防火墙上的端口 1433 已打开。</p>

<p>如果成功，应会显示 sqlcmd 命令提示符：1>。</p>

<h2>创建和查询数据</h2>

<p>下面各部分将逐步介绍如何使用 sqlcmd 新建数据库、添加数据并运行简单查询。</p>

<h4>新建数据库</h4>

<p>以下步骤创建一个名为 TestDB 的新数据库。</p>

<p>在 sqlcmd 命令提示符中，粘贴以下 Transact-SQL 命令以创建测试数据库：</p>

<pre><code>    CREATE DATABASE TestDB
</code></pre>

<p>在下一行中，编写一个查询以返回服务器上所有数据库的名称：</p>

<pre><code>    SELECT Name from sys.Databases
</code></pre>

<p>前两个命令没有立即执行。 必须在新行中键入 GO 才能执行以前的命令：
<code>
    GO
</code></p>

<p>提示</p>

<p>若要详细了解如何编写 Transact-SQL 语句和查询，请参阅教程：编写 Transact-SQL 语句。</p>

<h4>插入数据</h4>

<p>接下来创建一个新表 Inventory，然后插入两个新行。</p>

<p>在 sqlcmd 命令提示符中，将上下文切换到新的 TestDB 数据库：</p>

<pre><code>    USE TestDB
</code></pre>

<p>创建名为 Inventory 的新表：</p>

<pre><code>    CREATE TABLE Inventory (id INT, name NVARCHAR(50), quantity INT)
</code></pre>

<p>将数据插入新表：</p>

<pre><code>    INSERT INTO Inventory VALUES (1, 'banana', 150); INSERT INTO Inventory VALUES (2, 'orange', 154);
</code></pre>

<p>要执行上述命令的类型 GO：</p>

<pre><code>    GO
</code></pre>

<h4>选择数据</h4>

<p>现在，运行查询以从 Inventory 表返回数据。</p>

<p>通过 sqlcmd 命令提示符输入查询，以返回 Inventory 表中数量大于 152 的行：</p>

<pre><code>    SELECT * FROM Inventory WHERE quantity &gt; 152;
</code></pre>

<p>执行此命令：</p>

<pre><code>    GO
</code></pre>

<h4>退出 sqlcmd 命令提示符</h4>

<p>要结束 sqlcmd 会话，请键入 QUIT：
<code>
    QUIT
</code></p>

<h2>sqlcmd</h2>

<pre><code>    sqlcmd -U SA  -P password -Q“SQL语句”  执行完退出
</code></pre>

<h4>备份语句</h4>

<p>备份数据库名为test
<code>
    sqlcmd -U SA  -P password -Q“BACKUP DATABASE test TO  DISK='/tmp/test.bak' with format ,init”
</code></p>

<h4>使用sqlcmd 命令还原</h4>

<p>例如还原数据库test</p>

<pre><code>    sqlcmd -U SA -P password  -Q "RESTORE DATABASE  test FROM  DISK='/tmp/sqlserver/test.bak' WITH REPLACE"
</code></pre>

<h4>master 数据库特殊，需要在单用户模式下备份</h4>

<p>方法停止sqlserver数据库，已单用户模式启动数据库</p>

<pre><code>    /opt/mssql/bin/sqlservr  -m"SQLCMD"   
</code></pre>

<p>然后在执行还原命令即可</p>
]]></content>
  </entry>
  
</feed>
