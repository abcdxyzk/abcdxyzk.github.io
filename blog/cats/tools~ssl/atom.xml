<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~ssl | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~ssl/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-13T12:10:10+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[https传输过程及原理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2022/09/20/tools-https/"/>
    <updated>2022-09-20T20:56:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2022/09/20/tools-https</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_67373568/article/details/125332615">https://blog.csdn.net/m0_67373568/article/details/125332615</a></p>

<h2>一、HTTPS</h2>

<p>HTTP协议：超文本传输协议，明文传输，客户端与Web服务器间的应用层通信协议。</p>

<p>HTTPS协议：HTTP+SSL/TLS，即HTTP下加入SSL层，使用SSL加密，用于安全的HTTP传输，https默认使用端口443。</p>

<p>SSL：安全套接字层，位于可靠的面向连接的网络层协议。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。具有数据加密和身份验证的功能。</p>

<p>TLS：安全传输层协议、对SSL扩展和优化，提供数据安全的同时，确保数据的完整性。</p>

<p><img src="/images/tools/20220920-20.png" alt="" /></p>

<h4>https流程：</h4>

<p>https作为一种安全的应用层协议，使用了以下三种加密手段：</p>

<p>数据正文数据量较大，适用于对称加密，因为对称加密速度快，适用于大量数据加密，但是安全级别低，密钥在网络中传输的过程中容易被窃取，所以对这个密钥进行非对称加密。</p>

<p>最后由于非对称加密的公钥在网络中传输，保证接收方接收到正确的公钥，使用证书验证：</p>

<p><img src="/images/tools/20220920-21.png" alt="" /></p>

<p>1、客户端发送HTTPS请求。</p>

<p>2、服务器收到请求后，返回数字证书（数字签名+公钥）。</p>

<p>3、客户端验证证书是否合法（用服务端的公钥验签），不合法则提示警告。</p>

<p>4、验证合法后，本地生成密钥（对称加密密钥）并用服务端的提供的公钥加密后发送给服务端。</p>

<p>5、服务端用自己的私钥对数据解密，得到客户端密钥（对称加密密钥），再用客户端密钥对要发送的数据进行加密后发给客户端。</p>

<h4>总结：</h4>

<p>发送https请求后，先验证CA证书是否和好，再生成本地密钥（对称密钥），使用服务端公钥加密对称密钥再发送服务端。服务端用自己的私钥解密后，取得对称密钥，此时就可以数据传输了，服务端用对称密钥对请求数据加密，发送给客户端，客户端收到后用对称密钥解密拿到明文。</p>

<p>用基于数字证书的非对称加密 加密 对称加密的密钥后  加密传输数据。</p>

<h2>一、加密方式</h2>

<h4>1、对称加密：</h4>

<p>私钥加密，信息的发送方和接收方使用同一个密钥加密和解密数据。</p>

<p><img src="/images/tools/20220920-22.jpeg" alt="" /></p>

<h4>2、非对称加密：</h4>

<p>生成两把密钥公钥和私钥。私钥自己保存，公钥用于公开。可以用公钥和私钥中任何一个进行加密，另一个解密。</p>

<p>具体有两种情形：</p>

<p>（1）对方用你的公钥加密信息，你收到后用私钥解开。</p>

<p>只有你有私钥，所以只有你能解开，换句话说，有私钥才能看到信息，很安全。</p>

<p><img src="/images/tools/20220920-23.jpeg" alt="" /></p>

<p>（2）你拿私钥加密信息，对方收到后用你的公钥解开。</p>

<p>公钥是公开的，所以其他人也可以看到你的信息，不保密。</p>

<p>私钥加密，只有对应公钥能解开。既然用你的公钥能解开，说明加密一定是你的私钥。私钥只有你有，所以一定是你发送的，你不可抵赖。</p>

<p><img src="/images/tools/20220920-24.jpeg" alt="" /></p>

<p>这里的私钥加密指的是私钥签名，公钥验签</p>

<p><img src="/images/tools/20220920-25.jpeg" alt="" /></p>

<p>但是这样存在一个问题，窃听者也可以冒充客户端Bob给服务器Alice送信，因为Alice的公钥是公开的，这样就无法分辨哪个是真Bob的送信。</p>

<h4>3、数字签名：</h4>

<p>为了表明信息没有伪造，确实是信息拥有者发出。可以使用数字签名。</p>

<p>客户端Bob生成一对私钥、公钥。用自己的私钥对消息加密作为签名，再与消息一起发送，接收者用Bob的公钥验签。</p>

<p>窃听者窃取冒充Bob的签名篡改内容也没用，因为内容发生改变时，对应的签名也要重新计算，签名的生成必须使用私钥，只要私钥不泄露，签名就不会被冒充。</p>

<p><img src="/images/tools/20220920-26.jpeg" alt="" /></p>

<p>但是数字签名只是能验证发送方身份，未对报文进行加密。窃听者截取到密文并指定发送者的身份时，可通过查阅手册即可获得发送者的公钥PKA，就可以窃听报文的内容。</p>

<h4>4、数字证书（公钥的数字签名）：</h4>

<p>发送方可以去证书中心CA为公钥做认证，证书中心用自己的私钥，对需要加密的公钥和一些相关信息一起加密，生成"数字证书"。</p>

<p><img src="/images/tools/20220920-27.png" alt="" /></p>

<p>这样接收方就可以防止收到假的公钥，接收方收到带有数字证书的消息后，用CA的公钥先解开数字证书，就可以拿到发送方真实的公钥了。</p>

<h4>5、非对称算法的数字签名：</h4>

<p>即实现数字签名又加密传输，就可以使用A私钥签名B公钥加密的方法。</p>

<p><img src="/images/tools/20220920-28.png" alt="" /></p>

<p>发送者使用自己的私钥对消息加密作为签名，再使用接收方的公钥对消息进行加密，接收方使用自己的私钥进行解密后，再对签名进行验签。</p>

<h4>6、hash算法的数字签名（摘要+数字签名）：</h4>

<p>一般而言，不会直接对数据本身计算数字签名，因为数字签名属于非对称加密，非对称加密依赖于复杂的数学运算，耗时久。所以使用摘要，并且摘要最好是不可逆转的，一般使用开头MD5作为Hash函数，MD5输出的结果固定位128位。</p>

<p>并且要对数据的「摘要」进行签名，这样，窃听者就算解开签名，拿到的也是「摘要」，如果摘要是不可逆转的，也就是无法从摘要反推出原文，也就达到了保密的作用。</p>

<p>首先将原数据进行Hash计算，得到摘要，再对摘要私钥加密生成数字签名。再与原文件一起发送。接收方收到后先用A的公钥对数字签名解密得到摘要1，证明确实是A发送，再对原文进行相同的hash计算得到摘要2，再进行比较，一致则证明消息未被篡改过。</p>

<p><img src="/images/tools/20220920-29.png" alt="" /></p>

<p>但是若是窃听者将自己的公钥换走了发送方的公钥，再冒充发送方给B发送消息，用自己的私钥做成假的签名，此时接收方无法判断哪个是真正的消息。</p>

<h4>总结：</h4>

<p>对称加密：同一个密码加密解密。</p>

<p>非对称加密：私钥加密，公钥解密或者私钥加密，公钥解密。</p>

<p>摘要：对消息hash计算生成摘要。</p>

<p>数字签名：私钥加密消息作为签名，再与源文件一起发送。</p>

<p>数字证书：证书中心对验签的公钥进行加密，生成数字证书。用CA的公钥解密得到加密的公钥。</p>

<p>hash算法的数字签名：对消息hash计算后再私钥加密生成数字签名。数字签名+原文件一起发送。接收方再进行比较。</p>

<p>非对称加密的数字签名：发送用私钥加密得到数字签名，再使用接收方的公钥加密原文，一起发送，接收方使用发送方的公钥验签，证明是本人发送，再使用私钥解密原文，进行比较。一致则未被篡改。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssl SNI(Server Name Indication)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/08/tools-sni/"/>
    <updated>2021-06-08T21:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/08/tools-sni</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/makenothing/article/details/53292335">https://blog.csdn.net/makenothing/article/details/53292335</a></p>

<h2>Server Name Indication（SNI）</h2>

<p>SNI (Server Name Indication)是用来改善服务器与客户端 SSL (Secure Socket Layer)和 TLS (Transport Layer Security) 的一个扩展。主要解决一台服务器只能使用一个证书(一个域名)的缺点，随着服务器对虚拟主机的支持，一个服务器上可以为多个域名提供服务，因此SNI必须得到支持才能满足需求。</p>

<h2>SNI产生背景</h2>

<p>SSL以及TLS（SSL的升级版）为客户端与服务器端进行安全连接提供了条件。但是，由于当时技术限制，SSL初期的设计顺应经典的公钥基础设施 PKI(Public Key Infrastructure)设计，PKI 认为一个服务器只为一个域名提供服务，从而一个服务器上也就只能使用一个证书。这样客户端在发送请求的时候，利用DNS域名解析，只要向解析到的IP地址（服务器地址）发送请求，然后服务器将自身唯一的证书返回回来，交给客户端验证，验证通过，则继续进行后续通信。然后通过协商好的加密通道，获得所需要的内容。这意味着服务器可以在 SSL 的启动动阶段发送或提交证书，因为它知道它在为哪个特定的域名服务。</p>

<p>随着HTTP 服务器开启虚拟主机支持后，每个服务器通过相同的IP地址可以为很多域名提供服务。这种为虚拟主机提供通信安全的简单途径，却经常导致使用了错误的数字证书，因为服务器端无法知道客户端到底请求的是哪个域名下的服务，从而导致浏览器对用户发出警告。</p>

<p>不幸的是，当设置了 SSL加密，服务器在读取HTTP请求里面的域名之前已经向客户端提交了证书，也就是已经为默认域提供了服务。但是，一个服务器可能为上千个域名提供服务，不可能将所有证书都发送给客户端，让客户端一一验证，找到与请求域名对应的证书。SNI的设计目的是为了让服务器根据请求来决定为哪个域服务，这个信息通常从HTTP请求头获得。</p>

<h2>SSL/TLS握手</h2>

<p>熟悉SSL/TLS握手过程的都知道，主要经过以下几个过程：
基于RSA握手和密钥交换的客户端验证服务器为示例详解TLS/SSL握手过程。</p>

<p><img src="/images/tools/20210608-21.jpeg" alt="" /></p>

<h3>1 C->S:client_hello</h3>

<p>  客户端发起请求，以明文传输请求信息，包含版本信息，加密套件候选列表，压缩算法候选列表，随机数，扩展字段等信息。</p>

<p>SSL/STL版本支持的最高TSL协议版本version，从低到高依次 SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2，当前基本不再使用低于 TLSv1 的版本;</p>

<p>客户端支持的加密套件 cipher suites 列表， 每个加密套件对应前面 TLS 原理中的四个功能的组合：认证算法 Au (身份验证)、密钥交换算法 KeyExchange(密钥协商)、对称加密算法 Enc (信息加密)和信息摘要 Mac(完整性校验);</p>

<p>支持的压缩算法 compression methods 列表，用于后续的信息压缩传输;</p>

<p>随机数 random_C，用于后续的密钥的生成;</p>

<p>扩展字段 extensions，支持协议与算法的相关参数以及其它辅助信息等，常见的 SNI 就属于扩展字段，后续单独讨论该字段作用。</p>

<h3>2 server_hello+server_certificate+sever_hello_done</h3>

<p>server_hello, 服务端返回协商的信息结果，包括选择使用的协议版本 version，选择的加密套件 cipher suite，选择的压缩算法 compression method、随机数 random_S 等，其中随机数用于后续的密钥协商;</p>

<p>server_certificates, 服务器端配置对应的证书链，用于身份验证与密钥交换;</p>

<p>server_hello_done，通知客户端 server_hello 信息发送结束;</p>

<h3>3 证书校验</h3>

<p>客户端验证证书的合法性，如果验证通过才会进行后续通信，否则根据错误情况不同做出提示和操作，合法性验证包括如下：</p>

<p>证书链的可信性 trusted certificate path，方法如前文所述;</p>

<p>证书是否吊销 revocation，有两类方式离线 CRL 与在线 OCSP，不同的客户端行为会不同;</p>

<p>有效期 expiry date，证书是否在有效时间范围;</p>

<p>域名 domain，核查证书域名是否与当前的访问域名匹配，匹配规则后续分析;</p>

<h3>4 client_key_exchange+change_cipher_spec+encrypted_handshake_message</h3>

<p>client_key_exchange，合法性验证通过之后，客户端计算产生随机数字 Pre-master，并用证书公钥加密，发送给服务器;</p>

<p>此时客户端已经获取全部的计算协商密钥需要的信息：两个明文随机数 random_C 和 random_S 与自己计算产生的 Pre-master，计算得到协商密钥;</p>

<p>enc_key=Fuc(random_C, random_S, Pre-Master)</p>

<p>change_cipher_spec，客户端通知服务器后续的通信都采用协商的通信密钥和加密算法进行加密通信;</p>

<p>encrypted_handshake_message，结合之前所有通信参数的 hash 值与其它相关信息生成一段数据，采用协商密钥 session secret 与算法进行加密，然后发送给服务器用于数据与握手验证;</p>

<h3>5 change_cipher_spec+encrypted_handshake_message</h3>

<p>服务器用私钥解密加密的 Pre-master 数据，基于之前交换的两个明文随机数 random_C 和 random_S，计算得到协商密钥:enc_key=Fuc(random_C, random_S, Pre-Master);</p>

<p>计算之前所有接收信息的 hash 值，然后解密客户端发送的 encrypted_handshake_message，验证数据和密钥正确性;</p>

<p>change_cipher_spec, 验证通过之后，服务器同样发送 change_cipher_spec 以告知客户端后续的通信都采用协商的密钥与算法进行加密通信;</p>

<p>encrypted_handshake_message, 服务器也结合所有当前的通信参数信息生成一段数据并采用协商密钥 session secret 与算法加密并发送到客户端;</p>

<h3>6 握手结束</h3>

<p>客户端计算所有接收信息的 hash 值，并采用协商密钥解密 encrypted_handshake_message，验证服务器发送的数据和密钥，验证通过则握手完成;</p>

<h3>7 加密通信</h3>

<p>开始使用协商密钥与算法进行加密通信。</p>

<p>由以上过程可以知道，没有SNI的情况下，服务器无法预知客户端到底请求的是哪一个域名的服务。</p>

<h3>SNI 应用</h3>

<p>SNI的TLS扩展通过发送虚拟域的名字做为TSL协商的一部分修正了这个问题，在Client Hello阶段，通过SNI扩展，将域名信息提前告诉服务器，服务器根据域名取得对应的证书返回给客户端已完成校验过程。</p>

<h3>curl</h3>

<p>Linux中主要的网络交互工具，curl 7.18.1+ &amp; openssl 0.9.8j+ 可以支持SNI，CentOS6.5及以下都是curl 7.15 不支持SNI，curl 7.21.3 又支持了–resolve 参数，可以直接定位到IP地址进行访问，对于一个域名有多个部署节点的服务来说，这个参数可以定向的访问某个设备。基本语法为：</p>

<pre><code>    Example:
       curl -k -I --resolve www.example.com:80:192.0.2.1 https://www.example.com/index.html
</code></pre>

<h3>WireShark抓包验证SNI</h3>

<p>使用curl7.15 （不支持SNI）抓包结果：</p>

<p><img src="/images/tools/20210608-22.jpeg" alt="" /></p>

<p>使用curl7.43（支持SNI）抓包结果：</p>

<p><img src="/images/tools/20210608-23.jpeg" alt="" /></p>

<p>可以看到，使用curl7.15抓包得到的数据无SNI扩展，而是用curl7.43抓包得到的数据，包含SNI扩展，其中包含host信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSL协议握手过程报文解析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/08/tools-ssl/"/>
    <updated>2021-06-08T21:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/08/tools-ssl</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tterminator/article/details/50675540">https://blog.csdn.net/tterminator/article/details/50675540</a></p>

<h4>SSL建立握手连接目的：</h4>

<p>1.身份的验证，client与server确认对方是它相连接的，而不是第三方冒充的，通过证书实现</p>

<p>2.client与server交换session key，用于连接后数据的传输加密和hash校验</p>

<h4>简单的SSL握手连接过程(仅Server端交换证书给client)：</h4>

<p>1.client发送ClientHello，指定版本，随机数(RN)，所有支持的密码套件(CipherSuites)</p>

<p>2.server回应ServerHello，指定版本，RN，选择CipherSuites，会话ID(Session ID)</p>

<p>3.server发送Certificate</p>

<p>4.Server发送ServerHelloDone</p>

<p>5.Client发送ClientKeyExchange，用于与server交换session key</p>

<p>6.Client发送ChangeCipherSpec，指示Server从现在开始发送的消息都是加密过的</p>

<p>7.Client发送Finishd，包含了前面所有握手消息的hash，可以让server验证握手过程是否被第三方篡改</p>

<p>8.Server发送ChangeCipherSpec，指示Client从现在开始发送的消息都是加密过的</p>

<p>9.Server发送Finishd，包含了前面所有握手消息的hash，可以让client验证握手过程是否被第三方篡改，并且证明自己是Certificate密钥的拥有者，即证明自己的身份</p>

<p>下面从抓包数据来具体分析这一过程并说明各部分数据的作用以及如实现前面列出的握手的目标，当然了，最重要的还是说明为何这一过程是安全可靠的，第三方无法截获，篡改或者假冒</p>

<h4>1.client发送ClientHello</h4>

<p><img src="/images/tools/20210608-11.png" alt="" /></p>

<p>每一条消息都会包含有ContentType,Version,HandshakeType等信息。</p>

<p>ContentType指示SSL通信处于哪个阶段，是握手(Handshake)，开始加密传输(ChangeCipherSpec)还是正常通信(Application)等，见下表</p>

<pre><code>    Hex Dec Type

    0x14    20  ChangeCipherSpec
    0x15    21  Alert
    0x16    22  Handshake
    0x17    23  Application
</code></pre>

<p>Version是TLS的版本，见下表</p>

<pre><code>    Major Version   Minor Version   Version Type

    3   0   SSLv3
    3   1   TLS 1.0
    3   2   TLS 1.1
    3   3   TLS 1.2
</code></pre>

<p>Handshake Type是在handshanke阶段中的具体哪一步，见下表</p>

<pre><code>    Code    Description

    0   HelloRequest
    1   ClientHello
    2   ServerHello
    11  Certificate
    12  ServerKeyExchange
    13  CertificateRequest
    14  ServerHelloDone
    15  CertificateVerify
    16  ClientKeyExchange
    20  Finished
</code></pre>

<p>ClientHello附带的数据随机数据RN，会在生成session key时使用，Cipher suite列出了client支持的所有加密算法组合，可以看出每一组包含3种算法，一个是非对称算法，如RSA，一个是对称算法如DES，3DES，RC4等，一个是Hash算法，如MD5，SHA等，server会从这些算法组合中选取一组，作为本次SSL连接中使用。</p>

<h4>2.server回应ServerHello</h4>

<p><img src="/images/tools/20210608-12.png" alt="" /></p>

<p>ession id,如果SSL连接断开，再次连接时，可以使用该属性重新建立连接，在双方都有缓存的情况下可以省略握手的步骤。</p>

<p>server端也会生成随机的RN，用于生成session key使用</p>

<p>server会从client发送的Cipher suite列表中跳出一个，这里挑选的是RSA+RC4+MD5</p>

<p>这次server共发送的3个handshake 消息:Serverhello，Certificate和ServerHelloDone，共用一个ContentType:Handshake</p>

<h4>3.server发送Certificate</h4>

<p><img src="/images/tools/20210608-13.png" alt="" /></p>

<p>server的证书信息，只包含public key，server将该public key对应的private key保存好，用于证明server是该证书的实际拥有者，那么如何验证呢？原理很简单：client随机生成一串数，用server这里的public key加密(显然是RSA算法)，发给server，server用private key解密后返回给client，client与原文比较，如果一致，则说明server拥有private key，也就说明与client通信的正是证书的拥有者，因为public key加密的数据，只有private key才能解密，目前的技术还没发破解。利用这个原理，也能实现session key的交换，加密前的那串随机数就可用作session key，因为除了client和server，没有第三方能获得该数据了。原理很简单，实际使用时会复杂很多，数据经过多次hash，伪随机等的运算，前面提到的client和server端得RN都会参与计算。</p>

<h4>4.Server发送ServerHelloDone</h4>

<p><img src="/images/tools/20210608-14.png" alt="" /></p>

<h4>5.Client发送ClientKeyExchange</h4>

<p><img src="/images/tools/20210608-15.png" alt="" /></p>

<p>client拿到server的certificate后，就可以开始利用certificate里的public key进行session key的交换了。从图中可以看出，client发送的是130字节的字节流，显然是加过密的。client随机生成48字节的Pre-master secret，padding后用public key加密就得到这130字节的数据发送给server，server解密也能得到Pre-master secret。双方使用pre-master secret, &ldquo;master secret"常量字节流，前期交换的server端RN和client的RN作为参数，使用一个伪随机函数PRF，其实就是hash之后再hash，最后得到48字节的master secret。master secret再与"key expansion"常量，双方RN经过伪随机函数运算得到key_block，PRF伪随机函数可以可以仿佛循环输出数据，因此我们想得到多少字节都可以，就如Random伪随机函数，给它一个种子，后续用hash计算能得到无数个随机数，如果每次种子相同，得到的序列是一样的，但是这里的输入时48字节的master secret，2个28字节的RN和一个字符串常量，碰撞的可能性是很小的。得到key block后，算法，就从中取出session key，IV(对称算法中使用的初始化向量)等。client和server使用的session key是不一样的，但只要双方都知道对方使用的是什么就行了。这里会取出4个：client/server加密正文的key，client/server计算handshake数据hash的key。</p>

<h4>6.Client发送ChangeCipherSpec</h4>

<p><img src="/images/tools/20210608-16.png" alt="" /></p>

<p>client指示Server从现在开始发送的消息都是加密过的</p>

<h4>7.Client发送Finished</h4>

<p><img src="/images/tools/20210608-17.png" alt="" /></p>

<p>client发送的加密数据，这个消息非常关键，一是能证明握手数据没有被篡改过，二也能证明自己确实是密钥的拥有者(这里是单边验证，只有server有certificate，server发送的Finished能证明自己含有private key，原理是一样的)。client将之前发送的所有握手消息存入handshake messages缓存，进行MD5和SHA-1两种hash运算，再与前面的master secret和一串常量"client finished"进行PRF伪随机运算得到12字节的verify data，还要经过改进的MD5计算得到加密信息。为什么能证明上述两点呢，前面说了只有密钥的拥有者才能解密得到pre-master key，master key，最后得到key block后，进行hash运算得到的结果才与发送方的一致。</p>

<h4>8.Server发送ChangeCipherSpec</h4>

<p><img src="/images/tools/20210608-18.png" alt="" /></p>

<p>Server指示client从现在开始发送的消息都是加密过的</p>

<h4>9.Server发送Finishd</h4>

<p><img src="/images/tools/20210608-19.png" alt="" /></p>

<p>与client发送Finished计算方法一致。server发送的Finished里包含hash给client，client会进行校验，如果通过，说明握手过程中的数据没有被第三方篡改过，也说明server是之前交换证书的拥有者。现在双方就可以开始后续通信，进入Application context了。</p>
]]></content>
  </entry>
  
</feed>
