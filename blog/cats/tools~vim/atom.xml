<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools~vim | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/tools~vim/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2024-03-26T19:20:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim 在处理长字符串时变得非常慢]]></title>
    <link href="http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off/"/>
    <updated>2024-02-26T20:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2024/02/26/vim-syntax-off</id>
    <content type="html"><![CDATA[<p><a href="https://www.coder.work/article/6946837">https://www.coder.work/article/6946837</a></p>

<p>语法高亮是通过正则表达式定义的，匹配会消耗大量资源，尤其是在长行和大缓冲区上。</p>

<pre><code>    :syntax off
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[强制保存只读类型文件的方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/01/vim-save/"/>
    <updated>2021-06-01T17:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/01/vim-save</id>
    <content type="html"><![CDATA[<p><a href="https://www.jb51.net/article/102265.htm">https://www.jb51.net/article/102265.htm</a></p>

<p>底行命令模式执行：
```
    :w !sudo tee %</p>

<pre><code>w 表示保存文件
! 表示执行外部命令
tee linux命令，这个有点复杂，可以查看linux命令帮助
% 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名
</code></pre>

<pre><code>上述方式非常完美的解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 .vimrc 中：
</code></pre>

<pre><code>" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee &gt; /dev/null %
</code></pre>

<p>```
这样，简单的运行:w!!即可。命令后半部分> /dev/null作用为显式的丢掉标准输出的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim高亮查找]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/01/vim-gd/"/>
    <updated>2021-06-01T17:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/01/vim-gd</id>
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/students/p/8808524.html">https://www.cnblogs.com/students/p/8808524.html</a></p>

<p>用vim时，想高亮显示一个单词并查找的方发，将光标移动到所找单词.</p>

<pre><code>    1: shift + "*"  向下查找并高亮显示

    2: shift + "#"  向上查找并高亮显示

    3: "g" + "d"    高亮显示光标所属单词，"n" 查找！
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ctags使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/01/vim-ctags/"/>
    <updated>2021-06-01T15:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/01/vim-ctags</id>
    <content type="html"><![CDATA[<pre><code>    --exclude[=pattern] ：将模式pattern指定的文件/文件夹添加到排除列表中。可使用任意次。
</code></pre>

<hr />

<p><a href="https://blog.csdn.net/foreverling/article/details/80329586">https://blog.csdn.net/foreverling/article/details/80329586</a></p>

<h4>1 查看ctags支持的语言</h4>

<pre><code>    ctags --list-languages
</code></pre>

<h4>2 查看语言和扩展名的对应关系</h4>

<pre><code>    ctags --list-maps
</code></pre>

<h4>3 查看ctags可以识别和记录的语法元素</h4>

<pre><code>    ctags --list-kinds
</code></pre>

<p>单独查看可以识别的C++的语法元素：
<code>
    [chuxing@hostname ~]$ ctags --list-kinds=c++
    c  classes
    d  macro definitions
    e  enumerators (values inside an enumeration)
    f  function definitions
    g  enumeration names
    l  local variables [off]
    m  class, struct, and union members
    n  namespaces
    p  function prototypes [off]
    s  structure names
    t  typedefs
    u  union names
    v  variable definitions
    x  external and forward variable declarations [off]
</code></p>

<h4>4 对当前目录下所有ctags支持的语言格式文件生成tags</h4>

<pre><code>    ctags -R *
</code></pre>

<p>缺点很明显，tags会非常大，tags生成会非常慢，而且代码跳转会卡顿。</p>

<h4>5 只对特定文件生成tags</h4>

<pre><code>    ctags `find -name "*.h"`
</code></pre>

<h4>6 使用tags</h4>

<p>6.1 tag命令</p>

<p>用于跳转到指定的tag。例如：tag tagname 使用这个命令可以跳转到tagname的定义处，即使它在另一个文件中。</p>

<p>6.2 快捷键Ctrl+] 取出当前光标下的word作为tag的名字并进行跳转。</p>

<p>6.3 tags命令 列出曾经访问过的tag的列表</p>

<p>6.4 快捷键Ctrl+T 跳转到前一次的tag处。</p>

<p>6.5 stag命令 stag tagname 分割当前窗口，并且跳转到指定的tag。</p>

<p>6.6 快捷键Ctrl+W+] 分割当前窗口，并且跳转到光标下的tag。</p>

<p>6.7 同名tag, 如果存在多个同名的tag，tag命令会给出一个tag的列表，可以通过键入tag的序号来选择tag；也可以通过tselect来过滤tag，如：:tselect tagname</p>

<p>如果要在多个tag间移动，可以使用如下命令：
<code>
    :tfirst             go to first match
    :[count]tprevious   go to [count] previous match
    :[count]tnext       go to [count] next match
    :tlast              go to last match
</code>
如果没有指定[count]，默认是1。</p>

<h4>7 其他</h4>

<p>如果是多个tags文件，可以通过设置tags选项来引入更多的tags文件。例如: <code>:set tags=./tags, ./../tags, ./*/tags</code></p>

<p>使用tag命令时，可以输入部分tag名，然后使用Tab键进行补全。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim多行同时修改，注释和取消注释]]></title>
    <link href="http://abcdxyzk.github.io/blog/2021/06/01/vim-block/"/>
    <updated>2021-06-01T14:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2021/06/01/vim-block</id>
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/caryaliu/article/details/7081430">https://blog.csdn.net/caryaliu/article/details/7081430</a></p>

<h4>多行注释：</h4>

<ol>
<li><p>进入命令行模式，按ctrl + v进入 visual block模式，然后按方向键选中多行</p></li>
<li><p>按大写字母I，再插入注释符，例如//</p></li>
<li><p>按esc键就会全部注释了</p></li>
</ol>


<h4>取消多行注释：</h4>

<ol>
<li><p>进入命令行模式，按ctrl + v进入 visual block模式，按方向键选中要删除内容</p></li>
<li><p>按d键就可全部取消注释</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
