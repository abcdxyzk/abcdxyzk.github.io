<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: gdb | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/gdb/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-12-12T15:09:44+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[gdb struct]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-struct/"/>
<updated>2019-12-12T11:23:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-struct</id>
<content type="html"><![CDATA[<p><a href="http://bbs.chinaunix.net/thread-4101359-1-1.html">http://bbs.chinaunix.net/thread-4101359-1-1.html</a></p>

<h4>查看结构体中成员的偏移</h4>

<pre><code>    (gdb) p &amp;((struct task_struct *)0)-&gt;prio

    (gdb) ptype struct malloc_chunk
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb子进程]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-fork/"/>
<updated>2019-12-12T10:23:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/12/12/debug-gdb-fork</id>
<content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fingding/article/details/46459095">https://blog.csdn.net/fingding/article/details/46459095</a></p>

<h4>1. follow-fork-mode</h4>

<p>用法：set follow-fork-mode [parent|child]</p>

<p>进入gdb后，直接设置，默认是parent</p>

<p>所以如果想要调试子进程，进入gdb后设置set follow-fork-mode child，然后设置子进程的断点</p>

<p>可用使用show follow-fork-mode 来查询当前fork模式</p>

<p>使用follow-fork-mode，只能调试一个进程，不能同时调试父子进程</p>

<h4>2. detach-on-fork mode</h4>

<p>用法：set detach-on-fork [on|off]</p>

<p>on: 只调试父进程或子进程的其中一个(根据follow-fork-mode来决定)，这是默认的模式。</p>

<p>off: 父子进程都在gdb的控制之下，其中一个进程正常调试(根据follow-fork-mode来决定),另一个进程会被设置为暂停状态。</p>

<p>如果设置了set detach-on-fork off且follow-fork-mode为parent，fork后子进程并不运行，而是处于暂停状态。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb线程]]></title>
<link href="http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread/"/>
<updated>2016-05-11T20:10:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread</id>
<content type="html"><![CDATA[<p>GDB多线程调试的基本命令。</p>

<p>info threads 显示当前可调试的所有线程，每个线程会有一个GDB为其分配的ID，后面操作线程的时候会用到这个ID。 前面有*的是当前调试的线程。</p>

<p>thread ID 切换当前调试的线程为指定ID的线程。</p>

<p>break thread_test.c:123 thread all 在所有线程中相应的行上设置断点</p>

<p>thread apply ID1 ID2 command 让一个或者多个线程执行GDB命令command。</p>

<p>thread apply all command 让所有被调试线程执行GDB命令command。</p>

<p>set scheduler-locking off|on|step 估计是实际使用过多线程调试的人都可以发现，在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。off 不锁定任何线程，也就是所有线程都执行，这是默认值。 on 只有当前被调试程序会执行。 step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[crash vs gdb work]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work/"/>
<updated>2014-11-06T10:51:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work</id>
<content type="html"><![CDATA[<p><a href="https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html">贴自https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html</a><br/>
Yes, sure. GDB works very differently from crash. There main conceptual<br/>
difference is that GDB only handles with VIRTUAL addresses, while the<br/>
crash utility first translates everything to PHYSICAL addresses.<br/>
Consequently, GDB ignores the PhysAddr field in ELF program headers,<br/>
and crash ignores the VirtAddr field.</p>

<p>I have looked at some of my ELF dump files, and it seems to me that<br/>
VirtAddr is not filled correctly, except for kernel text and static<br/>
data (address range 0xffffffff80000000-0xffffffff9fffffff). Your linked<br/>
list is most likely allocated in the direct mapping<br/>
(0xffff880000000000-0xffffc7ffffffffff). However, I found out that the<br/>
virtual addresses for the direct mapping segments are wrong, e.g. my<br/>
dump file specifies it at 0xffff810000000000 (hypervisor area). This is<br/>
most likely a bug in the kernel code that implements /proc/vmcore.</p>

<p>But that&rsquo;s beside the point. Why?  The Linux kernel maps many physical<br/>
pages more than once into the virtual address space. It would be waste<br/>
of space if you saved it multiple times (for each virtual address that<br/>
maps to it). The crash utility can translate each virtual address to<br/>
the physical address and map it onto ELF segments using PhysAddr.<br/>
Incidentally, the PhysAddr fields are correct in my dump files&hellip;</p>

<p>I&rsquo;m glad you&rsquo;re interested in using GDB to read kernel dump files,<br/>
especially if you&rsquo;re willing to make it work for real. I have proposed<br/>
more than once that the crash utility be re-implemented in pure gdb.<br/>
Last time I looked (approx. 1.5 years ago) the main missing pieces were:</p>

<ol>
<li>Use of physical addresses (described above)</li>
<li>Support for multiple virtual address spaces (for different process contexts)</li>
<li>Ability to read compressed kdump files</li>
<li>Ability to use 64-bit files on 32-bit platforms (to handle PAE)</li>
</ol>


<p>HTH,<br/>
Petr Tesarik</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb 没有debug信息step单步调试]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step/"/>
<updated>2014-08-28T16:21:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step</id>
<content type="html"><![CDATA[<h4>一、如果有函数调用，他会进入该函数</h4>

<pre><code>    step &lt;count&gt;
</code></pre>

<p>单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有 debug信息。很像 VC等工具中的 step in。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。</p>

<h4>二、如果有函数调用，他不会进入该函数</h4>

<pre><code>    next &lt;count&gt;
</code></pre>

<p>同样单步跟踪，如果有函数调用，他不会进入该函数。很像 VC等工具中的 step over。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。</p>

<h4>三、无debuginfo时需要set step-mode [on/off]</h4>

<pre><code>    set step-mode [on/off]
    set step-mode on
    #打开 step-mode模式，于是，在进行单步跟踪时，程序不会因为没有 debug信息而不停住。这个参数有很利于查看机器码。

    set step-mode off
    关闭 step-mode模式。
</code></pre>

<h4>四、跟踪子进程</h4>

<p>使用gdb调试的时候，gdb只能跟踪一个进程。</p>

<p>可以在fork函数调用之前，通过指令设置gdb调试工具跟踪父进程或子进程。</p>

<p>默认情况下gdb是跟踪父进程的。</p>

<pre><code>    set follow-fork-mode child   # 命令设置gdb在fork之后跟踪子进程。
    set follow-fork-mode parent  # 设置跟踪父进程。
</code></pre>

<h4>五、修改值</h4>

<pre><code>    set $rax=0  # 寄存器

    set m=6     # 变量，需要debuginfo

    p $rsp+0x714    # 内存
    set *0x7f962c1fa564 = 0x6
</code></pre>
]]></content>
</entry>

</feed>
