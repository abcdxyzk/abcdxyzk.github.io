<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: git | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/git/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2025-01-16T19:52:41+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[gitignore 排除包含]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/05/19/tools-gitignore/"/>
<updated>2020-05-19T11:11:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/05/19/tools-gitignore</id>
<content type="html"><![CDATA[<p>想忽略某个文件夹，但又不想忽略这个文件夹下的某个子目录或文件</p>

<pre><code>    application/*
    !application/language/
    !application/README
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[git tag常用操作]]></title>
<link href="http://abcdxyzk.github.io/blog/2018/04/19/git-tag/"/>
<updated>2018-04-19T01:18:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2018/04/19/git-tag</id>
<content type="html"><![CDATA[<p><a href="https://blog.csdn.net/albertsh/article/details/63253614">https://blog.csdn.net/albertsh/article/details/63253614</a></p>

<h4>用途</h4>

<p>标签可以针对某一时间点的版本做标记，常用于版本发布，这恰恰是我所需要的功能，将本地标签推送到Github上即发布了一个Release版本，下载和查看非常方便。</p>

<h4>标签分类</h4>

<p>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象，建议使用附注标签，日后还可以查看标签信息。</p>

<h4>创建标签</h4>

<p>创建轻量标签</p>

<pre><code>    $ git tag v0.2.0 -light
</code></pre>

<p>解释：创建轻量标签不需要传递参数，直接指定标签名称即可。</p>

<p>创建附注标签</p>

<pre><code>    $ git tag -a v0.1.0 -m "release 0.1.0 version"
</code></pre>

<p>解释：创建附注标签时，参数-a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p>

<h4>查看标签</h4>

<p>列出当前仓库的所有标签
<code>
    $ git tag
</code></p>

<p>列出符合模式的标签
<code>
    $ git tag -l 'v0.1.*'
</code></p>

<p>查看标签版本信息
<code>
    $ git show v0.1.0
</code></p>

<h4>切换标签</h4>

<p>切换标签与切换分支命令相同
<code>
    $ git checkout [tagname]
</code>
解释：切换标签后处于一个空的分支上，即”You are in ‘detached HEAD’ state.”</p>

<h4>删除标签</h4>

<p>误打或需要修改标签时，需要先将标签删除，再打新标签
<code>
    $ git tag -d v0.1.2
</code>
解释：参数-d即delete的缩写，意为删除其后指定的标签。</p>

<h4>补打标签</h4>

<p>给指定的commit打标签</p>

<pre><code>    $ git tag -a v0.1.0 49e0cd22f6bd9510fe65084e023d9c4316b446a6
</code></pre>

<p>解释：打标签不必要在HEAD之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和，通过git log命令获取。</p>

<h4>发布标签</h4>

<p>将v0.1.0标签提交到git服务器</p>

<pre><code>    $ git push origin v0.1.0
</code></pre>

<p>解释：通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作。</p>

<p>将本地所有标签一次性提交到git服务器
<code>
    $ git push origin –tags
</code></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[patch / git patch]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/10/30/command-git-patch/"/>
<updated>2014-10-30T10:44:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/10/30/command-git-patch</id>
<content type="html"><![CDATA[<h4>1、diff</h4>

<pre><code>diff [options] from-file to-file  
</code></pre>

<p>简单的说，diff的功能就是用来比较两个文件的不同，然后记录下来，也就是所谓的diff补丁。语法格式：diff 【选项】 源文件（夹） 目的文件（夹），就是要给源文件（夹）打个补丁，使之变成目的文件（夹），术语也就是“升级”。下面介绍三个最为常用选项：</p>

<blockquote><p>   -r 是一个递归选项，设置了这个选项，diff会将两个不同版本源代码目录中的所有对应文件全部都进行一次比较，包括子目录文件。<br/>
   -N 选项确保补丁文件将正确地处理已经创建或删除文件的情况。<br/>
   -u 选项以统一格式创建补丁文件，这种格式比缺省格式更紧凑些</p></blockquote>

<h4>2、patch</h4>

<pre><code>patch [options] [originalfile [patchfile]]
but usually just
patch -pnum &lt;patchfile&gt;
</code></pre>

<p>简单的说，patch就是利用diff制作的补丁来实现源文件（夹）和目的文件（夹）的转换。这样说就意味着你可以有源文件（夹）――>目的文件（夹），也可以目的文件（夹）――>源文件（夹）。下面介绍几个最常用选项：</p>

<blockquote><p>   -p0 选项要从当前目录查找目的文件（夹）<br/>
   -p1 选项要忽略掉第一层目录，从当前目录开始查找。</p></blockquote>

<hr />

<p>在这里以实例说明：
<code>
--- old/modules/pcitable       Mon Sep 27 11:03:56 1999
+++ new/modules/pcitable       Tue Dec 19 20:05:41 2000
</code>
如果使用参数-p0，那就表示从当前目录找一个叫做old的文件夹，在它下面寻找modules下的pcitable文件来执行patch操作。<br/>
如果使用参数-p1， 那就表示忽略第一层目录（即不管old），从当前目录寻找modules的文件夹，在它下面找pcitable。这样的前提是当前目 录必须为modules所在的目录。而diff补丁文件则可以在任意位置，只要指明了diff补丁文件的路径就可以了。当然，可以用相对路径，也可以用绝 对路径。不过我一般习惯用相对路径。</p>

<blockquote><p>  -E 选项说明如果发现了空文件，那么就删除它<br/>
  -R 选项说明在补丁文件中的“新”文件和“旧”文件现在要调换过来了（实际上就是给新版本打补丁，让它变成老版本）</p></blockquote>

<h4>单个文件</h4>

<pre><code>diff –uN from-file to-file &gt;to-file.patch
patch –p0 &lt; to-file.patch
patch –RE –p0 &lt; to-file.patch
</code></pre>

<h4>目录</h4>

<pre><code>diff –uNr from-docu to-docu &gt;to-docu.patch
patch –p1 &lt; to-docu.patch
patch –R –p1 &lt;to-docu.patch
</code></pre>

<hr />

<h4>git diff或者其他UNIX的diff命令生成patch的过程：</h4>

<pre><code>    git diff  &gt; patch
    git diff  --cached &gt; patch
    git diff  branchname --cached &gt; patch
</code></pre>

<p>这个时候当前目录下就会有一个patch文件，这是一个非git环境也可以使用的patch。对于这种patch，在git上使用要用git apply命令，如下：
<code>
    git apply patch
</code></p>

<p>由于这是一个类似UNIX下更新文件的操作，所以执行完上述操作之后，实际上是等于手动修改了文件，还要做一些git commit之类的操作。git apply 是一个事务性操作的命令，也就是说，要么所有补丁都打上去，要么全部放弃。可以先用git apply &ndash;check 查看补丁是否能够干净顺利地应用到当前分支中：git apply &ndash;check patch，如果执行完该命令之后没有任何输出，表示我们可以顺利采纳该补丁，接下来就是git上的提交了。</p>

<p>git format-patch生成的补丁，这是git专用的。常用命令如下：<br/>
1. 两个节点之间的提交： git format-patch  节点A   节点B<br/>
2. 单个节点： git format-patch -1 节点A （-n就表示要生成几个节点的提交）<br/>
3. 最近一次提交节点的patch ：git format-patch HEAD^ 依次类推……</p>

<p>使用git format-patch命令生成的patch文件，包含了提交的附加信息：比如作者，时间等。再次基础上使用git am命令即可将此补丁应用到当前分支。注意应用完之后，你会发现当前分支多了一次提交记录，并且有完整的信息，而不是简单的修改文件。在对比一下，git diff 和git format-patch生成的patch一个重要不同之处，实际使用中会发现git diff一次只会生成一个patch文件，不管差别了多少个提交，都是一个；而git format-patch是根据提交的节点来的，一个节点一个patch。</p>

<h4>git两种patch的比较：</h4>

<p>兼容性：很明显，git diff生成的Patch兼容性强。如果你在修改的代码的官方版本库不是Git管理的版本库，那么你必须使用git diff生成的patch才能让你的代码被项目的维护人接受。</p>

<p>除错功能：对于git diff生成的patch，你可以用git apply &ndash;check 查看补丁是否能够干净顺利地应用到当前分支中；如果git format-patch 生成的补丁不能打到当前分支，git am会给出提示，并协助你完成打补丁工作，你也可以使用git am -3进行三方合并，详细的做法可以参考git手册或者《Progit》。从这一点上看，两者除错功能都很强。</p>

<p>版本库信息：由于git format-patch生成的补丁中含有这个补丁开发者的名字，因此在应用补丁时，这个名字会被记录进版本库，显然，这样做是恰当的。因此，目前使用Git的开源社区往往建议大家使用format-patch生成补丁。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[git-svn]]></title>
<link href="http://abcdxyzk.github.io/blog/2013/08/29/tools-git-svn-base/"/>
<updated>2013-08-29T14:37:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2013/08/29/tools-git-svn-base</id>
<content type="html"><![CDATA[<h4>常用</h4>

<pre><code>1、git-svn clone your_svn_repository
2、git add/commit
3、git-svn rebase  获取中心svn repository的更新；
4、git-svn dcommit 将本地git库的修改同步到中心svn库。
</code></pre>

<hr />

<p>git-svn默认包含在Git的安装包中，不过在Ubuntu中，git-svn是作为一个独立的Package需要额外安装的(sudo apt-get install git-svn)。安装后你就可以使用git svn xxx命令来操作中心SVN代码库了。当然如果你要使用与git svn等价的git-svn命令的话，你还需要将/usr/lib/git-core配置到你的PATH环境变量中，否则Shell会提示你无法找到 git-svn这个命令。</p>

<ul>
<li><p>检出一个已存在svn repository(类似于svn checkout)<br/>
我们可以通过git-svn clone命令完成这个操作： git-svn clone your_svn_repository_url</p></li>
<li><p>从中心服务器的svn repository获取最新更新<br/>
这个操作可以通过"git-svn rebase"完成。注意这里用的是rebase，而不是update。update命令对于通过git-svn检出的svn repostory的git版本库是不可用的。</p></li>
<li><p>查看提交历史日志<br/>
这个简单，使用"git-svn log"，加上-v选项，还可以提供每次commit操作涉及的相关文件的详细信息。</p></li>
<li><p>将本地代码同步到Svn服务器<br/>
完成这一操作需要通过"git-svn dcommit"命令。这个命令会将你在本地使用git commit提交到本地代码库的所有更改逐一提交到svn库中。加上-n选项，则该命令不会真正执行commit到svn的操作，而是会显示会有哪些本地 变动将被commit到svn服务器。git-svn dcommit似乎不能单独提交某个本地版本的修改，而是一次批量提交所有与svn中心版本库的差异。</p></li>
</ul>


<h5>下面是一个git-svn的一般使用流程：</h5>

<p>1、git-svn clone your_svn_repository；<br/>
2、修改本地代码，使用git add/commit将修改提交到本地git库；<br/>
3、定期使用git-svn rebase获取中心svn repository的更新；<br/>
4、使用git-svn dcommit命令将本地git库的修改同步到中心svn库。</p>

<h5>冲突</h5>

<p>使用git-svn处理代码冲突的步骤有些繁琐，不过瑕不掩瑜吧。这里用一个小例子来说明一下。</p>

<p>假设某svn中心库上的某个项目foo中只有一个源码文件foo.c：<br/>
* 我在使用git-svn clone检出版本时，foo.c当时只有一个commit版本信息："svn v1"；<br/>
* clone出来后，我在本地git库中修改foo.c，并通过git commit提交到本地git库中，版本为"git v1"；<br/>
* 不过与此同时另外一个同事也在修改foo.c这个文件，并已经将他的修改提交到了svn库中，版本为"svn v2"；<br/>
* 此时我使用git-svn dcommit尝试提交我的改动，git-svn提示我：<br/>
  Committing to svn://10.10.1.1:80/foo &hellip;<br/>
  M foo.c<br/>
  事务过时: 过期: ”foo/foo.c“在事务“260-1” at /usr/lib/git-core/git-svn line 570<br/>
* 使用git-svn rebase获取svn服务器上的最新foo.c，导致与foo.c冲突，不过此时svn版本信息已经添加到本地git库中(通过git log可以查看)，git-svn rebase提示你在解决foo.c的冲突后，运行git rebase &ndash;continue完成rebase操作；<br/>
* 打开foo.c，修改代码，解决冲突；<br/>
* 执行git rebase &ndash;continue，git提示我：<br/>
You must edit all merge conflicts and then<br/>
mark them as resolved using git add<br/>
* 执行git add foo.c，告知git已完成冲突解决；<br/>
* 再次执行git rebase &ndash;continue，提示"Applying: git v1"，此时"git v1"版本又一次成功加入本地版本库，你可通过git log查看；<br/>
* 执行git-svn dcommit将foo.c的改动同步到svn中心库，到此算是完成一次冲突解决。</p>

<ul>
<li>设置忽略文件<br/>
要忽略某些文件, 需要首先执行如下命令:<br/>
git config &ndash;global core.excludesfile ~/.gitignore<br/>
然后编辑 vi ~/.gitignore.<br/>
例如: 需要忽略vim的临时文件，就写:<br/>
.*.swp</li>
</ul>

]]></content>
</entry>

<entry>
<title type="html"><![CDATA[统计git提交行数的脚本]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines/"/>
<updated>2012-10-16T14:15:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines</id>
<content type="html"><![CDATA[<p>可以保存为count.sh运行 ./count.sh your_name
```
    #!/bin/sh
    insert=0
    delete=0
    git log &ndash;author=$1 &ndash;since &ldquo;2022-01-01&rdquo; &ndash;shortstat &ndash;pretty=format:&ldquo;&rdquo; application/ | sed /^$/d > /tmp/tmp.count</p>

<pre><code>while read line ;do
current=`echo $line | awk -F ',' '{printf $2}' | awk '{printf $1}'`
insert=`expr $insert + $current`
current=`echo $line | awk -F',' '{printf $3}' | awk '{printf $1}'`
if [ "$current" != "" ]; then
    delete=`expr $delete + $current`
fi
done &lt; /tmp/tmp.count

echo $1 $insert insertions, $delete deletions
</code></pre>

<p>```</p>
]]></content>
</entry>

</feed>
