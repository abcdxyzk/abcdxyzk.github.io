<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: ipv6 | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/ipv6/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-03-26T19:20:58+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[nginx ipv6、TCP_DEFER_ACCEPT]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/01/28/nignx-conf/"/>
<updated>2019-01-28T04:06:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/01/28/nignx-conf</id>
<content type="html"><![CDATA[<h4>curl 7.61.1</h4>

<p><a href="/download/tools/curl_7.61.1">curl 7.61.1</a></p>

<h4>TCP_DEFER_ACCEPT</h4>

<pre><code>    server {
        listen  80 deferred;
        ...
</code></pre>

<p> deferred
  instructs to use a deferred accept() (the TCP_DEFER_ACCEPT socket option) on Linux.</p>

<h4>ipv6</h4>

<pre><code>    server {
        listen  [::]:8080; # ipv6only=on;
        ...
</code></pre>

<p> ipv6only=on|off
  this parameter (0.7.42) determines (via the IPV6_V6ONLY socket option) whether an IPv6 socket listening on a wildcard address [::] will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.</p>

<p>  Prior to version 1.3.4, if this parameter was omitted then the operating system’s settings were in effect for the socket.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[IPv6 socket]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/01/28/kernel-ipv6-socket/"/>
<updated>2019-01-28T03:56:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/01/28/kernel-ipv6-socket</id>
<content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u013401853/article/details/55002655">https://blog.csdn.net/u013401853/article/details/55002655</a></p>

<h4>server_ip6.c</h4>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;unistd.h&gt;

    #define BUF_LEN 2048
    #define PORT 8080

    int main(int argc, char *argv[])
    {
        int serv_sock = -1, client_sock = -1;
        socklen_t addr_len = 0;
        struct sockaddr_in6 local_addr = {0}, client_addr = {0};
        char buf[BUF_LEN] = {0};
        int err = -1;

        /* 建立socket */
        serv_sock = socket(PF_INET6, SOCK_STREAM, 0);
        if (-1 == serv_sock) {
            perror("socket error: ");
            return -1;
        }

        /* 填充地址结构 */
        local_addr.sin6_family = AF_INET6;
        local_addr.sin6_port = htons(PORT);
        local_addr.sin6_addr = in6addr_any;

        /* 绑定地址 */
        err = bind(serv_sock, (struct sockaddr *)&amp;local_addr, sizeof(struct sockaddr_in6));
        if (-1 == err) {
            perror("bind error: ");
            close(serv_sock);
            return -1;
        }

        /* 监听 */
        err = listen(serv_sock, 5);
        if (-1 == err) {
            perror("listen error: ");
            close(serv_sock);
            return -1;
        }

        /* 循环等待客户连接请求 */
        while (1) {
            memset(&amp;client_addr, 0x0, sizeof(client_addr));
            addr_len = sizeof(struct sockaddr_in6);
            client_sock = accept(serv_sock, (struct sockaddr *)&amp;client_addr, &amp;addr_len);
            if (-1 == client_sock) {
                perror("accept error:");
                close(serv_sock);
                return -1;
            }

            /* 转换client地址为字符串并打印 */
            inet_ntop(AF_INET6, &amp;client_addr.sin6_addr, buf, BUF_LEN);
            printf("A clinet connected, ip: %s, port %d\n", buf, ntohs(client_addr.sin6_port));

            /* 接收消息 */
            memset(buf, 0x0, BUF_LEN);
            err = recv(client_sock, buf, BUF_LEN, 0);
            if (err &lt; 0) {
                perror("recv error:");
                close(serv_sock);
                close(client_sock);
                return -1;
            }
            printf("recv %d bytes: %s\n", err, buf);

            /* 回送消息 */
            err = send(client_sock, buf, strlen(buf), 0);
            if (err &lt; 0) {
                perror("send error:");
                close(serv_sock);
                close(client_sock);
                return -1;
            }

            /* 关闭这个client连接 */
            close(client_sock);
        }
        return 0;
    }
</code></pre>

<h4>client_ip6.c</h4>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;unistd.h&gt;

    #define BUF_LEN 2048
    #define PORT 8080

    int main(int argc, char *argv[])
    {
        int sock = -1;
        socklen_t addr_len = 0;
        struct sockaddr_in6 serv_addr = {0};
        char buf[BUF_LEN] = {0};
        int err = -1;

        /* 建立socket */
        sock = socket(AF_INET6, SOCK_STREAM, 0);
        if (-1 == sock) {
            perror("socket error: ");
            return -1;
        }

        memset(&amp;serv_addr, 0x0, sizeof(serv_addr));
        /* 填充地址结构 */
        serv_addr.sin6_family = AF_INET6;
        serv_addr.sin6_port = htons(PORT);

        //serv_addr.sin6_addr = in6addr_loopback;  /* 连接到环回地址 */

        //inet_pton(AF_INET6, "2002:da80:e000::1:1:9", &amp;serv_addr.sin6_addr);

        //inet_pton(AF_INET6, "::ffff:c0a8:0208", &amp;serv_addr.sin6_addr);
        //inet_pton(AF_INET6, "::c0a8:0205", &amp;serv_addr.sin6_addr);

        // connect到链路本地地址，需要设置sin6_scope_id，用`ip addr show`获取
        serv_addr.sin6_scope_id = 2;
        inet_pton(AF_INET6, "fe80::a00:27ff:fea0:67d6", &amp;serv_addr.sin6_addr);

        addr_len = sizeof(serv_addr);
        err = connect(sock, (struct sockaddr *)&amp;serv_addr, addr_len);
        if (-1 == err) {
            perror("connect error:");
            close(sock);
            return -1;
        }

        /* 发送消息 */
        memset(buf, 0x0, BUF_LEN);
        snprintf(buf, BUF_LEN - 1, "hello server, I'm client\n");
        err = send(sock, buf, strlen(buf), 0);
        if (err &lt; 0) {
            perror("send error:");
            close(sock);
            return -1;
        }

        /* 接收消息 */
        memset(buf, 0x0, BUF_LEN);
        err = recv(sock, buf, BUF_LEN, 0);
        if (err &lt; 0) {
            perror("recv error:");
            close(sock);
            return -1;
        }
        printf("recv %d bytes: %s\n", err, buf);

        close(sock);

        return 0;
    }
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[IPv6简介]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/01/28/kernel-ipv6-base/"/>
<updated>2019-01-28T03:42:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/01/28/kernel-ipv6-base</id>
<content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000008794218">https://segmentfault.com/a/1190000008794218</a></p>

<h3>IPv6的优点</h3>

<h4>更大的地址空间</h4>

<p>名字叫IPv6，但它的长度并不是64位，而是128位，总的地址空间大约为3.4*10<sup>38</sup>，一个亿是10的8次方，那么IPv6就有340万亿亿亿亿个地址（4个亿连一起），所以说给地球上的每一粒沙子分配一个IP地址不是在吹牛，是真可以。</p>

<p>可以参考这篇文章和这篇文章，里面提到地球上所有沙滩的沙子大约有7.5*10<sup>18</sup>粒，这个值跟IPv6的10<sup>38</sup>相差了很多个数量级，就算加上沙漠等其它的地方，IPv6的数量也足够覆盖它。</p>

<h4>点到点通信更方便</h4>

<p>IPv6完全有能力为联网的每个设备分配一个公网IP，于是我们可以不再需要NAT，从而非常方便的实现点到点的直接通信。</p>

<p>说好处之前，先了解一下NAT的缺点：<br/>
  使用了NAT之后，每次通信都要做一次NAT转换，影响性能。<br/>
  处于两个不同NAT网络内部的机器不能直接通信，他们之间的通信得依赖第三方的服务器，极大的限制了网络的连通性，同时所有的数据都会被第三方所监控。<br/>
  为了支持NAT，很多网络协议变得很复杂，大大增加了网络的复杂性。</p>

<p>没有了NAT之后，当然上面的这些缺点也就没有了，同时会带来下面这些比较直观的好处：<br/>
  更方便： 想象一下，每个电脑都有公网IP，你电脑出了点问题，找我帮忙看一下，只要把你的IP给我，我就可以连上去了，而我们现在的情况是，两个人都是内网IP，没法直接访问，非得用QQ共享桌面之类的软件。<br/>
  更安全： 配合点到点的加密，让网络更安全，不给第三方监听的机会； 以网络聊天为例，通过使用点到点的聊天软件，就不用担心被人监听聊天记录了；同时访问家里的摄像头不再需要经过第三方服务器，不用担心给别人看直播了。</p>

<h4>IP配置更方便</h4>

<p>IPv6有一个功能叫Stateless Auto Configuration，简单点说，就是可以不借助DHCP服务器实现IP地址的分配，插上网线就能上网。</p>

<p>系统起来后，就会为每个网卡生成一个Link-Local的IP地址，简单点说就是一个固定的前缀加上mac地址，由于mac地址全球唯一，所以这样构成的IP地址是唯一的，有了这个地址后，就可以局域网进行通信了，但是这种地址路由器是不会转发的。</p>

<p>如果网络里有路由器； 系统会通过广播的方式问路由器，路由器会返回一个子网前缀，类似于IPv4里面的192.168.0.0/16，系统将子网前缀和mac地址组合起来，构成了一个唯一的IP地址，这个IP地址可以通过路由器路由。</p>

<p>也就是说，就算不做任何配置，系统启动起来后，网卡就一定会有IPv6地址，有了IPv6地址就可以通信。</p>

<p>当然IP地址也可以由DHCP6服务器来分配，这种方式分配叫做Stateful Auto Configuration。</p>

<h4>局域网内更安全</h4>

<p>由Neighbor Discovery代替了IPv4里面的ARP协议，没有ARP后，跟ARP相关的攻击就不存在了</p>

<h4>路由更快</h4>

<ul>
<li><p>跟IPv4不同，IPv6包头的字段长度是固定的，没有可选字段，所以路由器不需要检查IP包头是否包含可选字段。</p></li>
<li><p>IPv6包头里面没有checksum字段，不需要像IPv4那样每次TTL减1后都需要重新计算包头的checksum。</p></li>
<li><p>IPv6不支持在中途被分片和重组，即不能在路由器和防火墙上被分片，从而减轻了路由器的负担。</p></li>
</ul>


<p>IPv6包头里面没有checksum，那么会不会不安全呢？如果数据传输的过程中损坏了怎么办呢？首先，现在的网络都比较好，出现损坏的情况很少；其次，就算损坏了，有两种情况，一种是被路由器丢弃或者发到了错误的主机，这种情况不会造成什么问题，因为IP层本来就不保证可靠的传输，而是由上面的传输层来保证（如TCP），另一种情况是接受方收到了数据包，但由于数据包受损，内容已经和发送方发出来的不一样了，这种情况也是交给上面的传输层协议处理，比如UDP、TCP，它们都有自己的校验码，完全有能力发现数据损坏的问题。</p>

<p>不允许路由器对IPv6包进行分片，那么怎么保证发送端不会发送太大的数据包呢？首先，IPv6要求入网链路至少能传输1280字节的IP包，如果出现不能传输1280字节IP包这种情况，需要链路层自己处理分片和重组的过程；其次，跟IPv4里面PMTUD（Path MTU Discovery）是可选的不同，在IPv6里面，PMTUD是一个非常重要且必须的功能；所以一般情况下发送小于等于1280字节的IP包肯定能到达目的地，加上现在大部分人都用以太网（MTU为1500，包含以太网的包头），绝大部分情况下一个包过去就能确定PMTU（Path MTU ），不会影响数据传输性能。</p>

<h4>更安全</h4>

<p>在设计IPv4的时候，根本没有考虑过安全问题。</p>

<p>而在设计IPv6的时候，安全问题作为一个很重要的方面被考虑进来了，尤其是端到端的安全，IPsec正是在这样的背景下被设计出来的，有了IPsec后，在IP层就能实现安全传输。</p>

<p>虽然IPsec也被引入到了IPv4，但由于IPsec连传输层的端口都进行了加密，导致IPsec碰到NAT网络的时候，会造成很多麻烦，虽然现在已经有了解决办法，但IPsec在IPv4网络里面还是受到诸多限制。</p>

<h4>更好的QoS</h4>

<p>IPv6的包头里面包含了一个叫做Flow Label的字段，专门为QoS服务。</p>

<h4>更好的支持移动设备</h4>

<p>移动网络要求设备能在不同的网络里面快速的切换，并且现有的通信不受切换的影响，在IPv6里面，有专门的协议Mobile IPv6 (MIPv6)来处理这个事情。</p>

<h3>IPv6格式</h3>

<p>这里不介绍报文的格式，只介绍IPv6地址的格式。</p>

<h4>地址表示方式</h4>

<p>IPv6地址的128位分成了由冒号分割的8段，每段2个字节16位，这16位由16进制表示，这里是一些例子，左边是完整的格式，右边是缩写格式：</p>

<pre><code>    完整的格式                     缩写格式
    0000:0000:0000:0000:0000:0000:0000:0000     ::
    0000:0000:0000:0000:0000:0000:0000:0001     ::1
    FF02:0000:0000:0000:0000:0000:0000:0001     FF02::1
    FC00:0001:A000:0B00:0000:0527:0127:00AB     FC00:1:A000:B00::527:127:AB
    2001:0000:1111:000A:00B0:0000:9000:0200     2001:0:1111:A:B0::9000:200
    2001:0DB8:0000:0000:ABCD:0000:0000:1234     2002:DB8::ABCD:0:0:1234 或者 2001:DB8:0:0:ABCD::1234
    2001:0DB8:AAAA:0001:0000:0000:0000:0100     2001:DB8:AAAA:1::100
</code></pre>

<p>两条缩写规则：<br/>
  用冒号分割的每段里面的前面的0可以省略掉，如:0001:可以缩写成:1:，:0000:可以缩写成:0:<br/>
  如果冒号里面的是0的话，可以忽略掉（相邻的多个0可以一起忽略掉），直接写成两个冒号，如:0000:0000:可以被缩写成::</p>

<p>注意：如果地址中有多个连续为0的段，只能将其中的一个缩写成::，如果两个都缩写了，就不知道每个缩写了多少个0，这也是上面的表格中2001:0DB8:0000:0000:ABCD:0000:0000:1234被缩写成2002:DB8::ABCD:0:0:1234或者2001:DB8:0:0:ABCD::1234的原因，它不能被缩写成2001:DB8::ABCD::1234，一般的做法是哪种方法省略的0越多就用哪种。</p>

<h4>网段表示方式</h4>

<p>IPv6和IPv4一样，也有网段和子网的概念，在IPv6里面，表示子网号或者网段的时候，也是类似的方法，如：2001:0:0:CD30::/60，这个时候前面的地址只需要写前60位，后面的所有位都用::来缩写，类似于IPv4里面的192.168.0。0/16，不过要注意的是，这里2001:0:0:CD30::不能把前面的两个0也缩写，因为这样就不是一个合法的IPv6地址了。</p>

<h3>IPv6地址类型</h3>

<p>IPv6里面有三种地址类型；</p>

<ul>
<li><p>Unicast: 单播地址，就是我们常用的地址，唯一标识一个网络接口</p></li>
<li><p>Anycast: 任意播（直译有点怪），一类特殊的IP地址，多个网络接口（不同的设备）都配上相同的地址，往这个地址发送数据的时候，路由器会只发往其中的一个接口，一般发往最近的那一个。（这个好像对实现负载均衡比较有用）</p></li>
<li><p>Multicast: 多播地址，代表一类unicast的集合，但往这个地址发送数据的时候，会将数据发给属于这个多播组的每个unicast地址。</p></li>
</ul>


<p>IPv6里面没有类似于IPv4那样单独的广播概念，它的功能被包含在多播里面。</p>

<ul>
<li>本人对anycast和multicast不是特别了解，所以没法描述的很清楚。</li>
</ul>


<h4>IPv6地址分类</h4>

<p>现有的IP地址被分配成如下几大类：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>类型  前缀  IPv6表示方法
</span><span class='line'>Unspecified     00&hellip;00 (128位)    ::/128
</span><span class='line'>Loopback    00&hellip;01 (128位)    ::1/128
</span><span class='line'>Multicast   11111111    FF00::/8
</span><span class='line'>Link-Local unicast  1111111010  FE80::/10
</span><span class='line'>Unique local address    1111110     FC00::/7
</span><span class='line'>Global Unicast  所有其它&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    全0的地址::/128为未定义地址，大家不要去使用
</span><span class='line'>
</span><span class='line'>除了最后一位是1，其它都是0的地址::1/128为本地环回地址，同IPv4里面的127.0.0.1
</span><span class='line'>
</span><span class='line'>FF00::/8这个网段的地址都是多播地址
</span><span class='line'>
</span><span class='line'>FE80::/10为Link-Local的单播地址，这类地址不能穿过路由器
</span><span class='line'>
</span><span class='line'>FC00::/7为本地的单播地址，可以穿过本地的路由器，但不能穿过外网的路由器，即只可以在本地使用，和IPv4里面的192.168.0.0/16相似
</span><span class='line'>
</span><span class='line'>全局的单播地址目前只有2000::/3开头的可以被申请使用，其它的都被预留了
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 预定义的多播地址
</span><span class='line'>
</span><span class='line'>这里是两个常用的预定义的多播地址：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;地址  含义
</span><span class='line'>FF02:0:0:0:0:0:0:1  子网内的所有机器
</span><span class='line'>FF02:0:0:0:0:0:0:2  子网内的所有路由器
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>后面有例子演示如何使用多播
</span><span class='line'>
</span><span class='line'>### 子网的划分
</span><span class='line'>
</span><span class='line'>IPv6要求所有的单播（unicast）地址的子网必须是64位的，即下面这种格式：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   |         64 bits         |         64 bits         |
</span><span class='line'>   +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>   |        subnet ID        |       interface ID      | &lt;br/&gt;</span></code></pre></td></tr></table></div></figure></p>

<p>如果子网的长度不是64位的话，会导致一些IPv6的功能不可用，详情请参考IPv6 Unicast Address Assignment Considerations。</p>

<p>Interface ID为Modified EUI-64格式，标准里面提供了如何将48位mac地址转换成EUI-64格式的方法。</p>

<p>IPv6标准要求单播地址的子网必须是64位的，主要是为了简化IPv6的管理，同时路由也方便，毕竟现在CPU都是64位的，如果子网号超过64位的话，会给路由造成一定的困难，同时64位的接口ID也比较容易存放一个UUID，比如可以容纳48位的mac地址，为Stateless Auto Configuration的地址分配提供了足够的空间。</p>

<p>64位的子网够用吗？64位的子网已经可以容纳2<sup>64</sup>的设备了，相当于40亿个现在的IPv4地址空间的规模，实在是想不出还有哪种场合需要更大的子网。</p>

<p>64位的子网浪费吗？想想IPv4时代，几个人或者一群人通过NAT共享1个公网IP，而到了IPv6时代，这些人竟然可以拥有2<sup>64</sup>个IP地址，想用几个用几个，为几个人分配一个64位的子网是不是有点浪费呢？其实谈不上浪费，IPv6的地址就是有那么多，大家都空着不用也是浪费，按道理64位的IP地址在可预见的将来已经够用了，而之所以采用128位IP加64位子网的方式，是因为能给我们的管理和使用方面带来很多的方便，如上面提到的便于路由和地址分配等。就算以后IP不够用了，再来放开子网位数的限制应该问题也不大。</p>

<p>  想起了一句话： 等我有了钱，要装两条宽带，一条玩游戏，一条聊QQ。</p>

<h3>Linux上配置IPv6</h3>

<p>下面的所有例子都在ubuntu-server-x86_64 16.04下执行通过</p>

<p>现在的大部分Linux发行版默认情况下都启用了IPv6，如果没有，请参考发行版相关文档进行配置</p>

<pre><code>    #这里有输出，表示IPv6已结启用了
    dev@ubuntu:~$ test -f /proc/net/if_inet6 &amp;&amp; echo "IPv6 is already enabled"
    IPv6 is already enabled
</code></pre>

<p>IPv6启用后，每个网卡都会有一个IPv6地址，如下：</p>

<pre><code>    dev@ubuntu:~$ ifconfig
    enp0s3    Link encap:Ethernet  HWaddr 08:00:27:03:d0:e7
              inet addr:192.168.3.12  Bcast:192.168.3.255  Mask:255.255.255.0
              inet6 addr: fe80::a00:27ff:fe03:d0e7/64 Scope:Link
              ......

    lo        Link encap:Local Loopback
              inet addr:127.0.0.1  Mask:255.0.0.0
              inet6 addr: ::1/128 Scope:Host
              ......
</code></pre>

<p>这里lo的IPv6地址是环回地址::1，而enp0s3有一个“Scope:Link”的IPv6地址fe80::a00:27ff:fe03:d0e7，这个IP地址即上面说到的Link-local地址，它没法通过路由器，只能在子网内部使用。</p>

<p>  由于IPv6对交换机没有要求，所以就算没有支持IPv6的路由器，我们也可以在本地局域网内试玩一下IPv6</p>

<p>通过ip命令就可以给网卡添加IPv6地址，和一个网卡只能有一个IPv4地址不同，一个网卡可以配置多个IPv6地址。</p>

<pre><code>    #添加一个global的地址
    dev@ubuntu:~$ sudo ip -6 addr add 2001::1/64 dev enp0s3
    #添加一个Unique local address地址
    dev@ubuntu:~$ sudo ip -6 addr add fd00::1/64 dev enp0s3
    dev@ubuntu:~$ ifconfig enp0s3
    enp0s3    Link encap:Ethernet  HWaddr 08:00:27:03:d0:e7
              inet addr:192.168.3.12  Bcast:192.168.3.255  Mask:255.255.255.0
              inet6 addr: fd00::1/64 Scope:Global
              inet6 addr: 2001::1/64 Scope:Global
              inet6 addr: fe80::a00:27ff:fe03:d0e7/64 Scope:Link
              ......
</code></pre>

<p>再来看看系统默认的路由表：</p>

<pre><code>    dev@ubuntu:~$ route -A inet6
    Kernel IPv6 routing table
    Destination                    Next Hop                   Flag Met Ref Use If
    2001::/64                      ::                         U    256 0     0 enp0s3
    fd00::/64                      ::                         U    256 0     0 enp0s3
    fe80::/64                      ::                         U    256 1     3 enp0s3
    ::/0                           ::                         !n   -1  1   832 lo
    ::1/128                        ::                         Un   0   3    36 lo
    2001::1/128                    ::                         Un   0   3     9 lo
    fd00::1/128                    ::                         Un   0   2     5 lo
    fe80::a00:27ff:fe03:d0e7/128   ::                         Un   0   3   193 lo
    ff00::/8                       ::                         U    256 2    84 enp0s3
    ::/0                           ::                         !n   -1  1   832 lo
</code></pre>

<p>从“Next Hop”列可以看出，这里的所有网段都是本地接口可以直接到达的网段，不需要路由器转发。</p>

<h3>使用IPv6</h3>

<p>上节配置好了IPv6之后，我们这节来看看怎么使用这些地址</p>

<p>  这里只用一台机器来演示怎么和自己通信，大家有条件的话可以试试两台机器之间通信，效果是一样的。</p>

<h4>ping6</h4>

<p>和IPv4里面的ping相对于的命令是ping6，对于不同类型的地址，ping的方式不一样(为了节省篇幅，示例中省略了ping成功时的输出)：</p>

<pre><code>    #ping lo的环回地址
    dev@ubuntu:~$ ping6 ::1

    #ping类型为“Scope:Global”的地址
    dev@ubuntu:~$ ping6 fd00::1
    dev@ubuntu:~$ ping6 2001::1


    #ping类型为“Scope:Link”的地址
    dev@ubuntu:~$ ping6 -I enp0s3 fe80::a00:27ff:fe03:d0e7

    #ping一个多播（Multicast）地址，ff02::1代表子网中的所有机器
    dev@ubuntu:~$ ping6 -I enp0s3 ff02::1
    PING ff02::1(ff02::1) from fe80::a00:27ff:fe03:d0e7 enp0s3: 56 data bytes
    64 bytes from fe80::a00:27ff:fe03:d0e7: icmp_seq=1 ttl=64 time=0.036 ms
    64 bytes from fe80::3aea:a7ff:fe6c:ecff: icmp_seq=1 ttl=64 time=0.744 ms (DUP!)
    64 bytes from fe80::188d:cbae:80d5:7a7a: icmp_seq=1 ttl=64 time=0.791 ms (DUP!)
    ......
    #可以看到局域网中的其它机器回复的结果，这些IP都是其它机器的“Scope:Link”地址
    #这里(DUP!)是由于ping多播地址时会收到多个回复，导致ping认为有重复的应答，其实是正常情况

    #选择其中的任意一个，单独ping一下试试
    dev@ubuntu:~$ ping6 -I enp0s3 fe80::188d:cbae:80d5:7a7a

    #访问Link-local的地址的时候，除了-I参数外，我们可以直接这样访问
    dev@ubuntu:~$ ping6 fe80::188d:cbae:80d5:7a7a%enp0s3

    #或者根据enp0s3的id来访问
    #获取enp0s3的id
    dev@ubuntu:~$ grep enp0s3 /proc/net/if_inet6 | cut -d' ' -f2 | uniq
    02
    dev@ubuntu:~$ ping6 fe80::188d:cbae:80d5:7a7a%2
</code></pre>

<p>从上面可以看出，ping环回地址和global地址时，直接ping就可以了，而ping多播和Link-Local地址时，需要指定从哪个接口出去，这是因为机器上所有接口的Link-Local地址都属于同一个网段，当有多个接口时，根本没办法自动的判断应该从哪个接口出去。（不过从上面的路由表里面可以看出，在本地只有一个接口时，已经标识fe80::/64和ff00::/8可以从enp0s3口出去，不确定为什么在这种情况下，应用层的程序还要求指定接口名称，可能是为了保持统一吧，不管有几个接口，都一样的用法）。</p>

<p>  注意： 如果是访问其它机器的link-local地址，-I参数和百分号的后面一定要指定本机出去的接口名称，而不是目的IP对应的接口名称</p>

<h3>DNS</h3>

<p>DNS里面有一个专门的IPv6类型，叫AAAA，查询的时候指定类型就可以了</p>

<pre><code>    #host命令默认情况下只查询A类地址，即IPv4地址
    #指定-t AAAA即可查询域名的IPv6地址
    #这里的结果显示，baidu.com还不支持IPv6，google.com已经支持了
    dev@ubuntu:~$ host -t AAAA baidu.com
    baidu.com has no AAAA record
    dev@ubuntu:~$ host -t AAAA google.com
    google.com has IPv6 address 2607:f8b0:400e:c04::65

    #dig命令也是一样的参数
    dev@ubuntu:~$ dig -t AAAA google.com
    #这里省略输出结果，有点长
</code></pre>

<h3>SSH</h3>

<p>下面四种方式都可以登陆当前机器</p>

<pre><code>    dev@ubuntu:~$ ssh ::1   
    dev@ubuntu:~$ ssh 2001::1
    dev@ubuntu:~$ ssh fe80::a00:27ff:fe03:d0e7%enp0s3
    dev@ubuntu:~$ ssh fe80::a00:27ff:fe03:d0e7%2
</code></pre>

<h3>http</h3>

<p>下面以curl来进行演示，如果有图形界面的浏览器的话，可以直接在浏览器里面输入同样的地址</p>

<pre><code>    #--------------------------第一个shell窗口----------------------
    #准备一个支持IPv6的http服务器
    dev@ubuntu:~$ sudo apt-get install php
    dev@ubuntu:~$ mkdir web
    dev@ubuntu:~$ echo "hello world!" &gt; web/index.html
    #启动http服务器，监听所有接口的8080端口
    dev@ubuntu:~$ php -S [::]:8080 -t ./web/
    PHP 7.0.15-0ubuntu0.16.04.4 Development Server started at Mon Mar 20 23:44:26 2017
    Listening on http://[::]:8080
    Document root is /home/dev/web
    Press Ctrl-C to quit.

    #--------------------------第二个shell窗口----------------------
    #确认监听正确，这里:::8080就表示监听了所有IPv6和IPv4接口的8080端口
    dev@ubuntu:~$ netstat -anp|grep 8080
    tcp6       0      0 :::8080                 :::*                    LISTEN      13716/php

    #先试试用IPv4的地址连过来，没有问题
    dev@ubuntu:~$ curl http://127.0.0.1:8080/
    hello world!

    #IPv6的环回地址
    dev@ubuntu:~$ curl http://[::1]:8080/
    hello world!

    #IPv6的global地址
    dev@ubuntu:~$ curl http://[2001::1]:8080/
    hello world!

    #link-local地址
    dev@ubuntu:~$ curl http://[fe80::a00:27ff:fe03:d0e7%enp0s3]:8080/
    hello world!
    dev@ubuntu:~$ curl http://[fe80::a00:27ff:fe03:d0e7%2]:8080/
    hello world!
</code></pre>

<h3>IPv6编程示例</h3>

<p>这里以python代码为示例，写了一个UDP的服务器和客户端，演示如何同时支持IPv4和IPv6。（为了简化起见，代码里面没有做错误处理）</p>

<h4>server.py</h4>

<pre><code>    import socket
    import sys

    ip,port = sys.argv[1],int(sys.argv[2])

    addrinfo = socket.getaddrinfo(ip, port, proto=socket.IPPROTO_UDP)[0]
    sock = socket.socket(addrinfo[0], socket.SOCK_DGRAM)
    addr = addrinfo[4]
    sock.bind(addr)

    print("Listening on [{}]:{}...".format(addr[0], addr[1]))

    while True:
        data, addr = sock.recvfrom(65535)
        print("Recvfrom [{}]:{}\t{}".format(addr[0], addr[1], data))
        sock.sendto(data, addr)
</code></pre>

<h4>client.py</h4>

<pre><code>    import socket
    import sys

    host,port = sys.argv[1],int(sys.argv[2])

    addrinfos = socket.getaddrinfo(host, port, proto=socket.IPPROTO_UDP)
    for addrinfo in addrinfos:
        sock = socket.socket(addrinfo[0], socket.SOCK_DGRAM)
        sock.settimeout(2)
        data = b'hello'
        addr = addrinfo[4]
        sock.sendto(data, addr)
        print("Sendto   [{}]:{}\t{}".format(addr[0], addr[1], data))
        try:
            data, addr = sock.recvfrom(65535)
            print("Recvfrom [{}]:{}\t{}".format(addr[0], addr[1], data))
        except socket.timeout:
            print("timeout")
</code></pre>

<p>如果参数传入的是域名或者主机名，getaddrinfo函数可能返回多个IP，这时候客户端需要根据自己的应用特点选择一个或多个进行通信，在本例中是发送数据包给所有的IP。</p>

<p>getaddrinfo返回的IP列表里面的顺序是有讲究的，如果对这个很在意的话，请参考rfc6724，默认情况一般是IPv6的地址在前面，在Linux下还可以通过/etc/gai.conf来配置相关的顺序。</p>

<h4>server使用示例</h4>

<pre><code>    dev@ubuntu:~/ipv6$ python3 server.py :: 8000
    Listening on [::]:8000...
    dev@ubuntu:~/ipv6$ python3 server.py 0.0.0.0 8000
    Listening on [0.0.0.0]:8000...
    dev@ubuntu:~/ipv6$ python3 server.py 2001::1 8000
    Listening on [2001::1]:8000...
    dev@ubuntu:~/ipv6$ python3 server.py fe80::a00:27ff:fe03:d0e7%enp0s3 8000
    Listening on [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000...
    dev@ubuntu:~/ipv6$ python3 server.py fe80::a00:27ff:fe03:d0e7%2 8000
    Listening on [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000...
</code></pre>

<p>server绑定所有IPv4和IPv6的接口， 然后client用不同的方式发包</p>

<pre><code>    dev@ubuntu:~/ipv6$ python3 server.py :: 8000
    Listening on [::]:8000...
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:48033        b'hello'
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:50298        b'hello'
    Recvfrom [2001::1]:60882        b'hello'
    Recvfrom [::1]:44664    b'hello'
    Recvfrom [::ffff:127.0.0.1]:46676       b'hello'
    Recvfrom [::1]:55518    b'hello'
    Recvfrom [::ffff:127.0.0.1]:35961       b'hello'
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:36281        b'hello'
</code></pre>

<pre><code>    dev@ubuntu:~/ipv6$ python3 client.py fe80::a00:27ff:fe03:d0e7%enp0s3 8000
    Sendto   [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000 b'hello'
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000 b'hello'
    dev@ubuntu:~/ipv6$ python3 client.py fe80::a00:27ff:fe03:d0e7%2 8000
    Sendto   [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000 b'hello'
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000 b'hello'
    dev@ubuntu:~/ipv6$ python3 client.py 2001::1 8000
    Sendto   [2001::1]:8000 b'hello'
    Recvfrom [2001::1]:8000 b'hello'
    dev@ubuntu:~/ipv6$ python3 client.py ::1 8000
    Sendto   [::1]:8000     b'hello'
    Recvfrom [::1]:8000     b'hello'
    dev@ubuntu:~/ipv6$ python3 client.py 127.0.0.1 8000
    Sendto   [127.0.0.1]:8000       b'hello'
    Recvfrom [127.0.0.1]:8000       b'hello'
    #由于localhost在/etc/hosts里面配置了两个IP，所以这里发了两个数据包，
    #并且是先发IPv6的地址
    dev@ubuntu:~/ipv6$ python3 client.py localhost 8000
    Sendto   [::1]:8000     b'hello'
    Recvfrom [::1]:8000     b'hello'
    Sendto   [127.0.0.1]:8000       b'hello'
    Recvfrom [127.0.0.1]:8000       b'hello'
    #通过多播地址发给当前子网中的所有机器
    dev@ubuntu:~/ipv6$ python3 client.py FF02:0:0:0:0:0:0:1%enp0s3 8000
    Sendto   [ff02::1%enp0s3]:8000  b'hello'
    Recvfrom [fe80::a00:27ff:fe03:d0e7%enp0s3]:8000 b'hello'
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[IPV6 实现]]></title>
<link href="http://abcdxyzk.github.io/blog/2015/06/18/kernel-net-ipv6-code/"/>
<updated>2015-06-18T10:44:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2015/06/18/kernel-net-ipv6-code</id>
<content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/super-king/p/ipv6_implement.html">http://www.cnblogs.com/super-king/p/ipv6_implement.html</a></p>

<p>code extract from 2.6.24.
在文件 net/ipv6/af_inet6.c 中包含了ipv6协议初始化的主函数。
```
    static int __init inet6_init(void)
    {
        struct sk_buff <em>dummy_skb;
        struct list_head </em>r;
        int err;
        //inet6_skb_parm必须小于等于skb中的cb
        BUILD_BUG_ON(sizeof(struct inet6_skb_parm) > sizeof(dummy_skb->cb));</p>

<pre><code>    //初始化tcpv6_prot结构中的一些与slab相关的字段，然后添加到 proto_list 全局连表
    err = proto_register(&amp;tcpv6_prot, 1);
    if (err)
        goto out;
    //udp协议同上
    err = proto_register(&amp;udpv6_prot, 1);
    if (err)
        goto out_unregister_tcp_proto;
    //udp-lite传输协议，主要用于多媒体传输，参考kernel中的 Documentation/networking/udplite.txt
    err = proto_register(&amp;udplitev6_prot, 1);
    if (err)
        goto out_unregister_udp_proto;
    //原始套接字同上
    err = proto_register(&amp;rawv6_prot, 1);
    if (err)
        goto out_unregister_udplite_proto;

    /* Register the socket-side information for inet6_create.  */
    for(r = &amp;inetsw6[0]; r &lt; &amp;inetsw6[SOCK_MAX]; ++r) //初始化一个协议连表数组
        INIT_LIST_HEAD(r);
    /* We MUST register RAW sockets before we create the ICMP6, IGMP6, or NDISC control sockets. */
    //根据参数数据结构中标识的协议类型，把这数据结构添加到上面的协议连表数组中
    inet6_register_protosw(&amp;rawv6_protosw);

    /* Register the family here so that the init calls below will be able to create sockets. (?? is this dangerous ??) */
    //注册ipv6协议族，主要是注册socket创建函数
    err = sock_register(&amp;inet6_family_ops);
    if (err)
        goto out_unregister_raw_proto;

    /* Initialise ipv6 mibs */
    err = init_ipv6_mibs(); //所有ipv6相关的统计信息
    if (err)
        goto out_unregister_sock;
    /* ipngwg API draft makes clear that the correct semantics for TCP and UDP is to consider one TCP and UDP instance 
     * in a host availiable by both INET and INET6 APIs and able to communicate via both network protocols.
     */
#ifdef CONFIG_SYSCTL
    ipv6_sysctl_register(); // ipv6协议proc条件项初始化
#endif
    //icmp协议注册
    err = icmpv6_init(&amp;inet6_family_ops);
    if (err)
        goto icmp_fail;
    //邻居协议（arp）初始化       
    err = ndisc_init(&amp;inet6_family_ops);
    if (err)
        goto ndisc_fail;
    //igmp协议初始化       
    err = igmp6_init(&amp;inet6_family_ops);
    if (err)
        goto igmp_fail;
    //ipv6协议相关的 netfilter 初始化     
    err = ipv6_netfilter_init();
    if (err)
        goto netfilter_fail;

    /* Create /proc/foo6 entries. */
#ifdef CONFIG_PROC_FS //注册/proc/中协议统计输出项
    err = -ENOMEM;
    if (raw6_proc_init())
        goto proc_raw6_fail;
    if (tcp6_proc_init())
        goto proc_tcp6_fail;
    if (udp6_proc_init())
        goto proc_udp6_fail;
    if (udplite6_proc_init())
        goto proc_udplite6_fail;
    if (ipv6_misc_proc_init())
        goto proc_misc6_fail;
    if (ac6_proc_init())
        goto proc_anycast6_fail;
    if (if6_proc_init())
        goto proc_if6_fail;
#endif
    ip6_route_init(); //ipv6 路由初始化
    ip6_flowlabel_init();//ipv6 中流标记，注册了输出流标记的 proc

    //rtnetlink相关部分和路由模板中一些字段和其他一些功能的初始化
    err = addrconf_init();
    if (err)
        goto addrconf_fail;
    /* Init v6 extension headers. */
    //ipv6 新添加的扩展头初始化，参考ipv6介绍
    ipv6_rthdr_init();
    ipv6_frag_init();
    ipv6_nodata_init();
    ipv6_destopt_init();

    /* Init v6 transport protocols. */
    //最主要的传输层协议初始化
    udpv6_init();
    udplitev6_init();
    tcpv6_init();

    //最后注册ipv6协议，注册协议处理函数
    ipv6_packet_init();
    err = 0;
out:
    return err;
    ...... //下面就是错误处理的过程
}
</code></pre>

<pre><code>
下面我们主要看ipv6协议部分流程，其他部分在各自相关文章中介绍。

ipv6扩展头，路由包头注册
</code></pre>

<pre><code>void __init ipv6_rthdr_init(void)
{
    if (inet6_add_protocol(&amp;rthdr_protocol, IPPROTO_ROUTING) &lt; 0)
        printk(KERN_ERR "ipv6_rthdr_init: Could not register protocol\n");
};
</code></pre>

<pre><code>
ipv6扩展头，分片包头注册
</code></pre>

<pre><code>void __init ipv6_frag_init(void)
{
    if (inet6_add_protocol(&amp;frag_protocol, IPPROTO_FRAGMENT) &lt; 0)
        printk(KERN_ERR "ipv6_frag_init: Could not register protocol\n");

    ip6_frags.ctl = &amp;ip6_frags_ctl;
    ip6_frags.hashfn = ip6_hashfn;
    ip6_frags.constructor = ip6_frag_init;
    ip6_frags.destructor = NULL;
    ip6_frags.skb_free = NULL;
    ip6_frags.qsize = sizeof(struct frag_queue);
    ip6_frags.match = ip6_frag_match;
    ip6_frags.frag_expire = ip6_frag_expire;
    inet_frags_init(&amp;ip6_frags);
}
void __init ipv6_nodata_init(void)
{
    if (inet6_add_protocol(&amp;nodata_protocol, IPPROTO_NONE) &lt; 0)
        printk(KERN_ERR "ipv6_nodata_init: Could not register protocol\n");
}
</code></pre>

<pre><code>
ipv6扩展头，目的选项包头注册
</code></pre>

<pre><code>void __init ipv6_destopt_init(void)
{
    if (inet6_add_protocol(&amp;destopt_protocol, IPPROTO_DSTOPTS) &lt; 0)
        printk(KERN_ERR "ipv6_destopt_init: Could not register protocol\n");
}
    注册ipv6协议处理函数
void __init ipv6_packet_init(void)
{
    dev_add_pack(&amp;ipv6_packet_type);
}
</code></pre>

<pre><code>
当netif_receive_skb函数向上层递交skb时会根据协议类型调用相关的协议处理函数，那么就会调用到 ipv6_rcv函数了。
</code></pre>

<pre><code>static struct packet_type ipv6_packet_type = {
    .type = __constant_htons(ETH_P_IPV6),
    .func = ipv6_rcv,
    .gso_send_check = ipv6_gso_send_check,
    .gso_segment = ipv6_gso_segment,
};
</code></pre>

<pre><code>
ipv6协议处理函数
</code></pre>

<pre><code>int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
{
    struct ipv6hdr *hdr;
    u32             pkt_len;
    struct inet6_dev *idev;

    if (dev-&gt;nd_net != &amp;init_net) {
        kfree_skb(skb);
        return 0;
    }
    //mac地址是其他主机的包
    if (skb-&gt;pkt_type == PACKET_OTHERHOST) {
        kfree_skb(skb);
        return 0;
    }
    rcu_read_lock();
    //获取ipv6相关的配置结构
    idev = __in6_dev_get(skb-&gt;dev);

    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INRECEIVES);
    //是否共享，如果是，新clone一个
    if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL) {
        IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDISCARDS);
        rcu_read_unlock();
        goto out;
    }
    //清空保存扩展头解析结果的数据结构
    memset(IP6CB(skb), 0, sizeof(struct inet6_skb_parm));

    //保存接收这个数据包的设备索引
    IP6CB(skb)-&gt;iif = skb-&gt;dst ? ip6_dst_idev(skb-&gt;dst)-&gt;dev-&gt;ifindex : dev-&gt;ifindex;

    //有足够的头长度，ipv6是40字节
    if (unlikely(!pskb_may_pull(skb, sizeof(*hdr))))
        goto err;

    hdr = ipv6_hdr(skb); //获取头

    if (hdr-&gt;version != 6) //验证版本
        goto err;

    //传输头（扩展头）在网络头后面
    skb-&gt;transport_header = skb-&gt;network_header + sizeof(*hdr);
    //保存下一个扩展头协议在ipv6头结构中的偏移
    IP6CB(skb)-&gt;nhoff = offsetof(struct ipv6hdr, nexthdr);
    pkt_len = ntohs(hdr-&gt;payload_len); //ipv6负载数据长度

    /* pkt_len may be zero if Jumbo payload option is present */
    if (pkt_len || hdr-&gt;nexthdr != NEXTHDR_HOP) { //没有使用扩展头逐个跳段选项
        if (pkt_len + sizeof(struct ipv6hdr) &gt; skb-&gt;len) { //数据长度不对
            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INTRUNCATEDPKTS);
            goto drop;
        }
        //如果skb-&gt;len &gt; (pkt_len + sizeof(struct ipv6hdr))试着缩小skb-&gt;len的长度
        //相对ipv4来说简单多了，自己看吧
        if (pskb_trim_rcsum(skb, pkt_len + sizeof(struct ipv6hdr))) {
            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
            goto drop;
        }
        hdr = ipv6_hdr(skb); //重新获取ip头
    }
    if (hdr-&gt;nexthdr == NEXTHDR_HOP) { //使用了扩展头逐个跳段选项
        if (ipv6_parse_hopopts(skb) &lt; 0) {//处理这个选项
            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
            rcu_read_unlock();
            return 0;
        }
    }
    rcu_read_unlock();
    //进入ipv6的netfilter然后调用ip6_rcv_finish
    return NF_HOOK(PF_INET6,NF_IP6_PRE_ROUTING, skb, dev, NULL, ip6_rcv_finish);
err:
    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
drop:
    rcu_read_unlock();
    kfree_skb(skb);
out:
    return 0;
}
</code></pre>

<pre><code>
解析扩展头逐个跳段中的巨量负载选项
</code></pre>

<pre><code>int ipv6_parse_hopopts(struct sk_buff *skb)
{
    struct inet6_skb_parm *opt = IP6CB(skb); //获取扩展头结果结构
    /* skb_network_header(skb) is equal to skb-&gt;data, and skb_network_header_len(skb) is always equal to
     * sizeof(struct ipv6hdr) by definition of hop-by-hop options.
     */
    //验证数据有足够的长度
    if (!pskb_may_pull(skb, sizeof(struct ipv6hdr) + 8) || !pskb_may_pull(skb, (sizeof(struct ipv6hdr) +
                    //下面的意思是取得扩展首部中的长度
                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
        kfree_skb(skb);
        return -1;
    }
    opt-&gt;hop = sizeof(struct ipv6hdr); //40字节
    if (ip6_parse_tlv(tlvprochopopt_lst, skb)) { //实际的解析工作
        //把传输头移动到扩展首部之后
        skb-&gt;transport_header += (skb_transport_header(skb)[1] + 1) &lt;&lt; 3;
        opt = IP6CB(skb);
        opt-&gt;nhoff = sizeof(struct ipv6hdr); //进行了ipv6扩展头解析，保存下一个扩展头协议字段的偏移
        return 1;
    }
    return -1;
}
</code></pre>

<pre><code>
解析tlv编码的扩展选项头
</code></pre>

<pre><code>static int ip6_parse_tlv(struct tlvtype_proc *procs, struct sk_buff *skb)
{
    struct tlvtype_proc *curr;
    const unsigned char *nh = skb_network_header(skb); //获取网络头
    int off = skb_network_header_len(skb); //获取网络头长度
    int len = (skb_transport_header(skb)[1] + 1) &lt;&lt; 3; //首部扩展头长度

    if (skb_transport_offset(skb) + len &gt; skb_headlen(skb)) //长度错误
        goto bad;
    off += 2; //跳过下一个首部和首部扩展长度这两个字节
    len -= 2;

    while (len &gt; 0) {
        int optlen = nh[off + 1] + 2; //获取选项数据长度 + 2 (2是选项类型和选项数据长度两字节)
        switch (nh[off]) { //选项类型
            case IPV6_TLV_PAD0: //Pad1选项
                optlen = 1;
                break;
            case IPV6_TLV_PADN://PadN选项
                break;
            default: //其他选项
                if (optlen &gt; len)
                    goto bad;

                for (curr = procs; curr-&gt;type &gt;= 0; curr++) {
                    if (curr-&gt;type == nh[off]) { //类型匹配，调用参数函数处理，参考下面ipv6选项处理
                        /* type specific length/alignment checks will be performed in the func(). */
                        if (curr-&gt;func(skb, off) == 0)
                            return 0;
                        break;
                    }
                }
                if (curr-&gt;type &lt; 0) {
                    if (ip6_tlvopt_unknown(skb, off) == 0) //处理未知选项
                        return 0;
                }
                break;
        }
        off += optlen; //偏移增加，这样到下一个选项
        len -= optlen; //长度递减
    }
    if (len == 0)
        return 1; //正确解析完毕
bad:
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
处理未知的选项
</code></pre>

<pre><code>static int ip6_tlvopt_unknown(struct sk_buff *skb, int optoff)
{
    //根据选项类型标识符的要求进行处理
    switch ((skb_network_header(skb)[optoff] &amp; 0xC0) &gt;&gt; 6) {
        case 0: /* ignore */
            return 1;
        case 1: /* drop packet */
            break;
        case 3: /* Send ICMP if not a multicast address and drop packet */
            /* Actually, it is redundant check. icmp_send will recheck in any case. */
            if (ipv6_addr_is_multicast(&amp;ipv6_hdr(skb)-&gt;daddr)) //目的是多播地址
                break;
        case 2: /* send ICMP PARM PROB regardless and drop packet */
            //给包的源地址发送一个 ICMP "参数存在问题", 编码 2 的报文, 指针指向无法识别的选项类型
            icmpv6_param_prob(skb, ICMPV6_UNK_OPTION, optoff);
            return 0;
    }
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
到这需要解释一下，上面解析ipv6选项只是解析了第一层的扩展头，在后面可能还有其他扩展头会在后面解析。
</code></pre>

<pre><code>inline int ip6_rcv_finish( struct sk_buff *skb)
{
    if (skb-&gt;dst == NULL) //没有路由，进行路由查找
        ip6_route_input(skb); //路由部分将在路由实现文章中介绍

    return dst_input(skb);
}
static inline int dst_input(struct sk_buff *skb)
{
    int err;
    for (;;) {
        err = skb-&gt;dst-&gt;input(skb); //调用路由的输入函数
        if (likely(err == 0))
            return err;

        /* Oh, Jamal... Seems, I will not forgive you this mess. :-) */
        if (unlikely(err != NET_XMIT_BYPASS))
            return err;
    }
}
</code></pre>

<pre><code>
现在我们假设包是到本地的，那么上面的input函数就是
</code></pre>

<pre><code>int ip6_input(struct sk_buff *skb)
{
    //进入ipv6 netfilter NF_IP6_LOCAL_IN hook 然后调用 ip6_input_finish
    return NF_HOOK(PF_INET6, NF_IP6_LOCAL_IN, skb, skb-&gt;dev, NULL, ip6_input_finish);
}
static int ip6_input_finish(struct sk_buff *skb)
{
    struct inet6_protocol *ipprot;
    struct sock *raw_sk;
    unsigned int nhoff;
    int nexthdr;
    u8 hash;
    struct inet6_dev *idev;

    /* Parse extension headers */
    rcu_read_lock();
resubmit:
    idev = ip6_dst_idev(skb-&gt;dst);
    //将skb-&gt;data指针移动到传输层头
    if (!pskb_pull(skb, skb_transport_offset(skb)))
        goto discard;

    nhoff = IP6CB(skb)-&gt;nhoff;
    nexthdr = skb_network_header(skb)[nhoff];//下一个扩展头协议

    //处理原始sock
    raw_sk = sk_head(&amp;raw_v6_htable[nexthdr &amp; (MAX_INET_PROTOS - 1)]);
    if (raw_sk &amp;&amp; !ipv6_raw_deliver(skb, nexthdr))
        raw_sk = NULL;

    //向上层协议栈递交数据，看初始化时注册的一些协议，主要是tcp，udp等，还包括一些ip扩展头的处理
    hash = nexthdr &amp; (MAX_INET_PROTOS - 1);
    if ((ipprot = rcu_dereference(inet6_protos[hash])) != NULL) {
        int ret;
        if (ipprot-&gt;flags &amp; INET6_PROTO_FINAL) {
            struct ipv6hdr *hdr;
            /* Free reference early: we don't need it any more,                        
               and it may hold ip_conntrack module loaded indefinitely. */
            nf_reset(skb);

            skb_postpull_rcsum(skb, skb_network_header(skb), skb_network_header_len(skb));
            hdr = ipv6_hdr(skb);
            if (ipv6_addr_is_multicast(&amp;hdr-&gt;daddr) &amp;&amp; !ipv6_chk_mcast_addr(skb-&gt;dev, &amp;hdr-&gt;daddr, &amp;hdr-&gt;saddr)
                    &amp;&amp; !ipv6_is_mld(skb, nexthdr))
                goto discard;
        }
        //处理 IPSEC v6 的相关部分
        if (!(ipprot-&gt;flags &amp; INET6_PROTO_NOPOLICY) &amp;&amp; !xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb))
            goto discard;

        ret = ipprot-&gt;handler(skb); //上层协议处理，看下面ipv6扩展头处理
        if (ret &gt; 0)
            goto resubmit; //重新处理
        else if (ret == 0)
            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDELIVERS);
    } else { //没有找到上层处理函数
        if (!raw_sk) {
            if (xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb)) {
                IP6_INC_STATS_BH(idev, IPSTATS_MIB_INUNKNOWNPROTOS);
                icmpv6_send(skb, ICMPV6_PARAMPROB, ICMPV6_UNK_NEXTHDR, nhoff, skb-&gt;dev);
            }
        } else
            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDELIVERS);
        kfree_skb(skb);
    }
    rcu_read_unlock();
    return 0;
discard:
    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDISCARDS);
    rcu_read_unlock();
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
#### ipv6选项处理
</code></pre>

<pre><code>static struct tlvtype_proc tlvprochopopt_lst[] = {
    {
        .type   = IPV6_TLV_ROUTERALERT,
        .func   = ipv6_hop_ra,
    },
    {
        .type   = IPV6_TLV_JUMBO,
        .func   = ipv6_hop_jumbo,
    },
    { -1, }
};
</code></pre>

<pre><code>
解析路由警告选项
</code></pre>

<pre><code>static int ipv6_hop_ra(struct sk_buff *skb, int optoff)
{
    const unsigned char *nh = skb_network_header(skb); //获取网络头

    if (nh[optoff + 1] == 2) { //路由警告选项长度必须是2 ? rfc 要求是 4
        IP6CB(skb)-&gt;ra = optoff; //记录警告类型
        return 1;
    }
    LIMIT_NETDEBUG(KERN_DEBUG "ipv6_hop_ra: wrong RA length %d\n", nh[optoff + 1]);
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
解析jumbo frame选项
</code></pre>

<pre><code>static int ipv6_hop_jumbo(struct sk_buff *skb, int optoff)
{
    const unsigned char *nh = skb_network_header(skb);
    u32 pkt_len;
    //选项数据长度必须是4，选项类型必须是 0xc2， ＆3 后必须是2
    if (nh[optoff + 1] != 4 || (optoff &amp; 3) != 2) {
        LIMIT_NETDEBUG(KERN_DEBUG "ipv6_hop_jumbo: wrong jumbo opt length/alignment %d\n", nh[optoff+1]);
        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
        goto drop;
    }
    pkt_len = ntohl(*(__be32 *)(nh + optoff + 2)); //获取整个负载长度
    if (pkt_len &lt;= IPV6_MAXPLEN) { //小于65535 是不对地
        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff+2);
        return 0;
    }
    if (ipv6_hdr(skb)-&gt;payload_len) { //原ipv6头中就不应该有负载长度了
        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff);
        return 0;
    }
    if (pkt_len &gt; skb-&gt;len - sizeof(struct ipv6hdr)) { //长度超出了 skb 的实际长度
        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INTRUNCATEDPKTS);
        goto drop;
    }
    //如果必要试图缩减 skb 的长度
    if (pskb_trim_rcsum(skb, pkt_len + sizeof(struct ipv6hdr)))
        goto drop;

    return 1;
drop:
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
目的选项处理
</code></pre>

<pre><code>static struct tlvtype_proc tlvprocdestopt_lst[] = {
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
    {
        .type   = IPV6_TLV_HAO,
        .func   = ipv6_dest_hao,
    },
#endif
    {-1,    NULL}
};
</code></pre>

<pre><code>
解析目的选项
</code></pre>

<pre><code>static int ipv6_dest_hao(struct sk_buff *skb, int optoff)
{
    struct ipv6_destopt_hao *hao;
    struct inet6_skb_parm *opt = IP6CB(skb);
    struct ipv6hdr *ipv6h = ipv6_hdr(skb);
    struct in6_addr tmp_addr;
    int ret;

    if (opt-&gt;dsthao) { //已经处理
        LIMIT_NETDEBUG(KERN_DEBUG "hao duplicated\n");
        goto discard;
    }
    opt-&gt;dsthao = opt-&gt;dst1;
    opt-&gt;dst1 = 0;

    //获取网络头后面的选项部分
    hao = (struct ipv6_destopt_hao *)(skb_network_header(skb) + optoff);

    if (hao-&gt;length != 16) { //长度要求
        LIMIT_NETDEBUG(KERN_DEBUG "hao invalid option length = %d\n", hao-&gt;length);
        goto discard;
    }
    if (!(ipv6_addr_type(&amp;hao-&gt;addr) &amp; IPV6_ADDR_UNICAST)) { //地址不是单播
        LIMIT_NETDEBUG(KERN_DEBUG "hao is not an unicast addr: " NIP6_FMT "\n", NIP6(hao-&gt;addr));
        goto discard;
    }
    //IPSEC相关
    ret = xfrm6_input_addr(skb, (xfrm_address_t *)&amp;ipv6h-&gt;daddr, (xfrm_address_t *)&amp;hao-&gt;addr, IPPROTO_DSTOPTS);
    if (unlikely(ret &lt; 0))
        goto discard;

    if (skb_cloned(skb)) { //如果包是cloned
        //分配新的内存数据
        if (pskb_expand_head(skb, 0, 0, GFP_ATOMIC))
            goto discard;

        //重新指向各头
        hao = (struct ipv6_destopt_hao *)(skb_network_header(skb) + optoff);
        ipv6h = ipv6_hdr(skb);
    }
    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE)
        skb-&gt;ip_summed = CHECKSUM_NONE;

    //把ip头中的源地址与选项中的地址交换
    ipv6_addr_copy(&amp;tmp_addr, &amp;ipv6h-&gt;saddr);
    ipv6_addr_copy(&amp;ipv6h-&gt;saddr, &amp;hao-&gt;addr);
    ipv6_addr_copy(&amp;hao-&gt;addr, &amp;tmp_addr);

    if (skb-&gt;tstamp.tv64 == 0)
        __net_timestamp(skb); //记录时间截

    return 1;
discard:
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
#### ipv6扩展头处理

我们只介绍根ipv6扩展头相关的实现，像其他的扩展头(tcp, udp)等虽然也是叫扩展头但实际是传输层的内容，将在其他文章中介绍。

路由扩展首部
</code></pre>

<pre><code>struct ipv6_rt_hdr {
    __u8            nexthdr;
    __u8            hdrlen;
    __u8            type;
    __u8            segments_left;

    /* type specific data variable length field */
};
</code></pre>

<pre><code>
路由扩展首部处理结构
</code></pre>

<pre><code>static struct inet6_protocol rthdr_protocol = {
    .handler        =       ipv6_rthdr_rcv,
    .flags          =       INET6_PROTO_NOPOLICY | INET6_PROTO_GSO_EXTHDR,
};
static int ipv6_rthdr_rcv(struct sk_buff *skb)
{
    struct inet6_skb_parm *opt = IP6CB(skb);
    struct in6_addr *addr = NULL;
    struct in6_addr daddr;
    struct inet6_dev *idev;
    int n, i;
    struct ipv6_rt_hdr *hdr;
    struct rt0_hdr *rthdr;
    int accept_source_route = ipv6_devconf.accept_source_route;

    idev = in6_dev_get(skb-&gt;dev); //包进入设备
    if (idev) {
        if (accept_source_route &gt; idev-&gt;cnf.accept_source_route) //默认数量大于了手动调节(proc中）的数量
            accept_source_route = idev-&gt;cnf.accept_source_route;
        in6_dev_put(idev);
    }
    //skb长度和内存空间正确
    if (!pskb_may_pull(skb, skb_transport_offset(skb) + 8) || !pskb_may_pull(skb, (skb_transport_offset(skb) +
                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        kfree_skb(skb);
        return -1;
    }
    hdr = (struct ipv6_rt_hdr *)skb_transport_header(skb); //路由扩展头
    //是到多播地址或硬件地址不是到本机的地址
    if (ipv6_addr_is_multicast(&amp;ipv6_hdr(skb)-&gt;daddr) || skb-&gt;pkt_type != PACKET_HOST) {
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
        kfree_skb(skb);
        return -1;
    }
looped_back:
    if (hdr-&gt;segments_left == 0) { //根据rfc要求 分段剩余为0
        switch (hdr-&gt;type) {
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
            case IPV6_SRCRT_TYPE_2:
                /* Silently discard type 2 header unless it was processed by own */
                if (!addr) {
                    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
                    kfree_skb(skb);
                    return -1;
                }
                break;
#endif
            default:
                break;

        }
        opt-&gt;lastopt = opt-&gt;srcrt = skb_network_header_len(skb);
        skb-&gt;transport_header += (hdr-&gt;hdrlen + 1) &lt;&lt; 3; //下一个传输头的位置
        opt-&gt;dst0 = opt-&gt;dst1;
        opt-&gt;dst1 = 0;
        opt-&gt;nhoff = (&amp;hdr-&gt;nexthdr) - skb_network_header(skb); //记录下一个头数据相对网络头的偏移量
        return 1;
    }
    switch (hdr-&gt;type) {
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
        case IPV6_SRCRT_TYPE_2:
            if (accept_source_route &lt; 0)
                goto unknown_rh;
            /* Silently discard invalid RTH type 2 */
            if (hdr-&gt;hdrlen != 2 || hdr-&gt;segments_left != 1) {
                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
                kfree_skb(skb);
                return -1;
            }
            break;
#endif
        default:
            goto unknown_rh;
    }
    /* This is the routing header forwarding algorithm from RFC 2460, page 16. */

    n = hdr-&gt;hdrlen &gt;&gt; 1; //计算路由首部中的地址数量
    if (hdr-&gt;segments_left &gt; n) {
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, ((&amp;hdr-&gt;segments_left) - skb_network_header(skb)));
        return -1;
    }
    /* We are about to mangle packet header. Be careful!                                       
       Do not damage packets queued somewhere.  */
    if (skb_cloned(skb)) {
        /* the copy is a forwarded packet */
        if (pskb_expand_head(skb, 0, 0, GFP_ATOMIC)) {
            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_OUTDISCARDS);
            kfree_skb(skb);
            return -1;
        }
        hdr = (struct ipv6_rt_hdr *)skb_transport_header(skb);
    }
    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE)
        skb-&gt;ip_summed = CHECKSUM_NONE;

    i = n - --hdr-&gt;segments_left; //计算地址向量(地址列表)中要"访问"的下一个地址

    rthdr = (struct rt0_hdr *) hdr;
    addr = rthdr-&gt;addr; //指向地址列表首部
    addr += i - 1; //移动到下一个地址

    switch (hdr-&gt;type) {
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
        case IPV6_SRCRT_TYPE_2:
            if (xfrm6_input_addr(skb, (xfrm_address_t *)addr, (xfrm_address_t *)&amp;ipv6_hdr(skb)-&gt;saddr, IPPROTO_ROUTING) &lt; 0) {
                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
                kfree_skb(skb);
                return -1;
            }
            if (!ipv6_chk_home_addr(addr)) {
                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
                kfree_skb(skb);
                return -1;
            }
            break;
#endif
        default:
            break;
    }
    if (ipv6_addr_is_multicast(addr)) { //这个地址是多播地址
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
        kfree_skb(skb);
        return -1;
    }
    //交换 IPv6 目的地址和这个地址
    ipv6_addr_copy(&amp;daddr, addr);
    ipv6_addr_copy(addr, &amp;ipv6_hdr(skb)-&gt;daddr);
    ipv6_addr_copy(&amp;ipv6_hdr(skb)-&gt;daddr, &amp;daddr);
    dst_release(xchg(&amp;skb-&gt;dst, NULL));

    ip6_route_input(skb); //路由查找处理，将在其他文章中介绍

    if (skb-&gt;dst-&gt;error) {
        skb_push(skb, skb-&gt;data - skb_network_header(skb));
        dst_input(skb);
        return -1;
    }

    if (skb-&gt;dst-&gt;dev-&gt;flags &amp; IFF_LOOPBACK) { //路由查找后要发送到的目的设备是回环
        if (ipv6_hdr(skb)-&gt;hop_limit &lt;= 1) { //跳数限制小于1
            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
            //给源地址发送一个 ICMP "超时 – 传输超过跳数限制" 的报文, 并且抛弃此包
            icmpv6_send(skb, ICMPV6_TIME_EXCEED, ICMPV6_EXC_HOPLIMIT, 0, skb-&gt;dev);
            kfree_skb(skb);
            return -1;
        }
        ipv6_hdr(skb)-&gt;hop_limit--;
        goto looped_back;
    }
    //将data之中移动到网络头
    skb_push(skb, skb-&gt;data - skb_network_header(skb));
    dst_input(skb); //这时包应该被转发了
    return -1;
unknown_rh:
    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
    icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, (&amp;hdr-&gt;type) - skb_network_header(skb));
    return -1;
}
</code></pre>

<pre><code>
ipv6分配包扩展首部处理
</code></pre>

<pre><code>static struct inet6_protocol frag_protocol =
{
    .handler        =       ipv6_frag_rcv,
    .flags          =       INET6_PROTO_NOPOLICY,
};
static int ipv6_frag_rcv(struct sk_buff *skb)
{
    struct frag_hdr *fhdr;
    struct frag_queue *fq;
    struct ipv6hdr *hdr = ipv6_hdr(skb);

    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMREQDS);

    /* Jumbo payload inhibits frag. header */
    if (hdr-&gt;payload_len == 0) { //是Jumbo payload，不是分片包
        IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, skb_network_header_len(skb));
        return -1;
    }
    //有碎片头空间
    if (!pskb_may_pull(skb, (skb_transport_offset(skb) + sizeof(struct frag_hdr)))) {
        IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, skb_network_header_len(skb));
        return -1;
    }
    hdr = ipv6_hdr(skb);
    fhdr = (struct frag_hdr *)skb_transport_header(skb); //分片头

    if (!(fhdr-&gt;frag_off &amp; htons(0xFFF9))) { //没有分片偏移，不是分片包
        /* It is not a fragmented frame */
        skb-&gt;transport_header += sizeof(struct frag_hdr); //传输头向后移动到下一个头
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMOKS);
        IP6CB(skb)-&gt;nhoff = (u8 *)fhdr - skb_network_header(skb);
        return 1;
    }
    if (atomic_read(&amp;ip6_frags.mem) &gt; ip6_frags_ctl.high_thresh) //内存使用超过限制
        ip6_evictor(ip6_dst_idev(skb-&gt;dst));

    //查找或创建分片队列头
    if ((fq = fq_find(fhdr-&gt;identification, &amp;hdr-&gt;saddr, &amp;hdr-&gt;daddr, ip6_dst_idev(skb-&gt;dst))) != NULL) {
        int ret;
        spin_lock(&amp;fq-&gt;q.lock);
        ret = ip6_frag_queue(fq, skb, fhdr, IP6CB(skb)-&gt;nhoff); //入队重组
        spin_unlock(&amp;fq-&gt;q.lock);
        fq_put(fq);
        return ret;
    }
    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMFAILS);
    kfree_skb(skb);
    return -1;
}
static __inline__ struct frag_queue * fq_find(__be32 id, struct in6_addr *src, struct in6_addr *dst, struct inet6_dev *idev)
{
    struct inet_frag_queue *q;
    struct ip6_create_arg arg;
    unsigned int hash;

    arg.id = id;
    arg.src = src;
    arg.dst = dst;
    hash = ip6qhashfn(id, src, dst); //id，源，目的进行 hash

    q = inet_frag_find(&amp;ip6_frags, &amp;arg, hash); //查找或创建
    if (q == NULL)
        goto oom;

    return container_of(q, struct frag_queue, q); //成功返回
oom: //没内存了
    IP6_INC_STATS_BH(idev, IPSTATS_MIB_REASMFAILS);
    return NULL;
}
struct inet_frag_queue *inet_frag_find(struct inet_frags *f, void *key, unsigned int hash)
{
    struct inet_frag_queue *q;
    struct hlist_node *n;

    read_lock(&amp;f-&gt;lock);
    hlist_for_each_entry(q, n, &amp;f-&gt;hash[hash], list) { //在hash桶中查找

        if (f-&gt;match(q, key)) { //调用匹配函数进行匹配，具体函数很简单参考初始化时的ipv6_frag_init函数
            atomic_inc(&amp;q-&gt;refcnt);
            read_unlock(&amp;f-&gt;lock);
            return q;
        }
    }
    //没有找到就创建一个
    return inet_frag_create(f, key, hash);
}
</code></pre>

<pre><code>
创建分片队列
</code></pre>

<pre><code>static struct inet_frag_queue *inet_frag_create(struct inet_frags *f, void *arg, unsigned int hash)
{
    struct inet_frag_queue *q;

    q = inet_frag_alloc(f, arg); //分配一个
    if (q == NULL)
        return NULL;
    //添加到 hash 表
    return inet_frag_intern(q, f, hash, arg);
}
static struct inet_frag_queue *inet_frag_alloc(struct inet_frags *f, void *arg)
{
    struct inet_frag_queue *q;

    q = kzalloc(f-&gt;qsize, GFP_ATOMIC); //分配一个队列头，大小是 sizeof(struct frag_queue)
    if (q == NULL)
        return NULL;

    f-&gt;constructor(q, arg); //拷贝地址和 id 到队列头结构中
    atomic_add(f-&gt;qsize, &amp;f-&gt;mem);
    setup_timer(&amp;q-&gt;timer, f-&gt;frag_expire, (unsigned long)q);
    spin_lock_init(&amp;q-&gt;lock);
    atomic_set(&amp;q-&gt;refcnt, 1);
    return q;
}
static struct inet_frag_queue *inet_frag_intern(struct inet_frag_queue *qp_in, struct inet_frags *f, unsigned int hash, void *arg)
{
    struct inet_frag_queue *qp;
#ifdef CONFIG_SMP
    struct hlist_node *n;
#endif

    write_lock(&amp;f-&gt;lock);
#ifdef CONFIG_SMP
    //其他cpu可能已经创建了一个，所以要再次检查
    hlist_for_each_entry(qp, n, &amp;f-&gt;hash[hash], list) {
        if (f-&gt;match(qp, arg)) { //已经创建
            atomic_inc(&amp;qp-&gt;refcnt);
            write_unlock(&amp;f-&gt;lock);
            qp_in-&gt;last_in |= COMPLETE;
            inet_frag_put(qp_in, f); //释放新分配的
            return qp;

        }
    }
#endif
    qp = qp_in;
    if (!mod_timer(&amp;qp-&gt;timer, jiffies + f-&gt;ctl-&gt;timeout)) //启动定时器
        atomic_inc(&amp;qp-&gt;refcnt);

    //增加引用计数，然后添加到hash表
    atomic_inc(&amp;qp-&gt;refcnt);
    hlist_add_head(&amp;qp-&gt;list, &amp;f-&gt;hash[hash]);
    list_add_tail(&amp;qp-&gt;lru_list, &amp;f-&gt;lru_list);
    f-&gt;nqueues++;
    write_unlock(&amp;f-&gt;lock);
    return qp;
}
</code></pre>

<pre><code>
入队重组
</code></pre>

<pre><code>static int ip6_frag_queue(struct frag_queue *fq, struct sk_buff *skb, struct frag_hdr *fhdr, int nhoff)
{
    struct sk_buff *prev, *next;
    struct net_device *dev;
    int offset, end;

    if (fq-&gt;q.last_in &amp; COMPLETE) //重组已经完成
        goto err;

    //分片开始位置
    offset = ntohs(fhdr-&gt;frag_off) &amp; ~0x7;//偏移必须8字节对齐
    //分片在整个包中的结束位置 包负载长度 - 分片头长度
    end = offset + (ntohs(ipv6_hdr(skb)-&gt;payload_len) -  ((u8 *)(fhdr + 1) - (u8 *)(ipv6_hdr(skb) + 1)));

    //结束位置 &gt; 65535
    if ((unsigned int)end &gt; IPV6_MAXPLEN) {
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, ((u8 *)&amp;fhdr-&gt;frag_off - skb_network_header(skb)));
        return -1;
    }
    //校验和已经完成
    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE) {
        const unsigned char *nh = skb_network_header(skb);
        //减去分片包头的校验和
        skb-&gt;csum = csum_sub(skb-&gt;csum, csum_partial(nh, (u8 *)(fhdr + 1) - nh, 0));
    }
    //最后一个碎片包
    if (!(fhdr-&gt;frag_off &amp; htons(IP6_MF))) {
        /* If we already have some bits beyond end or have different end, the segment is corrupted. */
        if (end &lt; fq-&gt;q.len || ((fq-&gt;q.last_in &amp; LAST_IN) &amp;&amp; end != fq-&gt;q.len)) //分片出现错误
            goto err;

        fq-&gt;q.last_in |= LAST_IN; //标识最后一个分片
        fq-&gt;q.len = end; //记录包总长度
    } else {
        /* Check if the fragment is rounded to 8 bytes. Required by the RFC. */
        if (end &amp; 0x7) { //碎片结尾也需要8字节对齐
            /* RFC2460 says always send parameter problem in this case. -DaveM */
            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), PSTATS_MIB_INHDRERRORS);
            icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, offsetof(struct ipv6hdr, payload_len));
            return -1;
        }
        if (end &gt; fq-&gt;q.len) {
            /* Some bits beyond end -&gt; corruption. */
            if (fq-&gt;q.last_in &amp; LAST_IN)
                goto err;
            fq-&gt;q.len = end; //记录已经得到的碎片的最大长度
        }
    }
    if (end == offset) //开始 = 结束
        goto err;

    //skb-&gt;data 指向碎片首部头后数据部分
    if (!pskb_pull(skb, (u8 *) (fhdr + 1) - skb-&gt;data))
        goto err;
    //如果需要缩短skb的内存长度
    if (pskb_trim_rcsum(skb, end - offset))
        goto err;

    //找出碎片所在位置
    prev = NULL;
    for(next = fq-&gt;q.fragments; next != NULL; next = next-&gt;next) {
        if (FRAG6_CB(next)-&gt;offset &gt;= offset)
            break;  /* bingo! */
        prev = next;
    }
    if (prev) { //有前一个碎片
        //前一个碎片 (开始 + 长度) - 这个碎片的开始. 计算出重叠部分
        int i = (FRAG6_CB(prev)-&gt;offset + prev-&gt;len) - offset;
        if (i &gt; 0) { //有重叠
            offset += i; //调整这个碎片的开始位置
            if (end &lt;= offset) //调整后出错
                goto err;
            if (!pskb_pull(skb, i))//skb-&gt;data += i;
                goto err;
            if (skb-&gt;ip_summed != CHECKSUM_UNNECESSARY)
                skb-&gt;ip_summed = CHECKSUM_NONE;
        }
    }
    //有下一个碎片，且开始位置 &lt; 这个碎片的结束位置
    while (next &amp;&amp; FRAG6_CB(next)-&gt;offset &lt; end) {
        //这个碎片的结束位置  - 下一个碎片的开始位置，计算重叠
        int i = end - FRAG6_CB(next)-&gt;offset; /* overlap is 'i' bytes */
        if (i &lt; next-&gt;len) { //重叠长度 &lt; 下一个碎片的长度
            if (!pskb_pull(next, i)) //next-&gt;data += i;
                goto err;

            FRAG6_CB(next)-&gt;offset += i;    //下一个碎片开始位置调整
            fq-&gt;q.meat -= i; //总长度减少
            if (next-&gt;ip_summed != CHECKSUM_UNNECESSARY)
                next-&gt;ip_summed = CHECKSUM_NONE;
            break;

        } else { //这个碎片完全复盖了下一个碎片
            struct sk_buff *free_it = next; //释放这个碎片
            next = next-&gt;next;//调整下一个碎片指针
            //调整队列指针
            if (prev)
                prev-&gt;next = next;
            else
                fq-&gt;q.fragments = next;

            fq-&gt;q.meat -= free_it-&gt;len;
            frag_kfree_skb(free_it, NULL); //释放被复盖的包
        }
    }
    FRAG6_CB(skb)-&gt;offset = offset; //这个碎片包记录自己的开始位置

    //插入这个碎片到队列
    skb-&gt;next = next;
    if (prev)
        prev-&gt;next = skb;
    else
        fq-&gt;q.fragments = skb;

    dev = skb-&gt;dev;
    if (dev) {
        fq-&gt;iif = dev-&gt;ifindex;
        skb-&gt;dev = NULL;
    }
    fq-&gt;q.stamp = skb-&gt;tstamp;
    fq-&gt;q.meat += skb-&gt;len; //累加总长度
    atomic_add(skb-&gt;truesize, &amp;ip6_frags.mem);

    if (offset == 0) { //偏移为0
        fq-&gt;nhoffset = nhoff;
        fq-&gt;q.last_in |= FIRST_IN; //标识开始碎片
    }
    //碎片已经聚齐，记录长度 = 包中标识的长度
    if (fq-&gt;q.last_in == (FIRST_IN | LAST_IN) &amp;&amp; fq-&gt;q.meat == fq-&gt;q.len)
        return ip6_frag_reasm(fq, prev, dev); //重组
    //没有聚齐，移动队列连表到lru连表尾部
    write_lock(&amp;ip6_frags.lock);
    list_move_tail(&amp;fq-&gt;q.lru_list, &amp;ip6_frags.lru_list);
    write_unlock(&amp;ip6_frags.lock);
    return -1;
err:
    IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMFAILS);
    kfree_skb(skb);
    return -1;
}
</code></pre>

<pre><code>
重组ip头
</code></pre>

<pre><code>static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev, struct net_device *dev)
{
    struct sk_buff *fp, *head = fq-&gt;q.fragments;
    int    payload_len;
    unsigned int nhoff;

    fq_kill(fq); //把这个重组队列出队

    /* Make the one we just received the head. */
    if (prev) {
        //下面是把head指向的skb复制到fp，然后把fp插入到head指向的位置
        head = prev-&gt;next;
        fp = skb_clone(head, GFP_ATOMIC);

        if (!fp)
            goto out_oom;


        fp-&gt;next = head-&gt;next;
        prev-&gt;next = fp;
        //把真正的头skb复制到head指针的skb
        skb_morph(head, fq-&gt;q.fragments);
        head-&gt;next = fq-&gt;q.fragments-&gt;next;

        kfree_skb(fq-&gt;q.fragments);//释放原来的头
        fq-&gt;q.fragments = head;
    }
    /* Unfragmented part is taken from the first segment. */
    //计算负载总长度
    payload_len = ((head-&gt;data - skb_network_header(head)) - sizeof(struct ipv6hdr) + fq-&gt;q.len -  sizeof(struct frag_hdr));
    if (payload_len &gt; IPV6_MAXPLEN) //超过65535
        goto out_oversize;

    /* Head of list must not be cloned. */
    //如果skb被克隆，从新分配他的data
    if (skb_cloned(head) &amp;&amp; pskb_expand_head(head, 0, 0, GFP_ATOMIC))
        goto out_oom;

    /* If the first fragment is fragmented itself, we split it to two chunks: the first with data and paged part
     * and the second, holding only fragments.
     */
    if (skb_shinfo(head)-&gt;frag_list) {//如果头自己已经被分片
        struct sk_buff *clone;
        int i, plen = 0;

        if ((clone = alloc_skb(0, GFP_ATOMIC)) == NULL)
            goto out_oom;

        //把这个clone插入到头后               
        clone-&gt;next = head-&gt;next;
        head-&gt;next = clone;
        //把头的分片给这个clone
        skb_shinfo(clone)-&gt;frag_list = skb_shinfo(head)-&gt;frag_list;
        skb_shinfo(head)-&gt;frag_list = NULL;
        //头使用了页面，计算总长度
        for (i = 0; i &lt; skb_shinfo(head)-&gt;nr_frags; i++)
            plen += skb_shinfo(head)-&gt;frags[i].size;

        clone-&gt;len = clone-&gt;data_len = head-&gt;data_len - plen;
        head-&gt;data_len -= clone-&gt;len;
        head-&gt;len -= clone-&gt;len;
        clone-&gt;csum = 0;
        clone-&gt;ip_summed = head-&gt;ip_summed;
        atomic_add(clone-&gt;truesize, &amp;ip6_frags.mem);
    }
    /* We have to remove fragment header from datagram and to relocate                         
     * header in order to calculate ICV correctly. */
    nhoff = fq-&gt;nhoffset;
    //把传输头（分片头）中的下一个头字段值赋给网络头中的下一个头字段
    skb_network_header(head)[nhoff] = skb_transport_header(head)[0];
    //把分片首部复盖掉
    memmove(head-&gt;head + sizeof(struct frag_hdr), head-&gt;head, (head-&gt;data - head-&gt;head) - sizeof(struct frag_hdr));
    //调整相应的各个层的头位置
    head-&gt;mac_header += sizeof(struct frag_hdr);
    head-&gt;network_header += sizeof(struct frag_hdr);

    skb_shinfo(head)-&gt;frag_list = head-&gt;next; //保存碎片连表
    skb_reset_transport_header(head);//重新调整网络头，现在指向分片头后的头
    skb_push(head, head-&gt;data - skb_network_header(head));//使head-&gt;data指向网络头
    atomic_sub(head-&gt;truesize, &amp;ip6_frags.mem);

    for (fp = head-&gt;next; fp; fp = fp-&gt;next) { //统计分片总长度
        head-&gt;data_len += fp-&gt;len;
        head-&gt;len += fp-&gt;len;
        if (head-&gt;ip_summed != fp-&gt;ip_summed)
            head-&gt;ip_summed = CHECKSUM_NONE;
        else if (head-&gt;ip_summed == CHECKSUM_COMPLETE)
            head-&gt;csum = csum_add(head-&gt;csum, fp-&gt;csum); //添加各分片的累加和

        head-&gt;truesize += fp-&gt;truesize;
        atomic_sub(fp-&gt;truesize, &amp;ip6_frags.mem);
    }
    head-&gt;next = NULL;
    head-&gt;dev = dev;
    head-&gt;tstamp = fq-&gt;q.stamp;
    ipv6_hdr(head)-&gt;payload_len = htons(payload_len); //总长度
    IP6CB(head)-&gt;nhoff = nhoff;

    /* Yes, and fold redundant checksum back. 8) */
    if (head-&gt;ip_summed == CHECKSUM_COMPLETE) //添加网络头累加和
        head-&gt;csum = csum_partial(skb_network_header(head), skb_network_header_len(head), head-&gt;csum);

    rcu_read_lock();
    IP6_INC_STATS_BH(__in6_dev_get(dev), IPSTATS_MIB_REASMOKS);
    rcu_read_unlock();
    fq-&gt;q.fragments = NULL;
    return 1;
    ...... //下面是错误处理
}
</code></pre>

<pre><code>
#### 无数据扩展头
</code></pre>

<pre><code>static struct inet6_protocol nodata_protocol = {
    .handler        =       ipv6_nodata_rcv,
    .flags          =       INET6_PROTO_NOPOLICY,
};
static int ipv6_nodata_rcv(struct sk_buff *skb)
{
    kfree_skb(skb);
    return 0;
}
</code></pre>

<pre><code>
#### 目的选项首部处理
</code></pre>

<pre><code>static struct inet6_protocol destopt_protocol = {
    .handler        =       ipv6_destopt_rcv,
    .flags          =       INET6_PROTO_NOPOLICY | INET6_PROTO_GSO_EXTHDR,
};
static int ipv6_destopt_rcv(struct sk_buff *skb)
{
    struct inet6_skb_parm *opt = IP6CB(skb);
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
    __u16 dstbuf;
#endif
    struct dst_entry *dst;
    //长度验证
    if (!pskb_may_pull(skb, skb_transport_offset(skb) + 8) || !pskb_may_pull(skb, (skb_transport_offset(skb) +
                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
        kfree_skb(skb);
        return -1;
    }
    opt-&gt;lastopt = opt-&gt;dst1 = skb_network_header_len(skb); //网络头长度
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
    dstbuf = opt-&gt;dst1;
#endif
    dst = dst_clone(skb-&gt;dst); //增加dst的引用计数
    //解析tlv，上面已经看到过了
    if (ip6_parse_tlv(tlvprocdestopt_lst, skb)) {
        dst_release(dst);
        skb-&gt;transport_header += (skb_transport_header(skb)[1] + 1) &lt;&lt; 3; //调整网络头位置
        opt = IP6CB(skb);
#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
        opt-&gt;nhoff = dstbuf;
#else
        opt-&gt;nhoff = opt-&gt;dst1;
#endif
        return 1;
    }
    IP6_INC_STATS_BH(ip6_dst_idev(dst), IPSTATS_MIB_INHDRERRORS);
    dst_release(dst);
    return -1;
}
</code></pre>

<p>```</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[ipv6初始化和处理流程分析]]></title>
<link href="http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6/"/>
<updated>2015-05-15T15:57:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2015/05/15/kernel-net-ipv6</id>
<content type="html"><![CDATA[<p><a href="/download/kernel/ipv6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.pdf">ipv6初始化和处理流程分析.pdf</a></p>
]]></content>
</entry>

</feed>
