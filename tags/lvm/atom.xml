<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: LVM | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/lvm/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-07-31T15:24:28+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[LVM 输出更多信息]]></title>
<link href="http://abcdxyzk.github.io/blog/2024/07/31/lvm-attr/"/>
<updated>2024-07-31T15:15:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2024/07/31/lvm-attr</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/useradd/p/10005211.html">https://www.cnblogs.com/useradd/p/10005211.html</a></p>

<p>显示LVM信息常用 pvs,lvs,vgs 命令，如果想显示详细信息可以使用 pvdisplay ,vgdisplay ,lvdisplay，其中前面命令仅用于简单输出 lvm 对象相关信息，可以格式化输出；第二种命令会详细显示 lvm 对像信息，但不易于格式化输出。</p>

<pre><code>    pvs # 显示物理卷(pv)信息
    vgs # 显示逻辑卷组(vg)信息
    lvs # 显示逻辑卷(lv)信息
</code></pre>

<h4>显示额外信息</h4>

<pre><code>    pvs -v
    vgs -v
    lvs -v
</code></pre>

<h4>只显示 pv_name,dev_size 字段</h4>

<pre><code>    [root@redhat6 lvm]# pvs -o pv_name,dev_size
      PV         DevSize
      /dev/sda2   14.51g
      /dev/sdb     4.00g
</code></pre>

<p>增加 -o 参数，指定需要输出的字段。</p>

<h4>在pvs 默认输出上，增加字段</h4>

<pre><code>    [root@redhat6 lvm]# pvs -o +pv_uuid
      PV         VG         Fmt  Attr PSize  PFree PV UUID                              
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0  dpTW84-DHRy-PIA9-u1tY-YUH4-XQKw-8Hy2Zm
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 2.81g YKIQwX-zc6H-TZ65-P3qr-sRfk-LX0p-T18vdG
</code></pre>

<p>如果想在默认输出的前提下增加字段，可以使用 -o + 字段名。</p>

<h4>vgs 显示卷组成员</h4>

<pre><code>    [root@redhat6 lvm]# vgs -o +lv_name
      VG         #PV #LV #SN Attr   VSize  VFree LV
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_root
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_swap
      vg_redhat6   2   3   0 wz--n- 18.50g 2.81g lv_pgdata_01
</code></pre>

<h2>字段排序</h2>

<h4>根据 lv_size 字段排序</h4>

<pre><code>    [root@redhat6 lvm]# lvs -O lv_size
      LV           VG         Attr   LSize   Origin Snap%  Move Log Copy%  Convert
      lv_pgdata_01 vg_redhat6 -wi-ao 700.00m
      lv_swap      vg_redhat6 -wi-ao   1.91g
      lv_root      vg_redhat6 -wi-ao  13.10g
</code></pre>

<p>如果想根据输出字段排序，可以使用 -O 字段名 选项。</p>

<h2>附 lvs,vgs,pvs 字段</h2>

<h4>4.1 lvs 字段</h4>

<pre><code>    lv_all               - All fields in this section.
    lv_uuid              - Unique identifier.
    lv_name              - Name.  LVs created for internal use are enclosed in brackets.
    lv_path              - Full pathname for LV.
    lv_attr              - Various attributes - see man page.
    lv_major             - Persistent major number or -1 if not persistent.
    lv_minor             - Persistent minor number or -1 if not persistent.
    lv_read_ahead        - Read ahead setting in current units.
    lv_kernel_major      - Currently assigned major number or -1 if LV is not active.
    lv_kernel_minor      - Currently assigned minor number or -1 if LV is not active.
    lv_kernel_read_ahead - Currently-in-use read ahead setting in current units.
    lv_size              - Size of LV in current units.
    seg_count            - Number of segments in LV.
    origin               - For snapshots, the origin device of this LV.
    origin_size          - For snapshots, the size of the origin device of this LV.
    snap_percent         - For snapshots, the percentage full if LV is active.
    copy_percent         - For mirrors and pvmove, current percentage in-sync.
    move_pv              - For pvmove, Source PV of temporary LV created by pvmove.
    convert_lv           - For lvconvert, Name of temporary LV created by lvconvert.
    lv_tags              - Tags, if any.
    mirror_log           - For mirrors, the LV holding the synchronisation log.
    modules              - Kernel device-mapper modules required for this LV.
</code></pre>

<h4>4.2 pvs 字段</h4>

<pre><code>    pv_all               - All fields in this section.
    pe_start             - Offset to the start of data on the underlying device.
    pv_size              - Size of PV in current units.
    pv_free              - Total amount of unallocated space in current units.
    pv_used              - Total amount of allocated space in current units.
    pv_attr              - Various attributes - see man page.
    pv_pe_count          - Total number of Physical Extents.
    pv_pe_alloc_count    - Total number of allocated Physical Extents.
    pv_tags              - Tags, if any.
    pv_mda_count         - Number of metadata areas on this device.
    pv_mda_used_count    - Number of metadata areas in use on this device.
</code></pre>

<h4>4.3 vgs 字段</h4>

<pre><code>    vg_all               - All fields in this section.
    vg_fmt               - Type of metadata.
    vg_uuid              - Unique identifier.
    vg_name              - Name.
    vg_attr              - Various attributes - see man page.
    vg_size              - Total size of VG in current units.
    vg_free              - Total amount of free space in current units.
    vg_sysid             - System ID indicating when and where it was created.
    vg_extent_size       - Size of Physical Extents in current units.
    vg_extent_count      - Total number of Physical Extents.
    vg_free_count        - Total number of unallocated Physical Extents.
    max_lv               - Maximum number of LVs allowed in VG or 0 if unlimited.
    max_pv               - Maximum number of PVs allowed in VG or 0 if unlimited.
    pv_count             - Number of PVs.
    lv_count             - Number of LVs.
    snap_count           - Number of snapshots.
    vg_seqno             - Revision number of internal metadata.  Incremented whenever it changes.
    vg_tags              - Tags, if any.
    vg_mda_count         - Number of metadata areas on this VG.
    vg_mda_used_count    - Number of metadata areas in use on this VG.
    vg_mda_free          - Free metadata area space for this VG in current units.
    vg_mda_size          - Size of smallest metadata area for this VG in current units.
    vg_mda_copies        - Target number of in use metadata areas in the VG.
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[LVM 缩减 VG 大小 ( pvmove )]]></title>
<link href="http://abcdxyzk.github.io/blog/2024/07/31/lvm-pvmove/"/>
<updated>2024-07-31T15:09:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2024/07/31/lvm-pvmove</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/useradd/p/10005212.html">https://www.cnblogs.com/useradd/p/10005212.html</a></p>

<p>pvmove 命令用来将一块盘上的数据移到另一块盘，可以移动整块盘的数据，也可以移动指定 extent 范围的数据， 接下来演示 pvmove 的一个例子，下面这个例子的 VG 由三个 PV 组成，我们想将其中一个 PV 的数据移动其它 PV中，空闲的PV 可以用来创建新的 VG。</p>

<h4>1 显示 pv 使用信息</h4>

<pre><code>     [root@redhat6 ~]# pvs -o+pv_used
      PV         VG         Fmt  Attr PSize  PFree Used  
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0   14.51g
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 2.62g   1.38g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 5.60g 404.00m
</code></pre>

<p>从上面看出，有三块 pv</p>

<h4>2 移动 /dev/sdb 数据到 /dev/sdc 盘上</h4>

<pre><code>    [root@redhat6 ~]# pvmove /dev/sdb /dev/sdc
      /dev/sdb: Moved: 0.8%
      /dev/sdb: Moved: 28.3%
      /dev/sdb: Moved: 42.5%
      /dev/sdb: Moved: 57.2%
      /dev/sdb: Moved: 72.8%
      /dev/sdb: Moved: 92.6%
      /dev/sdb: Moved: 100.0%
</code></pre>

<p>上述命令将 /dev/sdb 文件移动 /dev/sdc 上。</p>

<h4>3 再次查看 pv 信息</h4>

<pre><code>    [root@redhat6 ~]# pvs -o+pv_used
      PV         VG         Fmt  Attr PSize  PFree Used 
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0  14.51g
      /dev/sdb   vg_redhat6 lvm2 a--   4.00g 4.00g     0
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g  1.77g
</code></pre>

<p>从上面看出 /dev/sdb 盘使用空间为 0，说明空间被腾出。</p>

<h4>4 将 /dev/sdb 从 VG vg_redhat6 中移出</h4>

<pre><code>    [root@redhat6 ~]# vgreduce /dev/vg_redhat6 /dev/sdb 
      Removed "/dev/sdb" from volume group "vg_redhat6" 

    [root@redhat6 ~]# pvs
      PV         VG         Fmt  Attr PSize  PFree
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0
      /dev/sdb              lvm2 a--   4.00g 4.00g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g 
</code></pre>

<p>根据pvs 信息， /dev/sdb 已经不是 VG  vg_redhat6 的成员了。 那么 /dev/sdb 盘可以移除，或者它用。</p>

<h4>5 在 /dev/sdb 上创建新的 VG</h4>

<pre><code>    [root@redhat6 ~]# vgcreate vg_pgroot  /dev/sdb
      Volume group "vg_pgroot" successfully created
    [root@redhat6 ~]# vgs
      VG         #PV #LV #SN Attr   VSize  VFree
      vg_pgroot    1   0   0 wz--n-  4.00g 4.00g
      vg_redhat6   2   4   0 wz--n- 20.50g 4.22g
</code></pre>

<h4>6 再次查看 PV  /dev/sdb 信息</h4>

<pre><code>    [root@redhat6 ~]# pvs
      PV         VG         Fmt  Attr PSize  PFree
      /dev/sda2  vg_redhat6 lvm2 a--  14.51g    0
      /dev/sdb   vg_pgroot  lvm2 a--   4.00g 4.00g
      /dev/sdc   vg_redhat6 lvm2 a--   6.00g 4.22g
</code></pre>

<p>/dev/sdb 已经是 VG vg_pgroot 的成员了。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[LVM 扩容]]></title>
<link href="http://abcdxyzk.github.io/blog/2023/01/01/lvm-extend/"/>
<updated>2023-01-01T16:25:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2023/01/01/lvm-extend</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yy9knsg/p/16552494.html">https://www.cnblogs.com/yy9knsg/p/16552494.html</a></p>

<p><a href="https://tool.4xseo.com/article/200995.html">https://tool.4xseo.com/article/200995.html</a></p>

<pre><code>    pvdisplay

    vgdisplay

    lvdisplay
</code></pre>

<h4>初始化分区</h4>

<pre><code>    fdisk /dev/vdx
    n

    t
    L
    选 8e LVM分区


    pvcreate /dev/vdx1
</code></pre>

<h4>将分区加入到虚拟卷组名</h4>

<pre><code>    # vgextend 虚拟卷组名 新增的分区

    vgextend centos /dev/vdx1
</code></pre>

<h4>再次查看卷组情况</h4>

<pre><code>    vgdisplay
</code></pre>

<h4>查看当前磁盘情况</h4>

<pre><code>    df -h
    记下需要扩展的文件系统名，例如 /dev/mapper/centos-root

    lvdisplay
    记下需要扩展的文件系统名，例如 /dev/centos/root
</code></pre>

<p>两个是一样的</p>

<pre><code>    ls /dev/centos/root -l
    lrwxrwxrwx. 1 root root 7 Dec 20 20:11 /dev/centos/root -&gt; ../dm-0

    ls -l /dev/mapper/centos-root 
    lrwxrwxrwx. 1 root root 7 Dec 20 20:11 /dev/mapper/centos-root -&gt; ../dm-0
</code></pre>

<h4>扩容已有的卷组容量</h4>

<pre><code>    lvextend -L +需要扩展的容量 需要扩展的文件系统名 

    lvextend -L +29G /dev/mapper/centos-root
</code></pre>

<h4>以上只是卷的扩容，然后我们需要将文件系统扩容</h4>

<pre><code>    cat /etc/fstab | grep centos-root

    /dev/mapper/centos-root /                       xfs     defaults        0 0
</code></pre>

<p>这里可以看到，文件系统是xfs，所以需要xfs的命令来扩展磁盘空间</p>

<pre><code>    xfs_growfs 文件系统名

    xfs_growfs /dev/mapper/centos-root
</code></pre>

<p>df -h 可以看到，现在已经扩容成功了！</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Linux下挂载lvm 重名问题]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/07/20/LVM2/"/>
<updated>2021-07-20T16:47:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/07/20/LVM2</id>
<content type="html"><![CDATA[<p><a href="https://blog.51cto.com/songxj/269661">https://blog.51cto.com/songxj/269661</a></p>

<p>linux下使用新硬盘安装系统，安装好以后再挂载原来的硬盘，分区格式全为系统默认分区，系统默认使用的是lvm格式，并且默认的卷都是 VolGroup00</p>

<p>使用 pvs 查看显示如下：
<code>
    [root@localhost ~]# pvs
    PV VG Fmt Attr PSize PFree
    /dev/sda2 VolGroup00 lvm2 a- 136.62G 0
    /dev/sdb2 VolGroup00 lvm2 a- 136.62G 0
</code>
发现可以正确认别到两个VG，但是同名，如何挂载呢？</p>

<h4>解决办法是，将原来的VG更名，解决冲突即可挂载。</h4>

<p>重命名格式为：
<code>
    vgrename VolGroup00 VolGroup01
</code>
此时会提示：
<code>
    [root@localhost ~]# vgrename VolGroup00 VolGroup01
    Found more than one VG called VolGroup00. Please supply VG uuid.
</code>
原因是存在两个 VolGroup00，修改的方法他已经提示了要指定 VG uuid即可。</p>

<p>查看VG uuid的命令为：
<code>
    [root@localhost ~]# vgs -v
    Finding all volume groups
    Finding volume group "VolGroup00"
    Finding volume group "VolGroup00"
    VG Attr Ext #PV #LV #SN VSize VFree VG UUID
    VolGroup00 wz--n- 32.00M 1 2 0 136.62G 0 dcHa6G-abU2-Xfq8-EPBm-jBLj-sf18-O5uH0U
    VolGroup00 wz--n- 32.00M 1 2 0 136.62G 0 OF8g7h-PQJB-9D9z-yPxn-1kfY-Advq-YbNHJ9
</code></p>

<p>查到VG uuid以后，再次执行改名：
<code>
    [root@localhost ~]# vgrename OF8g7h-PQJB-9D9z-yPxn-1kfY-Advq-YbNHJ9 VolGroup01
    Volume group "VolGroup00" still has active LVs
</code></p>

<p>修改成功以后，再执行：lvscan
<code>
    [root@localhost ~]# lvscan
    inactive '/dev/VolGroup01/LogVol00' [130.84 GB] inherit
    inactive '/dev/VolGroup01/LogVol01' [5.78 GB] inherit
    ACTIVE '/dev/VolGroup00/LogVol00' [130.84 GB] inherit
    ACTIVE '/dev/VolGroup00/LogVol01' [5.78 GB] inherit
</code></p>

<p>可以看到新修改的VolGroup01是inactive状态。</p>

<p>再使用vgchange 加载 VolGroup01
<code>
    [root@localhost ~]# vgchange -ay /dev/VolGroup01
    2 logical volume(s) in volume group "VolGroup01" now active
</code></p>

<p>最后 mount 就可以
<code>
    [root@localhost ~]# mount /dev/VolGroup01/LogVol00 /mnt/old
</code></p>

<p>至此，全部完成。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[创建和管理LVM]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/07/20/LVM1/"/>
<updated>2021-07-20T16:38:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/07/20/LVM1</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zuizui1204/p/10044945.html">https://www.cnblogs.com/zuizui1204/p/10044945.html</a></p>

<p><a href="https://blog.csdn.net/qq_20745901/article/details/54575586">https://blog.csdn.net/qq_20745901/article/details/54575586</a></p>

<h4>1、 创建分区</h4>

<p>使用fdisk 创建LVM分区，方法和创建其他一般分区的方式是一样的，区别仅仅是LVM的分区类型为8e。</p>

<p><img src="/images/system/20210720-21.png" alt="" /></p>

<h4>2、创建PV</h4>

<pre><code>    pvcreate /dev/sdb1
</code></pre>

<h4>3、创建VG：</h4>

<p>先查看已经存在的VG</p>

<p>vgs和vgdispaly：vgs信息较少，vgdisplay信息较多</p>

<p>可以看到已经存在了一个VG：vg_zjhzmodelredh</p>

<p>新建
<code>
    vgcreate vgName /dev/sdb1
</code></p>

<p>这里新增已经存在的VG：
<code>
    vgextend vg_zjhzmodelredh /dev/sdb1
</code></p>

<p><img src="/images/system/20210720-22.png" alt="" /></p>

<p>创建完成VG之后，才能从VG中划分一个LV。</p>

<h4>4、创建LV</h4>

<p>命令：
<code>
    lvcreate -L 大小 -n lvName VGName
</code></p>

<p><img src="/images/system/20210720-23.png" alt="" /></p>

<h4>5、LV格式化及挂载</h4>

<p>如未激活，需要激活逻辑卷：
<code>
    vgchange -ay /dev/VolGroup00
</code></p>

<p>下一步需要对LV进行格式化（使用mkfs进行格式化操作），然后LV才能存储资料</p>

<pre><code>    mkfs -t ext4 /dev/vg_zjhzmodelredh/data
</code></pre>

<p>将格式化后的LV分区挂载到指定的目录下，就可以像普通目录一样存储数据了</p>

<p>挂载之后，可以看到此LV的容量。</p>

<p>如果要在系统启动的时候启动LV，最好是将lvData写入fstab</p>
]]></content>
</entry>

</feed>
