<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: mptcp | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/mptcp/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2023-01-24T19:27:19+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[MPTCP sched]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched/"/>
<updated>2020-08-15T01:02:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-sched</id>
<content type="html"><![CDATA[<pre><code>    $ git grep mptcp_register_scheduler net/mptcp/
    net/mptcp/mptcp_blest.c:        if (mptcp_register_scheduler(&amp;mptcp_sched_blest))
    net/mptcp/mptcp_redundant.c:    if (mptcp_register_scheduler(&amp;mptcp_sched_red))
    net/mptcp/mptcp_rr.c:   if (mptcp_register_scheduler(&amp;mptcp_sched_rr))
    net/mptcp/mptcp_sched.c:int mptcp_register_scheduler(struct mptcp_sched_ops *sched)
</code></pre>

<h4>blest</h4>

<h4>redundant</h4>

<h4>rr</h4>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[MPTCP cong]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong/"/>
<updated>2020-08-15T01:00:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-cong</id>
<content type="html"><![CDATA[<p>不设置时，默认的就是cubic</p>

<pre><code>    $ git grep tcp_congestion_ops net/mptcp/
    net/mptcp/mctcp_desync.c:static struct tcp_congestion_ops mctcp_desync = {
    net/mptcp/mptcp_balia.c:static struct tcp_congestion_ops mptcp_balia = {
    net/mptcp/mptcp_coupled.c:static struct tcp_congestion_ops mptcp_ccc = {
    net/mptcp/mptcp_olia.c:static struct tcp_congestion_ops mptcp_olia = {
    net/mptcp/mptcp_wvegas.c:static struct tcp_congestion_ops mptcp_wvegas __read_mostly = {
</code></pre>

<h4>desync</h4>

<h4>balia</h4>

<h4>ccc</h4>

<h4>olia</h4>

<h4>wvegas</h4>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[MPTCP pm]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm/"/>
<updated>2020-08-15T00:58:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/08/15/kernel-mptcp-pm</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fenglt/p/8570343.html">https://www.cnblogs.com/fenglt/p/8570343.html</a></p>

<p><a href="http://www.doc88.com/p-2354903996876.html">http://www.doc88.com/p-2354903996876.html</a></p>

<pre><code>    $ git grep mptcp_register_path_manager net/
    net/mptcp/mptcp_binder.c:       if (mptcp_register_path_manager(&amp;binder))
    net/mptcp/mptcp_fullmesh.c:     ret = mptcp_register_path_manager(&amp;full_mesh);
    net/mptcp/mptcp_ndiffports.c:   if (mptcp_register_path_manager(&amp;ndiffports))
    net/mptcp/mptcp_netlink.c:      ret = mptcp_register_path_manager(&amp;mptcp_nl_pm_ops);
    net/mptcp/mptcp_pm.c:int mptcp_register_path_manager(struct mptcp_pm_ops *pm)
</code></pre>

<h4>fullmesh</h4>

<p>两边IP都会建连，即建立 <code>n*m</code> 条连接</p>

<p>IP查看 cat /proc/net/mptcp_fullmesh</p>

<h4>ndiffports 两边只在一组IP上建立多条连接。</h4>

<pre><code>    echo ndiffports &gt; /proc/sys/net/mptcp/mptcp_path_manager
    echo 5 &gt; /sys/module/mptcp_ndiffports/parameters/num_subflows # 总共建5条，即额外再建4条
</code></pre>

<h4>netlink</h4>

<p>通过genetlink和应用层交互，在应用层实现pm功能。</p>

<h4>binder</h4>

<p>将松散源路由（Loose Source and Record Routing, LSRR）选项添加到MPTCP，以确保MPTCP子流使用所有可用网关，即采用LSRR分发子流的数据包。Binder路径管理算法允许用户终端设备从网关直接获得更高的网络吞吐量，而不需要进行任何修改，可用图a和b谁明其工作原理。理论上，只有在网络中设置了LSRR选项，才能使其B>0，从而使得Binder路径管理算法发挥良好效果。</p>

<p><img src="/images/kernel/20200815.png" alt="" /></p>

<p>松散源路由：允许相邻两个IP地址之间跳过多个网络。</p>

<p>通俗解释：发送端指明了流量或者数据包必须经过的IP地址清单，但如果需要，也可以经过一些其他的地址。换句话说，不用考虑数据包经过的确切地址，只要它经过这些地址就可以。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[MPTCP 回复一样的option]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/07/09/kernel-mptcp-bug/"/>
<updated>2020-07-09T01:39:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/07/09/kernel-mptcp-bug</id>
<content type="html"><![CDATA[<p>对方回复一模一样的option</p>

<h4>例如</h4>

<p>curl ksurl.cn</p>

<pre><code>    01:42:57.092471 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [S], seq 846976861, win 64240, options [mss 1460,nop,nop,sackOK,nop,wscale 7,mptcp capable csum {0xc7c6d84045bd8248}], length 0
    01:42:57.130413 IP 103.102.200.3.80 &gt; 192.168.8.162.34366: Flags [S.], seq 668917669, ack 846976862, win 0, options [mss 1452,nop,nop,sackOK,nop,nop,nop,nop,mptcp capable csum {0xc7c6d84045bd8248}], length 0
    01:42:57.130498 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [.], ack 1, win 64240, options [mptcp capable csum {0xc7c6d84045bd8248,0xc7c6d84045bd8248},mptcp dss ack 1200875982], length 0
    01:42:57.130525 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [.], ack 1, win 64240, options [mptcp add-addr id 3 11.0.0.1,mptcp dss ack 1200875982], length 0
    01:42:57.616370 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [.], ack 1, win 64240, options [mptcp dss ack 1200875982], length 0
    01:42:57.654157 IP 103.102.200.3.80 &gt; 192.168.8.162.34366: Flags [.], ack 1, win 29200, length 0
    01:42:58.612344 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [.], ack 1, win 64240, options [mptcp dss ack 1200875982], length 0
    01:42:58.650740 IP 103.102.200.3.80 &gt; 192.168.8.162.34366: Flags [.], ack 1, win 29200, length 0
    01:43:00.560359 IP 192.168.8.162.34366 &gt; 103.102.200.3.80: Flags [.], ack 1, win 64240, options [mptcp dss ack 1200875982], length 0
    01:43:00.598942 IP 103.102.200.3.80 &gt; 192.168.8.162.34366: Flags [.], ack 1, win 29200, length 0
    ...
</code></pre>

<h4>修复</h4>

<pre><code>    diff --git a/src/4.15.18/tcp_input.c b/src/4.15.18/tcp_input.c
    index 1c36791..397cb89 100644
    --- a/src/4.15.18/tcp_input.c
    +++ b/src/4.15.18/tcp_input.c
    @@ -5845,6 +5845,11 @@ static int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,
                    if (tp-&gt;request_mptcp || mptcp(tp)) {
                            int ret;

    +                       if (!mptcp(tp) &amp;&amp; mopt.saw_mpc) {
    +                               struct tcp_sock *meta_tp = tcp_sk(sk);
    +                               if (meta_tp-&gt;mptcp_loc_key == mopt.mptcp_sender_key)
    +                                       mopt.saw_mpc = 0;
    +                       }
                            rcu_read_lock();
                            local_bh_disable();
                            ret = mptcp_rcv_synsent_state_process(sk, &amp;sk,
</code></pre>

<h3>修复后</h3>

<p>curl ksurl.cn</p>

<pre><code>    01:48:11.136480 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [S], seq 1334883078, win 65320, options [mss 1420,nop,nop,sackOK,nop,wscale 7,mptcp capable csum {0xa48a1610f304b3a}], length 0
    01:48:11.174632 IP 103.102.200.3.80 &gt; 192.168.8.162.34388: Flags [S.], seq 2018132645, ack 1334883079, win 0, options [mss 1420,nop,nop,sackOK,nop,nop,nop,nop,mptcp capable csum {0xa48a1610f304b3a}], length 0
    01:48:11.174720 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [.], ack 1, win 65320, length 0
    01:48:11.213236 IP 103.102.200.3.80 &gt; 192.168.8.162.34388: Flags [.], ack 1, win 29200, length 0
    01:48:11.213283 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [P.], seq 1:73, ack 1, win 65320, length 72: HTTP: GET / HTTP/1.1
    01:48:11.252192 IP 103.102.200.3.80 &gt; 192.168.8.162.34388: Flags [.], ack 73, win 29200, length 0
    01:48:11.253261 IP 103.102.200.3.80 &gt; 192.168.8.162.34388: Flags [P.], seq 1:397, ack 73, win 29200, length 396: HTTP: HTTP/1.1 302 Moved Temporarily
    01:48:11.253300 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [.], ack 397, win 64924, length 0
    01:48:11.253541 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [F.], seq 73, ack 397, win 64924, length 0
    01:48:11.292118 IP 103.102.200.3.80 &gt; 192.168.8.162.34388: Flags [F.], seq 397, ack 74, win 29200, length 0
    01:48:11.292182 IP 192.168.8.162.34388 &gt; 103.102.200.3.80: Flags [.], ack 398, win 64923, length 0
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[MPTCP_OPTION]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/07/07/kernel-mptcp-option/"/>
<updated>2020-07-07T02:51:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/07/07/kernel-mptcp-option</id>
<content type="html"><![CDATA[<p>解析见 mptcp_parse_options()</p>

<h3>MPTCP_SUB_CAPABLE</h3>

<pre><code>    #define MPTCP_SUB_CAPABLE                       0
    #define MPTCP_SUB_LEN_CAPABLE_SYN               12
    #define MPTCP_SUB_LEN_CAPABLE_SYN_ALIGN         12
    #define MPTCP_SUB_LEN_CAPABLE_ACK               20
    #define MPTCP_SUB_LEN_CAPABLE_ACK_ALIGN         20
</code></pre>

<p>最初的三次握手时用</p>

<h3>MPTCP_SUB_JOIN</h3>

<pre><code>    #define MPTCP_SUB_JOIN                  1
    #define MPTCP_SUB_LEN_JOIN_SYN          12
    #define MPTCP_SUB_LEN_JOIN_SYN_ALIGN    12
    #define MPTCP_SUB_LEN_JOIN_SYNACK       16
    #define MPTCP_SUB_LEN_JOIN_SYNACK_ALIGN 16
    #define MPTCP_SUB_LEN_JOIN_ACK          24
    #define MPTCP_SUB_LEN_JOIN_ACK_ALIGN    24
</code></pre>

<p>第二次、第三次、。。。握手时用</p>

<h3>MPTCP_SUB_DSS</h3>

<pre><code>    #define MPTCP_SUB_DSS           2
</code></pre>

<h3>MPTCP_SUB_ADD_ADDR, MPTCP_SUB_REMOVE_ADDR</h3>

<pre><code>    #define MPTCP_SUB_ADD_ADDR              3
    #define MPTCP_SUB_LEN_ADD_ADDR4         8
    #define MPTCP_SUB_LEN_ADD_ADDR4_VER1    16
    #define MPTCP_SUB_LEN_ADD_ADDR6         20
    #define MPTCP_SUB_LEN_ADD_ADDR6_VER1    28
    #define MPTCP_SUB_LEN_ADD_ADDR4_ALIGN   8
    #define MPTCP_SUB_LEN_ADD_ADDR4_ALIGN_VER1      16
    #define MPTCP_SUB_LEN_ADD_ADDR6_ALIGN   20
    #define MPTCP_SUB_LEN_ADD_ADDR6_ALIGN_VER1      28

    #define MPTCP_SUB_REMOVE_ADDR   4
    #define MPTCP_SUB_LEN_REMOVE_ADDR       4
</code></pre>

<p>fullmesh 模式通告ip</p>

<h3>MPTCP_SUB_PRIO</h3>

<pre><code>    #define MPTCP_SUB_PRIO          5
    #define MPTCP_SUB_LEN_PRIO      3
    #define MPTCP_SUB_LEN_PRIO_ADDR 4
    #define MPTCP_SUB_LEN_PRIO_ALIGN        4
</code></pre>

<p>./ip/ip link set dev enp0s3 multipath off/on/backup</p>

<p>backup命令就是将该接口设置为backup模式，并且会通过PRIO option通知对方，两边会标记low_prio、rcv_low_prio。但目前所有pm都没有用到low_prio。</p>

<h3>MPTCP_SUB_FAIL</h3>

<pre><code>    #define MPTCP_SUB_FAIL          6
    #define MPTCP_SUB_LEN_FAIL      12 
    #define MPTCP_SUB_LEN_FAIL_ALIGN        12
</code></pre>

<h3>MPTCP_SUB_FCLOSE</h3>

<pre><code>    #define MPTCP_SUB_FCLOSE        7
    #define MPTCP_SUB_LEN_FCLOSE    12
    #define MPTCP_SUB_LEN_FCLOSE_ALIGN      12
</code></pre>
]]></content>
</entry>

</feed>
