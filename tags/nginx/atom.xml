<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: nginx | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/nginx/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-12-31T12:57:39+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[nginx proxy_pass]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy_pass/"/>
<updated>2020-05-18T19:29:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy_pass</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xuey/p/9515996.html">https://www.cnblogs.com/xuey/p/9515996.html</a></p>

<hr />

<h3>nginx中有两个模块都有proxy_pass指令</h3>

<h4>ngx_http_proxy_module的proxy_pass</h4>

<pre><code>    语法: proxy_pass URL;
    场景: location, if in location, limit_except
    说明: 设置后端代理服务器的协议(protocol)和地址(address),以及location中可以匹配的一个可选的URI。
        协议可以是"http"或"https"。地址可以是一个域名或ip地址和端口，或者一个 unix-domain socket 路径。  
    详见官方文档: http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
</code></pre>

<h4>ngx_stream_proxy_module的proxy_pass</h4>

<pre><code>    语法: proxy_pass address;
    场景: server
    说明: 设置后端代理服务器的地址。这个地址(address)可以是一个域名或ip地址和端口，或者一个 unix-domain socket路径。  
    详见官方文档: http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass
</code></pre>

<h3>两个proxy_pass的关系和区别</h3>

<p>在两个模块中，两个proxy_pass都是用来做后端代理的指令。</p>

<p>ngx_stream_proxy_module模块的proxy_pass指令只能在server段使用使用, 只需要提供域名或ip地址和端口。可以理解为端口转发，可以是tcp端口，也可以是udp端口。
ngx_http_proxy_module模块的proxy_pass指令需要在location段，location中的if段，limit_except段中使用，处理需要提供域名或ip地址和端口外，还需要提供协议，如"http"或"https"，还有一个可选的uri可以配置。</p>

<h3>proxy_pass的具体用法</h3>

<p>ngx_stream_proxy_module模块的proxy_pass指令</p>

<pre><code>server {
    listen 127.0.0.1:12345;
    proxy_pass 127.0.0.1:8080;
}

server {
    listen 12345;
    proxy_connect_timeout 1s;
    proxy_timeout 1m;
    proxy_pass example.com:12345;
}

server {
    listen 53 udp;
    proxy_responses 1;
    proxy_timeout 20s;
    proxy_pass dns.example.com:53;
}

server {
    listen [::1]:12345;
    proxy_pass unix:/tmp/stream.socket; #设置源站地址
}
</code></pre>

<p>ngx_http_proxy_module模块的proxy_pass指令</p>

<pre><code>server {
    listen    80;
    server_name www.test.com;

    # 正常代理，不修改后端url的
    location /some/path/ {
        proxy_pass http://127.0.0.1;
    }

    # 修改后端url地址的代理（本例后端地址中，最后带了一个斜线)
    location /testb {
        proxy_pass http://www.other.com:8801/;
    }

    # 使用 if in location
    location /google {
        if ( $geoip_country_code ~ (RU|CN) ) {
            proxy_pass http://www.google.hk;
        }
    }

    location /yongfu/ {
        # 没有匹配 limit_except 的，代理到 unix:/tmp/backend.socket:/uri/
        proxy_pass http://unix:/tmp/backend.socket:/uri/;

        # 匹配到请求方法为: PUT or DELETE, 代理到9080
        limit_except PUT DELETE {
            proxy_pass http://127.0.0.1:9080;
        }
    }

}
</code></pre>

<h3>proxy_pass后端服务器的url(request_uri)情况分析</h3>

<pre><code>server {
    listen    80;
    server_name www.test.com;

    # 情形A
    # 访问 http://www.test.com/testa/aaaa
    # 后端的request_uri为: /testa/aaaa
    location ^~ /testa/ {
        proxy_pass http://127.0.0.1:8801;
    }

    # 情形B
    # 访问 http://www.test.com/testb/bbbb
    # 后端的request_uri为: /bbbb
    location ^~ /testb/ {
        proxy_pass http://127.0.0.1:8801/;
    }

    # 情形C
    # 下面这段location是正确的
    location ~ /testc {
        proxy_pass http://127.0.0.1:8801;
    }

    # 情形D
    # 下面这段location是错误的
    #
    # nginx -t 时，会报如下错误: 
    #
    # nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular 
    # expression, or inside named location, or inside "if" statement, or inside 
    # "limit_except" block in /opt/app/nginx/conf/vhost/test.conf:17
    # 
    # 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了"/"
    location ~ /testd {
        proxy_pass http://127.0.0.1:8801/;   # 记住，location为正则表达式时，不能这样写！！！
    }

    # 情形E
    # 访问 http://www.test.com/ccc/bbbb
    # 后端的request_uri为: /aaa/ccc/bbbb
    location /ccc/ {
        proxy_pass http://127.0.0.1:8801/aaa$request_uri;
    }

    # 情形F
    # 访问 http://www.test.com/namea/ddd
    # 后端的request_uri为: /yongfu?namea=ddd
    location /namea/ {
        rewrite /namea/([^/]+) /yongfu?namea=$1 break;
        proxy_pass http://127.0.0.1:8801;
    }

    # 情形G
    # 访问 http://www.test.com/nameb/eee
    # 后端的request_uri为: /yongfu?nameb=eee
    location /nameb/ {
        rewrite /nameb/([^/]+) /yongfu?nameb=$1 break;
        proxy_pass http://127.0.0.1:8801/;
    }

    access_log /data/logs/www/www.test.com.log;
}

server {
    listen    8801;
    server_name www.test.com;

    root    /data/www/test;
    index   index.php index.html;

    rewrite ^(.*)$ /test.php?u=$1 last;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/tmp/php-cgi.sock;
        fastcgi_index index.php;
        include fastcgi.conf;
    }

    access_log /data/logs/www/www.test.com.8801.log;
}
</code></pre>

<h3>小结</h3>

<p>情形A和情形B进行对比，可以知道proxy_pass后带一个URI,可以是斜杠(/)也可以是其他uri，对后端request_uri变量的影响。</p>

<p>情形D说明，当location为正则表达式时，proxy_pass不能包含URI部分（proxy_pass在以下情况下，指令中不能有URI，正则表达式位置、命名的地点、if 块），</p>

<p>情形E通过变量($request_uri, 也可以是其他变量)，对后端的request_uri进行改写。</p>

<p>情形F和情形G通过rewrite配合break标志,对url进行改写，并改写后端的request_uri。需要注意，proxy_pass地址的URI部分在情形G中无效，不管如何设置，都会被忽略。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[nginx https代理配置]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy-https/"/>
<updated>2020-05-18T17:23:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy-https</id>
<content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000019563509">https://segmentfault.com/a/1190000019563509</a></p>

<hr />

<p>NGINX解决HTTPS代理的方式都属于透传(隧道)模式，即不解密不感知上层流量。具体的方式有如下7层和4层的两类解决方案。</p>

<h3>HTTP CONNECT隧道 (7层解决方案)</h3>

<p>客户端给代理服务器发送HTTP CONNECT请求。</p>

<p>代理服务器利用HTTP CONNECT请求中的主机和端口与目的服务器建立TCP连接。</p>

<p>代理服务器给客户端返回HTTP 200响应。</p>

<p>客户端和代理服务器建立起HTTP CONNECT隧道，HTTPS流量到达代理服务器后，直接通过TCP透传给远端目的服务器。代理服务器的角色是透传HTTPS流量，并不需要解密HTTPS。</p>

<h4>NGINX ngx_http_proxy_connect_module模块</h4>

<p>NGINX作为反向代理服务器，官方一直没有支持HTTP CONNECT方法。但是基于NGINX的模块化、可扩展性好的特性，阿里的@chobits提供了ngx_http_proxy_connect_module模块，来支持HTTP CONNECT方法，从而让NGINX可以扩展为正向代理。</p>

<h3>NGINX stream (4层解决方案)</h3>

<p>NGINX官方从1.9.0版本开始支持ngx_stream_core_module模块，模块默认不build，需要configure时加上 <code>--with-stream</code> 选项来开启。</p>

<h4>ngx_stream_ssl_preread_module模块</h4>

<p>要在不解密的情况下拿到HTTPS流量访问的域名，只有利用TLS/SSL握手的第一个Client Hello报文中的扩展地址SNI (Server Name Indication)来获取。NGINX官方从1.11.5版本开始支持利用ngx_stream_ssl_preread_module模块来获得这个能力，模块主要用于获取Client Hello报文中的SNI和ALPN信息。对于4层正向代理来说，从Client Hello报文中提取SNI的能力是至关重要的，否则NGINX stream的解决方案无法成立。同时这也带来了一个限制，要求所有客户端都需要在TLS/SSL握手中带上SNI字段，否则NGINX stream代理完全没办法知道客户端需要访问的目的域名。</p>

<pre><code>    stream {
        resolver 114.114.114.114;
        server {
            listen 443;
            ssl_preread on;
            proxy_connect_timeout 5s;
            proxy_pass $ssl_preread_server_name:$server_port;
        }
    }
</code></pre>

<h3>test</h3>

<p>openssl带servername参数来指定SNI</p>

<pre><code>    openssl s_client -connect www.baidu.com:443 -servername www.baidu.com
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[nginx 代理配置]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy/"/>
<updated>2020-05-18T16:52:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/05/18/tools-nginx-proxy</id>
<content type="html"><![CDATA[<h3>正向代理、反向代理 没有区别</h3>

<p>客户端 &mdash;-> 代理服务器(发起访问请求) &mdash;-> 网站<br/>
客户端 &lt;&mdash;- 代理服务器(响应的内容)   &lt;&mdash;- 网站</p>

<h3>配置：(https 代理配置较麻烦)</h3>

<h4>ngx_http_proxy_module 代理配置：</h4>

<pre><code>    server {
        listen 88;
        # resolver 8.8.8.8
        location / {
            proxy_pass $http_host$http_request_uri;
            # proxy_pass http://192.168.56.101:88; 多级代理的中间设备用这条

            # proxy_connect_timeout 600;
            # ...
        }
    }
</code></pre>

<h4>ngx_stream_proxy_module 代理配置：</h4>

<p>NGINX官方从1.9.0版本开始支持ngx_stream_core_module模块，模块默认不build，需要configure时加上 <code>--with-stream</code> 选项来开启。</p>

<p>配置见 <a href="/blog/2020/05/18/tools-nginx-proxy-https/">nginx https代理配置</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[nginx ipv6、TCP_DEFER_ACCEPT]]></title>
<link href="http://abcdxyzk.github.io/blog/2019/01/28/nignx-conf/"/>
<updated>2019-01-28T04:06:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2019/01/28/nignx-conf</id>
<content type="html"><![CDATA[<h4>curl 7.61.1</h4>

<p><a href="/download/tools/curl_7.61.1">curl 7.61.1</a></p>

<h4>TCP_DEFER_ACCEPT</h4>

<pre><code>    server {
        listen  80 deferred;
        ...
</code></pre>

<p> deferred
  instructs to use a deferred accept() (the TCP_DEFER_ACCEPT socket option) on Linux.</p>

<h4>ipv6</h4>

<pre><code>    server {
        listen  [::]:8080; # ipv6only=on;
        ...
</code></pre>

<p> ipv6only=on|off
  this parameter (0.7.42) determines (via the IPV6_V6ONLY socket option) whether an IPv6 socket listening on a wildcard address [::] will accept only IPv6 connections or both IPv6 and IPv4 connections. This parameter is turned on by default. It can only be set once on start.</p>

<p>  Prior to version 1.3.4, if this parameter was omitted then the operating system’s settings were in effect for the socket.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[nginx 四层转发配置]]></title>
<link href="http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-stream/"/>
<updated>2018-06-06T02:03:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2018/06/06/tools-nginx-stream</id>
<content type="html"><![CDATA[<p>nginx rpm: <a href="http://nginx.org/packages/mainline/centos/7/x86_64/RPMS/">http://nginx.org/packages/mainline/centos/7/x86_64/RPMS/</a></p>

<p>nginx source: <a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>

<p>nginx stream: <a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html">http://nginx.org/en/docs/stream/ngx_stream_core_module.html</a></p>

<p><a href="http://www.52devops.com/chuck/1153.html">http://www.52devops.com/chuck/1153.html</a></p>

<h4>一、nginx四层代理</h4>

<p>Nginx 1.9.0 开发版发布，该版本增加了 stream module 用于一般的 TCP 代理和负载均衡。</p>

<h4>三、nginx四层代理实战</h4>

<h5>3.1编译安装nginx</h5>

<p>编译安装nginx需指定–with-stream参数
<code>
    [root@linux-node1 nginx-1.9.12]#./configure --prefix=/usr/local/nginx-1.9.12 --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --with-file-aio --with-stream
    [root@linux-node1 nginx-1.9.12]#make &amp;&amp; make install
</code></p>

<h5>3.2 使用nginx实现ssh四层代理</h5>

<p>编辑nginx配置文件并启动</p>

<pre><code>    [root@linux-node1 conf]# vim nginx.conf
    worker_processes  1;
    events {
        worker_connections  1024;
    }
    stream {  #类似于7层的http段
        upstream ssh_proxy {
            hash $remote_addr consistent;
            server 192.168.56.11:22;
            server 192.168.56.12:22;
        }
        server {
            listen 2222;
            proxy_connect_timeout 1s;
            proxy_timeout 300s;
            proxy_pass ssh_proxy;
        }
    }
    [root@linux-node1 conf]# ../sbin/nginx
    [root@linux-node1 conf]# netstat -lntup|grep nginx
    tcp        0      0 0.0.0.0:2222            0.0.0.0:*               LISTEN      61127/nginx: master
</code></pre>

<p>连接ssh,从结果看把请求抛向了linux-node2的ssh</p>

<pre><code>    [root@linux-node1 conf]# ssh -p 2222 root@192.168.56.11
    root@192.168.56.11's password:
    Last login: Sun Mar  6 17:29:42 2016 from linux-node1.example.com
    [root@linux-node2 ~]# Connection to 192.168.56.11 closed by remote host.
</code></pre>
]]></content>
</entry>

</feed>
