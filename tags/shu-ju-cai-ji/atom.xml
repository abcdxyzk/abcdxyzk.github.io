<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: 数据采集 | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/shu-ju-cai-ji/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-12-31T16:15:34+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[TICK: K 流式数据分析框架Kapacitor]]></title>
<link href="http://abcdxyzk.github.io/blog/2022/08/25/influx-kapacitor/"/>
<updated>2022-08-25T10:15:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2022/08/25/influx-kapacitor</id>
<content type="html"><![CDATA[<p>wget <a href="https://repos.influxdata.com/rhel/8/x86_64/stable/kapacitor-1.6.4-1.x86_64.rpm">https://repos.influxdata.com/rhel/8/x86_64/stable/kapacitor-1.6.4-1.x86_64.rpm</a></p>

<h4>Kapacitor</h4>

<p>kapacitor属于TICK技术栈中的K，它定位为流式数据分析框架，包括数据源订阅，数据处理，预警检测与事件输出</p>

<p><img src="/images/system/2022-08-24-1.png" alt="" /></p>

<h4>1</h4>

<pre><code>
    数据订阅源可以是influxdb，collectd，opentsdb等时序数据库

    数据处理包括基于InfluxQL的批处理与将数据存储在内存中的流处理，并使用tick脚本来进行处理规则的定义

    预警检测借鉴了nagios等成熟的监控方法，包括状态变更处理、抖动预警处理等

    事件输出源可以是influxdb,email,http post,tcp, log, telegram,kafka,alerta,MQTT等
</code></pre>

<table><thead><tr><th>名词</th><th>说明</th><th>同比influxdb</th></tr></thead><tbody><tr><td>task</td><td>数据计算规则，由一系列节点node形成的数据处理的有向无环图DAG</td><td>无</td></tr><tr><td>task template</td><td>同上，通过模版变量来定制task</td><td>无</td></tr><tr><td>topic</td><td>预警检测程序-如果没有显示在alert中用topic指定，会用程序的alert node来代替</td><td>无</td></tr><tr><td>event</td><td>触发的报警事件</td><td>无</td></tr><tr><td>handler</td><td>报警事件输出程序</td><td>无</td></tr><tr><td>topic handler</td><td>报警事件的输出有两种方式，一种是alert node的属性方法直接调用，一种是通过alert指定topic与yaml描述文件来定义</td><td>无</td></tr><tr><td>record</td><td>数据录制</td><td>无</td></tr><tr><td>replay</td><td>数据回放</td><td>无</td></tr><tr><td>name</td><td>度量名</td><td>measurement</td></tr><tr><td>tags</td><td>标签</td><td>tag key tag field</td></tr><tr><td>columns</td><td>字段</td><td>field key</td></tr><tr><td>values</td><td>字段值</td><td>field value</td></tr><tr><td>series</td><td>数据序列</td><td>series</td></tr><tr><td>string template</td><td>字符串模版，借鉴了go语言</td><td></td></tr><tr><td>lambda</td><td>函数表达式</td><td></td></tr></tbody></table>


<p><br><br></p>

<p><a href="https://blog.csdn.net/qq_43386944/article/details/122735271">https://blog.csdn.net/qq_43386944/article/details/122735271</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[TICK: C 用户界面Chronorag]]></title>
<link href="http://abcdxyzk.github.io/blog/2022/08/25/influx-chronograf/"/>
<updated>2022-08-25T09:54:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2022/08/25/influx-chronograf</id>
<content type="html"><![CDATA[<p>wget <a href="https://repos.influxdata.com/rhel/8/x86_64/stable/chronograf-1.9.1.x86_64.rpm">https://repos.influxdata.com/rhel/8/x86_64/stable/chronograf-1.9.1.x86_64.rpm</a></p>

<h4>Chronograf</h4>

<p>Chronograf是InfluxData的TICK堆栈的用户界面组件。它使您的基础架构的监控和警报易于设置和维护。</p>

<p><img src="/images/system/2022-08-24-1.png" alt="" /></p>

<h4>WEB</h4>

<p><a href="http://IP:8888">http://IP:8888</a></p>

<p><img src="/images/system/2022-08-25-2.png" alt="" /></p>

<p><img src="/images/system/2022-08-25-3.png" alt="" /></p>

<p><img src="/images/system/2022-08-25-4.png" alt="" /></p>

<p><img src="/images/system/2022-08-25-5.png" alt="" /></p>

<p><a href="https://www.cnblogs.com/bixiaoyu/p/13852163.html">https://www.cnblogs.com/bixiaoyu/p/13852163.html</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[TICK: I 时序数据库InfluxDB]]></title>
<link href="http://abcdxyzk.github.io/blog/2022/08/25/influx-influxdb/"/>
<updated>2022-08-25T08:45:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2022/08/25/influx-influxdb</id>
<content type="html"><![CDATA[<p>wget <a href="https://repos.influxdata.com/rhel/8/x86_64/stable/influxdb-1.8.10.x86_64.rpm">https://repos.influxdata.com/rhel/8/x86_64/stable/influxdb-1.8.10.x86_64.rpm</a></p>

<h4>基本概念 何谓时间序列数据库？</h4>

<p>什么是时间序列数据库，最简单的定义就是数据格式里包含Timestamp字段的数据，比如某一时间环境的温度，CPU的使用率等。但是，有什么数据不包含Timestamp呢？几乎所有的数据其实都可以打上一个Timestamp字段。时间序列数据的更重要的一个属性是如何去查询它，包括数据的过滤，计算等等。</p>

<p><img src="/images/system/2022-08-24-1.png" alt="" /></p>

<h4>1、特色功能</h4>

<p>时序性（Time Series）：与时间相关的函数的灵活使用（诸如最大、最小、求和等）；</p>

<p>度量（Metrics）：对实时大量数据进行计算；</p>

<p>事件（Event）：支持任意的事件数据，换句话说，任意事件的数据我们都可以做操作。</p>

<h4>2、主要特点</h4>

<p>schemaless(无结构)，可以是任意数量的列；</p>

<p>min, max, sum, count, mean, median 一系列函数，方便统计；</p>

<p>Native HTTP API, 内置http支持，使用http读写；</p>

<p>Powerful Query Language 类似sql；</p>

<p>Built-in Explorer 自带管理工具。</p>

<pre><code>    # 路径：/usr/bin
    influxd            # influxdb服务器
    influx             # influxdb命令行客户端
    influx_inspect     # 查看工具
    influx_stress      # 压力测试工具
    influx_tsm         # 数据库转换工具（将数据库从b1或bz1格式转换为tsm1格式）

    # 路径：/var/lib/influxdb/
    data               # 存放最终存储的数据，文件以.tsm结尾
    meta               # 存放数据库元数据
    wal                # 存放预写日志文件
</code></pre>

<h4>服务端</h4>

<pre><code>    service influxdb start
</code></pre>

<h4>客户端</h4>

<pre><code>    influx
</code></pre>

<h4>名词解释</h4>

<p>在具体的讲解influxdb的相关操作之前先说说influxdb的一些专有名词，这些名词代表什么。</p>

<p>database：数据库；</p>

<p>measurement：数据库中的表；</p>

<p>points：表里面的一行数据。</p>

<p>influxDB中独有的一些概念</p>

<p>Point由时间戳（time）、数据（field）和标签（tags）组成。</p>

<p>time：每条数据记录的时间，也是数据库自动生成的主索引；</p>

<p>fields：各种记录的值；</p>

<p>tags：各种有索引的属性。</p>

<p>还有一个重要的名词：series</p>

<p>所有在数据库中的数据，都需要通过图表来表示，series表示这个表里面的所有的数据可以在图标上画成几条线（注：线条的个数由tags排列组合计算出来）</p>

<h4>命令</h4>

<p><a href="https://www.cnblogs.com/suhaha/p/11692115.html">https://www.cnblogs.com/suhaha/p/11692115.html</a></p>

<p>如果measurement、tag、field等的标识符除了<code>[A-z,0-9,_]</code>之外，还有其他字符，或者标识符是keyword关键字，那么在引用的时候必须加上双引号。</p>

<p>比如在表 &ldquo;level description"就是一个带有空格的field，如此一来在查询到的时候，就必须加上双引号了。</p>

<p>官方推荐，虽然有些标识符不是必须使用双引号，但是推荐对所有标识符使用双引号！</p>

<p>用户管理</p>

<pre><code>    #显示用户  
    show users

    #创建用户
    create user "username" with password 'password'
    #创建管理员权限用户create user "username" with password 'password' with all privileges

    #删除用户
    drop user "username"
</code></pre>

<p>数据库访问权限</p>

<pre><code>    创建权限 GRANT READ    ON mydb    TO leo   

    撤消权限 REVOKE ALL    ON mydb    FROM leo 管理权限

    创建集群管理权限 GRANT ALL PRIVILEGES TO leo

    撤消集群管理权限 REVOKE ALL PRIVILEGES FROM leo
</code></pre>

<pre><code>    #创建数据库
    create database "db_name"

    #显示所有的数据库
    show databases

    # 查看数据库大小
    select * from _internal."monitor"."shard" where "database"='telegraf' order by time desc limit 1;
    select sum(diskBytes) from _internal."monitor"."shard" where "database"='telegraf' and "time"=1722576120000000000;
    du -sh /var/lib/influxdb

    #删除数据库
    drop database "db_name"

    #使用数据库
    use db_name

    #显示该数据库中所有的表
    show measurements

    # 查看series
    show series from cpu

    #创建表，直接在插入数据的时候指定表名
    insert test,host=127.0.0.1,monitor_name=test count=1

    # 删除数据
    delete from system where time &lt; 1693497600000000000;

    #删除表
    drop measurement "measurement_name"


    du -sh /var/lib/influxdb/data/
</code></pre>

<h4>增</h4>

<p>向数据库中插入数据。</p>

<p>通过命令行
<code>
    use testDb
    insert test,host=127.0.0.1,monitor_name=test count=1
</code></p>

<p>通过http接口</p>

<pre><code>    curl -i -XPOST 'http://127.0.0.1:8086/write?db=testDb' --data-binary 'test,host=127.0.0.1,monitor_name=test count=1'
</code></pre>

<p>读者看到这里可能会观察到插入的数据的格式貌似比较奇怪，这是因为influxDB存储数据采用的是Line Protocol格式。那么何谓Line Protoco格式？</p>

<p>Line Protocol格式：写入数据库的Point的固定格式。
在上面的两种插入数据的方法中都有这样的一部分：</p>

<pre><code>    test,host=127.0.0.1,monitor_name=test count=1
</code></pre>

<p>其中：</p>

<pre><code>    test：表名；
    host=127.0.0.1,monitor_name=test：tag；
    count=1：field
</code></pre>

<p>想对此格式有详细的了解参见官方文档</p>

<h4>查</h4>

<p>查询数据库中的数据。</p>

<p>通过命令行</p>

<pre><code>    select * from test order by time desc
</code></pre>

<p>通过http接口</p>

<pre><code>    curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode "db=testDb" --data-urlencode "q=select * from test order by time desc"
</code></pre>

<p>influxDB是支持类sql语句的</p>

<h2>InfluxDB 数据保留策略操作</h2>

<pre><code>    语法：CREATE RETENTION POLICY &lt;retention_policy_name&gt; ON &lt;database_name&gt; DURATION &lt;duration&gt; REPLICATION &lt;n&gt; [SHARD DURATION &lt;duration&gt;] [DEFAULT]

        &lt;retention_policy_name&gt;：保留策略名称
        &lt;database_name&gt;：数据库名称
        &lt;duration&gt;：保留策略对应数据的过期时间
        REPLICATION：副本因子
        SHARD DURATION：分片组默认时长
        [DEFAULT]：是否为默认的保留策略
</code></pre>

<h4>创建数据保留策略</h4>

<pre><code>    CREATE RETENTION POLICY  "influx_retention" ON "mydb" DURATION 30d REPLICATION DEFAULT;
</code></pre>

<h4>查看保留期</h4>

<pre><code>    SHOW RETENTION POLICIES ON mydb
</code></pre>

<h4>修改保留期</h4>

<pre><code>    ALTER RETENTION POLICY "influx_retention" ON mydb DURATION 15d
</code></pre>

<h4>删除保留期</h4>

<pre><code>    DROP RETENTION POLICY "influx_retention" ON mydb 
</code></pre>

<h2>特色函数</h2>

<p>influxdb函数分为聚合函数，选择函数，转换函数，预测函数等。除了与普通数据库一样提供了基本操作函数外，还提供了一些特色函数以方便数据统计计算，下面会一一介绍其中一些常用的特色函数。</p>

<p>聚合函数：FILL(), INTEGRAL()，SPREAD()， STDDEV()，MEAN(), MEDIAN()等。</p>

<p>选择函数: SAMPLE(), PERCENTILE(), FIRST(), LAST(), TOP(), BOTTOM()等。</p>

<p>转换函数: DERIVATIVE(), DIFFERENCE()等。</p>

<p>预测函数：HOLT_WINTERS()。</p>

<h4>GROUP BY，FILL()</h4>

<p>如下语句中 <code>GROUP BY time(12m),*</code> 表示以每12分钟和tag(location)分组(如果是GROUP BY time(12m)则表示仅每12分钟分组，GROUP BY 参数只能是time和tag)。然后fill(200)表示如果这个时间段没有数据，以200填充，mean(field_key)求该范围内数据的平均值(注意：这是依据series来计算。其他还有SUM求和，MEDIAN求中位数)。LIMIT 7表示限制返回的point(记录数)最多为7条，而SLIMIT 1则是限制返回的series为1个。</p>

<h4>INTEGRAL(field_key, unit)</h4>

<p>计算数值字段值覆盖的曲面的面积值并得到面积之和。测试数据如下：</p>

<h4>SPREAD(field_key)</h4>

<p>计算数值字段的最大值和最小值的差值。</p>

<pre><code>        &gt; SELECT SPREAD("water_level") FROM "h2o_feet" WHERE time &gt;= '2015-08-17T23:48:00Z' AND time &lt;= '2015-08-18T00:30:00Z' GROUP BY time(12m),* fill(18) LIMIT 3 SLIMIT 1 SOFFSET 1
        name: h2o_feet
        tags: location=santa_monica
        time                              spread
        ----                              ------
        2015-08-17T23:48:00Z            18
        2015-08-18T00:00:00Z             0.052000000000000046
        2015-08-18T00:12:00Z             0.09799999999999986
</code></pre>

<h4>STDDEV(field_key)</h4>

<p>计算字段的标准差。influxdb用的是贝塞尔修正的标准差计算公式 ，如下：</p>

<p>mean=(v1+v2+&hellip;+vn)/n;</p>

<p>stddev = math.sqrt(((v1-mean)2 + (v2-mean)2 + &hellip;+(vn-mean)2)/(n-1))</p>

<h4>PERCENTILE(field_key, N)</h4>

<p>选取某个字段中大于N%的这个字段值。</p>

<p>如果一共有4条记录，N为10，则<code>10%*4=0.4</code>，四舍五入为0，则查询结果为空。N为20，则 20% * 4 = 0.8，四舍五入为1，选取的是4个数中最小的数。如果N为40，40% * 4 = 1.6，四舍五入为2，则选取的是4个数中第二小的数。由此可以看出N=100时，就跟MAX(field_key)是一样的，而当N=50时，与MEDIAN(field_key)在字段值为奇数个时是一样的。</p>

<h4>SAMPLE(field_key, N)</h4>

<p>随机返回field key的N个值。如果语句中有GROUP BY time()，则每组数据随机返回N个值。</p>

<h4>CUMULATIVE_SUM(field_key)</h4>

<p>计算字段值的递增和。</p>

<h4>DERIVATIVE(field_key, unit) 和 NON_NEGATIVE_DERIVATIVE(field_key, unit)</h4>

<p>计算字段值的变化比。unit默认为1s，即计算的是1秒内的变化比。</p>

<p>如下面的第一个数据计算方法是 <code>(2.116-2.064)/(6*60) = 0.00014..</code>，其他计算方式同理。虽然原始数据是6m收集一次，但是这里的变化比默认是按秒来计算的。如果要按6m计算，则设置unit为6m即可。</p>

<p><a href="http://wjhsh.net/dehai-p-4883451.html">http://wjhsh.net/dehai-p-4883451.html</a></p>

<p><a href="http://t.zoukankan.com/jackyroc-p-7677508.html">http://t.zoukankan.com/jackyroc-p-7677508.html</a></p>

<p><a href="https://blog.csdn.net/qq_43386944/article/details/122719668">https://blog.csdn.net/qq_43386944/article/details/122719668</a></p>

<p><a href="https://www.bbsmax.com/A/B0zqgWx85v/">https://www.bbsmax.com/A/B0zqgWx85v/</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[TICK: T 数据采集工具Telegraf]]></title>
<link href="http://abcdxyzk.github.io/blog/2022/08/24/influx-telegraf/"/>
<updated>2022-08-24T17:12:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2022/08/24/influx-telegraf</id>
<content type="html"><![CDATA[<p>wget <a href="https://repos.influxdata.com/rhel/8/x86_64/stable/telegraf-1.23.4-1.x86_64.rpm">https://repos.influxdata.com/rhel/8/x86_64/stable/telegraf-1.23.4-1.x86_64.rpm</a></p>

<h4>基本概念</h4>

<p>telegraf 属于 TICK 技术栈中的T</p>

<p><img src="/images/system/2022-08-24-1.png" alt="" /></p>

<p>Telegraf 是一个用Go语言编写的代理程序，可收集系统和服务的统计数据，并写入到InfluxDB数据库。内存占用小，通过插件系统可轻松添加支持其他服务的扩展。</p>

<p>Telegraf metric是用于在处理期间对数据建模的内部表示，这些指标完全基于InfluxDB的数据模型，包含四个主要组件：</p>

<p>度量名称（Measurement）</p>

<p>标签（tags）</p>

<p>字段（Field）</p>

<p>时间戳</p>

<h4>为什么要用Telegraf ？</h4>

<p>可以采集多种组件的运行信息cpu  memory,不需要手动写定时脚本采集，降低了数据的获取难度</p>

<p>配置简单</p>

<p>与InfluxDB完美结合</p>

<p>按照时间序列采集数据</p>

<p>轻量级，占用内存小</p>

<h4>安装</h4>

<p>rpm -ivh telegraf-1.23.4-1.x86_64.rpm</p>

<h4>配置</h4>

<pre><code>    interval = "60s"

    [root@localhost ~]# diff /etc/telegraf/telegraf.conf /etc/telegraf/telegraf.conf.orig 
    106c106
    &lt;   hostname = "192.168.100.197"
    ---
    &gt;   hostname = ""
    130,136d129
    &lt;      urls = ["http://192.168.100.178:8086"] # required 
    &lt;      database = "telegraf" # required
    &lt;      timeout = "5s"
    &lt;      username = "telegraf"
    &lt;      password = "password"
    &lt; 
    &lt; 
    5849,5850c5842
    &lt; [[inputs.net]]
    &lt;       interfaces = ["eth*", "enp0s[0-1]", "lo"]
    ---
    &gt; 
    6081,6085d6072
    &lt; [[inputs.nstat]]
    &lt;     proc_net_netstat = "/proc/net/netstat"
    &lt;     proc_net_snmp = "/proc/net/snmp"
    &lt;     proc_net_snmp6 = "/proc/net/snmp6"
    &lt;     dump_zeros       = true
</code></pre>

<h4>add</h4>

<pre><code>    [[inputs.procstat]]
        exe = "mariadbd"
    [[inputs.procstat]]
        exe = "httpd"
</code></pre>

<h4>add</h4>

<p>percpu 改成 false 能减少大量数据
<code>
    [[inputs.cpu]]
        ## Whether to report per-cpu stats or not
        percpu = false
</code></p>

<h4>disk 选项</h4>

<pre><code>    [[inputs.disk]]
        # win 指定盘符
        mount_points = ["C:", "D:"]

        # win 去除 CDFS, 一定要大写
        ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "CDFS"]

        # 去除 cifs
        ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "cifs"]
</code></pre>

<h2>window telegraf</h2>

<p><a href="https://blog.csdn.net/chen_221/article/details/125664892">https://blog.csdn.net/chen_221/article/details/125664892</a></p>

<h4>1.下载最新telegraf压缩包</h4>

<p><a href="https://github.com/influxdata/telegraf/releases">https://github.com/influxdata/telegraf/releases</a></p>

<p>将解压出来文件复制到 C:\Program Files\telegraf 下</p>

<p>修改 telegraf.conf 文件</p>

<pre><code>    # 修改这两个配置, 新增会重复导致失败 .\telegraf.exe --debug
    interval = "60s"
    hostname = "192.168.100.196"


    # 新增下面配置
    [[outputs.influxdb]]
        urls = ["http://192.168.100.178:8086"]
        database = "telegraf"
        timeout = "5s"
        username = "telegraf"
        password = "password"
</code></pre>

<h4>注册Windows服务</h4>

<p>运行powershell，进入 C:\Program Files\telegraf 文件夹，执行 .\telegraf.exe -service install 后查看服务, 然后启动服务即可</p>

<p>.\telegraf.exe -service uninstall</p>
]]></content>
</entry>

</feed>
