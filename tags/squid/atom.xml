<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: squid | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/squid/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-06-20T15:29:35+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[squid 日志格式, 时间格式]]></title>
<link href="http://abcdxyzk.github.io/blog/2024/04/29/tools-squid-log/"/>
<updated>2024-04-29T10:54:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2024/04/29/tools-squid-log</id>
<content type="html"><![CDATA[<h4>以下 { % 之间的空格要删掉</h4>

<p><a href="https://bbs.huaweicloud.com/blogs/110098">https://bbs.huaweicloud.com/blogs/110098</a></p>

<pre><code>    %{ %Y-%m-%d %H:%M:%S}tl

    logformat kk %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a
    access_log /var/log/squid/access.log kk
</code></pre>

<h4>ERROR</h4>

<pre><code>    logformat squid    %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a
    logformat combined %{ %Y-%m-%d %H:%M:%S}tl %tr %la %lp %&gt;a %&gt;p %&gt;Hs %&lt;st HTTP/%rv %rm "%ru" "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh/%&lt;a

    squid -k parse
    ERROR: logformat squid is already defined. Ignoring.
    ERROR: logformat combined is already defined. Ignoring.
</code></pre>

<p><a href="https://www.cnblogs.com/itcomputer/p/5027311.html">https://www.cnblogs.com/itcomputer/p/5027311.html</a></p>

<p><a href="https://www.cnblogs.com/sunsweet/archive/2013/06/05/3118201.html">https://www.cnblogs.com/sunsweet/archive/2013/06/05/3118201.html</a></p>

<p><a href="https://blog.csdn.net/jigang_virgil/article/details/8774395">https://blog.csdn.net/jigang_virgil/article/details/8774395</a></p>

<pre><code>    logformat log_format %&gt;a %ui %un %ts "%rm %ru HTTP/%rv" %Hs %&lt;st "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh %tr #日志格式
    access_log /usr/local/squid2.7/var/logs/access.log log_format

    Field name syntax keys:
    {} modifier or argument. Also used to specify header names
    &gt; request (client) 客户请求
    &lt; reply (server) 服务端回应
    a address 访问用户ip地址
    A address name 访问用户电脑名称
    h all headers 浏览器头信息
    i ident 
    p port 端口
    r request line (no query)
    t time 访问时间
    u user
    l local address/port (where request was accepted)

    %&gt;a
    Client source IP address
    %&gt;A
    Client FQDN
    %&gt;p
    Client source port
    %&lt;a
    Server or peer IP address
    %&lt;p
    Server or peer port number
    %&lt;A
    Server IP address or peer name
    %la
    Local IP address where the request was accepted
    %lp
    Local port where the request was accepted
    %lA
    Local port name where the request was accepted
    %ts
    Date of request, seconds since epoch
    %{format}tl
    Date of request, strftime format (localtime)
    %{format}tg
    Date of request, strftime format (gmt)
    %tu
    Date of request, sub-second component
    %tr
    Time to serve the request, in milliseconds
    %{header}&gt;h
    Request header
    %{header:element}&gt;h
    Named request header field element (list headers)
    %{header:separator element}&gt;h
    Named request header field element, using "separator" as field separator (it can be any non-alphanumeric single character)
    %&gt;h
    All request header
    %{header}&lt;h
    Request headers, as for &lt;..h above
    %un
    Authenticated user name or dash
    %ur
    Authenticated user realm or dash
    %us
    Authenticated user scheme or dash
    %ui
    Ident user name or dash
    %Hs
    HTTP status code (200, 404, 407, etc)
    %Ht
    HTTP status text (Not found, etc)
    %Ss
    Squid status code (TCP_HIT, TCP_MISS etc)
    %Se
    Squid error code (ERR_DENIED, ERR_...)
    %Sh
    Squid hierarchy code (FIRST_UP_PARENT, etc)
    %mt
    MIME type of the request
    %rm
    Request method
    %ru
    Request URL, without the query string
    %rq
    Request query string, including ?
    %rp
    Request protocol (i.e. HTTP/1.1)
    %ps
    Peer selection status (DIRECT, PARENT, CD_PARENT_HIT, etc. including the TIMEDOUT_ variant)
    %&gt;sl
    Size of request line
    %&gt;sh
    Size of request headers, including request line
    %&gt;sH
    Size of request headers, excluding request line
    %&gt;sb
    Size of request body, raw received bytes
    %&gt;sB
    Size of request body, excluding transfer encoding
    %&gt;st
    Total size of request
    %&lt;sl
    Size of reply status line
    %&lt;sh
    Size of reply headers, including status line
    %&lt;sH
    Size of reply headers, excluding status line
    %&lt;sb
    Size of reply body, raw transmitted bytes
    %&lt;sB
    Size of reply body, excluding transfer encoding
    %&lt;st
    Total size of reply
    %%
    A literal %
</code></pre>

<p>quid配置文件中可以根据用户的需求自定义日志格式，自定义日志格式主要是通过占位符实现的。以下简要叙述下一些</p>

<pre><code>    占位符的含义：
    %&gt;a客户端IP
    %&gt;A 客户端全域名(FQDN)
    %&gt;p 客户端端口号
    %la 本机IP(squid服务器IP)
    %lp 本机端口(squid监听端口)
    %oa 对外IP
    %ts 时间戳(秒)
    %tu 时间戳(毫秒)
    %tl 本地时间，默认格式 %d/%b/%Y:%H:%M:%S %z
    %tg GMT时间，默认格式 %d/%b/%Y:%H:%M:%S %z
    %tr 响应时间(毫秒)
    %&gt;h 请求头
    %&lt;h 回复头
    %un user name
    %ui user ident
    %ul user auth
    %us user ssl
    %ue user external
    %Hs http状态码(200 ,302 etc)
    %Ss squid状态码(TCP_HIT,TCP_MISS etc)
    %Sh squid堆叠状态码(即cache集群，姐妹或父状态，DEFAULT_PARENT etc)
    %mt content type
    %rm method
    %ru 请求url
    %rp 请求url路径不包括主机名
    %rv 请求协议版本
    %&lt;st 回复大小包括http头
    %&gt;st 请求大小包括http头
    %st 请求+回复大小包括http头
    %sn 日志每行记录一个行号
    如果打印请求头或回复头中的某个字段，可以这样:%{字段名}&gt;h %{字段名}&lt;h
    如: %{User-agent}&gt;h表示打印请求头中的ua字段
    这样我们可以自定义几种日志格式：
    logformat  log1 %ts.%03tu %6tr %&gt;a %Ss/%03Hs %&lt;st %rm %ru %un %Sh/%&lt;A %mt
    logformat  log2 %&gt;a %ui %un [%tl] "%rm %ru HTTP/%rv" %Hs %&lt;st "%{Referer}&gt;h" "%{User-Agent}&gt;h" %Ss:%Sh
    然后在access_log配置用上这几种自定义格式
    access_log  /usr/local/squid/var/logs/log1/access.log  log1
    access_log  /usr/local/squid/var/logs/log2/access.log  log2
    这样就会同时记录两种不同的日志格式了。
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[squid 开启cgi-bin/cachemgr.cgi]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/09/20/tools-squid-cachemgr/"/>
<updated>2020-09-20T14:23:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/09/20/tools-squid-cachemgr</id>
<content type="html"><![CDATA[<h4>start</h4>

<p><a href="/blog/2020/09/20/tools-apache2-cgi/">apache2 支持cgi</a></p>

<p>(可选)<a href="/blog/2020/09/20/tools-apache2-auth/">apache2 开启认证</a></p>

<p>sudo apt-get install squid-cgi</p>

<p>文件就在 /usr/lib/cgi-bin/ 下面，和 apache2 目录一致，不需要cp
<code>
    vim /etc/squid/cachemgr.conf
    localhost
    换成
    localhost:port
</code></p>

<pre><code>    vim /etc/squid/squid.conf
    注释掉这两行
    #http_access allow localhost manager
    #http_access deny manager
    添加这两行
    acl manager proto cache_object
    http_access allow manager
</code></pre>

<p>squid -k reconfigure</p>

<h4>cachemgr_passwd</h4>

<p>vim /etc/squid/squid.conf</p>

<p>cachemgr_passwd none all # 所有用户开启所有权限</p>

<p>// cachemgr_passwd 123456 all 不生效 ???</p>

<p>squid -k reconfigure</p>

<p>web 打开 <a href="http://ip/cgi-bin/cachemgr.cgi">http://ip/cgi-bin/cachemgr.cgi</a> 就能查看、操作一些squid功能了</p>

<p>用户名：manager 或 空</p>

<p>密码：空</p>

<h4>ubuntu 18.04</h4>

<p>18.04 的 squid 版本3.5.27-1ubuntu1.8 好像有问题，点击 Current Squid Configuration squid就重启。</p>

<p>换成 16.04 的 3.5.12-1ubuntu7.13 就没问题了。</p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid_3.5.12-1ubuntu7.13_amd64.deb">http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid_3.5.12-1ubuntu7.13_amd64.deb</a></p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/universe/s/squid3/squid-cgi_3.5.12-1ubuntu7.13_amd64.deb">http://security.ubuntu.com/ubuntu/pool/universe/s/squid3/squid-cgi_3.5.12-1ubuntu7.13_amd64.deb</a></p>

<p><a href="http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid-common_3.5.12-1ubuntu7.13_all.deb">http://security.ubuntu.com/ubuntu/pool/main/s/squid3/squid-common_3.5.12-1ubuntu7.13_all.deb</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[squid 代理转发]]></title>
<link href="http://abcdxyzk.github.io/blog/2020/05/18/tools-squid-peer/"/>
<updated>2020-05-18T14:55:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2020/05/18/tools-squid-peer</id>
<content type="html"><![CDATA[<p><a href="https://www.cmdschool.org/archives/4673">https://www.cmdschool.org/archives/4673</a></p>

<h4>Squid的层次结构</h4>

<p><img src="/images/tools/20200518-1.png" alt="" /></p>

<p>图中绿色线代表父子关系的层次结构（上游下游关系）</p>

<p>图中蓝色代表兄弟关系的层次结构（平等关系）</p>

<h4>代理转发</h4>

<p>Squid使用“cache_peer”指令提供父节点的缓存</p>

<h5>cache_peer指令的模式</h5>

<p>never direct模式，父节点失败不能直接连接源服务器，如果父节点失败或无法访问，则每个请求都导致错误消息</p>

<p>prefer direct模式，父节点失败允许直接连接源服务器，如果父节点失败或无法访问，则连接到源服务器而不是父节点</p>

<p>注：失败是指没有ICP或HTCP回复</p>

<h5>never direct模式</h5>

<pre><code>    cache_peer parentcache.foo.com parent 3128 0 no-query default
    never_direct allow all
</code></pre>

<p>以上使用never_direct指令宣告父节点失败不能直接连接源服务器</p>

<h5>prefer direct模式</h5>

<pre><code>    cache_peer parentcache.foo.com parent 3128 0 no-query
    prefer_direct off
    nonhierarchical_direct off
</code></pre>

<p>以上使用prefer_direct指令宣告首选从DNS中列出源服务器尝试</p>

<p>以上使用nonhierarchical_direct指令宣告往父节点的请求继续发送</p>

<p>hierarchy_stoplist指令是prefer direct模式的另外一种实现（适用于Squid-3.2之前的版本）</p>

<h5>cache_peer指令的使用</h5>

<pre><code>    cache_peer hostname type http-port icp-port [options]
</code></pre>

<p>hostname参数，指定转发的代理服务器主机名称（IP地址亦可）</p>

<p>type参数，可选值有“parent”（父母）、“sibling”（兄弟）和“multicast”（多播）</p>

<p>http-port参数，指定转发的代理服务器通讯端口，默认值3128</p>

<p>icp-port参数，查询对象的邻居缓存，如果不支持ICP或HTCP，设置为0</p>

<p>options参数，可选的其他选项（不一一列举）</p>

<p><a href="http://www.squid-cache.org/Doc/config/cache_peer/">http://www.squid-cache.org/Doc/config/cache_peer/</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[同时运行多个squid]]></title>
<link href="http://abcdxyzk.github.io/blog/2015/07/23/tools-squid-muti/"/>
<updated>2015-07-23T15:32:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2015/07/23/tools-squid-muti</id>
<content type="html"><![CDATA[<p><a href="http://wenku.baidu.com/link?url=UXFXZVxSsQMyXVzoTA5y3Oal6s5zknpozLhfodYZ7d43R_XpziB08h28ynXZy3Sq8r-XH1tdXGvxD_X2Pa_aI4f6pFTBgGXMm0QRaRbEYmq">http://wenku.baidu.com/link?url=UXFXZVxSsQMyXVzoTA5y3Oal6s5zknpozLhfodYZ7d43R_XpziB08h28ynXZy3Sq8r-XH1tdXGvxD_X2Pa_aI4f6pFTBgGXMm0QRaRbEYmq</a></p>

<h4>多代理（SQUID）同时运行的配置方法 </h4>

<p>作成日期：2012/8/24 </p>

<h5>多代理用途： </h5>

<p>1、HTTP反向加速； 
2、权限控制部分客户端，而权限控制选项是全局设置时； </p>

<p>总之，一般的代理服务器运行一个即可，当有特殊要求的时候，才有此需要，HTTP反向代理本文没有涉及，仅是为了权限控制，一台机器同一网卡运行了2个Squid，对于HTTP反向代理，有兴趣者可自行研究配置。  </p>

<h5>环境： </h5>

<p>1、 Cent OS 5 
2、 Squid （Version 2.6.STABLE21） <br/>
3、 DELL R710  </p>

<h5>配置： </h5>

<p>在配置多Squid同时运行时，我的服务器已经安装配置好的Squid，并正常运行，如果你的服务器还不具备此条件，请先配置好Squid，并确保可以正确运行。 </p>

<p>1、 复制一份Squid .conf配置文件 <br/>
2、 编辑新文件，配置如下的选项与第一个Squid区分开 </p>

<table>
    <tr>
        <th>项目</th>
        <th>参数</th>
        <th>备注</th>
    </tr>
    <tr>
        <td>端口</td>
        <td>8080</td>
        <td>端口可自定，但要注意两个问题，与原有的Squid 默认的3128区分开，并且与系统已经存在的服务占用端口区分开，避免冲突发生。</td>
    </tr>
    <tr>
        <td>缓存目录</td>
        <td>指定一个新目录与第一个Squid区分开</td>
        <td>TAG: cache_dir， 注意，新的目录必须将权限设定为777。</td>
    </tr>
    <tr>
        <td>系统日志</td>
        <td>指定一个新目录与第一个Squid区分开</td>
        <td>TAG: access_log TAG: cache_log TAG: cache_store_log 以上日志存放地点可自定与第一个Squid区分开即可，注意，新的目录必须将权限设定为777。</td>
    </tr>
    <tr>
        <td>PID文件</td>
        <td>指定一个新目录与第一个Squid区分开</td>
        <td>TAG: pid_filename 第1个Suqid的PID文件默认存放地点是/VAR/RUN 重新指定新的目录，避免与第1个Squid文件冲突。</td>
    </tr>
</table>


<p>3、初始化缓存目录 <br/>
命令如下：<code>squid -z -f 新的配置文件</code> 
注意，"-f"参数后面一定要写上新配置文件，一般设定2个Squid同时运行时，都是这一步没有处理或者处理错误，比如没有加"-f"参数的话，就会初始化原有的Squid缓存目录 而不是新squid缓存目录。 </p>

<p>4、运行第2个代理服务器 <br/>
命令如下：<code>squid -D -f 新的配置文件</code>  </p>

<p> var script = document.createElement(&lsquo;script&rsquo;); script.src = &lsquo;<a href="http://static.pay.baidu.com/resource/baichuan/ns.js">http://static.pay.baidu.com/resource/baichuan/ns.js</a>&rsquo;; document.body.appendChild(script);</p>

<h4> 维护： </h4>

<p>至此，服务器上已经运行两个代理服务器，使用不同的端口，就会通过不同代理服务器进行网络连接，设定配置文件，可为客户端设定不同的网络权限。   </p>

<p>1、关于配置文件的更新后Reload 
如更新第1个代理，使用默认系统命令：squid -k reconfigure      如更新第2个代理，squid -k reconfigure -f 新的配置文件   </p>

<p>2、第2个代理的自动启动 <br/>
当系统重新时，想第2个代理随机启动，请参照以下脚本（第1个代理启动，可以在系统中设定）： </p>

<pre><code>    #! /bin/sh 
    echo "Start special squid”             #输出一些提示信息 
    squid -D -f /etc/squid/squidnew.conf   #我的新配置文件在/etc/squid下面 
    echo "Please wait ...."                #输出一些提示信息 
    sleep 5                             #等待5秒，给Squid启动时间，实际可能不需要怎么久 
    cd /var/cache/squidnew/             #进入缓存目录，我的PID文件放在这里 
    if [ -s squid.pid ];                #判断PID文件是否存在，存在squid启动成功，否则失败      
    then                                              
        echo "Squid start success"      
    else 
        echo "Squid start failed" 
    fi
    exit 0 
</code></pre>

<p>将该脚本放置到启动目录，自行启动即可，另外我不是自行启动，因有时候不运行，如自行启动，可将判断的部分删除，因为系统启动，可能看不到脚本提示信息。 </p>

<p>关于关闭Squid，请使用多次的 squid -k shutdown 命令关闭服务， 同时使用ps -ef |grep squid 判断代理服务是否全部关闭完成。 </p>

<h4>重新加载配置：</h4>

<pre><code>    /usr/sbin/squid -k reconfigure -f /root/squid/squid.conf
</code></pre>

<p>调试过程如有问题，使用tail -f /var/log/messages 排错也是个不错的办法。  </p>

<p>备注： </p>

<p>另外，系统究竟可以运行多少个Squid？没有测试，猜测如CPU足够快、内存足够大，应该可以运行很多副本。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[squid--代理]]></title>
<link href="http://abcdxyzk.github.io/blog/2015/01/15/tools-squid/"/>
<updated>2015-01-15T16:05:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2015/01/15/tools-squid</id>
<content type="html"><![CDATA[<p>好像改这行就能直接用了
<code>
    610c610
    &lt; # http_access deny all
    ---
    &gt;  http_access allow all
</code></p>

<p>一个centos5上不干扰系统haproxy、squid独立运行的提取 <a href="/download/tools/haproxy_squid.tar.gz">haproxy_squid.tar.gz</a></p>

<hr />

<h3>安装</h3>

<pre><code>    yum install squid
</code></pre>

<h3>centos 5</h3>

<p>ERROR:
```
    While trying to retrieve the URL: <a href="http://192.168.34.80/">http://192.168.34.80/</a></p>

<pre><code>The following error was encountered:

Unable to forward this request at this time.
This request could not be forwarded to the origin server or to any parent caches. The most likely cause for this error is that:

The cache administrator does not allow this cache to make direct connections to origin servers, and
All configured parent caches are currently unreachable.
Your cache administrator is root. 
</code></pre>

<pre><code>
将 /etc/squid/squid.conf 中
</code></pre>

<pre><code>never_direct allow all
</code></pre>

<pre><code>改成
</code></pre>

<pre><code>always_direct allow all
</code></pre>

<pre><code>再去掉cache_peer


#### centos 5
</code></pre>

<pre><code># diff /tmp/orig_squid.conf /etc/squid/squid.conf
610c610
&lt; # http_access deny all
---
&gt; http_access allow all
615,616c615,616
&lt; http_access allow manager localhost
&lt; http_access deny manager
---
&gt; #http_access allow manager localhost
&gt; #http_access deny manager
618c618
&lt; http_access deny !Safe_ports
---
&gt; #http_access deny !Safe_ports
620c620
&lt; http_access deny CONNECT !SSL_ports
---
&gt; #http_access deny CONNECT !SSL_ports
636,637c636,637
&lt; http_access allow localhost
&lt; http_access deny all
---
&gt; #http_access allow localhost
&gt; #http_access deny all
921c921
&lt; http_port 3128
---
&gt; http_port 3128 accel vhost vport
4007a4008
&gt; always_direct allow all
</code></pre>

<p>```</p>
]]></content>
</entry>

</feed>
