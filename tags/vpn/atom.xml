<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: vpn | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/vpn/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2024-05-16T17:25:48+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Ubuntu+SS]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-ss-run/"/>
<updated>2021-06-06T22:17:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/06/06/tools-ss-run</id>
<content type="html"><![CDATA[<h4>Shadows启动报错undefined symbol EVP_CIPHER_CTX_cleanup</h4>

<p>vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</p>

<p>cleanup替换为reset</p>

<h4>测试socks5命令：</h4>

<p>curl &ndash;socks5 192.168.8.107:8388 <a href="http://www.baidu.com/">http://www.baidu.com/</a></p>

<hr />

<p><a href="https://www.codetd.com/article/1418936">https://www.codetd.com/article/1418936</a></p>

<h4>1 安装</h4>

<pre><code>    sudo apt-get install python-pip
    pip install shadowsocks
</code></pre>

<h4>2 配置</h4>

<p>vim config.json
<code>
    {
        "server":"0.0.0.0",
        "port_password": {
            "8388": "your_password1",
            "8389": "your_password2"
        },
        "timeout":600,
        "method":"aes-256-cfb",
        "fast_open": false
    }
</code></p>

<h4>3. 启动</h4>

<pre><code>    ssserver -c config.json start

    ssserver -c config.json -d start
    ssserver -c config.json -d stop
</code></pre>

<h4>4. server</h4>

<p>vim /etc/systemd/system/shadowsocks.service</p>

<pre><code>    [Unit]
    Description=Shadowsocks
    After=network.target

    [Service]
    Type=forking
    PIDFile=/run/shadowsocks/server.pid
    PermissionsStartOnly=true
    ExecStartPre=/bin/mkdir -p /run/shadowsocks
    ExecStartPre=/bin/chown root:root /run/shadowsocks
    ExecStart=/usr/local/bin/ssserver --pid-file /var/run/shadowsocks/server.pid -c /etc/shadowsocks/config.json -d start
    Restart=on-abort
    User=root
    Group=root
    UMask=0027

    [Install]
    WantedBy=multi-user.target
</code></pre>

<p>设置文件权限：
<code>
    chmod 755 /etc/systemd/system/shadowsocks.service
</code></p>

<p>启动服务：
<code>
    systemctl start shadowsocks
    systemctl enable shadowsocks
</code></p>

<h4>5. 客户端</h4>

<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/releases">https://github.com/shadowsocks/shadowsocks-qt5/releases</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[ShadowSocks原理]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-ss/"/>
<updated>2021-06-06T22:12:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/06/06/tools-ss</id>
<content type="html"><![CDATA[<p><a href="https://my.oschina.net/moziBlog/blog/3190520">https://my.oschina.net/moziBlog/blog/3190520</a></p>

<h4>ssh tunnel</h4>

<p>1、首先用户和服务器基于 ssh 建立起一条加密的通道</p>

<p>2、用户通过建立起的隧道进行代理，通过 ssh server 向真实的服务发起请求</p>

<p>3、服务通过 ssh server，再通过创建好的隧道返回给用户</p>

<p>ssh 本身就是基于RSA 加密技术，无法获取数据传输的过程中的加密数据内容。但由于ssh本身的特征是明显的，所以通过分析连接的特征能得出是ss。</p>

<h4>shadowsocks</h4>

<p>shadowsocks将原来ssh创建的 Socks5协议拆开成 server 端和 client 端</p>

<p>1、客户端发出的请求基于Socks5协议跟 ss-local 端进行通讯，返个 ss-local 一般是本机或是代理服务器</p>

<p>2、ss-local 和 ss-server两端通过多种可选的加密方法进行通讯，用常规的 TCP包。</p>

<p>3、ss-server 将收到的加密数据进行解密，还原原来的请求，再发送到用户需要访问的服务，获得响应原路返回</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[SOCKS5 协议]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/06/06/tools-socks/"/>
<updated>2021-06-06T21:44:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/06/06/tools-socks</id>
<content type="html"><![CDATA[<p><a href="http://www.moye.me/2017/08/03/analyze-socks5-protocol/">http://www.moye.me/2017/08/03/analyze-socks5-protocol/</a></p>

<p>SOCKS5 协议并不负责代理服务器的数据传输环节，此协议只是在C/S两端真实交互之间，建立起一条从客户端到代理服务器的授信连接。来看看细节：</p>

<h3>协议流程</h3>

<p>从流程上来说，SOCKS5  是一个C/S 交互的协议，交互大概分为这么几步：</p>

<pre><code>    客户端发送认证协商
    代理服务器就认证协商进行回复（如拒绝则本次会话结束）
        如需GSSAPI或用户名/密码认证，客户端发送认证信息
        代理服务器就对应项进行鉴权，并进行回复或拒绝
    客户端发送希望连接的目标信息
    代理服务器就连接信息进行确认或拒绝
    【非协议内容】：代理服务器连接目标并 pipe 到客户端
</code></pre>

<h3>协议细节</h3>

<h4>1. 认证</h4>

<p>认证方法：
<code>
    0x00: NO AUTHENTICATION REQUIRED
    0x01: GSSAPI
    0x02: USERNAME/PASSWORD
    0x03: to X’7F’ IANA ASSIGNED
    0x80: to X’FE’ RESERVED FOR PRIVATE METHODS
    0xFF: NO ACCEPTABLE METHODS
</code></p>

<h4>1.1 客户端 -> 代理服务器，请求认证：</h4>

<table>
<tr><th>版本号(1字节)</th><th>可供选认证方法(1字节)</th><th>选择的方法(1~255字节)</th></tr>
<tr><td>固定为5</td><td>选了多少种</td><td>都有上表中哪些方法</td></tr>
</table>


<h4>1.2 代理服务器  -> 客户端，响应认证：</h4>

<table>
<tr><th>版本号(1字节)</th><th>确认认证的方法</th></tr>
<tr><td>固定为5</td><td>认证方法列表的某项：<br>
0x00，则无需客户端发送进一步认证的信息<br>
0x01，则需要客户端进行进一步认证，细节见 RFC1929<br>
0x01，则需要客户端进行进一步认证，细节见RFC2743<br>
0xFF，则相当于拒绝请求，客户端只能关闭连接<br>
</td></tr>
</table>


<h4>2. 请求信息</h4>

<h4>2.1 客户端 -> 代理服务器，发送目标信息：</h4>

<table>
<tr><th>版本号(1字节)</th><th>命令(1字节)</th><th>保留(1字节)</th><th>请求类型(1字节)</th><th>地址(不定长)</th><th>端口(2字节)</th></tr>
<tr><td>固定为5</td><td>0x01: CONNECT<br>
0x02: BIND<br>
0x03: UDP ASSOCIATE</td>
<td>固定为 0x00</td><td>0x01: IP V4 地址<br>
0x03: 域名<br>
0x04: IP V6 地址<br></td>
<td>如果请求类型是域名，<br>
第个1字节为
域名的长度</td><td></td></tr>
</table>


<p></p>

<p>命令字段说明：
<code>
    CONNECT:  用于客户端请求服务器进行代理
    BIND:  用于客户端向服务器上报自己的反向连接监听地址（应用场景如 FTP 下载，客户端需要接受来自服务器的连接
    UDP ASSOCIATE：用于请求建立到 UDP 数据报中继的连接
</code></p>

<h4>2.2 代理服务器 -> 客户端，确认连接：</h4>

<table>
<tr><th>版本号(1字节)</th><th>确认回应(1字节)</th><th>保留(1字节)</th><th>响应类型(1字节)</th><th>地址(不定长)</th><th>端口(2字节)</th></tr>
<tr><td>固定为5</td><td>0x00: succeeded<br>
0x01: general SOCKS server failure<br>
0x02: connection not allowed by ruleset<br>
0x03: Network unreachable<br>
0x04: Host unreachable<br>
0x05: Connection refused<br>
0x06: TTL expired<br>
0x07: Command not supported<br>
0x08: Address type not supported<br>
0x09: to X’FF’ unassigned</td>
<td>固定为 0x00</td>
<td>仅用于响应客<br>
户端BIND命令：<br>
0x01: IP V4 地址<br>
0x03: 域名<br>
0x04: IP V6 地址</td>
<td>仅用于响应客<br>
户端BIND命令：<br>
如果请求<br>
类型是域名，<br>
第个1字节为<br>
域名的长度<br>
</td>
<td>仅用于响应客<br>
户端BIND命令</td></tr>
</table>


<p>可以看出，在代理服务器确认回应为 0x00 时，此次 SOCKS5 协议协商部分顺利完成，宣告进入到数据传输阶段（也可以说，这之后发生的事已经与SOCKS5协议无关）。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Ubuntu 搭建OpenVPN服务器以及客户端的使用]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/05/31/base-openvpn/"/>
<updated>2021-05-31T17:14:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/05/31/base-openvpn</id>
<content type="html"><![CDATA[<p><a href="/download/tools/openvpn-2.4.11-1.el7.x86_64.rpm">openvpn-2.4.11-1.el7.x86_64.rpm</a></p>

<p><a href="/download/tools/pkcs11-helper-1.11-3.el7.x86_64.rpm">pkcs11-helper-1.11-3.el7.x86_64.rpm</a></p>

<p><a href="/download/tools/etc.openvpn.tar">配置样例etc.openvpn.tar</a></p>

<hr />

<p><a href="http://www.manongjc.com/detail/6-eqkmpihxsfrrauu.html">http://www.manongjc.com/detail/6-eqkmpihxsfrrauu.html</a></p>

<p><a href="http://blog.sina.com.cn/s/blog_54bf1380010007uz.html">http://blog.sina.com.cn/s/blog_54bf1380010007uz.html</a></p>

<p><a href="https://my.oschina.net/randolphcyg/blog/4920516">https://my.oschina.net/randolphcyg/blog/4920516</a></p>

<h3>搭建过程：</h3>

<h4>1、安装前准备</h4>

<pre><code>    # 安装openssl和lzo，lzo用于压缩通讯数据加快传输速度
    sudo apt-get install openssl libssl-dev
    sudo apt-get install lzop
</code></pre>

<h3>2、安装及配置OpenVPN和easy-rsa</h3>

<pre><code>    # 安装openvpn和easy-rsa
    sudo apt-get install openvpn
    sudo apt-get install easy-rsa
</code></pre>

<pre><code>    # 修改vars文件
    sudo su
    cd /usr/share/easy-rsa/
    vim vars
</code></pre>

<pre><code>    # 修改注册信息，比如公司地址、公司名称、部门名称等。
    export KEY_COUNTRY="CN"
    export KEY_PROVINCE="Shandong"
    export KEY_CITY="Qingdao"
    export KEY_ORG="MyOrganization"
    export KEY_EMAIL="me@myhost.mydomain"
    export KEY_OU="MyOrganizationalUnit"
</code></pre>

<pre><code>    # 初始化环境变量
    source vars

    # 清除keys目录下所有与证书相关的文件
    # 下面步骤生成的证书和密钥都在/usr/share/easy-rsa/keys目录里
    ./clean-all

    # 生成根证书ca.crt和根密钥ca.key（一路按回车即可）
    ./build-ca

    # 为服务端生成证书和私钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）
    ./build-key-server server

    # 每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接，下面建立2份
    # 为客户端生成证书和私钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）
    ./build-key client1
    ./build-key client2

    # 创建迪菲·赫尔曼密钥，会生成dh2048.pem文件（生成过程比较慢，在此期间不要去中断它）
    ./build-dh

    # 生成ta.key文件（防DDos攻击、UDP淹没等恶意攻击）
    openvpn --genkey --secret keys/ta.key
</code></pre>

<h4>3、创建服务器端配置文件</h4>

<pre><code>    # 在openvpn的配置目录下新建一个keys目录
    mkdir /etc/openvpn/keys

    # 将需要用到的openvpn证书和密钥复制一份到刚创建好的keys目录中
    cp /usr/share/easy-rsa/keys/{ca.crt,server.{crt,key},dh2048.pem,ta.key} /etc/openvpn/keys/

    # 复制一份服务器端配置文件模板server.conf到/etc/openvpn/
    gzip -d /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz
    cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/

    # 查看server.conf里的配置参数
    grep '^[^#;]' /etc/openvpn/server.conf

    # 编辑server.conf
    vim /etc/openvpn/server.conf
</code></pre>

<pre><code>    port 1194
    # 改成tcp，默认使用udp，如果使用HTTP Proxy，必须使用tcp协议
    proto tcp
    dev tun # 路由模式，桥接模式用dev tap
    # 路径前面加keys，全路径为/etc/openvpn/keys/ca.crt
    ca keys/ca.crt
    cert keys/server.crt
    key keys/server.key  # This file should be kept secret
    dh keys/dh2048.pem
    # 默认虚拟局域网网段，不要和实际的局域网冲突即可。和gre类似，配置在tun0上的ip段
    server 10.8.0.0 255.255.255.0 # 路由模式，桥接模式用server-bridge
    ifconfig-pool-persist ipp.txt
    # 10.0.0.0/8是我这台VPN服务器所在的内网的网段，读者应该根据自身实际情况进行修改
    push "route 10.0.0.0 255.0.0.0"
    # 可以让客户端之间相互访问直接通过openvpn程序转发，根据需要设置
    client-to-client
    # 如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN
    duplicate-cn
    keepalive 10 120
    tls-auth keys/ta.key 0 # This file is secret
    comp-lzo
    persist-key
    persist-tun
    # OpenVPN的状态日志，默认为/etc/openvpn/openvpn-status.log
    status openvpn-status.log
    # OpenVPN的运行日志，默认为/etc/openvpn/openvpn.log
    log-append openvpn.log
    # 改成verb 5可以多查看一些调试信息
    verb 5
</code></pre>

<h4>4、配置内核和防火墙，启动服务</h4>

<pre><code>    # 开启路由转发功能
    echo 1 &gt; /proc/sys/net/ipv4/ip_forward
    或
    sed -i '/net.ipv4.ip_forward/s/0/1/' /etc/sysctl.conf
    sed -i '/net.ipv4.ip_forward/s/#//' /etc/sysctl.conf
    sysctl -p

    # 配置防火墙，别忘记保存
    iptables -I INPUT -p tcp --dport 1194 -m comment --comment "openvpn" -j ACCEPT

    # 客户端过来的包以NAT方式访问外网
    iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE

    mkdir /etc/iptables
    iptables-save &gt; /etc/iptables/iptables.conf

    # 关闭ufw防火墙，改成iptables，这一步按需要设置，比较ufw在Ubuntu默认关闭的。iptables和ufw任选一个即可。
    ufw disable

    # 启动openvpn并设置为开机启动
    openvpn server.conf
    或
    systemctl start openvpn@server
    systemctl enable openvpn@server
    # 在systemd单元文件的后面，我们通过指定特定的配置文件名来作为一个实例变量来开启OpenVPN服务，我们的配置文件名称为/etc/openvpn/server.conf，所以我们在systemd单元文件的后面添加@server来开启OpenVPN服务
</code></pre>

<h4>5、创建客户端配置文件client.ovpn（用于客户端软件使用）</h4>

<pre><code>    # 复制一份client.conf模板命名为client.ovpn
    cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client.ovpn

    # 编辑client.ovpn
    vim /etc/openvpn/client.ovpn

    client
    dev tun # 路由模式
    # 改为tcp
    proto tcp
    # OpenVPN服务器的外网IP和端口
    remote 203.195.1.2 1194
    resolv-retry infinite
    nobind
    persist-key
    persist-tun
    ca ca.crt
    # client1的证书
    cert client1.crt
    # client1的密钥
    key client1.key
    ns-cert-type server
    # 去掉前面的注释
    tls-auth ta.key 1
    comp-lzo
    verb 5
</code></pre>

<h4>6、配置client</h4>

<pre><code>    安装软件，可以和服务器安装的保持一致：

    # 安装openssl和lzo，lzo用于压缩通讯数据加快传输速度
    sudo apt-get install openssl libssl-dev
    sudo apt-get install lzop

    # 安装openvpn和easy-rsa
    sudo apt-get install openvpn
    sudo apt-get install easy-rsa
</code></pre>

<p>在服务器上下载回需要的文件</p>

<pre><code>    scp /etc/openvpn/client.ovpn /etc/openvpn/keys/ca.crt /etc/openvpn/keys/client1.crt /etc/openvpn/keys/client1.key /etc/openvpn/keys/ta.key root@client:/etc/openvpn/keys
</code></pre>

<p>将OpenVPN服务器上的client.ovpn、ca.crt、client1.crt、client1.key、ta.key上传到Linux客户端安装目录下的/etc/openvpn文件夹</p>

<pre><code>    [root@linux64 openvpn]# pwd
    /etc/openvpn
    [root@linux64 openvpn]# ls
    ca.crt client1.crt client1.key client.ovpn conf ta.key
</code></pre>

<p>启动客户端
<code>
    openvpn --daemon --cd /etc/openvpn --config client.ovpn --log-append /var/log/openvpn.log &amp;
</code></p>

<p>增加需要走vpn的net
<code>
    route add -net 180.101.49.0/24 gw 10.8.0.5
</code></p>

<p>上面是以守护进程启动的，可以把上面脚本放在/etc/rc.local实现开机启动。或者使用以服务的形式启动，如果想清晰明了，建议放在启动脚本。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[vpn CONNECT方法]]></title>
<link href="http://abcdxyzk.github.io/blog/2021/04/26/kernel-vpn-CONNECT/"/>
<updated>2021-04-26T20:46:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2021/04/26/kernel-vpn-CONNECT</id>
<content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/xyl1932432873/p/7735866.html">https://www.cnblogs.com/xyl1932432873/p/7735866.html</a></p>

<p>CONNECT这个方法的作用就是把服务器作为跳板，让服务器代替用户去访问其它网页，之后把数据原原本本的返回给用户。这样用户就可以访问到一些只有服务器上才能访问到的网站了，这就是HTTP代理。</p>

<p>假如我想通过代理访问这个博客（www.web-tinker.com），我就需要建立一个TCP连接，连接到服务器监听的那个端口，然后给服务器发送一个HTTP头。下面就是这个HTTP头的内容：
<code>
    CONNECT www.web-tinker.com:80 HTTP/1.1
    Host: www.web-tinker.com:80
    Proxy-Connection: Keep-Alive
    Proxy-Authorization: Basic *
    Content-Length: 0
</code>
所有的HTTP头都是类似的，第一行是方法名、主要参数、HTTP版本。接着一行一个参数，最后用两个换行来结束。这个地方应该填写验证的用户名和密码。</p>

<p>发送完这个请求之后，就是服务器端响应请求了。如果用户名和密码验证通过，就会返回一个状态码为200的响应信息。虽然状态码是200，但是这个状态描述不是OK，而是Connection Established。
<code>
    HTTP/1.1 200 Connection Established
</code></p>

<p>如果用户名和密码验证不通过。会返回一个407的状态码，状态表述是Unauthorized。表示没有权限访问代理服务器。
<code>
    HTTP/1.1 407 Unauthorized
</code></p>

<p>验证通过之后，我们就可以做普通的HTTP操作了。完全可以把现在的代理服务器看作是请求连接的Internet服务器，也就是说可以像直接访问普通的服务器一样，使用GET、POST等方法来请求Internet服务器上的页面了。我们在发送CONNECT请求的时候就已经告诉了服务器我们需要访问的Internet服务器，上面我用了这个博客的网址。现在我们要访问这个博客的主页就可以发送一个简单的GET请求。
<code>
    GET / HTTP/1.1
    Host: www.web-tinker.com
    Content-Length: 0
</code></p>
]]></content>
</entry>

</feed>
